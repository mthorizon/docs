{"documentCount":636,"nextId":636,"documentIds":{"0":"docs/pages/support.mdx#support","1":"docs/pages/api/metadata.mdx#metadata-api","2":"docs/pages/api/metadata.mdx#obtaining-a-service-account--token","3":"docs/pages/api/metadata.mdx#creating-collections-tokens-and-managing-metadata","4":"docs/pages/api/metadata.mdx#pricing--usage","5":"docs/pages/api/node-gateway.mdx#node-gateway","6":"docs/pages/api/node-gateway.mdx#give-it-a-try","7":"docs/pages/solutions/monetization-overview.mdx#monetization-overview","8":"docs/pages/solutions/monetization-overview.mdx#sequence-marketplaces","9":"docs/pages/solutions/monetization-overview.mdx#getting-started","10":"docs/pages/solutions/monetization-overview.mdx#sequence-pay","11":"docs/pages/support/restricted-regions.mdx#sequence-list-of-restricted-regions","12":"docs/pages/support/restricted-regions.mdx#sequence-cannot-be-accessed-from-the-following-regions","13":"docs/pages/api/analytics/overview.mdx#analytics","14":"docs/pages/api/analytics/overview.mdx#supported-networks--endpoints","15":"docs/pages/api/analytics/overview.mdx#getting-started","16":"docs/pages/api/analytics/overview.mdx#obtaining-a-service-account--token","17":"docs/pages/api/analytics/overview.mdx#send-a-request","18":"docs/pages/api/analytics/overview.mdx#more-examples","19":"docs/pages/api/indexer/installation.mdx#indexer-installation","20":"docs/pages/api/indexer/installation.mdx#installation","21":"docs/pages/api/indexer/installation.mdx#web--nodejs-installation","22":"docs/pages/api/indexer/installation.mdx#go-installation","23":"docs/pages/api/indexer/installation.mdx#unity-or-unreal-installation","24":"docs/pages/api/indexer/metadata-tips.mdx#metadata-tips--notes-on-spam","25":"docs/pages/api/indexer/overview.mdx#indexer","26":"docs/pages/api/indexer/overview.mdx#supported-networks--endpoints","27":"docs/pages/api/indexer/overview.mdx#getting-started","28":"docs/pages/api/marketplace/overview.mdx#marketplace-api","29":"docs/pages/api/metadata/contract-metadata.mdx#contract-metadata","30":"docs/pages/api/metadata/contract-metadata.mdx#fetch-contract-metadata-of-any-erc20-erc721-or-erc1155-contract-address","31":"docs/pages/api/metadata/contract-metadata.mdx#contract-level-metadata-standards","32":"docs/pages/api/metadata/overview.mdx#metadata","33":"docs/pages/api/metadata/overview.mdx#web--nodejs-installation","34":"docs/pages/api/metadata/overview.mdx#go-installation","35":"docs/pages/api/metadata/overview.mdx#unity-or-unreal-installation","36":"docs/pages/api/metadata/rest-api.mdx#metadata-rest-api-reference--usage","37":"docs/pages/api/metadata/rest-api.mdx#example","38":"docs/pages/api/metadata/rest-api.mdx#usage","39":"docs/pages/api/metadata/rest-api.mdx#rest-endpoints","40":"docs/pages/api/metadata/rest-api.mdx#rpc-client","41":"docs/pages/api/metadata/rest-api.mdx#metadata-rpc-methods","42":"docs/pages/api/metadata/token-metadata.mdx#token-metadata","43":"docs/pages/api/metadata/token-metadata.mdx#fetch-token-metadata-for-any-erc721-or-erc1155-contract","44":"docs/pages/api/metadata/token-metadata.mdx#refreshing-token-metadata","45":"docs/pages/api/metadata/token-metadata.mdx#testing-instructions","46":"docs/pages/api/metadata/token-metadata.mdx#token-metadata-standards","47":"docs/pages/api/metadata/token-metadata.mdx#metadata-standards","48":"docs/pages/api/metadata/token-metadata.mdx#erc721","49":"docs/pages/api/metadata/token-metadata.mdx#erc1155","50":"docs/pages/api/metadata/token-metadata.mdx#attributes-vs-properties","51":"docs/pages/api/metadata/token-metadata.mdx#erc20","52":"docs/pages/api/transactions/installation.mdx#installation","53":"docs/pages/api/transactions/installation.mdx#web--nodejs-installation","54":"docs/pages/api/transactions/installation.mdx#go-installation","55":"docs/pages/api/transactions/overview.mdx#transactions-api","56":"docs/pages/api/transactions/overview.mdx#benefits","57":"docs/pages/api/transactions/overview.mdx#anatomy-of-a-sequence-transaction-bundle","58":"docs/pages/api/transactions/overview.mdx#gas-sponsorship-and-fees","59":"docs/pages/guides/templates/template-embedded-wallet.mdx#quickstart","60":"docs/pages/guides/templates/template-embedded-wallet.mdx#try-a-demo","61":"docs/pages/guides/templates/template-embedded-wallet.mdx#template","62":"docs/pages/guides/templates/template-embedded-wallet.mdx#getting-started","63":"docs/pages/guides/templates/template-embedded-wallet.mdx#sdk-installation","64":"docs/pages/guides/templates/template-embedded-wallet.mdx#project-setup","65":"docs/pages/guides/templates/template-embedded-wallet.mdx#library-setup","66":"docs/pages/sdk/go/overview.mdx#go","67":"docs/pages/sdk/go/overview.mdx#ethkit","68":"docs/pages/sdk/unity/connecting-external-wallets.mdx#connecting-external-wallets","69":"docs/pages/sdk/unity/deploy-contracts.mdx#contract-deployment","70":"docs/pages/sdk/unity/installation.mdx#installation","71":"docs/pages/sdk/unity/installation.mdx#package-manager---recommended","72":"docs/pages/sdk/unity/installation.mdx#openupm","73":"docs/pages/sdk/unity/installation.mdx#or-using-package-manager-ui","74":"docs/pages/sdk/unity/installation.mdx#setup","75":"docs/pages/sdk/unity/installation.mdx#samples","76":"docs/pages/sdk/unity/installation.mdx#manual","77":"docs/pages/sdk/unity/onboard-user-funds.mdx#onboard-user-funds","78":"docs/pages/sdk/unity/onboard-user-funds.mdx#on-ramp-user-funds-via-credit-card","79":"docs/pages/sdk/unity/onboard-user-funds.mdx#check-supported-countries","80":"docs/pages/sdk/unity/overview.mdx#introduction","81":"docs/pages/sdk/unity/overview.mdx#requirements","82":"docs/pages/sdk/unity/read-from-blockchain.mdx#read-from-blockchain","83":"docs/pages/sdk/unity/read-from-blockchain.mdx#get-balance","84":"docs/pages/sdk/unity/read-from-blockchain.mdx#get-token-balances","85":"docs/pages/sdk/unity/read-from-blockchain.mdx#get-token-supplies","86":"docs/pages/sdk/unity/read-from-blockchain.mdx#get-token-supplies-map","87":"docs/pages/sdk/unity/read-from-blockchain.mdx#get-transaction-history","88":"docs/pages/sdk/unity/recovering-sessions.mdx#recovering-sessions","89":"docs/pages/sdk/unity/recovering-sessions.mdx#ios","90":"docs/pages/sdk/unity/recovering-sessions.mdx#macos","91":"docs/pages/sdk/unity/recovering-sessions.mdx#windows","92":"docs/pages/sdk/unity/recovering-sessions.mdx#web","93":"docs/pages/sdk/unity/setup.mdx#setup","94":"docs/pages/sdk/unity/sign-messages.mdx#sign-messages","95":"docs/pages/sdk/unity/v2-to-v3-upgrade-guide.mdx#upgrading-from-v2-to-v3","96":"docs/pages/sdk/unity/v2-to-v3-upgrade-guide.mdx#installation","97":"docs/pages/sdk/unity/v2-to-v3-upgrade-guide.mdx#resolving-compile-errors","98":"docs/pages/sdk/unity/wallet-ui.mdx#wallet-ui","99":"docs/pages/sdk/unity/wallet-ui.mdx#how-it-works","100":"docs/pages/sdk/unity/wallet-ui.mdx#uipage","101":"docs/pages/sdk/unity/wallet-ui.mdx#itween","102":"docs/pages/sdk/unity/wallet-ui.mdx#uipanel","103":"docs/pages/sdk/unity/wallet-ui.mdx#sequencesampleui","104":"docs/pages/sdk/unity/wallet-ui.mdx#ui-customizability","105":"docs/pages/sdk/unity/wallet-ui.mdx#color-scheme-manager","106":"docs/pages/sdk/unity/wallet-ui.mdx#more-customization-tools-coming-soon","107":"docs/pages/sdk/unity/write-to-blockchain.mdx#write-to-blockchain","108":"docs/pages/sdk/unity/write-to-blockchain.mdx#rawtransaction","109":"docs/pages/sdk/unity/write-to-blockchain.mdx#senderc20","110":"docs/pages/sdk/unity/write-to-blockchain.mdx#complex-erc20-interactions","111":"docs/pages/sdk/unity/write-to-blockchain.mdx#senderc721","112":"docs/pages/sdk/unity/write-to-blockchain.mdx#complex-erc721-interactions","113":"docs/pages/sdk/unity/write-to-blockchain.mdx#senderc1155","114":"docs/pages/sdk/unity/write-to-blockchain.mdx#complex-erc1155-interactions","115":"docs/pages/sdk/unity/write-to-blockchain.mdx#delayedencode","116":"docs/pages/sdk/unity/write-to-blockchain.mdx#batch-transactions","117":"docs/pages/sdk/unity/write-to-blockchain.mdx#feeoptions","118":"docs/pages/sdk/unreal/advanced.mdx#advanced-blockchain-interactions","119":"docs/pages/sdk/unreal/advanced.mdx#binary-data","120":"docs/pages/sdk/unreal/advanced.mdx#the-abi","121":"docs/pages/sdk/unreal/advanced.mdx#cryptographic-functions","122":"docs/pages/sdk/unreal/advanced.mdx#raw-ethereum-transactions","123":"docs/pages/sdk/unreal/api.mdx#sequence-wallet","124":"docs/pages/sdk/unreal/api.mdx#usequencewallet-static-access--persistence","125":"docs/pages/sdk/unreal/authentication.mdx#authentication","126":"docs/pages/sdk/unreal/authentication.mdx#built-in-ui","127":"docs/pages/sdk/unreal/authentication.mdx#before-starting","128":"docs/pages/sdk/unreal/authentication.mdx#customizing-the-built-in-ui","129":"docs/pages/sdk/unreal/authentication.mdx#custom-ui","130":"docs/pages/sdk/unreal/authentication.mdx#email-based-authentication-with-customui","131":"docs/pages/sdk/unreal/authentication.mdx#social-signin-based-authentication-on-desktop-with-customui","132":"docs/pages/sdk/unreal/authentication.mdx#social-signin-based-authentication-on-mobile-with-customui","133":"docs/pages/sdk/unreal/authentication.mdx#android-sso-requirements","134":"docs/pages/sdk/unreal/authentication.mdx#ios-sso-requirements","135":"docs/pages/sdk/unreal/installation.mdx#installation","136":"docs/pages/sdk/unreal/installation.mdx#using-github","137":"docs/pages/sdk/unreal/installation.mdx#using-epic-games-marketplace","138":"docs/pages/sdk/unreal/installation.mdx#adding-privatedependencymodule","139":"docs/pages/sdk/unreal/installation.mdx#yourprojectbuildcs","140":"docs/pages/sdk/unreal/managing-session.mdx#managing-session","141":"docs/pages/sdk/unreal/managing-session.mdx#example-registersession","142":"docs/pages/sdk/unreal/managing-session.mdx#example-listsessions","143":"docs/pages/sdk/unreal/managing-session.mdx#example-closesession","144":"docs/pages/sdk/unreal/managing-session.mdx#example-getwalletaddress","145":"docs/pages/sdk/unreal/managing-session.mdx#example-getnetworkid","146":"docs/pages/sdk/unreal/managing-session.mdx#example-updatenetworkid","147":"docs/pages/sdk/unreal/managing-session.mdx#example-updateproviderurl","148":"docs/pages/sdk/unreal/managing-session.mdx#example-signout","149":"docs/pages/sdk/unreal/onboard-user-funds.mdx#onramp","150":"docs/pages/sdk/unreal/onboard-user-funds.mdx#on-ramp-user-funds-via-credit-card","151":"docs/pages/sdk/unreal/onboard-user-funds.mdx#check-supported-countries","152":"docs/pages/sdk/unreal/onboard-user-funds.mdx#using-transak-from-usequencewallet","153":"docs/pages/sdk/unreal/overview.mdx#introduction","154":"docs/pages/sdk/unreal/overview.mdx#requirements","155":"docs/pages/sdk/unreal/packaging.mdx#packaging","156":"docs/pages/sdk/unreal/packaging.mdx#ios","157":"docs/pages/sdk/unreal/packaging.mdx#android","158":"docs/pages/sdk/unreal/packaging.mdx#hardware-requirements","159":"docs/pages/sdk/unreal/packaging.mdx#unreal-and-xcode-specifics","160":"docs/pages/sdk/unreal/read-from-blockchain.mdx#read-from-blockchain","161":"docs/pages/sdk/unreal/read-from-blockchain.mdx#indexer--the-wallet","162":"docs/pages/sdk/unreal/read-from-blockchain.mdx#ping","163":"docs/pages/sdk/unreal/read-from-blockchain.mdx#version","164":"docs/pages/sdk/unreal/read-from-blockchain.mdx#runtimestatus","165":"docs/pages/sdk/unreal/read-from-blockchain.mdx#getchainid","166":"docs/pages/sdk/unreal/read-from-blockchain.mdx#getetherbalance","167":"docs/pages/sdk/unreal/read-from-blockchain.mdx#gettokenbalances","168":"docs/pages/sdk/unreal/read-from-blockchain.mdx#gettokensupplies","169":"docs/pages/sdk/unreal/read-from-blockchain.mdx#gettokensuppliesmap","170":"docs/pages/sdk/unreal/read-from-blockchain.mdx#getbalanceupdates","171":"docs/pages/sdk/unreal/read-from-blockchain.mdx#gettransactionhistory","172":"docs/pages/sdk/unreal/setup.mdx#setup","173":"docs/pages/sdk/unreal/setup.mdx#configini","174":"docs/pages/sdk/unreal/setup.mdx#configuration-key-management","175":"docs/pages/sdk/unreal/setup.mdx#security","176":"docs/pages/sdk/unreal/upgrading.mdx#upgrading","177":"docs/pages/sdk/unreal/upgrading.mdx#manually-upgrading-from-previous-versions","178":"docs/pages/sdk/unreal/upgrading.mdx#upgrading-to-unreal-54","179":"docs/pages/sdk/unreal/write-to-blockchain.mdx#write-to-blockchain","180":"docs/pages/sdk/unreal/write-to-blockchain.mdx#example-signmessage","181":"docs/pages/sdk/unreal/write-to-blockchain.mdx#example-sendtransaction","182":"docs/pages/sdk/unreal/write-to-blockchain.mdx#erc20-transaction","183":"docs/pages/sdk/unreal/write-to-blockchain.mdx#erc721-transaction","184":"docs/pages/sdk/unreal/write-to-blockchain.mdx#erc1155-transaction","185":"docs/pages/sdk/unreal/write-to-blockchain.mdx#raw-transaction-example-contract-call","186":"docs/pages/sdk/unreal/write-to-blockchain.mdx#sending-the-transaction","187":"docs/pages/sdk/unreal/write-to-blockchain.mdx#send-transaction-with-fee-options","188":"docs/pages/solutions/builder/analytics.mdx#analytics","189":"docs/pages/solutions/builder/analytics.mdx#how-it-works","190":"docs/pages/solutions/builder/analytics.mdx#overview","191":"docs/pages/solutions/builder/analytics.mdx#wallets-connected","192":"docs/pages/solutions/builder/analytics.mdx#marketplace-transactions","193":"docs/pages/solutions/builder/analytics.mdx#transaction-requests","194":"docs/pages/solutions/builder/collections.mdx#collections","195":"docs/pages/solutions/builder/collections.mdx#1-create-a-collection","196":"docs/pages/solutions/builder/collections.mdx#2-link-a-contract","197":"docs/pages/solutions/builder/collections.mdx#3-create-a-collectible","198":"docs/pages/solutions/builder/collections.mdx#add-a-metadata-property","199":"docs/pages/solutions/builder/collections.mdx#4-update-info-in-settings","200":"docs/pages/solutions/builder/collections.mdx#delete-collection-data","201":"docs/pages/solutions/builder/collections.mdx#5-reference-metadata-token-uri","202":"docs/pages/solutions/builder/gas-tank.mdx#gas-sponsorship","203":"docs/pages/solutions/builder/gas-tank.mdx#why-would-i-want-to-sponsor-gas-for-my-game","204":"docs/pages/solutions/builder/gas-tank.mdx#sponsoring-gas-with-the-gas-tank","205":"docs/pages/solutions/builder/gas-tank.mdx#how-to-sponsor-a-contract","206":"docs/pages/solutions/builder/gas-tank.mdx#create-or-select-project","207":"docs/pages/solutions/builder/gas-tank.mdx#upgrade-billing","208":"docs/pages/solutions/builder/gas-tank.mdx#select-relayer-network","209":"docs/pages/solutions/builder/gas-tank.mdx#sponsor-contract-address","210":"docs/pages/solutions/wallets/overview.mdx#onboard-with-sequence","211":"docs/pages/solutions/wallets/overview.mdx#getting-started","212":"docs/pages/api/analytics/examples/marketplace.mdx#marketplace-analytics-examples","213":"docs/pages/api/analytics/examples/marketplace.mdx#fetch-transactions-on-your-marketplace","214":"docs/pages/api/analytics/examples/marketplace.mdx#total","215":"docs/pages/api/analytics/examples/marketplace.mdx#time-interval","216":"docs/pages/api/analytics/examples/marketplace.mdx#fetch-wallets-on-your-marketplace","217":"docs/pages/api/analytics/examples/marketplace.mdx#total-1","218":"docs/pages/api/analytics/examples/marketplace.mdx#time-interval-1","219":"docs/pages/api/analytics/examples/marketplace.mdx#schema","220":"docs/pages/api/analytics/examples/wallets.mdx#wallet-analytics-examples","221":"docs/pages/api/analytics/examples/wallets.mdx#fetch-wallets-for-a-time-interval-for-a-project-id","222":"docs/pages/api/analytics/examples/wallets.mdx#fetch-wallets-by-country","223":"docs/pages/api/analytics/examples/wallets.mdx#fetch-wallets-by-device","224":"docs/pages/api/analytics/examples/wallets.mdx#fetch-transactions-by-wallets","225":"docs/pages/api/analytics/examples/wallets.mdx#total","226":"docs/pages/api/analytics/examples/wallets.mdx#time-interval","227":"docs/pages/api/analytics/examples/wallets.mdx#schema","228":"docs/pages/api/indexer/examples/fetch-tokens.mdx#tokens-api","229":"docs/pages/api/indexer/examples/fetch-tokens.mdx#fetches-list-of-erc20-erc721-and-erc1155-tokens-and-metadata-in-any-wallet","230":"docs/pages/api/indexer/examples/fetch-tokens.mdx#fetch-token-ids-balances-and-metadata-of-erc721-and-erc1155-collections","231":"docs/pages/api/indexer/examples/native-network-balance.mdx#native-network-balances-ie-eth-matic-etc","232":"docs/pages/api/indexer/examples/native-network-balance.mdx#fetch-native-network-balance-aka-eth-on-ethereum-matic-on-polygon-avax-on-avalanche-bnb-on-bsc-etc","233":"docs/pages/api/indexer/examples/subscriptions.mdx#subscriptions","234":"docs/pages/api/indexer/examples/subscriptions.mdx#subscribe-to-blockchain-events","235":"docs/pages/api/indexer/examples/subscriptions.mdx#subscribing-to-events","236":"docs/pages/api/indexer/examples/subscriptions.mdx#subscribing-to-balance-updates","237":"docs/pages/api/indexer/examples/subscriptions.mdx#subscribing-to-receipts","238":"docs/pages/api/indexer/examples/transaction-history.mdx#wallet-transaction-history","239":"docs/pages/api/indexer/examples/transaction-history.mdx#fetch-the-transaction-history-for-any-wallet-address","240":"docs/pages/api/indexer/examples/transation-history-token-contract.mdx#contract-token-history","241":"docs/pages/api/indexer/examples/transation-history-token-contract.mdx#fetch--listen-to-the-transaction-history-for-any-erc20-erc721-erc1155-contract","242":"docs/pages/api/indexer/examples/unique-tokens.mdx#tokens-in-a-contract","243":"docs/pages/api/indexer/examples/unique-tokens.mdx#fetch-all-unique-tokens-in-a-particular-erc207211155-contract-including-total-supplies","244":"docs/pages/api/marketplace/examples/get-user-activities.mdx#getuseractivities","245":"docs/pages/api/marketplace/examples/get-user-activities.mdx#example","246":"docs/pages/api/marketplace/examples/get-user-activities.mdx#schema","247":"docs/pages/api/transactions/examples/fetch-fee-options.mdx#fetching-fee-options","248":"docs/pages/api/transactions/examples/fetch-transaction-receipts.mdx#fetching-transaction-receipts","249":"docs/pages/api/transactions/examples/send-transactions.mdx#sending-transactions","250":"docs/pages/sdk/typescript/connectors/FAQ.mdx#nextjs","251":"docs/pages/sdk/typescript/connectors/FAQ.mdx#why-does-my-wallet-integration-produce-an-error-when-used-with-nextjs","252":"docs/pages/sdk/typescript/connectors/FAQ.mdx#how-do-i-use-a-wallet-library-and-connector-with-nextjs-using-the-pages-directory-all-versions-of-nextjs","253":"docs/pages/sdk/typescript/connectors/FAQ.mdx#how-do-i-use-a-wallet-library-and-connector-with-nextjs-using-the-app-directory-version-13-and-above-only","254":"docs/pages/sdk/typescript/connectors/overview.mdx#wallet-connectors","255":"docs/pages/sdk/typescript/connectors/sequence-kit.mdx#sequence-kit-seamlessly-integrate-web3-wallets-into-your-applications","256":"docs/pages/sdk/typescript/connectors/sequence-kit.mdx#key-features","257":"docs/pages/sdk/typescript/connectors/sequence-kit.mdx#next-steps","258":"docs/pages/sdk/typescript/connectors/sequence-kit.mdx#x27;re already familiar with Sequence Kit dive into the available <a href=","259":"docs/pages/sdk/typescript/connectors/sequence-kit.mdx#sequence-kit-seamlessly-integrate-web3-wallets-into-your-applications-1","260":"docs/pages/sdk/typescript/connectors/sequence-kit.mdx#key-features-1","261":"docs/pages/sdk/typescript/connectors/sequence-kit.mdx#next-steps-1","262":"docs/pages/sdk/typescript/connectors/web3-react-v6.mdx#using-web3-react-v6","263":"docs/pages/sdk/typescript/connectors/web3-react-v6.mdx#installation","264":"docs/pages/sdk/typescript/connectors/web3-react-v6.mdx#usage","265":"docs/pages/sdk/typescript/connectors/web3-react-v6.mdx#initialization","266":"docs/pages/sdk/typescript/connectors/web3-react-v6.mdx#activationdeactivation","267":"docs/pages/sdk/typescript/connectors/web3-react-v6.mdx#options","268":"docs/pages/sdk/typescript/connectors/web3-react-v6.mdx#chainid","269":"docs/pages/sdk/typescript/connectors/web3-react-v6.mdx#appname-optional","270":"docs/pages/sdk/typescript/connectors/web3-react-v6.mdx#example","271":"docs/pages/sdk/typescript/guides/auth-address.mdx#authenticate-users-with-message-signature","272":"docs/pages/sdk/typescript/guides/auth-address.mdx#ask-for-the-wallet-address","273":"docs/pages/sdk/typescript/guides/auth-address.mdx#authenticate-wallet","274":"docs/pages/sdk/typescript/guides/auth-address.mdx#authenticate-wallet-server-side","275":"docs/pages/sdk/typescript/guides/building-backends.mdx#building-backends-with-sequence","276":"docs/pages/sdk/typescript/guides/building-backends.mdx#nodejs","277":"docs/pages/sdk/typescript/guides/building-backends.mdx#go","278":"docs/pages/sdk/typescript/guides/building-backends.mdx#ethkit","279":"docs/pages/sdk/typescript/guides/building-backends.mdx#support-for-other-backend-languages","280":"docs/pages/sdk/typescript/guides/connect-wallet.mdx#connect-wallet","281":"docs/pages/sdk/typescript/guides/connect-wallet.mdx#connecting-your-dapp-with-0xsequence","282":"docs/pages/sdk/typescript/guides/connect-wallet.mdx#wallet-login-and-connect-options","283":"docs/pages/sdk/typescript/guides/connect-wallet.mdx#app","284":"docs/pages/sdk/typescript/guides/connect-wallet.mdx#appprotocol","285":"docs/pages/sdk/typescript/guides/connect-wallet.mdx#origin","286":"docs/pages/sdk/typescript/guides/connect-wallet.mdx#expiry","287":"docs/pages/sdk/typescript/guides/connect-wallet.mdx#authorize","288":"docs/pages/sdk/typescript/guides/connect-wallet.mdx#authorizenonce","289":"docs/pages/sdk/typescript/guides/connect-wallet.mdx#refresh","290":"docs/pages/sdk/typescript/guides/connect-wallet.mdx#keepwalletopened","291":"docs/pages/sdk/typescript/guides/connect-wallet.mdx#askforemail","292":"docs/pages/sdk/typescript/guides/connect-wallet.mdx#settingstheme","293":"docs/pages/sdk/typescript/guides/connect-wallet.mdx#settingsbannerurl","294":"docs/pages/sdk/typescript/guides/connect-wallet.mdx#settingssigninwith","295":"docs/pages/sdk/typescript/guides/connect-wallet.mdx#settingssigninwithemail","296":"docs/pages/sdk/typescript/guides/connect-wallet.mdx#settingssigninoptions","297":"docs/pages/sdk/typescript/guides/connect-wallet.mdx#settingsincludedpaymentproviders","298":"docs/pages/sdk/typescript/guides/connect-wallet.mdx#settingsdefaultfundingcurrency","299":"docs/pages/sdk/typescript/guides/connect-wallet.mdx#settingsdefaultpurchaseamount","300":"docs/pages/sdk/typescript/guides/connect-wallet.mdx#settingslockfundingcurrencytodefault","301":"docs/pages/sdk/typescript/guides/connect-wallet.mdx#connecting-your-dapp-with-web3js-or-ethersjs","302":"docs/pages/sdk/typescript/guides/connect-wallet.mdx#connecting-to-any-ethereum-dapp-with-the-sequence-wallet-chrome-extension","303":"docs/pages/sdk/typescript/guides/connect-wallet.mdx#connecting-via-walletconnect","304":"docs/pages/sdk/typescript/guides/overview.mdx#install","305":"docs/pages/sdk/typescript/guides/overview.mdx#cdn-distribution-as-native-js","306":"docs/pages/sdk/typescript/guides/send-batch-transactions.mdx#sending-a-batch-of-transactions","307":"docs/pages/sdk/typescript/guides/send-erc1155.mdx#sending-erc-1155-collectible-tokens","308":"docs/pages/sdk/typescript/guides/send-erc20.mdx#sending-erc-20-tokens","309":"docs/pages/sdk/typescript/guides/send-erc721.mdx#sending-erc-721-nft-tokens","310":"docs/pages/sdk/typescript/guides/send-transaction.mdx#sending-transactions","311":"docs/pages/sdk/typescript/guides/session-keys.mdx#no-wallet-confirmation-signatures","312":"docs/pages/sdk/typescript/guides/session-keys.mdx#session-keys","313":"docs/pages/sdk/typescript/guides/session-keys.mdx#using-session-keys-with-sequence","314":"docs/pages/sdk/typescript/guides/session-keys.mdx#1-initialize-sequence-wallet-and-connect","315":"docs/pages/sdk/typescript/guides/session-keys.mdx#2-generate-a-session-key","316":"docs/pages/sdk/typescript/guides/session-keys.mdx#3-sign-authorization-message","317":"docs/pages/sdk/typescript/guides/session-keys.mdx#4-verify-authorization-signature","318":"docs/pages/sdk/typescript/guides/session-keys.mdx#5-sign-message-with-session-key","319":"docs/pages/sdk/typescript/guides/session-keys.mdx#6-verify-session-signature","320":"docs/pages/sdk/unity/Advanced/clients.mdx#clients","321":"docs/pages/sdk/unity/Advanced/clients.mdx#methods","322":"docs/pages/sdk/unity/Advanced/clients.mdx#balanceat","323":"docs/pages/sdk/unity/Advanced/clients.mdx#blockbynumber","324":"docs/pages/sdk/unity/Advanced/clients.mdx#blockbyhash","325":"docs/pages/sdk/unity/Advanced/clients.mdx#blocknumber","326":"docs/pages/sdk/unity/Advanced/clients.mdx#blockrange","327":"docs/pages/sdk/unity/Advanced/clients.mdx#chainid","328":"docs/pages/sdk/unity/Advanced/clients.mdx#codeat","329":"docs/pages/sdk/unity/Advanced/clients.mdx#estimategas","330":"docs/pages/sdk/unity/Advanced/clients.mdx#feehistory","331":"docs/pages/sdk/unity/Advanced/clients.mdx#networkid","332":"docs/pages/sdk/unity/Advanced/clients.mdx#nonceat","333":"docs/pages/sdk/unity/Advanced/clients.mdx#sendrawtransaction","334":"docs/pages/sdk/unity/Advanced/clients.mdx#suggestgasprice","335":"docs/pages/sdk/unity/Advanced/clients.mdx#suggestgastipcap","336":"docs/pages/sdk/unity/Advanced/clients.mdx#transactionbyhash","337":"docs/pages/sdk/unity/Advanced/clients.mdx#transactioncount","338":"docs/pages/sdk/unity/Advanced/clients.mdx#waitfortransactionreceipt","339":"docs/pages/sdk/unity/Advanced/contracts.mdx#contracts","340":"docs/pages/sdk/unity/Advanced/contracts.mdx#calling-smart-contract-functions","341":"docs/pages/sdk/unity/Advanced/contracts.mdx#understanding-data-type-mappings","342":"docs/pages/sdk/unity/Advanced/contracts.mdx#querying-contracts","343":"docs/pages/sdk/unity/Advanced/contracts.mdx#deploying-contracts","344":"docs/pages/sdk/unity/Advanced/introduction.mdx#advanced-blockchain-interactions","345":"docs/pages/sdk/unity/Advanced/introduction.mdx#introduction","346":"docs/pages/sdk/unity/Advanced/introduction.mdx#important-components","347":"docs/pages/sdk/unity/Advanced/introduction.mdx#client","348":"docs/pages/sdk/unity/Advanced/introduction.mdx#sequencewalletiwallet","349":"docs/pages/sdk/unity/Advanced/introduction.mdx#transaction","350":"docs/pages/sdk/unity/Advanced/introduction.mdx#contract","351":"docs/pages/sdk/unity/Advanced/tokens.mdx#tokens","352":"docs/pages/sdk/unity/Advanced/tokens.mdx#bonus-ownable","353":"docs/pages/sdk/unity/Advanced/transfers.mdx#transfers","354":"docs/pages/sdk/unity/Advanced/wallets.mdx#wallets","355":"docs/pages/sdk/unity/Advanced/wallets.mdx#1-eoawallet","356":"docs/pages/sdk/unity/Advanced/wallets.mdx#2-sequencewallettoeoawalletadapter","357":"docs/pages/sdk/unity/Advanced/wallets.mdx#methods","358":"docs/pages/sdk/unity/Advanced/wallets.mdx#getaddress","359":"docs/pages/sdk/unity/Advanced/wallets.mdx#sendtransaction","360":"docs/pages/sdk/unity/Advanced/wallets.mdx#sendtransactionandwaitforreceipt","361":"docs/pages/sdk/unity/Advanced/wallets.mdx#sendtransactionbatch","362":"docs/pages/sdk/unity/Advanced/wallets.mdx#sendtransactionbatchandwaitforreceipts","363":"docs/pages/sdk/unity/Advanced/wallets.mdx#signmessage","364":"docs/pages/sdk/unity/authentication/email.mdx#email--otp","365":"docs/pages/sdk/unity/authentication/email.mdx#custom-integrations","366":"docs/pages/sdk/unity/authentication/federated-accounts.mdx#federated-accounts","367":"docs/pages/sdk/unity/authentication/federated-accounts.mdx#manually-federating-accounts","368":"docs/pages/sdk/unity/authentication/guest.mdx#guest","369":"docs/pages/sdk/unity/authentication/intro.mdx#authentication---introduction","370":"docs/pages/sdk/unity/authentication/intro.mdx#retrieving-the-sequencewallet","371":"docs/pages/sdk/unity/authentication/oidc.mdx#oidc---social-sign-in","372":"docs/pages/sdk/unity/authentication/oidc.mdx#editor","373":"docs/pages/sdk/unity/authentication/oidc.mdx#ios","374":"docs/pages/sdk/unity/authentication/oidc.mdx#sign-in-with-apple","375":"docs/pages/sdk/unity/authentication/oidc.mdx#other-social-platforms","376":"docs/pages/sdk/unity/authentication/oidc.mdx#macos","377":"docs/pages/sdk/unity/authentication/oidc.mdx#pc","378":"docs/pages/sdk/unity/authentication/oidc.mdx#android","379":"docs/pages/sdk/unity/authentication/oidc.mdx#web","380":"docs/pages/sdk/unity/authentication/oidc.mdx#one-time-setup","381":"docs/pages/sdk/unity/authentication/oidc.mdx#building","382":"docs/pages/sdk/unity/authentication/playfab.mdx#playfab","383":"docs/pages/solutions/builder/embedded-wallet/#embedded-wallet-configuration","384":"docs/pages/solutions/builder/embedded-wallet/#login-providers","385":"docs/pages/solutions/builder/embedded-wallet/#google-auth","386":"docs/pages/solutions/builder/embedded-wallet/#apple-auth","387":"docs/pages/solutions/builder/embedded-wallet/#allowed-origins","388":"docs/pages/solutions/builder/embedded-wallet/#recovery-wallet","389":"docs/pages/solutions/builder/embedded-wallet/#initial-configuration-password","390":"docs/pages/solutions/builder/embedded-wallet/#configuration-changes","391":"docs/pages/solutions/builder/embedded-wallet/#parent-wallet","392":"docs/pages/solutions/builder/embedded-wallet/#why-deploying-a-parent-wallet-will-future-proof-integrations","393":"docs/pages/solutions/builder/embedded-wallet/#sdk-integrations","394":"docs/pages/solutions/collectibles/metadata/manage-metadata-builder.mdx#how-to-manage-item-metadata-in-sequence-builder","395":"docs/pages/solutions/collectibles/metadata/manage-metadata-builder.mdx#introduction","396":"docs/pages/solutions/collectibles/metadata/manage-metadata-builder.mdx#step-1-prepare-your-token-images-and-metadata","397":"docs/pages/solutions/collectibles/metadata/manage-metadata-builder.mdx#step-2-set-up-on-pinatacloud","398":"docs/pages/solutions/collectibles/metadata/manage-metadata-builder.mdx#step-3-upload-your-metadata-files","399":"docs/pages/solutions/collectibles/metadata/manage-metadata-builder.mdx#step-4-get-the-folder-url","400":"docs/pages/solutions/collectibles/metadata/manage-metadata-builder.mdx#step-5-set-up-on-sequence-builder","401":"docs/pages/solutions/collectibles/metadata/manage-metadata-builder.mdx#step-6-deploy-your-contract","402":"docs/pages/solutions/collectibles/metadata/manage-metadata-builder.mdx#step-7-move-to-contract-details","403":"docs/pages/solutions/collectibles/metadata/manage-metadata-builder.mdx#step-8-update-contract-attributes","404":"docs/pages/solutions/collectibles/metadata/manage-metadata-builder.mdx#step-9-set-the-base-metadata-uri","405":"docs/pages/solutions/collectibles/metadata/manage-metadata-builder.mdx#step-10-minting-time","406":"docs/pages/solutions/collectibles/metadata/manage-metadata-builder.mdx#step-11-finalize-and-admire","407":"docs/pages/solutions/collectibles/metadata/manage-metadata-builder.mdx#step-12-updating-metadata","408":"docs/pages/solutions/marketplaces/orderbook/quickstart.mdx#quickstart","409":"docs/pages/solutions/marketplaces/orderbook/quickstart.mdx#try-a-demo","410":"docs/pages/solutions/marketplaces/orderbook/quickstart.mdx#template","411":"docs/pages/solutions/marketplaces/orderbook/quickstart.mdx#example-api-call","412":"docs/pages/solutions/marketplaces/orderbook/quickstart.mdx#walkthrough","413":"docs/pages/solutions/payments/onramps/fiat-on-ramps.mdx#fiat-on-ramps","414":"docs/pages/solutions/payments/onramps/fiat-on-ramps.mdx#on-ramp-integrations-with-sequence-kit","415":"docs/pages/solutions/technical-references/internals/contract-audits.mdx#contract-audits","416":"docs/pages/solutions/technical-references/internals/contract-audits.mdx#quantstamp","417":"docs/pages/solutions/technical-references/internals/contract-audits.mdx#consensys-diligence","418":"docs/pages/solutions/technical-references/internals/contract-audits.mdx#zellic","419":"docs/pages/solutions/technical-references/internals/wallet-context.mdx#wallet-context","420":"docs/pages/solutions/technical-references/wallet-contracts/why.mdx#why-smart-contracts-wallets","421":"docs/pages/solutions/technical-references/wallet-contracts/why.mdx#externally-owned-accounts","422":"docs/pages/solutions/technical-references/wallet-contracts/why.mdx#pros","423":"docs/pages/solutions/technical-references/wallet-contracts/why.mdx#popular-examples","424":"docs/pages/solutions/technical-references/wallet-contracts/why.mdx#smart-contract-wallets","425":"docs/pages/solutions/technical-references/wallet-contracts/why.mdx#pros-1","426":"docs/pages/solutions/technical-references/wallet-contracts/why.mdx#examples","427":"docs/pages/solutions/technical-references/wallet-contracts/why.mdx#deployment-fees-per-aa-account-abstraction-smart-account","428":"docs/pages/solutions/wallets/embedded-wallet/migration.mdx#migration-guide-moving-to-sequence-embedded-wallets","429":"docs/pages/solutions/wallets/embedded-wallet/migration.mdx#overview","430":"docs/pages/solutions/wallets/embedded-wallet/migration.mdx#just-in-time-migration-process","431":"docs/pages/solutions/wallets/link-wallets/overview.mdx#wallet-linking-overview","432":"docs/pages/solutions/wallets/link-wallets/overview.mdx#try-a-demo","433":"docs/pages/solutions/wallets/sequence-kit/checkout.mdx#checkout-overview","434":"docs/pages/solutions/wallets/sequence-kit/checkout.mdx#integration","435":"docs/pages/solutions/wallets/sequence-kit/checkout.mdx#1-install-the-kit-checkout-module","436":"docs/pages/solutions/wallets/sequence-kit/checkout.mdx#2-place-the-kitcheckoutprovider-below-the-sequence-kit-core-provider-in-your-app","437":"docs/pages/solutions/wallets/sequence-kit/checkout.mdx#3-opening-the-checkout-modal","438":"docs/pages/solutions/wallets/sequence-kit/checkout.mdx#4-configuring-the-checkout-modal","439":"docs/pages/solutions/wallets/sequence-kit/checkout.mdx#crypto-checkout-configuration-cryptocheckout","440":"docs/pages/solutions/wallets/sequence-kit/checkout.mdx#order-summary-configuration-ordersummaryitems","441":"docs/pages/solutions/wallets/sequence-kit/configuration.mdx#configuration-options","442":"docs/pages/solutions/wallets/sequence-kit/configuration.mdx#available-options","443":"docs/pages/solutions/wallets/sequence-kit/configuration.mdx#defaulttheme","444":"docs/pages/solutions/wallets/sequence-kit/configuration.mdx#position","445":"docs/pages/solutions/wallets/sequence-kit/configuration.mdx#sign-in-modal-configuration-signin","446":"docs/pages/solutions/wallets/sequence-kit/configuration.mdx#signinlogourl","447":"docs/pages/solutions/wallets/sequence-kit/configuration.mdx#signinprojectname","448":"docs/pages/solutions/wallets/sequence-kit/configuration.mdx#signinshowemailinput","449":"docs/pages/solutions/wallets/sequence-kit/configuration.mdx#signinsocialauthoptions","450":"docs/pages/solutions/wallets/sequence-kit/configuration.mdx#signinwalletauthoptions","451":"docs/pages/solutions/wallets/sequence-kit/configuration.mdx#displayedassets","452":"docs/pages/solutions/wallets/sequence-kit/configuration.mdx#create-universal-default-connectors","453":"docs/pages/solutions/wallets/sequence-kit/custom-connectors.mdx#custom-connectors-in-sequence-kit","454":"docs/pages/solutions/wallets/sequence-kit/custom-connectors.mdx#creating-a-custom-connector","455":"docs/pages/solutions/wallets/sequence-kit/custom-connectors.mdx#using-custom-connectors","456":"docs/pages/solutions/wallets/sequence-kit/custom-connectors.mdx#share-your-custom-connectors","457":"docs/pages/solutions/wallets/sequence-kit/on-ramp.mdx#on-ramp-overview","458":"docs/pages/solutions/wallets/sequence-kit/on-ramp.mdx#integration","459":"docs/pages/solutions/wallets/sequence-kit/on-ramp.mdx#1-install-the-kit-checkout-module","460":"docs/pages/solutions/wallets/sequence-kit/on-ramp.mdx#2-place-the-kitcheckoutprovider-below-the-sequence-kit-core-provider-in-your-app","461":"docs/pages/solutions/wallets/sequence-kit/on-ramp.mdx#3-adding-funds-with-a-credit-card","462":"docs/pages/solutions/wallets/sequence-kit/overview.mdx#sequence-kit-sdk","463":"docs/pages/solutions/wallets/sequence-kit/overview.mdx#key-features","464":"docs/pages/solutions/wallets/sequence-kit/overview.mdx#next-steps","465":"docs/pages/solutions/wallets/universal-wallet/fiat-on-ramps.mdx#fiat-on-ramps","466":"docs/pages/solutions/wallets/universal-wallet/fiat-on-ramps.mdx#on-ramp-integrations-with-sequence-kit","467":"docs/pages/solutions/wallets/universal-wallet/key-management.mdx#key-management","468":"docs/pages/solutions/wallets/universal-wallet/key-management.mdx#social-login-wallets","469":"docs/pages/solutions/wallets/universal-wallet/key-management.mdx#session-keys","470":"docs/pages/solutions/wallets/universal-wallet/key-management.mdx#guard-key","471":"docs/pages/solutions/wallets/universal-wallet/key-management.mdx#torus-key","472":"docs/pages/solutions/wallets/universal-wallet/overview.mdx#wallet","473":"docs/pages/solutions/wallets/universal-wallet/platforms.mdx#platforms","474":"docs/pages/solutions/wallets/universal-wallet/platforms.mdx#web-wallet","475":"docs/pages/solutions/wallets/universal-wallet/platforms.mdx#mobile-wallet","476":"docs/pages/solutions/wallets/universal-wallet/platforms.mdx#browser-extension-wallet","477":"docs/pages/solutions/wallets/universal-wallet/quickstart.mdx#quickstart","478":"docs/pages/solutions/wallets/universal-wallet/quickstart.mdx#try-a-demo","479":"docs/pages/solutions/wallets/universal-wallet/quickstart.mdx#template","480":"docs/pages/solutions/wallets/universal-wallet/quickstart.mdx#install","481":"docs/pages/solutions/wallets/universal-wallet/quickstart.mdx#cdn-distribution-as-native-js","482":"docs/pages/solutions/wallets/universal-wallet/sequence-kit.mdx#sequence-kit-seamlessly-integrate-web3-wallets-into-your-applications","483":"docs/pages/solutions/wallets/universal-wallet/sequence-kit.mdx#key-features","484":"docs/pages/solutions/wallets/universal-wallet/sequence-kit.mdx#next-steps","485":"docs/pages/solutions/wallets/universal-wallet/sequence-kit.mdx#x27;re already familiar with Sequence Kit dive into the available <a href=","486":"docs/pages/solutions/wallets/universal-wallet/sequence-kit.mdx#sequence-kit-seamlessly-integrate-web3-wallets-into-your-applications-1","487":"docs/pages/solutions/wallets/universal-wallet/sequence-kit.mdx#key-features-1","488":"docs/pages/solutions/wallets/universal-wallet/sequence-kit.mdx#next-steps-1","489":"docs/pages/solutions/technical-references/internals/v1/guest-module.mdx#guest-module","490":"docs/pages/solutions/technical-references/internals/v1/guest-module.mdx#on-demand-deployment","491":"docs/pages/solutions/technical-references/internals/v1/main-module-upgradeable.mdx#main-module-upgradeable--configuration-migration","492":"docs/pages/solutions/technical-references/internals/v1/modules-and-updates.mdx#modules--wallet-update","493":"docs/pages/solutions/technical-references/internals/v1/modules-and-updates.mdx#wallet-implementation","494":"docs/pages/solutions/technical-references/internals/v1/modules-and-updates.mdx#_updateconfiguration","495":"docs/pages/solutions/technical-references/internals/v1/modules-and-updates.mdx#parameters","496":"docs/pages/solutions/technical-references/internals/v1/modules-and-updates.mdx#reading-current-implementation","497":"docs/pages/solutions/technical-references/internals/v1/modules-and-updates.mdx#wallet-configuration-validation","498":"docs/pages/solutions/technical-references/internals/v1/modules-and-updates.mdx#_isvalidimage","499":"docs/pages/solutions/technical-references/internals/v1/modules-and-updates.mdx#parameters-1","500":"docs/pages/solutions/technical-references/internals/v1/modules-and-updates.mdx#return-values","501":"docs/pages/solutions/technical-references/internals/v1/modules-and-updates.mdx#mainmoduleupgradeable","502":"docs/pages/solutions/technical-references/internals/v1/modules-and-updates.mdx#updateimagehash","503":"docs/pages/solutions/technical-references/internals/v1/modules-and-updates.mdx#parameters-2","504":"docs/pages/solutions/technical-references/internals/v1/modules-and-updates.mdx#first-configuration-update","505":"docs/pages/solutions/technical-references/internals/v1/modules-and-updates.mdx#delegatecall-false","506":"docs/pages/solutions/technical-references/internals/v1/modules-and-updates.mdx#revertonerror-true","507":"docs/pages/solutions/technical-references/internals/v1/modules-and-updates.mdx#to-wallet","508":"docs/pages/solutions/technical-references/internals/v1/modules-and-updates.mdx#value-ethersconstantszero","509":"docs/pages/solutions/technical-references/internals/v1/modules-and-updates.mdx#gaslimit-ethersconstantszero","510":"docs/pages/solutions/technical-references/internals/v1/modules-and-updates.mdx#subsequent-configuration-updates","511":"docs/pages/solutions/technical-references/internals/v1/modules-and-updates.mdx#retrieving-the-current-configuration","512":"docs/pages/solutions/technical-references/internals/v1/modules-and-updates.mdx#retrieving-the-wallet-configuration","513":"docs/pages/solutions/technical-references/internals/v1/signature-encoding.mdx#signature-encoding","514":"docs/pages/solutions/technical-references/internals/v1/signature-encoding.mdx#erc-191-ethereum-signed-data","515":"docs/pages/solutions/technical-references/internals/v1/signature-encoding.mdx#erc-712-structured-data-signatures","516":"docs/pages/solutions/technical-references/internals/v1/signature-encoding.mdx#verification","517":"docs/pages/solutions/technical-references/internals/v1/wallet-configuration.mdx#wallet-configuration","518":"docs/pages/solutions/technical-references/internals/v1/wallet-configuration.mdx#configuration-layout","519":"docs/pages/solutions/technical-references/internals/v1/wallet-configuration.mdx#signer-layout","520":"docs/pages/solutions/technical-references/internals/v1/wallet-configuration.mdx#example","521":"docs/pages/solutions/technical-references/internals/v1/wallet-configuration.mdx#the-valid-combinations-of-signers-are","522":"docs/pages/solutions/technical-references/internals/v1/wallet-configuration.mdx#configuration-hash---imagehash","523":"docs/pages/solutions/technical-references/internals/v1/wallet-configuration.mdx#compute-image-hash","524":"docs/pages/solutions/technical-references/internals/v1/wallet-configuration.mdx#initial-wallet-configuration","525":"docs/pages/solutions/technical-references/internals/v1/wallet-configuration.mdx#compute-wallet-address","526":"docs/pages/solutions/technical-references/internals/v1/wallet-context.mdx#wallet-context-v1","527":"docs/pages/solutions/technical-references/internals/v2/configuration.mdx#wallet-configuration","528":"docs/pages/solutions/technical-references/internals/v2/configuration.mdx#top-level-properties","529":"docs/pages/solutions/technical-references/internals/v2/configuration.mdx#threshold","530":"docs/pages/solutions/technical-references/internals/v2/configuration.mdx#checkpoint","531":"docs/pages/solutions/technical-references/internals/v2/configuration.mdx#tree","532":"docs/pages/solutions/technical-references/internals/v2/configuration.mdx#signer","533":"docs/pages/solutions/technical-references/internals/v2/configuration.mdx#subdigest","534":"docs/pages/solutions/technical-references/internals/v2/configuration.mdx#subtree-nested-configuration","535":"docs/pages/solutions/technical-references/internals/v2/configuration.mdx#imagehash","536":"docs/pages/solutions/technical-references/internals/v2/configuration.mdx#initial-configuration","537":"docs/pages/solutions/technical-references/internals/v2/wallet-context.mdx#wallet-context-v2","538":"docs/pages/solutions/wallets/embedded-wallet/architecture/action-payloads.mdx#action-payloads","539":"docs/pages/solutions/wallets/embedded-wallet/architecture/action-payloads.mdx#payload-structure","540":"docs/pages/solutions/wallets/embedded-wallet/architecture/action-payloads.mdx#signature-type","541":"docs/pages/solutions/wallets/embedded-wallet/architecture/action-payloads.mdx#open-session-payload","542":"docs/pages/solutions/wallets/embedded-wallet/architecture/action-payloads.mdx#sign-message-payload","543":"docs/pages/solutions/wallets/embedded-wallet/architecture/action-payloads.mdx#send-transaction-payload","544":"docs/pages/solutions/wallets/embedded-wallet/architecture/action-payloads.mdx#raw-transaction","545":"docs/pages/solutions/wallets/embedded-wallet/architecture/action-payloads.mdx#senderc20","546":"docs/pages/solutions/wallets/embedded-wallet/architecture/action-payloads.mdx#senderc721","547":"docs/pages/solutions/wallets/embedded-wallet/architecture/action-payloads.mdx#senderc1155","548":"docs/pages/solutions/wallets/embedded-wallet/architecture/action-payloads.mdx#delayedencode","549":"docs/pages/solutions/wallets/embedded-wallet/architecture/action-payloads.mdx#close-session-payload","550":"docs/pages/solutions/wallets/embedded-wallet/architecture/enclave-verification.mdx#enclave-verification","551":"docs/pages/solutions/wallets/embedded-wallet/architecture/enclave-verification.mdx#simple-verification-method","552":"docs/pages/solutions/wallets/embedded-wallet/architecture/enclave-verification.mdx#requirements","553":"docs/pages/solutions/wallets/embedded-wallet/architecture/enclave-verification.mdx#determine-the-pcr0","554":"docs/pages/solutions/wallets/embedded-wallet/architecture/enclave-verification.mdx#build-the-enclave-file","555":"docs/pages/solutions/wallets/embedded-wallet/architecture/enclave-verification.mdx#complex-verification-method","556":"docs/pages/solutions/wallets/embedded-wallet/architecture/intents.mdx#intents","557":"docs/pages/solutions/wallets/embedded-wallet/architecture/intents.mdx#what-are-they","558":"docs/pages/solutions/wallets/embedded-wallet/architecture/overview.mdx#overview","559":"docs/pages/solutions/wallets/embedded-wallet/architecture/overview.mdx#embedded-wallet-architecture","560":"docs/pages/solutions/wallets/embedded-wallet/architecture/overview.mdx#sequence-auth","561":"docs/pages/solutions/wallets/embedded-wallet/architecture/overview.mdx#waas-configuration-key","562":"docs/pages/solutions/wallets/embedded-wallet/architecture/overview.mdx#wallet-private-keys","563":"docs/pages/solutions/wallets/embedded-wallet/architecture/overview.mdx#waas-enclave","564":"docs/pages/solutions/wallets/embedded-wallet/architecture/overview.mdx#sequence-guard","565":"docs/pages/solutions/wallets/embedded-wallet/architecture/overview.mdx#threat-model","566":"docs/pages/solutions/wallets/embedded-wallet/architecture/overview.mdx#simplified-data-flow","567":"docs/pages/solutions/wallets/embedded-wallet/architecture/overview.mdx#1-generation-of-the-intent","568":"docs/pages/solutions/wallets/embedded-wallet/architecture/overview.mdx#2-sdk-forwards-intent-to-sequence-auth","569":"docs/pages/solutions/wallets/embedded-wallet/architecture/overview.mdx#4-waas-api-collects-signature-from-sequence-guard","570":"docs/pages/solutions/wallets/embedded-wallet/architecture/overview.mdx#5-sequence-guard-authenticates-the-user","571":"docs/pages/solutions/wallets/embedded-wallet/architecture/overview.mdx#6-relay-and-transaction-receipt","572":"docs/pages/solutions/wallets/embedded-wallet/architecture/response-payloads.mdx#response-payloads","573":"docs/pages/solutions/wallets/embedded-wallet/architecture/response-payloads.mdx#general-response-structure","574":"docs/pages/solutions/wallets/embedded-wallet/architecture/response-payloads.mdx#types-of-responses","575":"docs/pages/solutions/wallets/embedded-wallet/architecture/response-payloads.mdx#transaction-receipt-response","576":"docs/pages/solutions/wallets/embedded-wallet/architecture/response-payloads.mdx#example","577":"docs/pages/solutions/wallets/embedded-wallet/architecture/response-payloads.mdx#how-to-detect","578":"docs/pages/solutions/wallets/embedded-wallet/architecture/response-payloads.mdx#failed-transaction-response","579":"docs/pages/solutions/wallets/embedded-wallet/architecture/response-payloads.mdx#how-to-detect-1","580":"docs/pages/solutions/wallets/embedded-wallet/architecture/response-payloads.mdx#signed-message-response","581":"docs/pages/solutions/wallets/embedded-wallet/architecture/response-payloads.mdx#example-1","582":"docs/pages/solutions/wallets/embedded-wallet/architecture/response-payloads.mdx#how-to-detect-2","583":"docs/pages/solutions/wallets/embedded-wallet/architecture/response-payloads.mdx#session-opened-response","584":"docs/pages/solutions/wallets/embedded-wallet/architecture/response-payloads.mdx#example-2","585":"docs/pages/solutions/wallets/embedded-wallet/architecture/response-payloads.mdx#how-to-detect-3","586":"docs/pages/solutions/wallets/embedded-wallet/architecture/response-payloads.mdx#validation-required-response","587":"docs/pages/solutions/wallets/embedded-wallet/architecture/response-payloads.mdx#how-to-detect-4","588":"docs/pages/solutions/wallets/embedded-wallet/architecture/response-payloads.mdx#note","589":"docs/pages/solutions/wallets/embedded-wallet/architecture/trust-contract-recovery-flow.mdx#trust-contract-recovery-flow","590":"docs/pages/solutions/wallets/embedded-wallet/architecture/trust-contract-recovery-flow.mdx#trust-contract-architecture","591":"docs/pages/solutions/wallets/embedded-wallet/architecture/trust-contract-recovery-flow.mdx#unlock-state-monitoring","592":"docs/pages/solutions/wallets/embedded-wallet/architecture/trust-contract-recovery-flow.mdx#disaster-recovery-flow","593":"docs/pages/solutions/wallets/embedded-wallet/examples/manage-sessions.mdx#session-management","594":"docs/pages/solutions/wallets/embedded-wallet/examples/manage-sessions.mdx#account-management","595":"docs/pages/solutions/wallets/embedded-wallet/examples/manage-sessions.mdx#sign-up--sign-in","596":"docs/pages/solutions/wallets/embedded-wallet/examples/manage-sessions.mdx#authenticating-accounts","597":"docs/pages/solutions/wallets/embedded-wallet/examples/manage-sessions.mdx#email-sign-in--sign-up","598":"docs/pages/solutions/wallets/embedded-wallet/examples/manage-sessions.mdx#google--apple-auth","599":"docs/pages/solutions/wallets/embedded-wallet/examples/manage-sessions.mdx#check-if-a-user-is-signed-in","600":"docs/pages/solutions/wallets/embedded-wallet/examples/manage-sessions.mdx#idtoken-jwt-parsing","601":"docs/pages/solutions/wallets/embedded-wallet/examples/manage-sessions.mdx#google-jwt-parsing-idtoken-contents","602":"docs/pages/solutions/wallets/embedded-wallet/examples/manage-sessions.mdx#apple-jwt-parsing-idtoken-contents","603":"docs/pages/solutions/wallets/embedded-wallet/examples/manage-sessions.mdx#example-js-code-for-parsing","604":"docs/pages/solutions/wallets/embedded-wallet/examples/manage-sessions.mdx#managing-sessions","605":"docs/pages/solutions/wallets/embedded-wallet/examples/manage-sessions.mdx#list-sessions","606":"docs/pages/solutions/wallets/embedded-wallet/examples/manage-sessions.mdx#close-session","607":"docs/pages/solutions/wallets/embedded-wallet/examples/on-ramp.mdx#on-ramp","608":"docs/pages/solutions/wallets/embedded-wallet/examples/transaction-receipts.mdx#transaction-receipts","609":"docs/pages/solutions/wallets/embedded-wallet/examples/transaction-receipts.mdx#failed-transaction-response","610":"docs/pages/solutions/wallets/embedded-wallet/examples/validation.mdx#validation","611":"docs/pages/solutions/wallets/embedded-wallet/examples/validation.mdx#email-login-one-time-code","612":"docs/pages/solutions/wallets/embedded-wallet/examples/validation.mdx#social-login","613":"docs/pages/solutions/wallets/embedded-wallet/examples/validation.mdx#validation-status","614":"docs/pages/solutions/wallets/embedded-wallet/examples/validation.mdx#trigger-session-validation","615":"docs/pages/solutions/wallets/embedded-wallet/examples/validation.mdx#onvalidationrequired-callback","616":"docs/pages/solutions/wallets/embedded-wallet/examples/validation.mdx#control-session-validation","617":"docs/pages/solutions/wallets/embedded-wallet/examples/validation.mdx#listen-for-session-validations","618":"docs/pages/solutions/wallets/embedded-wallet/examples/validation.mdx#manage-automatic-session-validation","619":"docs/pages/solutions/wallets/universal-wallet/examples/auth-address.mdx#authenticate-users-with-message-signature","620":"docs/pages/solutions/wallets/universal-wallet/examples/auth-address.mdx#ask-for-the-wallet-address","621":"docs/pages/solutions/wallets/universal-wallet/examples/auth-address.mdx#authenticate-wallet","622":"docs/pages/solutions/wallets/universal-wallet/examples/auth-address.mdx#authenticate-wallet-server-side","623":"docs/pages/solutions/wallets/universal-wallet/examples/building-backends.mdx#building-backends-with-sequence","624":"docs/pages/solutions/wallets/universal-wallet/examples/building-backends.mdx#nodejs","625":"docs/pages/solutions/wallets/universal-wallet/examples/building-backends.mdx#go","626":"docs/pages/solutions/wallets/universal-wallet/examples/building-backends.mdx#ethkit","627":"docs/pages/solutions/wallets/universal-wallet/examples/building-backends.mdx#support-for-other-backend-languages","628":"docs/pages/solutions/wallets/universal-wallet/examples/send-batch-transactions.mdx#sending-a-batch-of-transactions","629":"docs/pages/solutions/wallets/universal-wallet/examples/send-erc1155.mdx#sending-erc-1155-collectible-tokens","630":"docs/pages/solutions/wallets/universal-wallet/examples/send-erc20.mdx#sending-erc-20-tokens","631":"docs/pages/solutions/wallets/universal-wallet/examples/send-erc20.mdx#description-sequence-is-a-web3-gaming-platform-that-allows-users-to-send-erc-20-tokens-easily-using-a-universal-wallet-with-a-simple-code-snippet-users-can-send-a-single-erc-20-token-transfer-to-a-recipient-additionally-users-can-batch-multiple-token-transfers-into-a-single-transaction-f","632":"docs/pages/solutions/wallets/universal-wallet/examples/send-erc20.mdx#title-sequence---web3-gaming-platform---universal-wallet-send-erc20s","633":"docs/pages/solutions/wallets/universal-wallet/examples/send-erc20.mdx#sending-erc-20-tokens-1","634":"docs/pages/solutions/wallets/universal-wallet/examples/send-erc721.mdx#sending-erc-721-nft-tokens","635":"docs/pages/solutions/wallets/universal-wallet/examples/send-transaction.mdx#sending-transactions"},"fieldIds":{"title":0,"titles":1,"text":2},"fieldLength":{"0":[1,1,58],"1":[2,1,47],"2":[6,2,100],"3":[6,2,147],"4":[3,2,22],"5":[2,1,46],"6":[4,2,77],"7":[2,1,31],"8":[2,2,100],"9":[2,4,47],"10":[2,2,29],"11":[5,1,50],"12":[9,5,82],"13":[1,1,60],"14":[4,1,16],"15":[2,1,1],"16":[6,3,90],"17":[3,3,68],"18":[2,3,28],"19":[2,1,56],"20":[1,2,105],"21":[4,2,70],"22":[2,2,64],"23":[4,2,15],"24":[6,1,144],"25":[1,1,191],"26":[4,1,11],"27":[2,1,53],"28":[2,1,46],"29":[2,1,37],"30":[10,2,116],"31":[4,2,14],"32":[1,1,35],"33":[4,2,42],"34":[2,2,29],"35":[4,2,15],"36":[6,1,81],"37":[1,6,177],"38":[1,6,35],"39":[2,6,44],"40":[2,6,49],"41":[3,6,31],"42":[2,1,44],"43":[9,2,115],"44":[3,2,143],"45":[3,5,19],"46":[3,2,57],"47":[2,2,1],"48":[1,3,158],"49":[1,3,139],"50":[3,3,82],"51":[1,3,55],"52":[1,1,80],"53":[4,2,9],"54":[2,2,17],"55":[2,1,36],"56":[1,2,120],"57":[6,2,61],"58":[4,2,146],"59":[1,1,1],"60":[3,1,12],"61":[1,1,11],"62":[2,1,1],"63":[2,3,29],"64":[2,3,41],"65":[2,3,62],"66":[1,1,33],"67":[1,1,36],"68":[3,1,116],"69":[2,1,139],"70":[1,1,1],"71":[3,1,1],"72":[1,4,20],"73":[5,4,49],"74":[1,4,50],"75":[1,4,82],"76":[1,1,137],"77":[3,1,42],"78":[7,3,59],"79":[3,3,35],"80":[1,1,50],"81":[1,1,52],"82":[3,1,70],"83":[2,3,35],"84":[3,3,130],"85":[3,3,48],"86":[4,6,73],"87":[3,3,48],"88":[2,1,101],"89":[1,2,7],"90":[1,2,7],"91":[1,2,15],"92":[1,2,9],"93":[1,1,230],"94":[2,1,77],"95":[5,1,1],"96":[1,5,32],"97":[3,5,89],"98":[2,1,95],"99":[3,2,12],"100":[1,5,27],"101":[1,5,51],"102":[1,5,53],"103":[1,5,48],"104":[2,2,25],"105":[3,3,118],"106":[5,3,46],"107":[3,1,103],"108":[1,3,103],"109":[1,3,87],"110":[3,4,96],"111":[1,3,53],"112":[3,4,94],"113":[1,3,76],"114":[3,4,95],"115":[1,3,199],"116":[2,3,118],"117":[1,3,199],"118":[3,1,16],"119":[2,3,75],"120":[2,3,88],"121":[2,3,49],"122":[3,3,33],"123":[2,1,93],"124":[5,2,43],"125":[1,1,1],"126":[3,1,1],"127":[3,4,137],"128":[5,4,41],"129":[2,1,212],"130":[5,1,62],"131":[8,1,57],"132":[8,1,44],"133":[3,8,62],"134":[3,8,37],"135":[1,1,1],"136":[2,1,57],"137":[4,1,68],"138":[2,1,1],"139":[3,3,72],"140":[2,1,1],"141":[2,2,60],"142":[2,2,59],"143":[2,2,59],"144":[2,2,39],"145":[2,2,37],"146":[2,2,38],"147":[2,2,41],"148":[2,2,40],"149":[1,1,42],"150":[7,1,58],"151":[3,1,51],"152":[4,1,84],"153":[1,1,44],"154":[1,1,12],"155":[1,1,28],"156":[1,1,13],"157":[1,1,36],"158":[2,1,11],"159":[4,1,130],"160":[3,1,1],"161":[4,3,40],"162":[1,3,46],"163":[1,3,46],"164":[1,3,47],"165":[1,3,45],"166":[1,3,46],"167":[1,3,54],"168":[1,3,62],"169":[1,3,60],"170":[1,3,55],"171":[1,3,57],"172":[1,1,1],"173":[2,1,60],"174":[3,1,44],"175":[1,1,48],"176":[1,1,1],"177":[5,1,55],"178":[5,5,73],"179":[3,1,1],"180":[2,3,57],"181":[2,3,56],"182":[2,5,66],"183":[2,5,27],"184":[2,5,31],"185":[6,5,70],"186":[3,5,56],"187":[5,3,120],"188":[1,1,51],"189":[3,2,47],"190":[1,1,53],"191":[2,3,17],"192":[2,3,17],"193":[2,3,15],"194":[1,1,88],"195":[4,1,53],"196":[4,1,85],"197":[4,1,34],"198":[4,6,50],"199":[5,1,35],"200":[3,7,24],"201":[5,1,56],"202":[2,1,37],"203":[11,3,54],"204":[6,3,45],"205":[5,3,1],"206":[4,2,20],"207":[2,2,7],"208":[3,2,16],"209":[3,2,18],"210":[3,1,143],"211":[2,3,17],"212":[3,1,38],"213":[5,3,22],"214":[1,7,73],"215":[2,7,73],"216":[5,3,21],"217":[1,7,73],"218":[2,7,73],"219":[1,3,68],"220":[3,1,55],"221":[8,3,99],"222":[4,3,85],"223":[4,3,90],"224":[4,3,23],"225":[1,7,73],"226":[2,7,73],"227":[1,3,63],"228":[2,1,1],"229":[13,3,187],"230":[11,3,156],"231":[8,1,1],"232":[16,8,99],"233":[1,1,1],"234":[4,1,26],"235":[3,5,49],"236":[4,5,5],"237":[3,5,86],"238":[3,1,1],"239":[8,3,173],"240":[3,1,1],"241":[13,4,150],"242":[4,1,1],"243":[14,5,165],"244":[1,1,36],"245":[1,2,64],"246":[1,2,102],"247":[3,1,125],"248":[3,1,67],"249":[2,1,93],"250":[1,1,1],"251":[14,2,75],"252":[21,2,88],"253":[21,2,159],"254":[2,1,105],"255":[9,1,40],"256":[2,9,79],"257":[2,1,1],"258":[11,2,7],"259":[9,1,40],"260":[2,9,79],"261":[2,1,33],"262":[4,1,26],"263":[1,4,16],"264":[1,4,1],"265":[1,5,31],"266":[2,5,33],"267":[1,4,1],"268":[1,5,15],"269":[3,5,16],"270":[1,4,11],"271":[5,1,1],"272":[5,5,17],"273":[2,5,121],"274":[4,5,139],"275":[4,1,1],"276":[1,5,22],"277":[1,5,33],"278":[1,5,36],"279":[5,5,72],"280":[2,1,145],"281":[5,2,199],"282":[5,2,26],"283":[1,6,22],"284":[1,6,8],"285":[1,6,23],"286":[1,6,20],"287":[1,6,19],"288":[1,6,23],"289":[1,6,17],"290":[1,6,20],"291":[1,6,26],"292":[2,6,21],"293":[2,6,38],"294":[2,6,36],"295":[2,6,29],"296":[2,6,28],"297":[2,6,27],"298":[2,6,31],"299":[2,6,27],"300":[2,6,40],"301":[8,2,25],"302":[11,2,5],"303":[3,2,106],"304":[1,1,93],"305":[5,2,32],"306":[5,1,82],"307":[5,1,93],"308":[4,1,72],"309":[5,1,85],"310":[2,1,42],"311":[4,1,28],"312":[2,1,95],"313":[5,1,1],"314":[6,6,17],"315":[5,6,33],"316":[4,6,28],"317":[4,6,35],"318":[6,6,25],"319":[4,6,49],"320":[1,1,64],"321":[1,1,50],"322":[1,2,73],"323":[1,2,31],"324":[1,2,17],"325":[1,2,18],"326":[1,2,39],"327":[1,2,19],"328":[1,2,37],"329":[1,2,18],"330":[1,2,35],"331":[1,2,20],"332":[1,2,38],"333":[1,2,19],"334":[1,2,14],"335":[1,2,17],"336":[1,2,14],"337":[1,2,20],"338":[1,2,20],"339":[1,1,79],"340":[4,1,107],"341":[4,1,64],"342":[2,1,69],"343":[2,1,24],"344":[3,1,1],"345":[1,3,90],"346":[2,4,24],"347":[1,6,48],"348":[3,6,24],"349":[1,6,47],"350":[1,6,29],"351":[1,1,107],"352":[2,1,47],"353":[1,1,51],"354":[1,1,21],"355":[2,1,29],"356":[2,1,41],"357":[1,1,15],"358":[1,2,9],"359":[1,2,17],"360":[1,2,20],"361":[1,2,62],"362":[1,2,64],"363":[1,2,48],"364":[3,1,59],"365":[2,3,59],"366":[2,1,111],"367":[3,2,69],"368":[1,1,41],"369":[2,1,125],"370":[3,2,70],"371":[4,1,80],"372":[1,5,114],"373":[1,5,1],"374":[4,5,56],"375":[3,5,19],"376":[1,5,43],"377":[1,5,39],"378":[1,5,155],"379":[1,5,60],"380":[3,5,67],"381":[1,5,86],"382":[1,1,115],"383":[3,1,101],"384":[2,3,9],"385":[2,5,56],"386":[2,5,56],"387":[2,3,45],"388":[2,3,73],"389":[3,3,37],"390":[2,3,26],"391":[2,3,47],"392":[9,4,74],"393":[2,3,27],"394":[8,1,1],"395":[1,8,25],"396":[8,8,61],"397":[7,8,54],"398":[6,8,31],"399":[6,8,25],"400":[7,8,25],"401":[5,8,20],"402":[6,8,17],"403":[5,8,58],"404":[7,8,66],"405":[4,8,65],"406":[5,8,28],"407":[4,8,62],"408":[1,1,1],"409":[3,1,12],"410":[1,1,19],"411":[3,1,61],"412":[1,1,53],"413":[3,1,61],"414":[6,3,32],"415":[2,1,31],"416":[1,2,7],"417":[2,2,5],"418":[1,2,3],"419":[2,1,43],"420":[5,1,35],"421":[3,5,20],"422":[1,7,11],"423":[2,7,5],"424":[3,5,46],"425":[1,6,23],"426":[1,5,5],"427":[7,5,77],"428":[7,1,1],"429":[1,7,43],"430":[5,7,144],"431":[3,1,95],"432":[3,3,31],"433":[2,1,11],"434":[1,1,9],"435":[7,1,9],"436":[13,1,22],"437":[5,1,30],"438":[5,1,12],"439":[5,6,39],"440":[5,6,22],"441":[2,1,38],"442":[2,1,1],"443":[1,2,40],"444":[1,2,22],"445":[6,2,12],"446":[2,8,12],"447":[2,8,12],"448":[2,8,14],"449":[2,8,48],"450":[2,8,48],"451":[1,2,39],"452":[4,1,71],"453":[5,1,30],"454":[4,5,89],"455":[3,1,85],"456":[4,1,34],"457":[3,1,31],"458":[1,3,10],"459":[7,4,9],"460":[13,4,22],"461":[7,4,31],"462":[3,1,39],"463":[2,3,109],"464":[2,3,32],"465":[3,1,61],"466":[6,3,32],"467":[2,1,69],"468":[3,2,76],"469":[2,5,32],"470":[2,5,45],"471":[2,5,100],"472":[1,1,90],"473":[1,1,1],"474":[2,1,27],"475":[2,1,48],"476":[3,1,5],"477":[1,1,1],"478":[3,1,12],"479":[1,1,10],"480":[1,1,68],"481":[5,3,32],"482":[9,1,40],"483":[2,9,79],"484":[2,1,1],"485":[11,2,7],"486":[9,1,40],"487":[2,9,79],"488":[2,1,33],"489":[2,1,49],"490":[3,2,33],"491":[6,1,50],"492":[4,1,40],"493":[2,4,25],"494":[2,6,42],"495":[2,7,42],"496":[3,6,53],"497":[3,4,57],"498":[2,7,42],"499":[2,8,9],"500":[3,8,12],"501":[1,4,18],"502":[1,5,20],"503":[2,6,87],"504":[3,4,82],"505":[2,7,31],"506":[2,7,32],"507":[2,7,19],"508":[4,7,20],"509":[4,7,71],"510":[3,6,37],"511":[4,6,35],"512":[4,9,49],"513":[2,1,17],"514":[5,2,72],"515":[5,2,96],"516":[1,2,87],"517":[2,1,18],"518":[2,2,26],"519":[2,3,26],"520":[1,4,21],"521":[7,4,31],"522":[3,3,51],"523":[3,5,28],"524":[3,2,23],"525":[3,7,65],"526":[3,1,20],"527":[2,1,35],"528":[3,2,37],"529":[1,5,34],"530":[1,5,41],"531":[1,5,37],"532":[1,6,41],"533":[1,6,49],"534":[4,6,127],"535":[1,2,69],"536":[2,2,68],"537":[3,1,17],"538":[2,1,57],"539":[2,2,74],"540":[2,5,46],"541":[3,4,98],"542":[3,4,45],"543":[3,4,35],"544":[2,7,31],"545":[1,7,19],"546":[1,7,34],"547":[1,7,34],"548":[1,7,165],"549":[3,4,46],"550":[2,1,26],"551":[3,2,1],"552":[1,5,27],"553":[3,5,71],"554":[4,5,85],"555":[3,2,124],"556":[1,1,61],"557":[4,1,130],"558":[1,1,1],"559":[3,1,128],"560":[2,1,60],"561":[3,3,70],"562":[3,3,48],"563":[2,3,101],"564":[2,1,120],"565":[2,3,86],"566":[3,1,44],"567":[5,6,58],"568":[7,6,41],"569":[8,6,35],"570":[6,6,32],"571":[5,6,18],"572":[2,1,27],"573":[3,2,22],"574":[3,2,1],"575":[3,5,97],"576":[1,7,89],"577":[3,7,23],"578":[3,5,91],"579":[3,7,23],"580":[3,5,19],"581":[1,7,10],"582":[3,7,23],"583":[3,5,24],"584":[1,7,9],"585":[3,7,23],"586":[3,5,25],"587":[3,7,21],"588":[1,5,45],"589":[4,1,20],"590":[3,4,67],"591":[3,4,52],"592":[3,4,53],"593":[2,1,65],"594":[2,2,1],"595":[3,3,103],"596":[2,2,1],"597":[4,4,90],"598":[3,4,211],"599":[7,4,24],"600":[3,4,59],"601":[5,7,130],"602":[5,7,185],"603":[5,7,80],"604":[2,2,1],"605":[2,4,96],"606":[2,4,53],"607":[2,1,37],"608":[2,1,127],"609":[3,2,128],"610":[1,1,17],"611":[6,2,29],"612":[2,2,68],"613":[2,1,34],"614":[3,2,49],"615":[2,5,1],"616":[3,2,60],"617":[4,2,35],"618":[4,1,49],"619":[5,1,1],"620":[5,5,17],"621":[2,5,121],"622":[4,5,138],"623":[4,1,1],"624":[1,5,22],"625":[1,5,33],"626":[1,5,36],"627":[5,5,95],"628":[5,1,82],"629":[5,1,93],"630":[4,1,72],"631":[35,4,1],"632":[9,4,1],"633":[4,1,72],"634":[5,1,85],"635":[2,1,42]},"averageFieldLength":[3.0424528301886817,3.1383647798742165,50.73113207547165],"storedFields":{"0":{"href":"/support#support","html":"</header>\n<p>Sequence has a front line Support Team in multiple timezones to tackle problems that arise with the Stack, as well as answer any question for new projects in order to integrate web3 experiences in games and applications.</p>\n<p>If one of the members of the team does not know the answer, we&#x27;ll further investigate (with backup support from the Sequence dev team) to get to the bottom of your troubles.</p>\n<p><a href=\"https://go.crisp.chat/chat/embed/?website_id=9ef4395b-6bb1-4645-8e02-6071d89290a1\">Start talking to support today</a></p>","isPage":true,"text":"\nSequence has a front line Support Team in multiple timezones to tackle problems that arise with the Stack, as well as answer any question for new projects in order to integrate web3 experiences in games and applications.\nIf one of the members of the team does not know the answer, we&#x27;ll further investigate (with backup support from the Sequence dev team) to get to the bottom of your troubles.\nStart talking to support today","title":"Support","titles":[]},"1":{"href":"/api/metadata#metadata-api","html":"</header>\n<aside data-callout=\"note\"><p><a href=\"https://0xsequence.redoc.ly/tag/metadata\">Metadata API documentation and endpoints</a></p></aside>\n<p>The Sequence Metadata API service offers a simple and fast API to query, manage, and update collections, token &amp; NFT metadata for Ethereum-compatible chains.</p>\n<aside data-callout=\"info\"><p>Our Metadata service is managed through <a href=\"HTTPS://SEQUENCE.BUILD\">Sequence Builder Console</a> and requires a Service Account &amp; Token in order to call the corresponding endpoints. Please follow the <a href=\"/api/metadata#obtaining-a-service-account--token\">section</a> below prior to calling the endpoints</p></aside>\n","isPage":true,"text":"\nMetadata API documentation and endpoints\nThe Sequence Metadata API service offers a simple and fast API to query, manage, and update collections, token &amp; NFT metadata for Ethereum-compatible chains.\nOur Metadata service is managed through Sequence Builder Console and requires a Service Account &amp; Token in order to call the corresponding endpoints. Please follow the section below prior to calling the endpoints\n","title":"Metadata API","titles":[]},"2":{"href":"/api/metadata#obtaining-a-service-account--token","html":"\n<p>Since the Metadata API requires write access in order to update on-chain state, you will need to first obtain a Service Account &amp; Token to call this from your backend. Importantly, this is a secret key and should not be exposed publicly.</p>\n<ol>\n<li>Create a New Project using our <a href=\"https://sequence.build\">Builder</a>. Navigate to Settings &gt; API Keys &gt; Add Service Account.</li>\n<li>In the modal that pops up, click the dropdown for Permission and change to Write. After completed click Add.</li>\n<li>On the next screen, you will be given your Secret API Token. Copy the key and store it securely as it is not possible to see it again. Once this is done, click Confirm and you are all set to utilize the API.</li>\n</ol>\n<p>Keep in mind, in contrast to our Public API Access key - this Secret API Token should be stored securely and not be used publicly. You will pass this token as a normal JWT in the Request Headers as X-Access-Key</p>\n","isPage":false,"text":"\nSince the Metadata API requires write access in order to update on-chain state, you will need to first obtain a Service Account &amp; Token to call this from your backend. Importantly, this is a secret key and should not be exposed publicly.\n\nCreate a New Project using our Builder. Navigate to Settings &gt; API Keys &gt; Add Service Account.\nIn the modal that pops up, click the dropdown for Permission and change to Write. After completed click Add.\nOn the next screen, you will be given your Secret API Token. Copy the key and store it securely as it is not possible to see it again. Once this is done, click Confirm and you are all set to utilize the API.\n\nKeep in mind, in contrast to our Public API Access key - this Secret API Token should be stored securely and not be used publicly. You will pass this token as a normal JWT in the Request Headers as X-Access-Key\n","title":"Obtaining a Service Account &amp; Token","titles":["Metadata API"]},"3":{"href":"/api/metadata#creating-collections-tokens-and-managing-metadata","html":"\n<p>The below steps walk through an end to end example utilizing our Metadata API in order to deploy an NFT collection, create tokens within that collection, and deploy asset metadata to such as an image to that token.</p>\n<ol>\n<li>\n<p><a href=\"https://0xsequence.redoc.ly/tag/metadata#operation/metadata-CreateCollection\">Call <code>CreateCollection</code> endpoint</a> - ensure you pass in the Secret Service Token created in the prior section.</p>\n</li>\n<li>\n<p><code>CreateToken</code> - use returned collectionId from previous request</p>\n</li>\n<li>\n<p><code>CreateAsset</code> - use collectionId and your tokenId</p>\n<ul>\n<li>set <code>metadataField</code> (assetType) to one of the following\n<ul>\n<li>image</li>\n<li>animation_url</li>\n<li>audio</li>\n<li>video</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Upload file with PUT method to this endpoint <code>PUT {metadata-server}/projects/{projectId}/collections/{collectionId}/tokens/{tokenId}/upload/{assetIdOrAssetType}</code>- use assetId that is returned in step 3 OR, you can pass assetType, such as &quot;image&quot;</p>\n</li>\n</ol>\n<ul>\n<li>For example you can upload to <a href=\"https://metadata.sequence.app/projects/486/collections/1/tokens/1/upload/image\">https://metadata.sequence.app/projects/486/collections/1/tokens/1/upload/image</a> which will find the asset of the type &quot;image&quot; for the token, and will upload there.\n<ul>\n<li>You can also pass in the assetId if you prefer, i.e., PUT <a href=\"https://metadata.sequence.app/projects/486/collections/1/assets/1/upload\">https://metadata.sequence.app/projects/486/collections/1/assets/1/upload</a></li>\n</ul>\n</li>\n<li>Asset types include: image, audio, video, animation_url</li>\n</ul>\n<ol start=\"5\">\n<li>\n<p>Asset is now privately accessible with JWT token at <code>GET {metadata-server}/projects/{projectID}/collections/{collectionID}/tokens/{tokenID}/asset/{assetType}</code></p>\n<ul>\n<li>for example: <a href=\"https://metadata.sequence.app/projects/486/collections/1/tokens/1/asset/image\">https://metadata.sequence.app/projects/486/collections/1/tokens/1/asset/image</a></li>\n</ul>\n</li>\n<li>\n<p><code>PublishCollection</code> -- this sets the collection to be accessible by the public</p>\n</li>\n<li>\n<p><code>GetCollection</code> -- will return both baseURIs for contract and token level metadata.</p>\n</li>\n</ol>\n<ul>\n<li>Collection-level metadata (aka contract-level) metadata: <a href=\"https://metadata.sequence.app/projects/486/collections/1\">https://metadata.sequence.app/projects/486/collections/1</a> or <a href=\"https://metadata.sequence.app/projects/486/collections/1.json\">https://metadata.sequence.app/projects/486/collections/1.json</a></li>\n<li>Token-level metadata: <a href=\"https://metadata.sequence.app/projects/486/collections/1/tokens/%7BtokenId%7D\">https://metadata.sequence.app/projects/486/collections/1/tokens/{tokenId}</a>\n<ul>\n<li>ie. <a href=\"https://metadata.sequence.app/projects/486/collections/1/tokens/1\">https://metadata.sequence.app/projects/486/collections/1/tokens/1</a> or <a href=\"https://metadata.sequence.app/projects/486/collections/1/tokens/1.json\">https://metadata.sequence.app/projects/486/collections/1/tokens/1.json</a></li>\n</ul>\n</li>\n</ul>\n<ol start=\"8\">\n<li>Finally, to use the metadata in your contract, simply update your contract&#x27;s metadata base URIs to the values above, and everything will simply work.</li>\n</ol>\n<p>Below is an architecture demonstrating the steps above of how an NFT collection (ERC721 or ERC1155) is created and managed.\n<img src=\"/img/metadata/metadata_api_architecture.png\" alt=\"Sequence Support\"/></p>\n","isPage":false,"text":"\nThe below steps walk through an end to end example utilizing our Metadata API in order to deploy an NFT collection, create tokens within that collection, and deploy asset metadata to such as an image to that token.\n\n\nCall CreateCollection endpoint - ensure you pass in the Secret Service Token created in the prior section.\n\n\nCreateToken - use returned collectionId from previous request\n\n\nCreateAsset - use collectionId and your tokenId\n\nset metadataField (assetType) to one of the following\n\nimage\nanimation_url\naudio\nvideo\n\n\n\n\n\nUpload file with PUT method to this endpoint PUT {metadata-server}/projects/{projectId}/collections/{collectionId}/tokens/{tokenId}/upload/{assetIdOrAssetType}- use assetId that is returned in step 3 OR, you can pass assetType, such as &quot;image&quot;\n\n\n\nFor example you can upload to https://metadata.sequence.app/projects/486/collections/1/tokens/1/upload/image which will find the asset of the type &quot;image&quot; for the token, and will upload there.\n\nYou can also pass in the assetId if you prefer, i.e., PUT https://metadata.sequence.app/projects/486/collections/1/assets/1/upload\n\n\nAsset types include: image, audio, video, animation_url\n\n\n\nAsset is now privately accessible with JWT token at GET {metadata-server}/projects/{projectID}/collections/{collectionID}/tokens/{tokenID}/asset/{assetType}\n\nfor example: https://metadata.sequence.app/projects/486/collections/1/tokens/1/asset/image\n\n\n\nPublishCollection -- this sets the collection to be accessible by the public\n\n\nGetCollection -- will return both baseURIs for contract and token level metadata.\n\n\n\nCollection-level metadata (aka contract-level) metadata: https://metadata.sequence.app/projects/486/collections/1 or https://metadata.sequence.app/projects/486/collections/1.json\nToken-level metadata: https://metadata.sequence.app/projects/486/collections/1/tokens/{tokenId}\n\nie. https://metadata.sequence.app/projects/486/collections/1/tokens/1 or https://metadata.sequence.app/projects/486/collections/1/tokens/1.json\n\n\n\n\nFinally, to use the metadata in your contract, simply update your contract&#x27;s metadata base URIs to the values above, and everything will simply work.\n\nBelow is an architecture demonstrating the steps above of how an NFT collection (ERC721 or ERC1155) is created and managed.\n\n","title":"Creating Collections, Tokens, and Managing Metadata","titles":["Metadata API"]},"4":{"href":"/api/metadata#pricing--usage","html":"\n<p>The Sequence Metadata is available for free with moderate request limits, but if your project requires higher limits, please contact the <a href=\"https://sequence.xyz\">Sequence</a> team.</p>","isPage":false,"text":"\nThe Sequence Metadata is available for free with moderate request limits, but if your project requires higher limits, please contact the Sequence team.","title":"Pricing &amp; Usage","titles":["Metadata API"]},"5":{"href":"/api/node-gateway#node-gateway","html":"</header>\n<p>Sequence Node gateway infrastructure enables you to have fail-over resilient RPC endpoints that can scale with your application.</p>\n<p>By using our infrastructure, you save money for not having to deploy your own stack, and benefits from the feature of aggregating multiple public RPC providers into a single endpoint for use.</p>\n","isPage":true,"text":"\nSequence Node gateway infrastructure enables you to have fail-over resilient RPC endpoints that can scale with your application.\nBy using our infrastructure, you save money for not having to deploy your own stack, and benefits from the feature of aggregating multiple public RPC providers into a single endpoint for use.\n","title":"Node Gateway","titles":[]},"6":{"href":"/api/node-gateway#give-it-a-try","html":"\n<p>Install <code>ethers</code> with <code>pnpm install ethers</code> or <code>yarn add ethers</code></p>\n<p>Ensure to choose a network handle from our <a href=\"/solutions/technical-references/chain-support\">network options</a></p>\n<p>And acquire a <a href=\"https://sequence.build\">Sequence Builder access key</a> to authenticate your connection and append to the endpoint</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Import the ethers library</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { ethers } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;ethers&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Function to create a provider and fetch the latest block</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getLatestBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Replace the following URL with your actual RPC endpoint</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> rpcUrl</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;https://nodes.sequence.app/&lt;chain_handle&gt;/&lt;project_access_key&gt;&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Create a provider using the RPC URL</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> provider</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.providers.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">JsonRpcProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(rpcUrl);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Fetch the latest block</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> latestBlock</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> provider.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;latest&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Latest Block:&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, latestBlock);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Call the function to get the latest block</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getLatestBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(console.error);</span></span></code></pre>","isPage":false,"text":"\nInstall ethers with pnpm install ethers or yarn add ethers\nEnsure to choose a network handle from our network options\nAnd acquire a Sequence Builder access key to authenticate your connection and append to the endpoint\n// Import the ethers library\nimport { ethers } from &quot;ethers&quot;;\n \n// Function to create a provider and fetch the latest block\nasync function getLatestBlock() {\n  // Replace the following URL with your actual RPC endpoint\n  const rpcUrl =\n    &quot;https://nodes.sequence.app/&lt;chain_handle&gt;/&lt;project_access_key&gt;&quot;;\n \n  // Create a provider using the RPC URL\n  const provider = new ethers.providers.JsonRpcProvider(rpcUrl);\n \n  // Fetch the latest block\n  const latestBlock = await provider.getBlock(&quot;latest&quot;);\n \n  console.log(&quot;Latest Block:&quot;, latestBlock);\n}\n \n// Call the function to get the latest block\ngetLatestBlock().catch(console.error);","title":"Give it a try","titles":["Node Gateway"]},"7":{"href":"/solutions/monetization-overview#monetization-overview","html":"</header>\n<p>Sequence provides a suite of options to more effectively monetize your blockchain-enabled game like our various <strong>Marketplace</strong> options and <strong>Sequence Pay</strong> - the ultimate toolkit for onboarding users to your game from fiat or crypto.</p>\n","isPage":true,"text":"\nSequence provides a suite of options to more effectively monetize your blockchain-enabled game like our various Marketplace options and Sequence Pay - the ultimate toolkit for onboarding users to your game from fiat or crypto.\n","title":"Monetization Overview","titles":[]},"8":{"href":"/solutions/monetization-overview#sequence-marketplaces","html":"\n<p><strong>White-Label Marketplace</strong>:\nStart your browser-based marketplace in minutes, even if you have no coding experience. Customize the marketplace with your branding - choose your fonts, colors, and logos. Our white-label marketplace is perfect for those looking to save time on development, focus on a web-based user experience, and begin selling assets.</p>\n<p><strong>Marketplace APIs</strong>:\nTake full control and customize your marketplace with our Marketplace APIs. Build your own UI while we handle the complexity of blockchain and backend orchestration. Use our APIs in game engines like Unity or Unreal to create an in-game marketplace or store. Alternatively, integrate them into a browser-based experience - the choice is yours.</p>\n<p>Combine these options as you see fit! Start with a white-label marketplace to sell your initial game assets while developing your game. Then, use our marketplace APIs to showcase and offer these assets in your in-game store. Provide a seamless user experience by keeping everything within the game environment.</p>\n","isPage":false,"text":"\nWhite-Label Marketplace:\nStart your browser-based marketplace in minutes, even if you have no coding experience. Customize the marketplace with your branding - choose your fonts, colors, and logos. Our white-label marketplace is perfect for those looking to save time on development, focus on a web-based user experience, and begin selling assets.\nMarketplace APIs:\nTake full control and customize your marketplace with our Marketplace APIs. Build your own UI while we handle the complexity of blockchain and backend orchestration. Use our APIs in game engines like Unity or Unreal to create an in-game marketplace or store. Alternatively, integrate them into a browser-based experience - the choice is yours.\nCombine these options as you see fit! Start with a white-label marketplace to sell your initial game assets while developing your game. Then, use our marketplace APIs to showcase and offer these assets in your in-game store. Provide a seamless user experience by keeping everything within the game environment.\n","title":"Sequence Marketplaces","titles":["Monetization Overview"]},"9":{"href":"/solutions/monetization-overview#getting-started","html":"\n<p>To get started with the white-label marketplace, check out our <a href=\"/solutions/marketplaces/white-label-marketplace\">page</a> for more information and a helpful video to walk you through the process.</p>\n<p>Additionally, our quickstart page for the <a href=\"/solutions/marketplaces/orderbook/quickstart\">Marketplace APIs</a> has a variety of templates, demos, and common integration patterns needed to get you started. We also provide a step by step guide of leveraging the APIs for <a href=\"/guides/custom-marketplace\">building a custom marketplace</a>.</p>\n","isPage":false,"text":"\nTo get started with the white-label marketplace, check out our page for more information and a helpful video to walk you through the process.\nAdditionally, our quickstart page for the Marketplace APIs has a variety of templates, demos, and common integration patterns needed to get you started. We also provide a step by step guide of leveraging the APIs for building a custom marketplace.\n","title":"Getting Started","titles":["Monetization Overview","Sequence Marketplaces"]},"10":{"href":"/solutions/monetization-overview#sequence-pay","html":"\n<p>Sequence Pay enables you to easily onboard your users from fiat or crypto to your game or marketplace via <a href=\"/solutions/payments/onramps/fiat-on-ramps\">Fiat On-ramps</a> as well as direct purchase of NFTs through <a href=\"/solutions/wallets/sequence-kit/checkout\">NFT Checkout</a>.</p>","isPage":false,"text":"\nSequence Pay enables you to easily onboard your users from fiat or crypto to your game or marketplace via Fiat On-ramps as well as direct purchase of NFTs through NFT Checkout.","title":"Sequence Pay","titles":["Monetization Overview"]},"11":{"href":"/support/restricted-regions#sequence-list-of-restricted-regions","html":"</header>\n<p>In order to comply with regulations and policies mandated by Canada, USA and other global jurisdictions, Sequence will not be accessible in the following regions. Please be aware that external third-party money service providers that can help you on-ramp with crypto, at their own discretion, may deny funding to certain geographical locations.</p>\n","isPage":true,"text":"\nIn order to comply with regulations and policies mandated by Canada, USA and other global jurisdictions, Sequence will not be accessible in the following regions. Please be aware that external third-party money service providers that can help you on-ramp with crypto, at their own discretion, may deny funding to certain geographical locations.\n","title":"Sequence list of Restricted Regions","titles":[]},"12":{"href":"/support/restricted-regions#sequence-cannot-be-accessed-from-the-following-regions","html":"\n<ul>\n<li>Afghanistan</li>\n<li>Algeria</li>\n<li>Bangladesh</li>\n<li>Belarus</li>\n<li>Burma (Myanmar)</li>\n<li>Central African Republic</li>\n<li>China</li>\n<li>Cuba</li>\n<li>Democratic Republic of Congo</li>\n<li>Egypt</li>\n<li>Ethiopia</li>\n<li>Haiti</li>\n<li>Iran</li>\n<li>Iraq</li>\n<li>Lebanon</li>\n<li>Libya</li>\n<li>Macao</li>\n<li>Mali</li>\n<li>Moldova</li>\n<li>Morocco</li>\n<li>Nepal</li>\n<li>Nicaragua</li>\n<li>North Korea</li>\n<li>Qatar</li>\n<li>Russian Federation</li>\n<li>Somalia</li>\n<li>South Sudan</li>\n<li>Sri Lanka</li>\n<li>Sudan</li>\n<li>Syria</li>\n<li>Tunisia</li>\n<li>Ukraine</li>\n<li>Venezuela</li>\n<li>Yemen</li>\n<li>Zimbabwe</li>\n</ul>\n<p>Please note that this list is subject to change as regulations &amp; policy decisions in the affected jurisdictions evolve. We will continue to look for opportunities to bring Sequence to as many people as possible across the globe. Please refer to our Terms of Service for more information.</p>","isPage":false,"text":"\n\nAfghanistan\nAlgeria\nBangladesh\nBelarus\nBurma (Myanmar)\nCentral African Republic\nChina\nCuba\nDemocratic Republic of Congo\nEgypt\nEthiopia\nHaiti\nIran\nIraq\nLebanon\nLibya\nMacao\nMali\nMoldova\nMorocco\nNepal\nNicaragua\nNorth Korea\nQatar\nRussian Federation\nSomalia\nSouth Sudan\nSri Lanka\nSudan\nSyria\nTunisia\nUkraine\nVenezuela\nYemen\nZimbabwe\n\nPlease note that this list is subject to change as regulations &amp; policy decisions in the affected jurisdictions evolve. We will continue to look for opportunities to bring Sequence to as many people as possible across the globe. Please refer to our Terms of Service for more information.","title":"Sequence cannot be accessed from the following regions:","titles":["Sequence list of Restricted Regions"]},"13":{"href":"/api/analytics/overview#analytics","html":"</header>\n<p>The Sequence Analytics API is ideal for measuring your progress, seeing how your game or application grows, tracking usage of Sequence solutions, or for ingesting into your own data pipeline for further analysis.</p>\n<p>By leveraging this API, you can gain deep insights into user behavior so whether you&#x27;re aiming to enhance user engagement, optimize performance, or simply understand usage patterns, the Sequence Analytics API provides the robust analytics capabilities needed to drive success in your game.</p>\n","isPage":true,"text":"\nThe Sequence Analytics API is ideal for measuring your progress, seeing how your game or application grows, tracking usage of Sequence solutions, or for ingesting into your own data pipeline for further analysis.\nBy leveraging this API, you can gain deep insights into user behavior so whether you&#x27;re aiming to enhance user engagement, optimize performance, or simply understand usage patterns, the Sequence Analytics API provides the robust analytics capabilities needed to drive success in your game.\n","title":"Analytics","titles":[]},"14":{"href":"/api/analytics/overview#supported-networks--endpoints","html":"\n<p>You can see the <a href=\"/solutions/technical-references/chain-support\">full list of supported networks here</a>.</p>\n<aside data-callout=\"note\"><p><a href=\"https://0xsequence.redoc.ly/tag/analytics\">Analytics API documentation and testing</a></p></aside>\n","isPage":false,"text":"\nYou can see the full list of supported networks here.\nAnalytics API documentation and testing\n","title":"Supported Networks &amp; Endpoints","titles":["Analytics"]},"15":{"href":"/api/analytics/overview#getting-started","html":"\n","isPage":false,"text":"\n","title":"Getting Started","titles":["Analytics"]},"16":{"href":"/api/analytics/overview#obtaining-a-service-account--token","html":"\n<p>You will need to first obtain a Service Account &amp; Token to call this from your backend. Importantly, this is a secret key and should not be exposed publicly.</p>\n<ol>\n<li>Create a New Project using our <a href=\"https://sequence.build\">Builder</a>. Navigate to Settings &gt; API Keys &gt; Add Service Account.</li>\n<li>In the modal that pops up, click the dropdown for Permission and change to Write. After completed click Add.</li>\n<li>On the next screen, you will be given your Secret API Token. Copy the key and store it securely as it is not possible to see it again. Once this is done, click Confirm and you are all set to utilize the API.</li>\n</ol>\n<p>Keep in mind, in contrast to our Public API Access key - this Secret API Token should be stored securely and not be used publicly. You will pass this token as a normal JWT in the Request Headers as X-Access-Key</p>\n","isPage":false,"text":"\nYou will need to first obtain a Service Account &amp; Token to call this from your backend. Importantly, this is a secret key and should not be exposed publicly.\n\nCreate a New Project using our Builder. Navigate to Settings &gt; API Keys &gt; Add Service Account.\nIn the modal that pops up, click the dropdown for Permission and change to Write. After completed click Add.\nOn the next screen, you will be given your Secret API Token. Copy the key and store it securely as it is not possible to see it again. Once this is done, click Confirm and you are all set to utilize the API.\n\nKeep in mind, in contrast to our Public API Access key - this Secret API Token should be stored securely and not be used publicly. You will pass this token as a normal JWT in the Request Headers as X-Access-Key\n","title":"Obtaining a Service Account &amp; Token","titles":["Analytics","Getting Started"]},"17":{"href":"/api/analytics/overview#send-a-request","html":"\n<p>Now you are ready to send a request, make sure to change the below the SECRET_API_ACCESS_KEY below with your access key as well as the PROJECT_ID which can be found in the URL as a set of integers while in your project on <a href=\"https://sequence.build\">sequence.build</a></p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"cURL\" data-lang=\"sh\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">curl</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;https://api.sequence.build/rpc/Builder/WalletsTotal&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;accept: */*&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;authorization: BEARER &lt;SECRET_API_ACCESS_KEY&gt;&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;content-type: application/json&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  --data-raw</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;{&quot;filter&quot;:{&quot;projectId&quot;:&lt;PROJECT_ID&gt;,&quot;startDate&quot;:&quot;2024-04-23&quot;,&quot;endDate&quot;:&quot;2024-05-23&quot;}}&#x27;</span></span></code></pre>\n","isPage":false,"text":"\nNow you are ready to send a request, make sure to change the below the SECRET_API_ACCESS_KEY below with your access key as well as the PROJECT_ID which can be found in the URL as a set of integers while in your project on sequence.build\ncurl &#x27;https://api.sequence.build/rpc/Builder/WalletsTotal&#x27; \\\n  -H &#x27;accept: */*&#x27; \\\n  -H &#x27;authorization: BEARER &lt;SECRET_API_ACCESS_KEY&gt;&#x27; \\\n  -H &#x27;content-type: application/json&#x27; \\\n  --data-raw &#x27;{&quot;filter&quot;:{&quot;projectId&quot;:&lt;PROJECT_ID&gt;,&quot;startDate&quot;:&quot;2024-04-23&quot;,&quot;endDate&quot;:&quot;2024-05-23&quot;}}&#x27;\n","title":"Send a Request","titles":["Analytics","Getting Started"]},"18":{"href":"/api/analytics/overview#more-examples","html":"\n<p>Now that you&#x27;ve gotten started - try out a few of our other examples:</p>\n<ul>\n<li><a href=\"/api/analytics/examples/wallets#fetch-wallets-for-a-time-interval-for-a-project-id\">Fetch wallets within a time interval</a></li>\n<li><a href=\"/api/analytics/examples/wallets#fetch-transactions-by-wallets\">Fetch transactions by wallets</a></li>\n<li><a href=\"/api/analytics/examples/wallets#fetch-wallets-by-device\">Fetch wallets by device</a></li>\n<li><a href=\"/api/analytics/examples/marketplace#fetch-transactions-on-your-marketplace\">Fetch transactions on your Sequence Marketplace</a></li>\n</ul>","isPage":false,"text":"\nNow that you&#x27;ve gotten started - try out a few of our other examples:\n\nFetch wallets within a time interval\nFetch transactions by wallets\nFetch wallets by device\nFetch transactions on your Sequence Marketplace\n","title":"More Examples","titles":["Analytics","Getting Started"]},"19":{"href":"/api/indexer/installation#indexer-installation","html":"</header>\n<aside data-callout=\"warning\"><strong data-callout-title=\"true\">INTRODUCING THE SEQUENCE BUILDER - </strong><p>Our <strong>Indexer</strong> service is managed through <strong><a href=\"https://sequence.build\">Sequence Builder</a></strong>. Sign up to grab your API access key.</p><p><a href=\"https://sequence.build\">Get started with the <strong>Sequence Builder</strong> Free Plan today!</a></p></aside>\n<p>Sequence Indexer is a simple API to query any blockchain token and NFT data. Below are instructions\non how to integrate the Sequence Indexer API into your Webapps, Games, and backends. In case you missed\nit, please also see the <a href=\"/api/indexer/overview\">Indexer Overview</a>.</p>\n","isPage":true,"text":"\nINTRODUCING THE SEQUENCE BUILDER - Our Indexer service is managed through Sequence Builder. Sign up to grab your API access key.Get started with the Sequence Builder Free Plan today!\nSequence Indexer is a simple API to query any blockchain token and NFT data. Below are instructions\non how to integrate the Sequence Indexer API into your Webapps, Games, and backends. In case you missed\nit, please also see the Indexer Overview.\n","title":"Indexer Installation","titles":[]},"20":{"href":"/api/indexer/installation#installation","html":"\n<p>The Sequence Indexer is built as a HTTP API with RPC endpoints that you may call directly\nfrom your Webapp, Game or server backend. Below you&#x27;ll find information on the RPC endpoint\nschema with sample curl commands, along with examples in both Javascript/Typescript and Go.</p>\n<p>We provide SDKs for <a href=\"https://github.com/0xsequence/sequence.js\">Web / node.js</a> and <a href=\"https://github.com/0xsequence/go-sequence\">Go</a>.\nOr if you&#x27;d like to integrate the Indexer with another language target, simply follow the API reference below\nto implement the HTTP requests. Additionally, read the Typescript client source code as <a href=\"https://github.com/0xsequence/sequence.js/blob/master/packages/indexer/src/indexer.gen.ts\">reference\nimplementation of the Indexer API client</a> as well.</p>\n<aside data-callout=\"info\"><p>Sequence Indexer offers the same API across a variety of EVM networks. Make sure to check the Indexer endpoints\nand use the corresponding host for your dapp/game. For example, on Ethereum mainnet the Sequence Indexer endpoint is\n<a href=\"https://mainnet-indexer.sequence.app\">https://mainnet-indexer.sequence.app</a> and Polygon is <a href=\"https://polygon-indexer.sequence.app\">https://polygon-indexer.sequence.app</a>.</p><p>🌄 <a href=\"/solutions/technical-references/chain-support\">View the full list of supported networks and Indexer endpoints here</a></p></aside>\n<br/>\n","isPage":false,"text":"\nThe Sequence Indexer is built as a HTTP API with RPC endpoints that you may call directly\nfrom your Webapp, Game or server backend. Below you&#x27;ll find information on the RPC endpoint\nschema with sample curl commands, along with examples in both Javascript/Typescript and Go.\nWe provide SDKs for Web / node.js and Go.\nOr if you&#x27;d like to integrate the Indexer with another language target, simply follow the API reference below\nto implement the HTTP requests. Additionally, read the Typescript client source code as reference\nimplementation of the Indexer API client as well.\nSequence Indexer offers the same API across a variety of EVM networks. Make sure to check the Indexer endpoints\nand use the corresponding host for your dapp/game. For example, on Ethereum mainnet the Sequence Indexer endpoint is\nhttps://mainnet-indexer.sequence.app and Polygon is https://polygon-indexer.sequence.app.🌄 View the full list of supported networks and Indexer endpoints here\n\n","title":"Installation","titles":["Indexer Installation"]},"21":{"href":"/api/indexer/installation#web--nodejs-installation","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 0xsequence</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ethers</span></span></code></pre>\n<p>or</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">pnpm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 0xsequence</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ethers</span></span></code></pre>\n<p>or</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">yarn</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> add</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 0xsequence</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ethers</span></span></code></pre>\n<aside data-callout=\"info\"><p>This code requires an API Access Key from <a href=\"https://sequence.build\">Sequence Builder</a>.</p></aside>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { SequenceIndexer } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/indexer&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// see https://docs.sequence.xyz/solutions/technical-references/chain-support for list of</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// indexer hosts for the chain you&#x27;d like to query</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> indexer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SequenceIndexer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;https://mainnet-indexer.sequence.app&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// see examples below for the kinds of queries you can make</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tokenBalances</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> indexer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getTokenBalances</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n<p><strong>NOTE:</strong> if you&#x27;re using <code>@0xsequence/indexer</code> from node.js, we recommend using node v18.x or newer.</p>\n<br/>\n","isPage":false,"text":"\nnpm install 0xsequence ethers\nor\npnpm install 0xsequence ethers\nor\nyarn add 0xsequence ethers\nThis code requires an API Access Key from Sequence Builder.\nimport { SequenceIndexer } from &#x27;@0xsequence/indexer&#x27;\n \n// see https://docs.sequence.xyz/solutions/technical-references/chain-support for list of\n// indexer hosts for the chain you&#x27;d like to query\nconst indexer = new SequenceIndexer(&#x27;https://mainnet-indexer.sequence.app&#x27;, &#x27;AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&#x27;)\n \n// see examples below for the kinds of queries you can make\nconst tokenBalances = await indexer.getTokenBalances(...)\nNOTE: if you&#x27;re using @0xsequence/indexer from node.js, we recommend using node v18.x or newer.\n\n","title":"Web / node.js Installation","titles":["Indexer Installation","Installation"]},"22":{"href":"/api/indexer/installation#go-installation","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">go</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> get</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -u</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> github.com/0xsequence/go-sequence@latest</span></span></code></pre>\n<p>then in your app,</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Go\" data-lang=\"go\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t&quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">github.com/0xsequence/go-sequence/indexer</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// see https://docs.sequence.xyz/solutions/technical-references/chain-support for list of</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// indexer hosts for the chain you&#x27;d like to query</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">seqIndexer </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> indexer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewIndexer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://polygon-indexer.sequence.app&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// see examples below for the kinds of queries you can make</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">accountAddress </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;ACCOUNT_ADDRESS&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">includeMetadata </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> true</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">metadataOptions </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> indexer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MetadataOptions</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tVerifiedOnly: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">_, tokenBalances, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> seqIndexer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetTokenBalances</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(context.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Background</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">accountAddress, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">includeMetadata, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">metadataOptions, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n<br/>\n","isPage":false,"text":"\ngo get -u github.com/0xsequence/go-sequence@latest\nthen in your app,\nimport (\n\t&quot;github.com/0xsequence/go-sequence/indexer&quot;\n)\n \n// see https://docs.sequence.xyz/solutions/technical-references/chain-support for list of\n// indexer hosts for the chain you&#x27;d like to query\nseqIndexer := indexer.NewIndexer(&quot;https://polygon-indexer.sequence.app&quot;, &quot;AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&quot;)\n \n// see examples below for the kinds of queries you can make\naccountAddress := &quot;ACCOUNT_ADDRESS&quot;\nincludeMetadata := true\nmetadataOptions := indexer.MetadataOptions{\n\tVerifiedOnly: true,\n}\n \n_, tokenBalances, err := seqIndexer.GetTokenBalances(context.Background(), &amp;accountAddress, nil, nil, &amp;includeMetadata, &amp;metadataOptions, nil, nil)\n\n","title":"Go Installation","titles":["Indexer Installation","Installation"]},"23":{"href":"/api/indexer/installation#unity-or-unreal-installation","html":"\n<p>The Sequence Indexer is integrated directly inside of the respective <a href=\"/\">Sequence Unity</a> and <a href=\"/\">Sequence Unreal</a> SDKs.</p>\n<br/>","isPage":false,"text":"\nThe Sequence Indexer is integrated directly inside of the respective Sequence Unity and Sequence Unreal SDKs.\n","title":"Unity or Unreal Installation","titles":["Indexer Installation","Installation"]},"24":{"href":"/api/indexer/metadata-tips#metadata-tips--notes-on-spam","html":"</header>\n<p>The Sequence Indexer and Sequence Metadata services will pick up everything and anything\nthat is published on a blockchain. Our services are designed to provide data in real-time\nas blocks are mined, and adhere to all popular ERC20, ERC721 and ERC1155 metadata\nstandards so things <em>just work</em>.</p>\n<p>This is very helpful for your applications to be able to have access to the complete set of data\non-chain, but it also means it will include spam tokens when querying with default settings.</p>\n<p>To combat spam, we introduced <code>metadataOptions</code> arguments which can be passed to Indexer RPC\ncalls to control the results returned.</p>\n<p>The Sequence Metadata service keeps track of contracts which are &quot;verified&quot; by checking popular\nsources like Coingecko, OpenSea, Sequence Builder (<a href=\"https://sequence.build\">https://sequence.build</a>) and the Sequence Token\nDirectory (<a href=\"https://github.com/0xsequence/token-directory\">https://github.com/0xsequence/token-directory</a>). By calling the Indexer RPC methods with\n<code>&quot;metadataOptions&quot;: { &quot;verifiedOnly&quot;: true }</code>, any contract address which has not been verified, will\nbe omitted from the results. We recommend using this option all the time, but, the downside is\nif your project&#x27;s contracts are unverified, then they will also be omitted from the results. To help\nwith this, your options are to get verified with one of the sources above, or in your RPC calls to pass\n<code>&quot;metadataOptions&quot;: { &quot;verifiedOnly&quot;: true, &quot;includeContracts&quot;: [&quot;0x631998e91476DA5B870D741192fc5Cbc55F5a52E&quot;, &quot;0x8bb759bb68995343ff1e9d57ac85ff5c5fb79334&quot;] }</code>\nas an example.</p>","isPage":true,"text":"\nThe Sequence Indexer and Sequence Metadata services will pick up everything and anything\nthat is published on a blockchain. Our services are designed to provide data in real-time\nas blocks are mined, and adhere to all popular ERC20, ERC721 and ERC1155 metadata\nstandards so things just work.\nThis is very helpful for your applications to be able to have access to the complete set of data\non-chain, but it also means it will include spam tokens when querying with default settings.\nTo combat spam, we introduced metadataOptions arguments which can be passed to Indexer RPC\ncalls to control the results returned.\nThe Sequence Metadata service keeps track of contracts which are &quot;verified&quot; by checking popular\nsources like Coingecko, OpenSea, Sequence Builder (https://sequence.build) and the Sequence Token\nDirectory (https://github.com/0xsequence/token-directory). By calling the Indexer RPC methods with\n&quot;metadataOptions&quot;: { &quot;verifiedOnly&quot;: true }, any contract address which has not been verified, will\nbe omitted from the results. We recommend using this option all the time, but, the downside is\nif your project&#x27;s contracts are unverified, then they will also be omitted from the results. To help\nwith this, your options are to get verified with one of the sources above, or in your RPC calls to pass\n&quot;metadataOptions&quot;: { &quot;verifiedOnly&quot;: true, &quot;includeContracts&quot;: [&quot;0x631998e91476DA5B870D741192fc5Cbc55F5a52E&quot;, &quot;0x8bb759bb68995343ff1e9d57ac85ff5c5fb79334&quot;] }\nas an example.","title":"Metadata Tips &amp; Notes on Spam","titles":[]},"25":{"href":"/api/indexer/overview#indexer","html":"</header>\n<aside data-callout=\"note\"><p><a href=\"https://0xsequence.redoc.ly/tag/indexer\">Indexer API documentation and testing</a></p></aside>\n<p>The Sequence Indexer is a modular web3 service that makes it easy to query blockchain token and NFT data from Ethereum-compatible networks. The Indexer automatically indexes every ERC20, ERC721 and ERC1155 token from Ethereum-compatible chains.</p>\n<p>The Sequence Indexer is a powerful tool that can be used to build wallets, games, and dapps that\nneed to query on-chain data. It is designed to be fast, reliable, and easy to use. It leverages\nthe <a href=\"/api/node-gateway\">Sequence Node Gateway</a> which monitors nodes health, intelligently routes\nrequests to the available nodes and caches the most recent request responses. This means that Node\nproviders going down are no longer a problem, as the Node Gateway will automatically route to a\nhealthy provider making sure that Indexer always stays at the top of the chain with no downtime.</p>\n<p>The other benefit of using the Indexer is that it is using built in-house, next-generation, LSM-tree\nbased databases to store the data. It makes it super fast to query and index data. The data is\navailable in real-time with low latency. You can query it using a simple REST API or one of our SDKs.</p>\n<p>The Indexer API allows you to query all token balances, history and other information for\nall Ethereum compatible chains. In order to make it one go to place for all your token data needs,\nwe have included <a href=\"/api/metadata/overview\">Sequence Metadata</a> support for all tokens. This means that\nyou can easily render tokens in your apps, games, or wallets without the need to fetch metadata from\na separate API.</p>\n<p>In fact, the Sequence Wallet uses the Indexer behind the scenes so it can seamlessly\nrender all token information in any wallet. But of course, the Indexer is a modular piece\nof infrastructure, and you may use it directly from your dapp, game, or even from\na server.</p>\n<strong>Features:</strong>\n<ul>\n<li>Super-fast API to query all token balances, history, metadata and NFTs with multi-chain support</li>\n<li>Real-time indexing of ERC20, ERC721 and ERC1155 transactions across EVM-compatible chains</li>\n<li>Automatically detects all tokens on the chain, without the need for a contract registry</li>\n<li>Resilient to node failures and chain re-organizations</li>\n<li>Easily listen for specific events and transactions on-chain accurately with a simple API</li>\n<li>Built-in token / nft metadata support to easily render tokens in your apps / games</li>\n<li>High uptime and availability</li>\n</ul>\n","isPage":true,"text":"\nIndexer API documentation and testing\nThe Sequence Indexer is a modular web3 service that makes it easy to query blockchain token and NFT data from Ethereum-compatible networks. The Indexer automatically indexes every ERC20, ERC721 and ERC1155 token from Ethereum-compatible chains.\nThe Sequence Indexer is a powerful tool that can be used to build wallets, games, and dapps that\nneed to query on-chain data. It is designed to be fast, reliable, and easy to use. It leverages\nthe Sequence Node Gateway which monitors nodes health, intelligently routes\nrequests to the available nodes and caches the most recent request responses. This means that Node\nproviders going down are no longer a problem, as the Node Gateway will automatically route to a\nhealthy provider making sure that Indexer always stays at the top of the chain with no downtime.\nThe other benefit of using the Indexer is that it is using built in-house, next-generation, LSM-tree\nbased databases to store the data. It makes it super fast to query and index data. The data is\navailable in real-time with low latency. You can query it using a simple REST API or one of our SDKs.\nThe Indexer API allows you to query all token balances, history and other information for\nall Ethereum compatible chains. In order to make it one go to place for all your token data needs,\nwe have included Sequence Metadata support for all tokens. This means that\nyou can easily render tokens in your apps, games, or wallets without the need to fetch metadata from\na separate API.\nIn fact, the Sequence Wallet uses the Indexer behind the scenes so it can seamlessly\nrender all token information in any wallet. But of course, the Indexer is a modular piece\nof infrastructure, and you may use it directly from your dapp, game, or even from\na server.\nFeatures:\n\nSuper-fast API to query all token balances, history, metadata and NFTs with multi-chain support\nReal-time indexing of ERC20, ERC721 and ERC1155 transactions across EVM-compatible chains\nAutomatically detects all tokens on the chain, without the need for a contract registry\nResilient to node failures and chain re-organizations\nEasily listen for specific events and transactions on-chain accurately with a simple API\nBuilt-in token / nft metadata support to easily render tokens in your apps / games\nHigh uptime and availability\n\n","title":"Indexer","titles":[]},"26":{"href":"/api/indexer/overview#supported-networks--endpoints","html":"\n<p>You can see the <a href=\"/solutions/technical-references/chain-support\">full list of supported networks here</a>.</p>\n","isPage":false,"text":"\nYou can see the full list of supported networks here.\n","title":"Supported Networks &amp; Endpoints","titles":["Indexer"]},"27":{"href":"/api/indexer/overview#getting-started","html":"\n<p>Here are a few example queries you can make to a blockchain from your dapp, game, or wallet:</p>\n<ul>\n<li><a href=\"/api/indexer/examples/fetch-tokens\">Fetch all tokens &amp; NFTS in any wallet including all metadata</a></li>\n<li><a href=\"/api/indexer/examples/transaction-history\">Fetch the transaction history for any wallet address</a></li>\n<li><a href=\"/api/indexer/examples/unique-tokens\">Fetch all unique tokens in a particular ERC20/721/1155 contract, including total supplies</a></li>\n<li><a href=\"/api/indexer/examples/unique-tokens\">What is the total token supply of an ERC20 token? What is the total token supply of\nall the ERC1155 tokens in a particular contract?</a></li>\n<li><a href=\"/api/indexer/examples/transation-history-token-contract\">Fetch the transaction history for any token contract address</a></li>\n<li><a href=\"/api/indexer/examples/webhook-listener\">Listen to transactions for particular tokens/contracts/addresses via webhooks</a></li>\n</ul>","isPage":false,"text":"\nHere are a few example queries you can make to a blockchain from your dapp, game, or wallet:\n\nFetch all tokens &amp; NFTS in any wallet including all metadata\nFetch the transaction history for any wallet address\nFetch all unique tokens in a particular ERC20/721/1155 contract, including total supplies\nWhat is the total token supply of an ERC20 token? What is the total token supply of\nall the ERC1155 tokens in a particular contract?\nFetch the transaction history for any token contract address\nListen to transactions for particular tokens/contracts/addresses via webhooks\n","title":"Getting Started","titles":["Indexer"]},"28":{"href":"/api/marketplace/overview#marketplace-api","html":"</header>\n<aside data-callout=\"note\"><p><a href=\"https://0xsequence.redoc.ly/tag/marketplace\">Marketplace API documentation and testing</a></p></aside>\n<p>The Sequence Marketplace API service offers a simple and fast way to interact with sequence marketplace protocols. The API is designed to be easy to use and to have all the features you need to build a fully functional marketplace. Check out our various <a href=\"/api/marketplace/examples/orderbook-transactions\">examples</a> or our <a href=\"/guides/custom-marketplace\">custom marketplace guide</a> for an end to end walkthrough.</p>","isPage":true,"text":"\nMarketplace API documentation and testing\nThe Sequence Marketplace API service offers a simple and fast way to interact with sequence marketplace protocols. The API is designed to be easy to use and to have all the features you need to build a fully functional marketplace. Check out our various examples or our custom marketplace guide for an end to end walkthrough.","title":"Marketplace API","titles":[]},"29":{"href":"/api/metadata/contract-metadata#contract-metadata","html":"</header>\n<ul>\n<li><a href=\"/api/metadata/token-metadata#fetch-token-metadata-for-any-erc721-or-erc1155-contract\">Learn how to query contract-level metadata directly for any contract</a></li>\n<li><a href=\"/api/metadata/token-metadata#token-metadata-standards\">Learn about contract-level metadata for ERC20, ERC721 and ERC1155 tokens</a></li>\n</ul>\n<aside data-callout=\"info\"><strong data-callout-title=\"true\">PRO TIP: Sequence Indexer also returns token metadata</strong><p>When using the <a href=\"/api/indexer/overview\">Sequence Indexer</a>, pass <code>&quot;includeMetadata&quot;: true</code> to your request to\nquery token metadata for any ERC20, ERC721 or ERC1155 contract. See below how to fetch\ncontract-level metadata directly.</p></aside>\n","isPage":true,"text":"\n\nLearn how to query contract-level metadata directly for any contract\nLearn about contract-level metadata for ERC20, ERC721 and ERC1155 tokens\n\nPRO TIP: Sequence Indexer also returns token metadataWhen using the Sequence Indexer, pass &quot;includeMetadata&quot;: true to your request to\nquery token metadata for any ERC20, ERC721 or ERC1155 contract. See below how to fetch\ncontract-level metadata directly.\n","title":"Contract Metadata","titles":[]},"30":{"href":"/api/metadata/contract-metadata#fetch-contract-metadata-of-any-erc20-erc721-or-erc1155-contract-address","html":"\n<p><em>Sequence Metadata <code>GetContractInfoBatch</code> Method:</em></p>\n<ul>\n<li>Request: POST /rpc/Metadata/GetContractInfoBatch</li>\n<li>Content-Type: application/json</li>\n<li>Body (in JSON):\n<ul>\n<li><code>chainID</code> (string) -- the chain id, as a name or number (ie. &quot;1&quot; or &quot;mainnet&quot;, &quot;137&quot; or &quot;polygon&quot;, etc.)</li>\n<li><code>contractAddresses</code> (string of strings) -- array of contract addresses</li>\n</ul>\n</li>\n</ul>\n<br/>\n<strong>Example: <code>GetContractInfoBatch</code> of some contracts on Polygon using an <code>AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY</code></strong>\n<aside data-callout=\"info\"><p>This code requires an API Access Key from <a href=\"https://sequence.build\">Sequence Builder</a>.</p></aside>\n<div class=\"code-group\"><div data-title=\"cURL\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"cURL\" data-lang=\"shell\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">curl</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -X</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> POST</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;Content-Type: application/json&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;X-Access-Key: AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://metadata.sequence.app/rpc/Metadata/GetContractInfoBatch</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;{ &quot;chainID&quot;: &quot;polygon&quot;, &quot;contractAddresses&quot;: [&quot;0x631998e91476DA5B870D741192fc5Cbc55F5a52E&quot;, &quot;0x17b66009af459dc8ebf37acf8a8b355379be2fe5&quot;, &quot;0x2791bca1f2de4661ed88a30c99a7a9449aa84174&quot;, &quot;0x2953399124f0cbb46d2cbacd8a89cf0599974963&quot;, &quot;0x7227e371540cf7b8e512544ba6871472031f3335&quot;, &quot;0x7c0ebabfc394ec6d926e801fe0e69a1f15a7fe4d&quot;, &quot;0x8f3cf7ad23cd3cadbd9735aff958023239c6a063&quot;, &quot;0xa1c57f48f0deb89f569dfbe6e2b7f46d33606fd4&quot;] }&#x27;</span></span></code></pre></div><div data-title=\"Typescript\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Typescript\" data-lang=\"ts\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Works in both a Webapp (browser) or Node.js:</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { SequenceMetadata } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/metadata&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> metadataClient</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SequenceMetadata</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://metadata.sequence.app&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contractMetadata</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> metadataClient.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getContractInfoBatch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  chainID: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;polygon&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  contractAddresses: [</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &#x27;0x631998e91476DA5B870D741192fc5Cbc55F5a52E&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &#x27;0x17b66009af459dc8ebf37acf8a8b355379be2fe5&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &#x27;0x2791bca1f2de4661ed88a30c99a7a9449aa84174&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &#x27;0x2953399124f0cbb46d2cbacd8a89cf0599974963&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &#x27;0x7227e371540cf7b8e512544ba6871472031f3335&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &#x27;0x7c0ebabfc394ec6d926e801fe0e69a1f15a7fe4d&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &#x27;0x8f3cf7ad23cd3cadbd9735aff958023239c6a063&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &#x27;0xa1c57f48f0deb89f569dfbe6e2b7f46d33606fd4&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Contract info for above addresses:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, contractMetadata)</span></span></code></pre></div><div data-title=\"Go\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Go\" data-lang=\"go\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t&quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">github.com/0xsequence/go-sequence/metadata</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">seqMetadata </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> metadata.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewMetadata</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">contractInfo, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> seqMetadata.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetContractInfo</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(context.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Background</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;polygon&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x631998e91476DA5B870D741192fc5Cbc55F5a52E&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre></div><div data-title=\"Other\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Other\" data-lang=\"shell\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Please</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [contact </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">our</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> team]</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">/support</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">for</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> assistance</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> with</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> integrations</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> to</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> another</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> target.</span></span></code></pre></div></div>\n<br/>\n","isPage":false,"text":"\nSequence Metadata GetContractInfoBatch Method:\n\nRequest: POST /rpc/Metadata/GetContractInfoBatch\nContent-Type: application/json\nBody (in JSON):\n\nchainID (string) -- the chain id, as a name or number (ie. &quot;1&quot; or &quot;mainnet&quot;, &quot;137&quot; or &quot;polygon&quot;, etc.)\ncontractAddresses (string of strings) -- array of contract addresses\n\n\n\n\nExample: GetContractInfoBatch of some contracts on Polygon using an AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY\nThis code requires an API Access Key from Sequence Builder.\ncurl -X POST -H &quot;Content-Type: application/json&quot; -H &quot;X-Access-Key: AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&quot; https://metadata.sequence.app/rpc/Metadata/GetContractInfoBatch -d &#x27;{ &quot;chainID&quot;: &quot;polygon&quot;, &quot;contractAddresses&quot;: [&quot;0x631998e91476DA5B870D741192fc5Cbc55F5a52E&quot;, &quot;0x17b66009af459dc8ebf37acf8a8b355379be2fe5&quot;, &quot;0x2791bca1f2de4661ed88a30c99a7a9449aa84174&quot;, &quot;0x2953399124f0cbb46d2cbacd8a89cf0599974963&quot;, &quot;0x7227e371540cf7b8e512544ba6871472031f3335&quot;, &quot;0x7c0ebabfc394ec6d926e801fe0e69a1f15a7fe4d&quot;, &quot;0x8f3cf7ad23cd3cadbd9735aff958023239c6a063&quot;, &quot;0xa1c57f48f0deb89f569dfbe6e2b7f46d33606fd4&quot;] }&#x27;// Works in both a Webapp (browser) or Node.js:\nimport { SequenceMetadata } from &#x27;@0xsequence/metadata&#x27;\n \nconst metadataClient = new SequenceMetadata(&quot;https://metadata.sequence.app&quot;, &quot;AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&quot;)\n \nconst contractMetadata = await metadataClient.getContractInfoBatch({\n  chainID: &#x27;polygon&#x27;,\n  contractAddresses: [\n    &#x27;0x631998e91476DA5B870D741192fc5Cbc55F5a52E&#x27;,\n    &#x27;0x17b66009af459dc8ebf37acf8a8b355379be2fe5&#x27;,\n    &#x27;0x2791bca1f2de4661ed88a30c99a7a9449aa84174&#x27;,\n    &#x27;0x2953399124f0cbb46d2cbacd8a89cf0599974963&#x27;,\n    &#x27;0x7227e371540cf7b8e512544ba6871472031f3335&#x27;,\n    &#x27;0x7c0ebabfc394ec6d926e801fe0e69a1f15a7fe4d&#x27;,\n    &#x27;0x8f3cf7ad23cd3cadbd9735aff958023239c6a063&#x27;,\n    &#x27;0xa1c57f48f0deb89f569dfbe6e2b7f46d33606fd4&#x27;\n  ]\n})\n \nconsole.log(&#x27;Contract info for above addresses:&#x27;, contractMetadata)import (\n\t&quot;github.com/0xsequence/go-sequence/metadata&quot;\n)\n \nseqMetadata := metadata.NewMetadata(&quot;AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&quot;)\n \ncontractInfo, err := seqMetadata.GetContractInfo(context.Background(), &quot;polygon&quot;, &quot;0x631998e91476DA5B870D741192fc5Cbc55F5a52E&quot;)Please [contact our team](/support) for assistance with integrations to another target.\n\n","title":"Fetch contract metadata of any ERC20, ERC721 or ERC1155 contract address","titles":["Contract Metadata"]},"31":{"href":"/api/metadata/contract-metadata#contract-level-metadata-standards","html":"\n<p>Additionally, OpenSea added something called <code>contractURI</code> (<a href=\"https://docs.opensea.io/docs/contract-level-metadata\">https://docs.opensea.io/docs/contract-level-metadata</a>).</p>","isPage":false,"text":"\nAdditionally, OpenSea added something called contractURI (https://docs.opensea.io/docs/contract-level-metadata).","title":"Contract-level Metadata Standards","titles":["Contract Metadata"]},"32":{"href":"/api/metadata/overview#metadata","html":"</header>\n<p>The Sequence Metadata API service offers a simple and fast API to query token &amp; NFT metadata\nfor Ethereum-compatible chains.</p>\n<p>To learn how to use the Sequence Metadata service, please read:</p>\n<ul>\n<li><a href=\"/api/metadata/token-metadata\">Token metadata API &amp; standards</a></li>\n<li><a href=\"/api/metadata/contract-metadata\">Contract-level metadata API &amp; standards</a></li>\n<li><a href=\"/api/metadata/rest-api\">Alternative, REST API Usage</a></li>\n</ul>\n<hr/>\n","isPage":true,"text":"\nThe Sequence Metadata API service offers a simple and fast API to query token &amp; NFT metadata\nfor Ethereum-compatible chains.\nTo learn how to use the Sequence Metadata service, please read:\n\nToken metadata API &amp; standards\nContract-level metadata API &amp; standards\nAlternative, REST API Usage\n\n\n","title":"Metadata","titles":[]},"33":{"href":"/api/metadata/overview#web--nodejs-installation","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 0xsequence</span></span></code></pre>\n<p>or</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> @0xsequence/metadata</span></span></code></pre>\n<aside data-callout=\"info\"><p>This installation requires an API Access Key from <a href=\"https://sequence.build\">Sequence Builder</a>.</p></aside>\n<p>then in your app (using your <code>API Access Key</code>),</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { SequenceMetadata } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/metadata&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> metadata</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SequenceMetadata</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;https://metadata.sequence.app&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n<p><strong>NOTE:</strong> if you&#x27;re using <code>@0xsequence/metadata</code> from node.js, we recommend using node v18.x or newer.</p>\n","isPage":false,"text":"\nnpm install 0xsequence\nor\nnpm install @0xsequence/metadata\nThis installation requires an API Access Key from Sequence Builder.\nthen in your app (using your API Access Key),\nimport { SequenceMetadata } from &#x27;@0xsequence/metadata&#x27;\n \nconst metadata = new SequenceMetadata(&#x27;https://metadata.sequence.app&#x27;, &#x27;AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&#x27;)\nNOTE: if you&#x27;re using @0xsequence/metadata from node.js, we recommend using node v18.x or newer.\n","title":"Web / node.js Installation","titles":["Metadata",null]},"34":{"href":"/api/metadata/overview#go-installation","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">go</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> get</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -u</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> github.com/0xsequence/go-sequence@latest</span></span></code></pre>\n<p>then in your app,</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t&quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">github.com/0xsequence/go-sequence/metadata</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">seqMetadata </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> metadata.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewMetadata</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">contractInfo, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> seqMetadata.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetContractInfo</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(context.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Background</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;polygon&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x631998e91476DA5B870D741192fc5Cbc55F5a52E&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n<br/>\n","isPage":false,"text":"\ngo get -u github.com/0xsequence/go-sequence@latest\nthen in your app,\nimport (\n\t&quot;github.com/0xsequence/go-sequence/metadata&quot;\n)\n \nseqMetadata := metadata.NewMetadata(&quot;AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&quot;)\n \ncontractInfo, err := seqMetadata.GetContractInfo(context.Background(), &quot;polygon&quot;, &quot;0x631998e91476DA5B870D741192fc5Cbc55F5a52E&quot;)\n\n","title":"Go Installation","titles":["Metadata",null]},"35":{"href":"/api/metadata/overview#unity-or-unreal-installation","html":"\n<p>The Sequence Metadata is integrated directly inside of the respective <a href=\"/\">Sequence Unity</a> and <a href=\"/\">Sequence Unreal</a> SDKs.</p>\n<br/>","isPage":false,"text":"\nThe Sequence Metadata is integrated directly inside of the respective Sequence Unity and Sequence Unreal SDKs.\n","title":"Unity or Unreal Installation","titles":["Metadata",null]},"36":{"href":"/api/metadata/rest-api#metadata-rest-api-reference--usage","html":"</header>\n<p>The Sequence Metadata API service offers a simple and fast API to query token &amp; NFT metadata\nfor Ethereum-compatible chains.</p>\n<p>Quite simply, the Metadata API allows you to query the token metadata of any ERC20, ERC721 or ERC1155\ncontract on a <a href=\"/solutions/technical-references/chain-support\">number of supported Ethereum chains</a>.</p>\n<p>As well, the Sequence Metadata service is automatically integrated in the <a href=\"/api/indexer/overview\">Sequence Indexer</a>.\nBut as we demonstrate below, it&#x27;s also useful to be able to query the token/contract metadata directly too :)</p>\n<aside data-callout=\"info\"><strong data-callout-title=\"true\">PRO TIP: RPC vs REST endpoints</strong><p>Sequence Metadata service is available with both RPC and REST endpoints. We recommend the RPC endpoints\nfor your application, but the REST endpoints are an available option for convenience.</p><p>For RPC endpoint see <a href=\"/api/metadata/token-metadata\">Token metadata RPC</a> and <a href=\"/api/metadata/contract-metadata\">Contract metadata RPC</a>.</p></aside>\n","isPage":true,"text":"\nThe Sequence Metadata API service offers a simple and fast API to query token &amp; NFT metadata\nfor Ethereum-compatible chains.\nQuite simply, the Metadata API allows you to query the token metadata of any ERC20, ERC721 or ERC1155\ncontract on a number of supported Ethereum chains.\nAs well, the Sequence Metadata service is automatically integrated in the Sequence Indexer.\nBut as we demonstrate below, it&#x27;s also useful to be able to query the token/contract metadata directly too :)\nPRO TIP: RPC vs REST endpointsSequence Metadata service is available with both RPC and REST endpoints. We recommend the RPC endpoints\nfor your application, but the REST endpoints are an available option for convenience.For RPC endpoint see Token metadata RPC and Contract metadata RPC.\n","title":"Metadata REST API Reference &amp; Usage","titles":[]},"37":{"href":"/api/metadata/rest-api#example","html":"\n<p>Let&#x27;s say you&#x27;d like to query the metadata of a Skyweaver 1155 card on the Polygon network. Of course,  the\nbelow example will work for any network / contract / token combination as well.</p>\n<p>First, the Skyweaver 1155 assets contract is located at address <code>0x631998e91476DA5B870D741192fc5Cbc55F5a52E</code>\non the Polygon network. Second, let&#x27;s build the metadata lookup endpoint to query Skyweaver&#x27;s contract\nfor token ID <code>20</code>:</p>\n<p><a href=\"https://metadata.sequence.app/tokens/polygon/0x631998e91476DA5B870D741192fc5Cbc55F5a52E/20\">Request</a></p>\n<strong>Response:</strong>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;tokenId&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;20&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;contractAddress&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x631998e91476da5b870d741192fc5cbc55f5a52e&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Unstoppable Chop&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;description&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Attach Silence to target unit. Do 4 damage to it.&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;image&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://assets.skyweaver.net/TNqWLuJZ/webapp/cards/full-cards/6x/20-silver.png&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;decimals&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;properties&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;baseCardId&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">20</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;goldCardId&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">131092</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;grade&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;oldSilver&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;id&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">20</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;silverCardId&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">65556</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;attributes&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">null</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span></code></pre>\n<p>If you&#x27;d like to query a number of tokens at the same time, you can include more token ids comma-separated <a href=\"https://metadata.sequence.app/tokens/polygon/0x631998e91476DA5B870D741192fc5Cbc55F5a52E/20,21,22\">https://metadata.sequence.app/tokens/polygon/0x.../20,21,22</a> -- click\nto see the JSON response to query token ids <code>20</code>, <code>21</code>, and <code>22</code> in a single batched request.</p>\n<p>Feel free to try tweaking the metadata.sequence.app URL above for your own contract, or another popular\nproject to see how the responses come back. You can change the network to <a href=\"/\">one of our supported networks</a>\nand specify any contract and/or token id.</p>\n<p>In addition to easily querying <em>token-level metadata</em> like in the above example, you can also query <em>contract-level metadata</em>.\nContract-level metadata provides you more information about a contract address such as a name, contract type, logo, and description.\nSimply change the metadata URL above to just query the <a href=\"https://metadata.sequence.app/tokens/polygon/0x631998e91476DA5B870D741192fc5Cbc55F5a52E\">contract address</a></p>\n<p>and see result:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;chainId&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">137</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;address&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x631998e91476da5b870d741192fc5cbc55f5a52e&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Skyweaver&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;type&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ERC1155&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;symbol&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;SKYWVR&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;logoURI&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://assets.skyweaver.net/_tX5dRVi/webapp/icons/skyweaver-token.png&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;extensions&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;link&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://www.skyweaver.net/&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;description&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Skyweaver is a Free-to-Play, trading card game powered by Polygon and Ethereum.&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;ogImage&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://skyweaver.net/images/skyweavercover.jpg&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;originAddress&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x631998e91476da5b870d741192fc5cbc55f5a52e&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<br/>\n","isPage":false,"text":"\nLet&#x27;s say you&#x27;d like to query the metadata of a Skyweaver 1155 card on the Polygon network. Of course,  the\nbelow example will work for any network / contract / token combination as well.\nFirst, the Skyweaver 1155 assets contract is located at address 0x631998e91476DA5B870D741192fc5Cbc55F5a52E\non the Polygon network. Second, let&#x27;s build the metadata lookup endpoint to query Skyweaver&#x27;s contract\nfor token ID 20:\nRequest\nResponse:\n[\n  {\n    &quot;tokenId&quot;: &quot;20&quot;,\n    &quot;contractAddress&quot;: &quot;0x631998e91476da5b870d741192fc5cbc55f5a52e&quot;,\n    &quot;name&quot;: &quot;Unstoppable Chop&quot;,\n    &quot;description&quot;: &quot;Attach Silence to target unit. Do 4 damage to it.&quot;,\n    &quot;image&quot;: &quot;https://assets.skyweaver.net/TNqWLuJZ/webapp/cards/full-cards/6x/20-silver.png&quot;,\n    &quot;decimals&quot;: 2,\n    &quot;properties&quot;: {\n      &quot;baseCardId&quot;: 20,\n      &quot;goldCardId&quot;: 131092,\n      &quot;grade&quot;: &quot;oldSilver&quot;,\n      &quot;id&quot;: 20,\n      &quot;silverCardId&quot;: 65556\n    },\n    &quot;attributes&quot;: null\n  }\n]\nIf you&#x27;d like to query a number of tokens at the same time, you can include more token ids comma-separated https://metadata.sequence.app/tokens/polygon/0x.../20,21,22 -- click\nto see the JSON response to query token ids 20, 21, and 22 in a single batched request.\nFeel free to try tweaking the metadata.sequence.app URL above for your own contract, or another popular\nproject to see how the responses come back. You can change the network to one of our supported networks\nand specify any contract and/or token id.\nIn addition to easily querying token-level metadata like in the above example, you can also query contract-level metadata.\nContract-level metadata provides you more information about a contract address such as a name, contract type, logo, and description.\nSimply change the metadata URL above to just query the contract address\nand see result:\n{\n  &quot;chainId&quot;: 137,\n  &quot;address&quot;: &quot;0x631998e91476da5b870d741192fc5cbc55f5a52e&quot;,\n  &quot;name&quot;: &quot;Skyweaver&quot;,\n  &quot;type&quot;: &quot;ERC1155&quot;,\n  &quot;symbol&quot;: &quot;SKYWVR&quot;,\n  &quot;logoURI&quot;: &quot;https://assets.skyweaver.net/_tX5dRVi/webapp/icons/skyweaver-token.png&quot;,\n  &quot;extensions&quot;: {\n    &quot;link&quot;: &quot;https://www.skyweaver.net/&quot;,\n    &quot;description&quot;: &quot;Skyweaver is a Free-to-Play, trading card game powered by Polygon and Ethereum.&quot;,\n    &quot;ogImage&quot;: &quot;https://skyweaver.net/images/skyweavercover.jpg&quot;,\n    &quot;originAddress&quot;: &quot;0x631998e91476da5b870d741192fc5cbc55f5a52e&quot;\n  }\n}\n\n","title":"Example","titles":["Metadata REST API Reference &amp; Usage"]},"38":{"href":"/api/metadata/rest-api#usage","html":"\n<p>The Metadata API service is accessible either with a simple <a href=\"#rest-endpoints\">REST interface</a>, or a <a href=\"#rpc-client\">RPC client</a>.\nFor the RPC client, we offer Web browser, node and Go clients. We recommend the RPC client for most integrations, but\nmake the REST interface available for convenience.</p>\n<br/>\n","isPage":false,"text":"\nThe Metadata API service is accessible either with a simple REST interface, or a RPC client.\nFor the RPC client, we offer Web browser, node and Go clients. We recommend the RPC client for most integrations, but\nmake the REST interface available for convenience.\n\n","title":"Usage","titles":["Metadata REST API Reference &amp; Usage"]},"39":{"href":"/api/metadata/rest-api#rest-endpoints","html":"\n<p>As mentioned in the <a href=\"#example\">example</a> above. The general format of the REST endpoint is:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>GET https://metadata.sequence.app/tokens/&lt;network&gt;/&lt;contractAddress&gt;[/&lt;tokenID&gt;]</span></span></code></pre>\n<p>Where <code>&lt;network&gt;</code> must be one of the <code>Chain ID</code> or <code>Chain Handle</code> of <a href=\"/\">the supported networks</a>.</p>\n<br/>\n<strong>Fetch contract-level metadata:</strong>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>GET https://metadata.sequence.app/tokens/&lt;network&gt;/&lt;contractAddress&gt;</span></span></code></pre>\n<p><a href=\"https://metadata.sequence.app/tokens/polygon/0x631998e91476DA5B870D741192fc5Cbc55F5a52E\">Example</a></p>\n<br/>\n<strong>Fetch token-level metadata:</strong>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>GET https://metadata.sequence.app/tokens/&lt;network&gt;/&lt;contractAddress&gt;/&lt;tokenID&gt;[,&lt;tokenID&gt;,...]</span></span></code></pre>\n<p>Examples:</p>\n<ul>\n<li><a href=\"https://metadata.sequence.app/tokens/polygon/0x631998e91476DA5B870D741192fc5Cbc55F5a52E/20\">token ID 20</a></li>\n<li><a href=\"https://metadata.sequence.app/tokens/polygon/0x631998e91476DA5B870D741192fc5Cbc55F5a52E/20,21\">token ID 20 &amp; 21</a></li>\n</ul>\n<br/>\n","isPage":false,"text":"\nAs mentioned in the example above. The general format of the REST endpoint is:\nGET https://metadata.sequence.app/tokens/&lt;network&gt;/&lt;contractAddress&gt;[/&lt;tokenID&gt;]\nWhere &lt;network&gt; must be one of the Chain ID or Chain Handle of the supported networks.\n\nFetch contract-level metadata:\nGET https://metadata.sequence.app/tokens/&lt;network&gt;/&lt;contractAddress&gt;\nExample\n\nFetch token-level metadata:\nGET https://metadata.sequence.app/tokens/&lt;network&gt;/&lt;contractAddress&gt;/&lt;tokenID&gt;[,&lt;tokenID&gt;,...]\nExamples:\n\ntoken ID 20\ntoken ID 20 &amp; 21\n\n\n","title":"REST endpoints","titles":["Metadata REST API Reference &amp; Usage"]},"40":{"href":"/api/metadata/rest-api#rpc-client","html":"\n<p>The Metadata RPC interface offers the full capabilities of the Metadata service.</p>\n<p>We provide SDKs for <a href=\"https://github.com/0xsequence/sequence.js\">Web / node.js</a> and <a href=\"https://github.com/0xsequence/go-sequence\">Go</a>.\nOr if you&#x27;d like to integrate the Metadata service with another language target, simply follow the API reference below\nto implement the HTTP requests. Additionally, read the Typescript client source code as <a href=\"https://github.com/0xsequence/sequence.js/blob/master/packages/metadata/src/metadata.gen.ts\">reference\nimplementation of the Metadata RPC client</a> as well.</p>\n","isPage":false,"text":"\nThe Metadata RPC interface offers the full capabilities of the Metadata service.\nWe provide SDKs for Web / node.js and Go.\nOr if you&#x27;d like to integrate the Metadata service with another language target, simply follow the API reference below\nto implement the HTTP requests. Additionally, read the Typescript client source code as reference\nimplementation of the Metadata RPC client as well.\n","title":"RPC Client","titles":["Metadata REST API Reference &amp; Usage"]},"41":{"href":"/api/metadata/rest-api#metadata-rpc-methods","html":"\n<p><strong>Metadata API endpoint:</strong> <a href=\"https://metadata.sequence.app\">https://metadata.sequence.app</a></p>\n<strong>Metadata RPC methods:</strong>\n<ul>\n<li><code>GetTokenMetadata</code> - fetch token metadata of ERC721 or ERC1155 tokens from a single contract</li>\n<li><code>GetTokenMetadataBatch</code> - fetch token metadata of ERC721 or ERC1155 token from a batch of contracts</li>\n<li><code>GetContractInfo</code> - fetch contract metadata of an ERC20, ERC721 or ERC1155 contract address</li>\n<li><code>GetContractInfoBatch</code> - fetch contract metadata of a batch of ERC20, ERC721 or ERC1155 contract addresses</li>\n</ul>","isPage":false,"text":"\nMetadata API endpoint: https://metadata.sequence.app\nMetadata RPC methods:\n\nGetTokenMetadata - fetch token metadata of ERC721 or ERC1155 tokens from a single contract\nGetTokenMetadataBatch - fetch token metadata of ERC721 or ERC1155 token from a batch of contracts\nGetContractInfo - fetch contract metadata of an ERC20, ERC721 or ERC1155 contract address\nGetContractInfoBatch - fetch contract metadata of a batch of ERC20, ERC721 or ERC1155 contract addresses\n","title":"Metadata RPC Methods","titles":["Metadata REST API Reference &amp; Usage"]},"42":{"href":"/api/metadata/token-metadata#token-metadata","html":"</header>\n<p>Sequence provides a metadata service for fetching token metadata for any ERC721 or ERC1155 contract, on <a href=\"/solutions/technical-references/chain-support\">any EVM chain</a>.</p>\n<ul>\n<li><a href=\"/api/metadata/token-metadata#fetch-token-metadata-for-any-erc721-or-erc1155-contract\">Learn how to query token metadata directly for any contract</a></li>\n<li><a href=\"/api/metadata/token-metadata#token-metadata-standards\">Learn about token metadata standards and formats for ERC721 and ERC1155 tokens</a></li>\n</ul>\n<aside data-callout=\"info\"><strong data-callout-title=\"true\">PRO TIP: Sequence Indexer also supports token metadata</strong><p>When using the <a href=\"/api/indexer/overview\">Sequence Indexer</a>, pass <code>&quot;includeMetadata&quot;: true</code> to your request to\nquery token metadata for any ERC721 or ERC1155 contract. See below how to fetch\ntoken metadata directly.</p></aside>\n","isPage":true,"text":"\nSequence provides a metadata service for fetching token metadata for any ERC721 or ERC1155 contract, on any EVM chain.\n\nLearn how to query token metadata directly for any contract\nLearn about token metadata standards and formats for ERC721 and ERC1155 tokens\n\nPRO TIP: Sequence Indexer also supports token metadataWhen using the Sequence Indexer, pass &quot;includeMetadata&quot;: true to your request to\nquery token metadata for any ERC721 or ERC1155 contract. See below how to fetch\ntoken metadata directly.\n","title":"Token Metadata","titles":[]},"43":{"href":"/api/metadata/token-metadata#fetch-token-metadata-for-any-erc721-or-erc1155-contract","html":"\n<p><em>Sequence Metadata <code>GetTokenMetadata</code> Method:</em></p>\n<ul>\n<li>Request: POST /rpc/Metadata/GetTokenMetadata</li>\n<li>Content-Type: application/json</li>\n<li>Body (in JSON):\n<ul>\n<li><code>chainID</code> (string) -- the chain id, as a name or number (ie. &quot;1&quot; or &quot;mainnet&quot;, &quot;137&quot; or &quot;polygon&quot;, etc.)</li>\n<li><code>contractAddress</code> (string) -- the contract address</li>\n<li><code>tokenIDs</code> (array of strings) -- array of strings containing token ids to fetch metadata</li>\n</ul>\n</li>\n</ul>\n<br/>\n<strong>Example: <code>GetTokenMetadata</code> of some tokens using an <code>AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY</code></strong>\n<aside data-callout=\"info\"><p>This code requires an API Access Key from <a href=\"https://sequence.build\">Sequence Builder</a>.</p></aside>\n<div class=\"code-group\"><div data-title=\"cURL\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"cURL\" data-lang=\"shell\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">curl</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -X</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> POST</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;Content-Type: application/json&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;X-Access-Key: AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://metadata.sequence.app/rpc/Metadata/GetTokenMetadata</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;{&quot;chainID&quot;:&quot;polygon&quot;, &quot;contractAddress&quot;: &quot;0x631998e91476DA5B870D741192fc5Cbc55F5a52E&quot;, &quot;tokenIDs&quot;: [&quot;65537&quot;, &quot;65538&quot;, &quot;65539&quot;] }&#x27;</span></span></code></pre></div><div data-title=\"Typescript\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Typescript\" data-lang=\"ts\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Works in both a Webapp (browser) or Node.js:</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { SequenceMetadata } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/metadata&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> metadataClient</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SequenceMetadata</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://metadata.sequence.app&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tokenMetadata</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> metadataClient.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getTokenMetadata</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  chainID: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;polygon&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  contractAddress: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x631998e91476DA5B870D741192fc5Cbc55F5a52E&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  tokenIDs: [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;65537&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;65538&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;65539&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;token metadata: &#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, tokenMetadata)</span></span></code></pre></div><div data-title=\"Go\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Go\" data-lang=\"go\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t&quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">github.com/0xsequence/go-sequence/metadata</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">seqMetadata </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> metadata.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewMetadata</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">collectibleInfo, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> seqMetadata.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetTokenMetadata</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(context.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Background</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;polygon&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x631998e91476DA5B870D741192fc5Cbc55F5a52E&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, []</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;1&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;2&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre></div><div data-title=\"Unity\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Unity\" data-lang=\"shell\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">To</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> be</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> completed</span></span></code></pre></div><div data-title=\"Unreal\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Unreal\" data-lang=\"shell\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">To</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> be</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> completed</span></span></code></pre></div><div data-title=\"Other\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Other\" data-lang=\"shell\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Please</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [contact </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">our</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> team]</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">/support</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">for</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> assistance</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> with</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> integrations</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> to</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> another</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> target.</span></span></code></pre></div></div>\n","isPage":false,"text":"\nSequence Metadata GetTokenMetadata Method:\n\nRequest: POST /rpc/Metadata/GetTokenMetadata\nContent-Type: application/json\nBody (in JSON):\n\nchainID (string) -- the chain id, as a name or number (ie. &quot;1&quot; or &quot;mainnet&quot;, &quot;137&quot; or &quot;polygon&quot;, etc.)\ncontractAddress (string) -- the contract address\ntokenIDs (array of strings) -- array of strings containing token ids to fetch metadata\n\n\n\n\nExample: GetTokenMetadata of some tokens using an AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY\nThis code requires an API Access Key from Sequence Builder.\ncurl -X POST -H &quot;Content-Type: application/json&quot; -H &quot;X-Access-Key: AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&quot; https://metadata.sequence.app/rpc/Metadata/GetTokenMetadata -d &#x27;{&quot;chainID&quot;:&quot;polygon&quot;, &quot;contractAddress&quot;: &quot;0x631998e91476DA5B870D741192fc5Cbc55F5a52E&quot;, &quot;tokenIDs&quot;: [&quot;65537&quot;, &quot;65538&quot;, &quot;65539&quot;] }&#x27;// Works in both a Webapp (browser) or Node.js:\nimport { SequenceMetadata } from &#x27;@0xsequence/metadata&#x27;\n \nconst metadataClient = new SequenceMetadata(&quot;https://metadata.sequence.app&quot;, &quot;AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&quot;)\n \nconst tokenMetadata = await metadataClient.getTokenMetadata({\n  chainID: &#x27;polygon&#x27;,\n  contractAddress: &#x27;0x631998e91476DA5B870D741192fc5Cbc55F5a52E&#x27;,\n  tokenIDs: [&#x27;65537&#x27;, &#x27;65538&#x27;, &#x27;65539&#x27;]\n})\n \nconsole.log(&#x27;token metadata: &#x27;, tokenMetadata)import (\n\t&quot;github.com/0xsequence/go-sequence/metadata&quot;\n)\n \nseqMetadata := metadata.NewMetadata(&quot;AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&quot;)\n \ncollectibleInfo, err := seqMetadata.GetTokenMetadata(context.Background(), &quot;polygon&quot;, &quot;0x631998e91476DA5B870D741192fc5Cbc55F5a52E&quot;, []string{&quot;1&quot;, &quot;2&quot;})To be completedTo be completedPlease [contact our team](/support) for assistance with integrations to another target.\n","title":"Fetch token metadata for any ERC721 or ERC1155 contract","titles":["Token Metadata"]},"44":{"href":"/api/metadata/token-metadata#refreshing-token-metadata","html":"\n<p>When deploying new contracts or metadata updates the refresh token metadata url should be called with an access key from (the Sequence Builder) via a HTTPS POST request by command line or via metadata SDK in a program for data to indexeable in the Sequence Indexer metadata service.</p>\n<p><em>Sequence Metadata <code>enqueueTokensForRefresh</code> Method:</em></p>\n<ul>\n<li>Request: POST /rpc/Metadata/EnqueueTokensForRefresh</li>\n<li>Content-Type: application/json</li>\n<li>Body (in JSON):\n<ul>\n<li><code>chainID</code> (string) -- the chain id, as a name or number (ie. &quot;1&quot; or &quot;mainnet&quot;, &quot;137&quot; or &quot;polygon&quot;, etc.)</li>\n<li><code>contractAddress</code> (string) -- the contract address</li>\n<li><code>tokenIDs</code> (array of strings) -- array of strings containing token ids to fetch metadata</li>\n</ul>\n</li>\n</ul>\n<div class=\"code-group\"><div data-title=\"cURL\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"cURL\" data-lang=\"shell\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">curl</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -v</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -X</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> POST</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;Content-type: application/json&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;X-Access-Key: wuELppeX0pttvJABl8bIuxPAAAAAAAAAA&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://metadata.sequence.app/rpc/Metadata/EnqueueTokensForRefresh</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;{&quot;chainID&quot;:&quot;polygon&quot;, &quot;contractAddress&quot;:&quot;0x631998e91476DA5B870D741192fc5Cbc55F5a52E&quot;, &quot;tokenIDs&quot;: [&quot;1&quot;,&quot;2&quot;]}&#x27;</span></span></code></pre></div><div data-title=\"Typescript\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Typescript\" data-lang=\"ts\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Works in both a Webapp (browser) or Node.js:</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { SequenceMetadata } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/metadata&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> metadataClient</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SequenceMetadata</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://metadata.sequence.app&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> jobID</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> metadataClient.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">enqueueTokensForRefresh</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    chainID: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;polygon&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    contractAddress: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x631998e91476DA5B870D741192fc5Cbc55F5a52E&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    tokenIDs: [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;65537&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;65538&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;65539&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;refresh job id: &#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, tokenMetadata)</span></span></code></pre></div><div data-title=\"Go\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Go\" data-lang=\"go\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t&quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">github.com/0xsequence/go-sequence/metadata</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">seqMetadata </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> metadata.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewMetadata</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">refreshJob, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> seqMetadata.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">EnqueueTokensForRefresh</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(context.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Background</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;polygon&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x631998e91476DA5B870D741192fc5Cbc55F5a52E&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, []</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;1&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;2&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre></div><div data-title=\"Other\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Other\" data-lang=\"shell\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Please</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [contact </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">our</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> team]</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">/support</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">for</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> assistance</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> with</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> integrations</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> to</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> another</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> target.</span></span></code></pre></div></div>\n<p><em>Sequence Metadata <code>getTokenRefreshStatus</code> Method:</em></p>\n<ul>\n<li>Request: POST /rpc/Metadata/GetTokenRefreshStatus</li>\n<li>Content-Type: application/json</li>\n<li>Body (in JSON):\n<ul>\n<li><code>taskId</code> (uint) -- the task id returned from <code>enqueueTokensForRefresh</code></li>\n</ul>\n</li>\n</ul>\n<div class=\"code-group\"><div data-title=\"cURL\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"cURL\" data-lang=\"shell\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">curl</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -v</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -X</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> POST</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;Content-type: application/json&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;X-Access-Key: wuELppeX0pttvJABl8bIuxPAAAAAAAAAA&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://metadata.sequence.app/rpc/Metadata/GetTokenRefreshStatus</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;{&quot;taskId&quot;: 1234}&#x27;</span></span></code></pre></div><div data-title=\"Typescript\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Typescript\" data-lang=\"ts\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Works in both a Webapp (browser) or Node.js:</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { SequenceMetadata } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/metadata&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> metadataClient</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SequenceMetadata</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://metadata.sequence.app&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> refreshJobStatus</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> metadataClient.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getTokenRefreshStatus</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    taskId: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1234</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;refresh job status: &#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, refreshJobStatus)</span></span></code></pre></div><div data-title=\"Go\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Go\" data-lang=\"go\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t&quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">github.com/0xsequence/go-sequence/metadata</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">seqMetadata </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> metadata.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewMetadata</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">refreshJobStatus, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> seqMetadata.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetTokenRefreshStatus</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(context.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Background</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">uint64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1234</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">))</span></span></code></pre></div><div data-title=\"Other\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Other\" data-lang=\"shell\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Please</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [contact </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">our</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> team]</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">/support</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">for</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> assistance</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> with</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> integrations</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> to</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> another</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> target.</span></span></code></pre></div></div>\n","isPage":false,"text":"\nWhen deploying new contracts or metadata updates the refresh token metadata url should be called with an access key from (the Sequence Builder) via a HTTPS POST request by command line or via metadata SDK in a program for data to indexeable in the Sequence Indexer metadata service.\nSequence Metadata enqueueTokensForRefresh Method:\n\nRequest: POST /rpc/Metadata/EnqueueTokensForRefresh\nContent-Type: application/json\nBody (in JSON):\n\nchainID (string) -- the chain id, as a name or number (ie. &quot;1&quot; or &quot;mainnet&quot;, &quot;137&quot; or &quot;polygon&quot;, etc.)\ncontractAddress (string) -- the contract address\ntokenIDs (array of strings) -- array of strings containing token ids to fetch metadata\n\n\n\ncurl -v -X POST -H &quot;Content-type: application/json&quot; -H &quot;X-Access-Key: wuELppeX0pttvJABl8bIuxPAAAAAAAAAA&quot; https://metadata.sequence.app/rpc/Metadata/EnqueueTokensForRefresh -d &#x27;{&quot;chainID&quot;:&quot;polygon&quot;, &quot;contractAddress&quot;:&quot;0x631998e91476DA5B870D741192fc5Cbc55F5a52E&quot;, &quot;tokenIDs&quot;: [&quot;1&quot;,&quot;2&quot;]}&#x27;// Works in both a Webapp (browser) or Node.js:\nimport { SequenceMetadata } from &#x27;@0xsequence/metadata&#x27;\n \nconst metadataClient = new SequenceMetadata(&quot;https://metadata.sequence.app&quot;, &quot;AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&quot;)\n \nconst jobID = await metadataClient.enqueueTokensForRefresh({\n    chainID: &#x27;polygon&#x27;,\n    contractAddress: &#x27;0x631998e91476DA5B870D741192fc5Cbc55F5a52E&#x27;,\n    tokenIDs: [&#x27;65537&#x27;, &#x27;65538&#x27;, &#x27;65539&#x27;]\n})\n \nconsole.log(&#x27;refresh job id: &#x27;, tokenMetadata)import (\n\t&quot;github.com/0xsequence/go-sequence/metadata&quot;\n)\n \nseqMetadata := metadata.NewMetadata(&quot;AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&quot;)\n \nrefreshJob, err := seqMetadata.EnqueueTokensForRefresh(context.Background(), &quot;polygon&quot;, &quot;0x631998e91476DA5B870D741192fc5Cbc55F5a52E&quot;, []string{&quot;1&quot;, &quot;2&quot;}, nil)Please [contact our team](/support) for assistance with integrations to another target.\nSequence Metadata getTokenRefreshStatus Method:\n\nRequest: POST /rpc/Metadata/GetTokenRefreshStatus\nContent-Type: application/json\nBody (in JSON):\n\ntaskId (uint) -- the task id returned from enqueueTokensForRefresh\n\n\n\ncurl -v -X POST -H &quot;Content-type: application/json&quot; -H &quot;X-Access-Key: wuELppeX0pttvJABl8bIuxPAAAAAAAAAA&quot; https://metadata.sequence.app/rpc/Metadata/GetTokenRefreshStatus -d &#x27;{&quot;taskId&quot;: 1234}&#x27;// Works in both a Webapp (browser) or Node.js:\nimport { SequenceMetadata } from &#x27;@0xsequence/metadata&#x27;\n \nconst metadataClient = new SequenceMetadata(&quot;https://metadata.sequence.app&quot;, &quot;AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&quot;)\n \nconst refreshJobStatus = await metadataClient.getTokenRefreshStatus({\n    taskId: 1234\n})\n \nconsole.log(&#x27;refresh job status: &#x27;, refreshJobStatus)import (\n\t&quot;github.com/0xsequence/go-sequence/metadata&quot;\n)\n \nseqMetadata := metadata.NewMetadata(&quot;AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&quot;)\n \nrefreshJobStatus, err := seqMetadata.GetTokenRefreshStatus(context.Background(), uint64(1234))Please [contact our team](/support) for assistance with integrations to another target.\n","title":"Refreshing token metadata","titles":["Token Metadata"]},"45":{"href":"/api/metadata/token-metadata#testing-instructions","html":"\n<ol>\n<li>Check current token metadata using <a href=\"/api/metadata/token-metadata#fetch-token-metadata-for-any-erc721-or-erc1155-contract\">token metadata fetch</a></li>\n<li>Modify token metadata content either onchain or via token baseURI</li>\n<li>Call refresh token ID endpoints using <a href=\"/api/metadata/token-metadata#refreshing-token-metadata\">refresh metadata</a></li>\n<li>Check token metadata changes using <a href=\"/api/metadata/token-metadata#fetch-token-metadata-for-any-erc721-or-erc1155-contract\">token metadata fetch</a></li>\n</ol>\n","isPage":false,"text":"\n\nCheck current token metadata using token metadata fetch\nModify token metadata content either onchain or via token baseURI\nCall refresh token ID endpoints using refresh metadata\nCheck token metadata changes using token metadata fetch\n\n","title":"Testing instructions:","titles":["Token Metadata","Refreshing token metadata"]},"46":{"href":"/api/metadata/token-metadata#token-metadata-standards","html":"\n<p>Popular token standards like <a href=\"https://eips.ethereum.org/EIPS/eip-721\">EIP721</a> and <a href=\"https://eips.ethereum.org/EIPS/eip-1155\">EIP1155</a> both\nhave similar metadata standard formats with some subtle differences. In addition to the standards, we&#x27;ve seen in practice that projects\noften slightly deviate from the standards but are sensical, easy to parse and well supported in the ecosystem, include the Sequence Metadata service.\nBelow we describe the standards and common practices across projects to help demystify how to format your token metadata for your projects.</p>\n","isPage":false,"text":"\nPopular token standards like EIP721 and EIP1155 both\nhave similar metadata standard formats with some subtle differences. In addition to the standards, we&#x27;ve seen in practice that projects\noften slightly deviate from the standards but are sensical, easy to parse and well supported in the ecosystem, include the Sequence Metadata service.\nBelow we describe the standards and common practices across projects to help demystify how to format your token metadata for your projects.\n","title":"Token Metadata Standards","titles":["Token Metadata"]},"47":{"href":"/api/metadata/token-metadata#metadata-standards","html":"\n","isPage":false,"text":"\n","title":"Metadata Standards","titles":["Token Metadata"]},"48":{"href":"/api/metadata/token-metadata#erc721","html":"\n<p>ERC721 token contracts contain a method on the contract called <code>tokenURI(uint256) string</code>. When querying the <code>tokenURI</code> method on the contract, it will return a URI which contains additional metadata for that asset.</p>\n<p>See EIP for specific details: <a href=\"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\">https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md</a></p>\n<p><a href=\"https://metadata.sequence.app/tokens/mainnet/0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d/9\">Here is an example Bored Ape (token id 9)</a></p>\n<p>response:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;tokenId&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;9&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;contractAddress&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;description&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;image&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://ipfs.sequence.info/ipfs/QmUQgKka8EW7exiUHnMwZ4UoXA11wV7NFjHAogVAbasSYy&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;decimals&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;properties&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">null</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;attributes&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;trait_type&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Earring&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;value&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Silver Stud&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;trait_type&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Eyes&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;value&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Sleepy&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;trait_type&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Mouth&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;value&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Small Grin&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;trait_type&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Fur&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;value&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Brown&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;trait_type&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Hat&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;value&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Seaman&#x27;s Hat&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;trait_type&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Clothes&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;value&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Stunt Jacket&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;trait_type&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Background&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;value&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Purple&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>In the case of this Bored Ape, it appears there is no name or description set,\nbut they do have &quot;attributes&quot; as an array of <code>{ &quot;trait_type&quot;: string, &quot;value: string }</code>.</p>\n<p>Additionally, see OpenSea for more information: <a href=\"https://docs.opensea.io/docs/metadata-standards\">https://docs.opensea.io/docs/metadata-standards</a></p>\n<p>Note that OpenSea technically breaks the ERC1155 standard by suggesting to use &quot;attributes&quot;, where in fact,\nthe ERC1155 calls uses the field name &quot;properties&quot; instead of &quot;attributes&quot;, see\n<a href=\"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1155.md#erc-1155-metadata-uri-json-schema\">https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1155.md#erc-1155-metadata-uri-json-schema</a> (read section below).\nHowever this is completely okay and mixed use of properties / attributes is compatible in practice.\nOn Sequence Metadata, we support both structures for token contracts which use either format for their <a href=\"/api/metadata/token-metadata#attributes-vs-properties\">properties/attributes</a>.</p>\n<p><a href=\"https://metadata.sequence.app/tokens/polygon/0x7227e371540CF7b8e512544Ba6871472031F3335/158456331411102687640546264635\">Another example is from Neon District</a></p>\n","isPage":false,"text":"\nERC721 token contracts contain a method on the contract called tokenURI(uint256) string. When querying the tokenURI method on the contract, it will return a URI which contains additional metadata for that asset.\nSee EIP for specific details: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\nHere is an example Bored Ape (token id 9)\nresponse:\n{\n  &quot;tokenId&quot;: &quot;9&quot;,\n  &quot;contractAddress&quot;: &quot;0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d&quot;,\n  &quot;name&quot;: &quot;&quot;,\n  &quot;description&quot;: &quot;&quot;,\n  &quot;image&quot;: &quot;https://ipfs.sequence.info/ipfs/QmUQgKka8EW7exiUHnMwZ4UoXA11wV7NFjHAogVAbasSYy&quot;,\n  &quot;decimals&quot;: 0,\n  &quot;properties&quot;: null,\n  &quot;attributes&quot;: [\n    {\n      &quot;trait_type&quot;: &quot;Earring&quot;,\n      &quot;value&quot;: &quot;Silver Stud&quot;\n    },\n    {\n      &quot;trait_type&quot;: &quot;Eyes&quot;,\n      &quot;value&quot;: &quot;Sleepy&quot;\n    },\n    {\n      &quot;trait_type&quot;: &quot;Mouth&quot;,\n      &quot;value&quot;: &quot;Small Grin&quot;\n    },\n    {\n      &quot;trait_type&quot;: &quot;Fur&quot;,\n      &quot;value&quot;: &quot;Brown&quot;\n    },\n    {\n      &quot;trait_type&quot;: &quot;Hat&quot;,\n      &quot;value&quot;: &quot;Seaman&#x27;s Hat&quot;\n    },\n    {\n      &quot;trait_type&quot;: &quot;Clothes&quot;,\n      &quot;value&quot;: &quot;Stunt Jacket&quot;\n    },\n    {\n      &quot;trait_type&quot;: &quot;Background&quot;,\n      &quot;value&quot;: &quot;Purple&quot;\n    }\n  ]\n}\nIn the case of this Bored Ape, it appears there is no name or description set,\nbut they do have &quot;attributes&quot; as an array of { &quot;trait_type&quot;: string, &quot;value: string }.\nAdditionally, see OpenSea for more information: https://docs.opensea.io/docs/metadata-standards\nNote that OpenSea technically breaks the ERC1155 standard by suggesting to use &quot;attributes&quot;, where in fact,\nthe ERC1155 calls uses the field name &quot;properties&quot; instead of &quot;attributes&quot;, see\nhttps://github.com/ethereum/EIPs/blob/master/EIPS/eip-1155.md#erc-1155-metadata-uri-json-schema (read section below).\nHowever this is completely okay and mixed use of properties / attributes is compatible in practice.\nOn Sequence Metadata, we support both structures for token contracts which use either format for their properties/attributes.\nAnother example is from Neon District\n","title":"ERC721","titles":["Token Metadata","Metadata Standards"]},"49":{"href":"/api/metadata/token-metadata#erc1155","html":"\n<p>ERC1155 token contracts contain a method on the contract called <code>uri(uint256) string</code>. When querying the <code>uri</code> method on the\ncontract, it will return a URI which contains additional metadata for that asset.</p>\n<p>See EIP for specific details: <a href=\"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1155.md#erc-1155-metadata-uri-json-schema\">https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1155.md#erc-1155-metadata-uri-json-schema</a></p>\n<p><a href=\"https://metadata.sequence.app/tokens/polygon/0x27A11C1563a5dDa238379B95c91B3AbBaD9C0cf6/65548\">Here is an example Skyweaver card (token id 65548)</a></p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;tokenId&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;65548&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;contractAddress&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x27a11c1563a5dda238379b95c91b3abbad9c0cf6&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Weighted Die (Silver)&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;description&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Give +1/+1, armor, and guard to a random ally unit, six times.</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\n\\n\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">I will not bow to fate. If the dice fall against me, I&#x27;ll cut off the hand that cast them.</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;\\n</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> -Horik&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;image&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://assets.skyweaver.net/LV7xNcQh/webapp/cards/full-cards/6x/12-silver.png&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;decimals&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;properties&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;artists&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Artist&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;value&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;id&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;xavi&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Henrique Xavier&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;url&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://www.artstation.com/kitexavier&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      ]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;baseCardId&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">12</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;cardType&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Spell&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;element&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Metal&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;mana&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;prism&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Strength&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;type&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Silver&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;attributes&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">null</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>As you can see, Skyweaver an ERC1155 token&#x27;s metadata uses the <code>properties</code> object, which is an object/dictionary type of arbitrary data.</p>\n","isPage":false,"text":"\nERC1155 token contracts contain a method on the contract called uri(uint256) string. When querying the uri method on the\ncontract, it will return a URI which contains additional metadata for that asset.\nSee EIP for specific details: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1155.md#erc-1155-metadata-uri-json-schema\nHere is an example Skyweaver card (token id 65548)\n{\n  &quot;tokenId&quot;: &quot;65548&quot;,\n  &quot;contractAddress&quot;: &quot;0x27a11c1563a5dda238379b95c91b3abbad9c0cf6&quot;,\n  &quot;name&quot;: &quot;Weighted Die (Silver)&quot;,\n  &quot;description&quot;: &quot;Give +1/+1, armor, and guard to a random ally unit, six times.\\n\\n\\&quot;I will not bow to fate. If the dice fall against me, I&#x27;ll cut off the hand that cast them.\\&quot;\\n -Horik&quot;,\n  &quot;image&quot;: &quot;https://assets.skyweaver.net/LV7xNcQh/webapp/cards/full-cards/6x/12-silver.png&quot;,\n  &quot;decimals&quot;: 2,\n  &quot;properties&quot;: {\n    &quot;artists&quot;: {\n      &quot;name&quot;: &quot;Artist&quot;,\n      &quot;value&quot;: [\n        {\n          &quot;id&quot;: &quot;xavi&quot;,\n          &quot;name&quot;: &quot;Henrique Xavier&quot;,\n          &quot;url&quot;: &quot;https://www.artstation.com/kitexavier&quot;\n        }\n      ]\n    },\n    &quot;baseCardId&quot;: 12,\n    &quot;cardType&quot;: &quot;Spell&quot;,\n    &quot;element&quot;: &quot;Metal&quot;,\n    &quot;mana&quot;: 8,\n    &quot;prism&quot;: &quot;Strength&quot;,\n    &quot;type&quot;: &quot;Silver&quot;\n  },\n  &quot;attributes&quot;: null\n}\nAs you can see, Skyweaver an ERC1155 token&#x27;s metadata uses the properties object, which is an object/dictionary type of arbitrary data.\n","title":"ERC1155","titles":["Token Metadata","Metadata Standards"]},"50":{"href":"/api/metadata/token-metadata#attributes-vs-properties","html":"\n<p>As you can see, the standard format of token metadata contains both <code>attributes</code> and <code>properties</code>. The <code>attributes</code> field is an array of\nobjects. The <code>properties</code> field is an object/dictionary of arbitrary data. In technical terms, the <code>attributes</code> type is defined as\n<code>[]map&lt;string,any&gt;</code> and the <code>properties</code> type is defined as <code>map&lt;string,any&gt;</code>.</p>\n<p>In practice, we&#x27;ve seen that many projects use both <code>attributes</code> and <code>properties</code> to store the same data, and in some cases, they use\n<code>attributes</code> to store data that should be in <code>properties</code> and vice versa. Sometimes project use both fields, and this is completely fine\nin practice, as marketplaces and services will parse both areas.</p>\n<p>Finally, if you are looking to extend the metadata format to suit your project, we recommend to utilize either or both the <code>attributes</code>\nand <code>properties</code> fields for either ERC721 or ERC1155.</p>\n","isPage":false,"text":"\nAs you can see, the standard format of token metadata contains both attributes and properties. The attributes field is an array of\nobjects. The properties field is an object/dictionary of arbitrary data. In technical terms, the attributes type is defined as\n[]map&lt;string,any&gt; and the properties type is defined as map&lt;string,any&gt;.\nIn practice, we&#x27;ve seen that many projects use both attributes and properties to store the same data, and in some cases, they use\nattributes to store data that should be in properties and vice versa. Sometimes project use both fields, and this is completely fine\nin practice, as marketplaces and services will parse both areas.\nFinally, if you are looking to extend the metadata format to suit your project, we recommend to utilize either or both the attributes\nand properties fields for either ERC721 or ERC1155.\n","title":"Attributes vs Properties","titles":["Token Metadata","Metadata Standards"]},"51":{"href":"/api/metadata/token-metadata#erc20","html":"\n<p>Finally, a note on ERC20 tokens. ERC20 tokens are just a single token, so they themselves do not have a token ID, but\nare represented entirely by their contract address. We can infer some information about the token by querying the contract\nmethods such as <code>name</code> and <code>decimals</code>. Additionally, ERC20 tokens can take advantage of the <code>contractURI</code> extension used\nby OpenSea and described in more detail in our <a href=\"/api/metadata/contract-metadata\">Contract metadata</a> section.</p>","isPage":false,"text":"\nFinally, a note on ERC20 tokens. ERC20 tokens are just a single token, so they themselves do not have a token ID, but\nare represented entirely by their contract address. We can infer some information about the token by querying the contract\nmethods such as name and decimals. Additionally, ERC20 tokens can take advantage of the contractURI extension used\nby OpenSea and described in more detail in our Contract metadata section.","title":"ERC20","titles":["Token Metadata","Metadata Standards"]},"52":{"href":"/api/transactions/installation#installation","html":"</header>\n<p>We provide SDKs for <a href=\"https://github.com/0xsequence/sequence.js\">Web / node.js</a> and <a href=\"https://github.com/0xsequence/go-sequence\">Go</a>.\nOr if you&#x27;d like to integrate the Relayer with another language target, simply follow the API reference below\nto implement the HTTP requests. Additionally, read the Typescript client source code as <a href=\"https://github.com/0xsequence/sequence.js/blob/master/packages/relayer/src/rpc-relayer/relayer.gen.ts\">reference\nimplementation of the Transactions API client</a> as well.</p>\n<aside data-callout=\"info\"><p>Sequence Relayer offers the same API across a variety of EVM networks. Make sure to check the endpoints\nand use the corresponding host for your dapp/game. For example, on Ethereum mainnet the Sequence Relayer endpoint is\n<a href=\"https://mainnet-relayer.sequence.app\">https://mainnet-relayer.sequence.app</a> and Polygon is <a href=\"https://polygon-relayer.sequence.app\">https://polygon-relayer.sequence.app</a>.</p><p>🌄 <a href=\"/solutions/technical-references/chain-support\">View the full list of supported networks and Relayer endpoints here</a></p></aside>\n","isPage":true,"text":"\nWe provide SDKs for Web / node.js and Go.\nOr if you&#x27;d like to integrate the Relayer with another language target, simply follow the API reference below\nto implement the HTTP requests. Additionally, read the Typescript client source code as reference\nimplementation of the Transactions API client as well.\nSequence Relayer offers the same API across a variety of EVM networks. Make sure to check the endpoints\nand use the corresponding host for your dapp/game. For example, on Ethereum mainnet the Sequence Relayer endpoint is\nhttps://mainnet-relayer.sequence.app and Polygon is https://polygon-relayer.sequence.app.🌄 View the full list of supported networks and Relayer endpoints here\n","title":"Installation","titles":[]},"53":{"href":"/api/transactions/installation#web--nodejs-installation","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 0xsequence</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ethers</span></span></code></pre>\n<p>or</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">pnpm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 0xsequence</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ethers</span></span></code></pre>\n<p>or</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">yarn</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> add</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 0xsequence</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ethers</span></span></code></pre>\n","isPage":false,"text":"\nnpm install 0xsequence ethers\nor\npnpm install 0xsequence ethers\nor\nyarn add 0xsequence ethers\n","title":"Web / node.js Installation","titles":["Installation",null]},"54":{"href":"/api/transactions/installation#go-installation","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">go</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> get</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -u</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> github.com/0xsequence/go-sequence@latest</span></span></code></pre>\n<p>then in your app,</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Go\" data-lang=\"go\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t&quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">github.com/0xsequence/go-sequence/relayer</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>","isPage":false,"text":"\ngo get -u github.com/0xsequence/go-sequence@latest\nthen in your app,\nimport (\n\t&quot;github.com/0xsequence/go-sequence/relayer&quot;\n)","title":"Go Installation","titles":["Installation",null]},"55":{"href":"/api/transactions/overview#transactions-api","html":"</header>\n<aside data-callout=\"note\"><p><a href=\"https://0xsequence.redoc.ly/tag/relayer\">Transactions API documentation and endpoints</a></p></aside>\n<p>The Sequence Transactions API (or the technical term Relayer service) offers a simple interface for dispatching meta-transactions on Ethereum-compatible networks.</p>\n<p>Meta-transactions are the idea of a transaction inside of a transaction. The benefits of Sequence meta-transactions are that they allow:</p>\n","isPage":true,"text":"\nTransactions API documentation and endpoints\nThe Sequence Transactions API (or the technical term Relayer service) offers a simple interface for dispatching meta-transactions on Ethereum-compatible networks.\nMeta-transactions are the idea of a transaction inside of a transaction. The benefits of Sequence meta-transactions are that they allow:\n","title":"Transactions API","titles":[]},"56":{"href":"/api/transactions/overview#benefits","html":"\n<ul>\n<li>Gas abstraction -- whereby users can pay for network gas in a variety of tokens (ie. USDC, DAI, etc.)</li>\n<li>Sponsored gas -- projects may sponsor the gas of specific contracts to allow free gas for their users</li>\n<li>Batched transactions -- group a bunch of independent transactions and allow them to be mined as a single transaction</li>\n<li>Parallel transactions -- parallelize the dispatch of transactions in some cases</li>\n<li>Fire + forget model -- easily send transactions to the transactions api which will automatically manage nonces, bump gas, and other features which will ensure fast delivery</li>\n<li>Optimal gas pricing for transactions -- will be attempted once and if not included from the mempool within 3 blocks, the transaction will be resubmitted</li>\n</ul>\n<p>The best part: transactions with Sequence Transactions API are compatible with any existing/deployed Ethereum contract, and thus, integrating the Sequence Relayer doesn&#x27;t require any changes to your contracts or dapp.</p>\n<p>The Sequence Transactions API is usable by frontend dapps, or even in your backends. Be sure to install the corresponding SDK for your preferred language such as <a href=\"/sdk/typescript/guides/overview\">Typescript</a> or <a href=\"/sdk/go/overview\">Go</a>.</p>\n","isPage":false,"text":"\n\nGas abstraction -- whereby users can pay for network gas in a variety of tokens (ie. USDC, DAI, etc.)\nSponsored gas -- projects may sponsor the gas of specific contracts to allow free gas for their users\nBatched transactions -- group a bunch of independent transactions and allow them to be mined as a single transaction\nParallel transactions -- parallelize the dispatch of transactions in some cases\nFire + forget model -- easily send transactions to the transactions api which will automatically manage nonces, bump gas, and other features which will ensure fast delivery\nOptimal gas pricing for transactions -- will be attempted once and if not included from the mempool within 3 blocks, the transaction will be resubmitted\n\nThe best part: transactions with Sequence Transactions API are compatible with any existing/deployed Ethereum contract, and thus, integrating the Sequence Relayer doesn&#x27;t require any changes to your contracts or dapp.\nThe Sequence Transactions API is usable by frontend dapps, or even in your backends. Be sure to install the corresponding SDK for your preferred language such as Typescript or Go.\n","title":"Benefits","titles":["Transactions API"]},"57":{"href":"/api/transactions/overview#anatomy-of-a-sequence-transaction-bundle","html":"\n<p>A Sequence transaction bundle consists of three things:</p>\n<ol>\n<li>A list of Sequence transactions</li>\n<li>A Sequence nonce</li>\n<li>A Sequence signature</li>\n</ol>\n<p>Like Ethereum accounts, Sequence wallets use nonces to enforce transaction ordering and protect against replay attacks.\nUnlike Ethereum accounts, Sequence wallets have a virtually unlimited supply of independent nonces, allowing multiple independent transactions to be executed in parallel.\nA Sequence nonce is encoded as a 160-bit nonce space followed by the 96-bit nonce for that nonce space, big-endian.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>|&lt;------------------------- uint256 --------------------------&gt;|</span></span>\n<span class=\"line\"><span>|&lt;------ nonce space (160 bits) ------&gt;||&lt;- nonce (96 bits) --&gt;|</span></span>\n<span class=\"line\"><span>ssssssssssssssssssssssssssssssssssssssssnnnnnnnnnnnnnnnnnnnnnnnn</span></span></code></pre>\n","isPage":false,"text":"\nA Sequence transaction bundle consists of three things:\n\nA list of Sequence transactions\nA Sequence nonce\nA Sequence signature\n\nLike Ethereum accounts, Sequence wallets use nonces to enforce transaction ordering and protect against replay attacks.\nUnlike Ethereum accounts, Sequence wallets have a virtually unlimited supply of independent nonces, allowing multiple independent transactions to be executed in parallel.\nA Sequence nonce is encoded as a 160-bit nonce space followed by the 96-bit nonce for that nonce space, big-endian.\n|&lt;------------------------- uint256 --------------------------&gt;|\n|&lt;------ nonce space (160 bits) ------&gt;||&lt;- nonce (96 bits) --&gt;|\nssssssssssssssssssssssssssssssssssssssssnnnnnnnnnnnnnnnnnnnnnnnn\n","title":"Anatomy of a Sequence transaction bundle","titles":["Transactions API"]},"58":{"href":"/api/transactions/overview#gas-sponsorship-and-fees","html":"\n<p>The transactions api only dispatches transactions that either:</p>\n<ol>\n<li>Are sponsored in a project via the Sequence Builder, or</li>\n<li>Include a fee payment transaction to the transactions api.</li>\n</ol>\n<p>You can sponsor:</p>\n<ol>\n<li>Sequence wallets, so that they can send transactions without needing to pay fees,</li>\n<li>Token addresses, so that any user can send those tokens for free,</li>\n<li>Contracts, so that any user can interact with them for free,</li>\n<li>Arbitrary addresses, so that any user can transfer native tokens to it for free.</li>\n</ol>\n<p>To start sponsoring transactions, sign into <a href=\"https://sequence.build\">https://sequence.build</a>, and create a new project for the network you want to transact on.</p>\n<p>You can also pay the transactions API directly to dispatch your transactions by adding an additional fee payment transaction to the relayer in your bundle.\nThe list of accepted fee tokens can be retrieved by calling the <code>/FeeTokens</code> endpoint for the network you are interested in:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"cURL\" data-lang=\"sh\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">$</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> curl</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -s</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -X</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> POST</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;Content-Type: application/json&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;{}&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  https://mainnet-relayer.sequence.app/rpc/Relayer/FeeTokens</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> jq</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">  &quot;isFeeRequired&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> true</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">  &quot;tokens&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">      &quot;chainId&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 1,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">      &quot;name&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;Matic&quot;,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">      &quot;symbol&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;MATIC&quot;,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">      &quot;type&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;ERC20_TOKEN&quot;,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">      &quot;decimals&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 18,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">      &quot;logoURL&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;https://raw.githubusercontent.com/spothq/cryptocurrency-icons/master/128/color/matic.png&quot;,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">      &quot;contractAddress&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0&quot;,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">      &quot;tokenID&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;0&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">      &quot;chainId&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 1,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">      &quot;name&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;USDC&quot;,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">      &quot;symbol&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;USDC&quot;,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">      &quot;type&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;ERC20_TOKEN&quot;,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">      &quot;decimals&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 6,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">      &quot;logoURL&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;https://logos.covalenthq.com/tokens/0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48.png&quot;,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">      &quot;contractAddress&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48&quot;,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">      &quot;tokenID&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;0&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">      &quot;chainId&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 1,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">      &quot;name&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;Wrapped Ether&quot;,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">      &quot;symbol&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;WETH&quot;,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">      &quot;type&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;ERC20_TOKEN&quot;,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">      &quot;decimals&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 18,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">      &quot;logoURL&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;https://logos.covalenthq.com/tokens/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2.png&quot;,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">      &quot;contractAddress&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2&quot;,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">      &quot;tokenID&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;0&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>","isPage":false,"text":"\nThe transactions api only dispatches transactions that either:\n\nAre sponsored in a project via the Sequence Builder, or\nInclude a fee payment transaction to the transactions api.\n\nYou can sponsor:\n\nSequence wallets, so that they can send transactions without needing to pay fees,\nToken addresses, so that any user can send those tokens for free,\nContracts, so that any user can interact with them for free,\nArbitrary addresses, so that any user can transfer native tokens to it for free.\n\nTo start sponsoring transactions, sign into https://sequence.build, and create a new project for the network you want to transact on.\nYou can also pay the transactions API directly to dispatch your transactions by adding an additional fee payment transaction to the relayer in your bundle.\nThe list of accepted fee tokens can be retrieved by calling the /FeeTokens endpoint for the network you are interested in:\n$ curl -s -X POST -H &#x27;Content-Type: application/json&#x27; -d &#x27;{}&#x27; \\\n  https://mainnet-relayer.sequence.app/rpc/Relayer/FeeTokens | jq\n \n{\n  &quot;isFeeRequired&quot;: true,\n  &quot;tokens&quot;: [\n    {\n      &quot;chainId&quot;: 1,\n      &quot;name&quot;: &quot;Matic&quot;,\n      &quot;symbol&quot;: &quot;MATIC&quot;,\n      &quot;type&quot;: &quot;ERC20_TOKEN&quot;,\n      &quot;decimals&quot;: 18,\n      &quot;logoURL&quot;: &quot;https://raw.githubusercontent.com/spothq/cryptocurrency-icons/master/128/color/matic.png&quot;,\n      &quot;contractAddress&quot;: &quot;0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0&quot;,\n      &quot;tokenID&quot;: &quot;0&quot;\n    },\n    {\n      &quot;chainId&quot;: 1,\n      &quot;name&quot;: &quot;USDC&quot;,\n      &quot;symbol&quot;: &quot;USDC&quot;,\n      &quot;type&quot;: &quot;ERC20_TOKEN&quot;,\n      &quot;decimals&quot;: 6,\n      &quot;logoURL&quot;: &quot;https://logos.covalenthq.com/tokens/0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48.png&quot;,\n      &quot;contractAddress&quot;: &quot;0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48&quot;,\n      &quot;tokenID&quot;: &quot;0&quot;\n    },\n    {\n      &quot;chainId&quot;: 1,\n      &quot;name&quot;: &quot;Wrapped Ether&quot;,\n      &quot;symbol&quot;: &quot;WETH&quot;,\n      &quot;type&quot;: &quot;ERC20_TOKEN&quot;,\n      &quot;decimals&quot;: 18,\n      &quot;logoURL&quot;: &quot;https://logos.covalenthq.com/tokens/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2.png&quot;,\n      &quot;contractAddress&quot;: &quot;0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2&quot;,\n      &quot;tokenID&quot;: &quot;0&quot;\n    }\n  ]\n}","title":"Gas sponsorship and fees","titles":["Transactions API"]},"59":{"href":"/guides/templates/template-embedded-wallet#quickstart","html":"</header>\n","isPage":true,"text":"\n","title":"Quickstart","titles":[]},"60":{"href":"/guides/templates/template-embedded-wallet#try-a-demo","html":"\n<aside data-callout=\"info\"><p>Try out the seamless UX of our Embedded Wallet at our <a href=\"https://0xsequence.github.io/demo-waas-auth/\">demo</a></p></aside>\n","isPage":false,"text":"\nTry out the seamless UX of our Embedded Wallet at our demo\n","title":"Try a Demo","titles":["Quickstart"]},"61":{"href":"/guides/templates/template-embedded-wallet#template","html":"\n<aside data-callout=\"info\"><p>Get started quickly with a <a href=\"https://github.com/0xsequence/demo-waas-auth\">template</a> leveraging our Embedded Wallet.</p></aside>\n","isPage":false,"text":"\nGet started quickly with a template leveraging our Embedded Wallet.\n","title":"Template","titles":["Quickstart"]},"62":{"href":"/guides/templates/template-embedded-wallet#getting-started","html":"\n","isPage":false,"text":"\n","title":"Getting Started","titles":["Quickstart"]},"63":{"href":"/guides/templates/template-embedded-wallet#sdk-installation","html":"\n<p>We provide TypeScript and Unity SDKs for the Embedded Wallet authentication system. You can install the TypeScript SDK with:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">pnpm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> @0xsequence/waas</span></span></code></pre>\n<p>For more information on the Unity Embedded Wallet SDK, please refer to the <a href=\"/sdk/unity/overview\">Unity SDK documentation</a></p>\n","isPage":false,"text":"\nWe provide TypeScript and Unity SDKs for the Embedded Wallet authentication system. You can install the TypeScript SDK with:\npnpm install @0xsequence/waas\nFor more information on the Unity Embedded Wallet SDK, please refer to the Unity SDK documentation\n","title":"SDK Installation","titles":["Quickstart","Getting Started"]},"64":{"href":"/guides/templates/template-embedded-wallet#project-setup","html":"\n<p>Sequence Embedded Wallet is currently only available as a closed beta. To start using the Embedded Wallet SDKs, you&#x27;ll need to contact the Sequence team and acquire API credentials. Once this is done, you will be provided with two keys:</p>\n<ul>\n<li>Project access key</li>\n<li>Embedded Wallet configuration key</li>\n</ul>\n","isPage":false,"text":"\nSequence Embedded Wallet is currently only available as a closed beta. To start using the Embedded Wallet SDKs, you&#x27;ll need to contact the Sequence team and acquire API credentials. Once this is done, you will be provided with two keys:\n\nProject access key\nEmbedded Wallet configuration key\n\n","title":"Project Setup","titles":["Quickstart","Getting Started"]},"65":{"href":"/guides/templates/template-embedded-wallet#library-setup","html":"\n<p>To start using Sequence Embedded Wallet SDK, you&#x27;ll need to create a new instance of the <code>waas</code> class:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { SequenceWaaS } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/waas&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> waas</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SequenceWaaS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  projectAccessKey: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">process</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">env</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">PROJECT_ACCESS_KEY</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  waasConfigKey: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">process</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">env</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">WAAS_CONFIG_KEY</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  network: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;mumbai&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}, defaults.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">TEST</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n<p>Note that the library is operational, but it can&#x27;t be used to interact with any wallet until you have authenticated <strong>as a user</strong>.</p>","isPage":false,"text":"\nTo start using Sequence Embedded Wallet SDK, you&#x27;ll need to create a new instance of the waas class:\nimport { SequenceWaaS } from &#x27;@0xsequence/waas&#x27;\n \nconst waas = new SequenceWaaS({\n  projectAccessKey: `${process.env.PROJECT_ACCESS_KEY}`,\n  waasConfigKey: `${process.env.WAAS_CONFIG_KEY}`,\n  network: &#x27;mumbai&#x27;\n}, defaults.TEST)\nNote that the library is operational, but it can&#x27;t be used to interact with any wallet until you have authenticated as a user.","title":"Library Setup","titles":["Quickstart","Getting Started"]},"66":{"href":"/sdk/go/overview#go","html":"\n<p>A complete Sequence SDK is also available in Go: <a href=\"https://github.com/0xsequence/go-sequence\">https://github.com/0xsequence/go-sequence</a>.</p>\n<p><a href=\"https://github.com/0xsequence/go-sequence\">go-sequence</a> is the equivalent of <a href=\"https://github.com/0xsequence/sequence.js\">0xsequence</a>\nbut for Go / Golang backends. In fact, all of Sequence&#x27;s infrastructure is written in Go and is built with <a href=\"https://github.com/0xsequence/go-sequence\">go-sequence</a>.</p>\n","isPage":true,"text":"\nA complete Sequence SDK is also available in Go: https://github.com/0xsequence/go-sequence.\ngo-sequence is the equivalent of 0xsequence\nbut for Go / Golang backends. In fact, all of Sequence&#x27;s infrastructure is written in Go and is built with go-sequence.\n","title":"Go","titles":[null,null]},"67":{"href":"/sdk/go/overview#ethkit","html":"\n<p>As part of the Sequence open source tools, our team has also built <a href=\"https://github.com/0xsequence/ethkit\">ethkit</a>, which\nis an Ethereum dev toolkit for Go backends. <a href=\"https://github.com/0xsequence/ethkit\">ethkit</a> supports EOA wallets,\nand you can think of it like <code>ethers.js</code> but for Go.</p>","isPage":false,"text":"\nAs part of the Sequence open source tools, our team has also built ethkit, which\nis an Ethereum dev toolkit for Go backends. ethkit supports EOA wallets,\nand you can think of it like ethers.js but for Go.","title":"ethkit","titles":[null,null]},"68":{"href":"/sdk/unity/connecting-external-wallets#connecting-external-wallets","html":"</header>\n<p>While the majority of user interactions will happen using the embedded wallet, some of your users may have existing wallets they wish to connect with your games. This allows you to validate a user holds a token(s) without requiring them to transfer it to their embedded wallet.</p>\n<p>You can <a href=\"/solutions/wallets/link-wallets/overview/\">connect an external wallet with an embedded wallet</a> via a web interface.</p>\n<p>First, you&#x27;ll want to configure a server to facilitate this connection. Please <a href=\"/solutions/wallets/link-wallets/integration-guide/\">read this guide</a> and come back once you&#x27;ve configured your server (you can skip the first few steps on Builder configuration and integrating embedded wallet into a web app since you&#x27;ve already done this on the Unity side; similarly, you can skip the sections on signing the session auth proof).</p>\n<p>Now that you&#x27;ve configured your server, you can create an <code>EOAWalletLinker</code>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>EOAWalletLinker linker = new EOAWalletLinker(wallet, &quot;yourServersBaseUrl/generateNonce&quot;);</span></span></code></pre>\n<p>You can generate the url for wallet linking with</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>string url = await linker.GenerateEOAWalletlink(chain);</span></span></code></pre>\n<p>or you can generate it and open it with the device&#x27;s default browser (via <a href=\"https://docs.unity3d.com/ScriptReference/Application.OpenURL.html\">Application.OpenURL</a>)</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>linker.OpenEOAWalletLink(chain); // note: this is an awaitable async method.</span></span></code></pre>","isPage":true,"text":"\nWhile the majority of user interactions will happen using the embedded wallet, some of your users may have existing wallets they wish to connect with your games. This allows you to validate a user holds a token(s) without requiring them to transfer it to their embedded wallet.\nYou can connect an external wallet with an embedded wallet via a web interface.\nFirst, you&#x27;ll want to configure a server to facilitate this connection. Please read this guide and come back once you&#x27;ve configured your server (you can skip the first few steps on Builder configuration and integrating embedded wallet into a web app since you&#x27;ve already done this on the Unity side; similarly, you can skip the sections on signing the session auth proof).\nNow that you&#x27;ve configured your server, you can create an EOAWalletLinker.\nEOAWalletLinker linker = new EOAWalletLinker(wallet, &quot;yourServersBaseUrl/generateNonce&quot;);\nYou can generate the url for wallet linking with\nstring url = await linker.GenerateEOAWalletlink(chain);\nor you can generate it and open it with the device&#x27;s default browser (via Application.OpenURL)\nlinker.OpenEOAWalletLink(chain); // note: this is an awaitable async method.","title":"Connecting External Wallets","titles":[]},"69":{"href":"/sdk/unity/deploy-contracts#contract-deployment","html":"</header>\n<p>While, in general, we would recommend deploying your smart contracts via the <a href=\"https://sequence.build/\">Builder</a>, we recognize that there are some use cases where deploying a smart contract from Unity (or a Made-With-Unity application) is useful.</p>\n<p>Contract deployment involves sending a transaction, which is done via an <a href=\"https://medium.com/@sonusprocks/async-await-in-c-unity-explained-in-easy-words-571ebb6a9369\">asynchronous Task</a>. You can use <code>await</code> when calling <code>SequenceWallet.DeployContract</code> from within an async Task if you wish to obtain the <code>ContractDeploymentReturn</code> object directly. Or, you can take the recommended approach which is to setup handler functions for the <code>SequenceWallet.OnDeployContractComplete</code> and <code>SequenceWallet.OnDeployContractFailed</code> events and call the <code>SequenceWallet.DeployContract</code> method from anywhere (without await).</p>\n<p><code>SequenceWallet.DeployContract</code> is essentially a wrapper for a very special <code>SequenceWallet.SendTransaction</code> call and therefore, you can expect to still receive the <code>SequenceWallet.OnSendTransactionComplete</code> or <code>SequenceWallet.OnSendTransactionFailed</code> events in addition.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>public void OnDeployContractCompleteHandler(SuccessfulContractDeploymentReturn result) {</span></span>\n<span class=\"line\"><span>    Address newlyDeployedContractAddress = result.DeployedContractAddress;</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>    // Do something</span></span>\n<span class=\"line\"><span>}</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>public void OnDeployContractFailedHandler(FailedContractDeploymentReturn result) {</span></span>\n<span class=\"line\"><span>    // Do something</span></span>\n<span class=\"line\"><span>}</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>public void OnWalletCreatedHander(SequenceWallet wallet) {</span></span>\n<span class=\"line\"><span>    wallet.OnDeployContractComplete += OnDeployContractCompleteHandler;</span></span>\n<span class=\"line\"><span>    wallet.OnDeployContractFailed += OnDeployContractFailedHandler;</span></span>\n<span class=\"line\"><span>}</span></span></code></pre>\n<p>If you&#x27;re unfamiliar with working with events in Unity, check out this great <a href=\"https://www.reddit.com/r/gamedev/comments/u3hz2v/how_to_use_events_a_supersimple_unity_example/\">Reddit post</a>!</p>\n<p>To deploy a contract you&#x27;ll need to first <a href=\"https://medium.com/coinmonks/compiling-the-smart-contracts-8dcda8071638\">compile your smart contract code into bytecode</a> and add the bytecode as a hexadecimal string in one of your C# scripts.</p>\n<p>To deploy a smart contract, you can use this code snippet:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>string bytecode = &quot;Here you&#x27;ll paste your compiled bytecode&quot;</span></span>\n<span class=\"line\"><span>_wallet.DeployContract(Chain.Polygon, bytecode);</span></span></code></pre>","isPage":true,"text":"\nWhile, in general, we would recommend deploying your smart contracts via the Builder, we recognize that there are some use cases where deploying a smart contract from Unity (or a Made-With-Unity application) is useful.\nContract deployment involves sending a transaction, which is done via an asynchronous Task. You can use await when calling SequenceWallet.DeployContract from within an async Task if you wish to obtain the ContractDeploymentReturn object directly. Or, you can take the recommended approach which is to setup handler functions for the SequenceWallet.OnDeployContractComplete and SequenceWallet.OnDeployContractFailed events and call the SequenceWallet.DeployContract method from anywhere (without await).\nSequenceWallet.DeployContract is essentially a wrapper for a very special SequenceWallet.SendTransaction call and therefore, you can expect to still receive the SequenceWallet.OnSendTransactionComplete or SequenceWallet.OnSendTransactionFailed events in addition.\npublic void OnDeployContractCompleteHandler(SuccessfulContractDeploymentReturn result) {\n    Address newlyDeployedContractAddress = result.DeployedContractAddress;\n\n    // Do something\n}\n\npublic void OnDeployContractFailedHandler(FailedContractDeploymentReturn result) {\n    // Do something\n}\n\npublic void OnWalletCreatedHander(SequenceWallet wallet) {\n    wallet.OnDeployContractComplete += OnDeployContractCompleteHandler;\n    wallet.OnDeployContractFailed += OnDeployContractFailedHandler;\n}\nIf you&#x27;re unfamiliar with working with events in Unity, check out this great Reddit post!\nTo deploy a contract you&#x27;ll need to first compile your smart contract code into bytecode and add the bytecode as a hexadecimal string in one of your C# scripts.\nTo deploy a smart contract, you can use this code snippet:\nstring bytecode = &quot;Here you&#x27;ll paste your compiled bytecode&quot;\n_wallet.DeployContract(Chain.Polygon, bytecode);","title":"Contract Deployment","titles":[]},"70":{"href":"/sdk/unity/installation#installation","html":"</header>\n","isPage":true,"text":"\n","title":"Installation","titles":[]},"71":{"href":"/sdk/unity/installation#package-manager---recommended","html":"\n","isPage":false,"text":"\n","title":"Package Manager - Recommended","titles":["Installation"]},"72":{"href":"/sdk/unity/installation#openupm","html":"\n<ol>\n<li><a href=\"https://openupm.com/#get-started-with-cli-optional\">Install OpenUPM</a></li>\n<li>Open a command line at the root of your Unity project</li>\n<li><code>openupm add xyz.0xsequence.waas-unity</code></li>\n</ol>\n","isPage":false,"text":"\n\nInstall OpenUPM\nOpen a command line at the root of your Unity project\nopenupm add xyz.0xsequence.waas-unity\n\n","title":"OpenUPM","titles":["Installation","Package Manager - Recommended"]},"73":{"href":"/sdk/unity/installation#or-using-package-manager-ui","html":"\n<ol>\n<li>Ensure you have Git 2.14.0 or above installed on your machine</li>\n<li>Open Package Manager (Window &gt; Package Manager)</li>\n<li>Click the &quot;+&quot; icon in the Package Manager window &gt; &quot;Add package from git URL...&quot;</li>\n<li>Paste this url and click Add or press Enter on your keyboard <code>https://github.com/0xsequence/sequence-unity.git?path=/Packages/Sequence-Unity</code></li>\n</ol>\n","isPage":false,"text":"\n\nEnsure you have Git 2.14.0 or above installed on your machine\nOpen Package Manager (Window &gt; Package Manager)\nClick the &quot;+&quot; icon in the Package Manager window &gt; &quot;Add package from git URL...&quot;\nPaste this url and click Add or press Enter on your keyboard https://github.com/0xsequence/sequence-unity.git?path=/Packages/Sequence-Unity\n\n","title":"or using Package Manager UI","titles":["Installation","Package Manager - Recommended"]},"74":{"href":"/sdk/unity/installation#setup","html":"\n<ol>\n<li>Open Package Manager (Window &gt; Package Manager)</li>\n<li>From Package Manager, click on &quot;Samples&quot;</li>\n<li>Import &quot;Setup&quot; from Samples\n<img src=\"/img/unity/unity-import-setup.png\" alt=\"Setup\"/></li>\n</ol>\n<p>a) This will import a Resources folder with the SequenceConfig scriptable object (more on this in Setup).</p>\n<ol start=\"4\">\n<li>Import <code>TMP Essentials</code> (if you haven&#x27;t already). Note: Unity should prompt you to do this automatically if you attempt to Play or Build with a TextMeshPro object in your scene.</li>\n</ol>\n<p><img src=\"/img/unity/unity-import-tmpro.png\" alt=\"Import TMPro\"/></p>\n","isPage":false,"text":"\n\nOpen Package Manager (Window &gt; Package Manager)\nFrom Package Manager, click on &quot;Samples&quot;\nImport &quot;Setup&quot; from Samples\n\n\na) This will import a Resources folder with the SequenceConfig scriptable object (more on this in Setup).\n\nImport TMP Essentials (if you haven&#x27;t already). Note: Unity should prompt you to do this automatically if you attempt to Play or Build with a TextMeshPro object in your scene.\n\n\n","title":"Setup","titles":["Installation","Package Manager - Recommended"]},"75":{"href":"/sdk/unity/installation#samples","html":"\n<p>In addition to this documentation, we&#x27;ve also provided you with a few samples to help with using our SDK.</p>\n<p>These can be found by:</p>\n<ol>\n<li>Opening Package Manager</li>\n<li>Finding our SDK &quot;Sequence WaaS SDK&quot;</li>\n<li>Click on &quot;Samples&quot;</li>\n<li>Click &quot;Import&quot; next to any sample you wish to install. This will create a Samples folder under Assets and import the sample there. The sample will be completely mutable as it lives within your Assets folder.</li>\n</ol>\n<p><img src=\"/img/unity/unity-package-manager-samples.png\" alt=\"Samples\"/></p>\n<p>The second sample &quot;Demo Scene&quot; is sample scene that showcases some of the features of our SDK. It serves as a useful supplement to the documentation.</p>\n<p>The third sample &quot;Useful Scripts&quot; contains useful scripts and Prefabs that make integrating the SDK easier.</p>\n","isPage":false,"text":"\nIn addition to this documentation, we&#x27;ve also provided you with a few samples to help with using our SDK.\nThese can be found by:\n\nOpening Package Manager\nFinding our SDK &quot;Sequence WaaS SDK&quot;\nClick on &quot;Samples&quot;\nClick &quot;Import&quot; next to any sample you wish to install. This will create a Samples folder under Assets and import the sample there. The sample will be completely mutable as it lives within your Assets folder.\n\n\nThe second sample &quot;Demo Scene&quot; is sample scene that showcases some of the features of our SDK. It serves as a useful supplement to the documentation.\nThe third sample &quot;Useful Scripts&quot; contains useful scripts and Prefabs that make integrating the SDK easier.\n","title":"Samples","titles":["Installation","Package Manager - Recommended"]},"76":{"href":"/sdk/unity/installation#manual","html":"\n<p>Installing via Package Manager will put the SDK in a read-only state - note: you will still be able to modify the UI when using Package Manager.</p>\n<p>For most use cases, this is ideal. However, we recognize that some advanced users will want the flexibility to edit the SDK as they see fit.</p>\n<p>Please note that if you do chose this route that updating the SDK will become more challenging because any changes you make will be overwritten and these changes can easily go unnoticed in a version control system. In general, we feel it is safer to import the SDK in read-only mode via Package Manager and write wrappers to extend as needed, but we empower you to work with our SDK how you see fit.</p>\n<ol>\n<li>Add <a href=\"https://docs.unity3d.com/Packages/com.unity.nuget.newtonsoft-json@3.0/manual/index.html\">Newtonsoft.json</a> to your project (if it isn&#x27;t there already) via package manager. Click on the &quot;+&quot; icon in the Package Manager window &gt; &quot;Add package by name...&quot; and add <code>com.unity.nuget.newtonsoft-json</code>.</li>\n<li>Download <a href=\"https://github.com/0xsequence/sequence-unity/releases\">the latest release of the Sequence Unity SDK UnityPackage</a></li>\n<li>Drag the <code>.unitypackage</code> file into your project window and import it</li>\n<li>Import <code>TMP Essentials</code> (if you haven&#x27;t already). Note: Unity should prompt you to do this automatically if you attempt to Play or Build with a TextMeshPro object in your scene.</li>\n</ol>","isPage":false,"text":"\nInstalling via Package Manager will put the SDK in a read-only state - note: you will still be able to modify the UI when using Package Manager.\nFor most use cases, this is ideal. However, we recognize that some advanced users will want the flexibility to edit the SDK as they see fit.\nPlease note that if you do chose this route that updating the SDK will become more challenging because any changes you make will be overwritten and these changes can easily go unnoticed in a version control system. In general, we feel it is safer to import the SDK in read-only mode via Package Manager and write wrappers to extend as needed, but we empower you to work with our SDK how you see fit.\n\nAdd Newtonsoft.json to your project (if it isn&#x27;t there already) via package manager. Click on the &quot;+&quot; icon in the Package Manager window &gt; &quot;Add package by name...&quot; and add com.unity.nuget.newtonsoft-json.\nDownload the latest release of the Sequence Unity SDK UnityPackage\nDrag the .unitypackage file into your project window and import it\nImport TMP Essentials (if you haven&#x27;t already). Note: Unity should prompt you to do this automatically if you attempt to Play or Build with a TextMeshPro object in your scene.\n","title":"Manual","titles":["Installation"]},"77":{"href":"/sdk/unity/onboard-user-funds#onboard-user-funds","html":"</header>\n<p>If you wish for your users to be able to pay for things in your game using cryptocurrencies, you&#x27;ll find our Transak integration to be very helpful.\nTransak allows users to purchase a variety of cryptocurrencies on a variety of blockchains using their credit card using a user friendly web interface. Learn more about Transak <a href=\"https://transak.com/\">here</a>.</p>\n","isPage":true,"text":"\nIf you wish for your users to be able to pay for things in your game using cryptocurrencies, you&#x27;ll find our Transak integration to be very helpful.\nTransak allows users to purchase a variety of cryptocurrencies on a variety of blockchains using their credit card using a user friendly web interface. Learn more about Transak here.\n","title":"Onboard User Funds","titles":[]},"78":{"href":"/sdk/unity/onboard-user-funds#on-ramp-user-funds-via-credit-card","html":"\n<p>To generate a link for your user&#x27;s Transak on-ramping:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>Transak onRamp = new TransakOnRamp(userWalletAddress);</span></span>\n<span class=\"line\"><span>string onRampLink = onRamp.GetTransakLink(); // You&#x27;ll notice via IntelliSense that there are a number of default values you can provide to help tailor your UX</span></span></code></pre>\n<p>From here, you can open the <code>onRampLink</code> via <code>Application.OpenURL</code> or similar. Or, you can also use:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>Transak onRamp = new TransakOnRamp(userWalletAddress);</span></span>\n<span class=\"line\"><span>onRamp.OpenTransakLink(); // You&#x27;ll notice via IntelliSense that there are a number of default values you can provide to help tailor your UX</span></span></code></pre>\n<p>This will automatically call <code>Application.OpenURL</code> on the generated Transak On-Ramp link.</p>\n","isPage":false,"text":"\nTo generate a link for your user&#x27;s Transak on-ramping:\nTransak onRamp = new TransakOnRamp(userWalletAddress);\nstring onRampLink = onRamp.GetTransakLink(); // You&#x27;ll notice via IntelliSense that there are a number of default values you can provide to help tailor your UX\nFrom here, you can open the onRampLink via Application.OpenURL or similar. Or, you can also use:\nTransak onRamp = new TransakOnRamp(userWalletAddress);\nonRamp.OpenTransakLink(); // You&#x27;ll notice via IntelliSense that there are a number of default values you can provide to help tailor your UX\nThis will automatically call Application.OpenURL on the generated Transak On-Ramp link.\n","title":"On-Ramp User Funds via Credit Card","titles":["Onboard User Funds"]},"79":{"href":"/sdk/unity/onboard-user-funds#check-supported-countries","html":"\n<p>To check the countries supported by Transak (and learn about how they are supported), use the <code>GetSupportedCountries</code> Task.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>try {</span></span>\n<span class=\"line\"><span>    SupportedCountry[] supportedCountries = await TransakOnRamp.GetSupportedCountries();</span></span>\n<span class=\"line\"><span>}</span></span>\n<span class=\"line\"><span>catch (Exception e) {</span></span>\n<span class=\"line\"><span>    Debug.LogError($&quot;Encountered error fetching supported countries from Transak: {e.Message}&quot;);</span></span>\n<span class=\"line\"><span>}</span></span></code></pre>","isPage":false,"text":"\nTo check the countries supported by Transak (and learn about how they are supported), use the GetSupportedCountries Task.\ntry {\n    SupportedCountry[] supportedCountries = await TransakOnRamp.GetSupportedCountries();\n}\ncatch (Exception e) {\n    Debug.LogError($&quot;Encountered error fetching supported countries from Transak: {e.Message}&quot;);\n}","title":"Check Supported Countries","titles":["Onboard User Funds"]},"80":{"href":"/sdk/unity/overview#introduction","html":"</header>\n<p>The Sequence Unity Embedded Wallet SDK provides full Sequence <a href=\"/solutions/wallets/embedded-wallet/overview\">Embedded Wallet</a> and <a href=\"/api/indexer/overview\">Indexer</a> integration for your Unity Games, integrated with our own purpose-built for Unity SequenceEthereum library. That&#x27;s right, no Nethereum required!</p>\n<p>This SDK follows <a href=\"https://semver.org/\">Semantic Versioning</a> (<code>major.minor.patch</code>). Breaking changes will always cause a <code>major</code> version increment, non-breaking new features will cause a <code>minor</code> version increment, and bugfixes will cause a <code>patch</code> version increment.</p>\n","isPage":true,"text":"\nThe Sequence Unity Embedded Wallet SDK provides full Sequence Embedded Wallet and Indexer integration for your Unity Games, integrated with our own purpose-built for Unity SequenceEthereum library. That&#x27;s right, no Nethereum required!\nThis SDK follows Semantic Versioning (major.minor.patch). Breaking changes will always cause a major version increment, non-breaking new features will cause a minor version increment, and bugfixes will cause a patch version increment.\n","title":"Introduction","titles":[]},"81":{"href":"/sdk/unity/overview#requirements","html":"\n<p>Unity 2021.3.6f1 or later</p>\n<ul>\n<li>Android</li>\n<li>iOS</li>\n<li>PC standalone -&gt; (Mono builds only when using Social Sign in -&gt; the system commands throw exceptions when doing IL2CPP builds -&gt; see <a href=\"https://github.com/0xsequence/sequence-unity/blob/master/Assets/Sequence/SequenceSDK/Authentication/OpenIdAuthenticator.cs#L231\">OpenIdAuthentication.PlatformSpecificSetup</a>)</li>\n<li>Mac standalone -&gt; (Mono builds only when using Social Sign in -&gt; in our testing MacOS doesn&#x27;t pick up custom URL schemes automatically unless you run some system commands first; these system commands only work on Mono -&gt; see <a href=\"https://github.com/0xsequence/sequence-unity/blob/master/Assets/Sequence/SequenceSDK/Authentication/OpenIdAuthenticator.cs#L231\">OpenIdAuthentication.PlatformSpecificSetup</a>)</li>\n<li>WebGL</li>\n</ul>","isPage":false,"text":"\nUnity 2021.3.6f1 or later\n\nAndroid\niOS\nPC standalone -&gt; (Mono builds only when using Social Sign in -&gt; the system commands throw exceptions when doing IL2CPP builds -&gt; see OpenIdAuthentication.PlatformSpecificSetup)\nMac standalone -&gt; (Mono builds only when using Social Sign in -&gt; in our testing MacOS doesn&#x27;t pick up custom URL schemes automatically unless you run some system commands first; these system commands only work on Mono -&gt; see OpenIdAuthentication.PlatformSpecificSetup)\nWebGL\n","title":"Requirements","titles":["Introduction"]},"82":{"href":"/sdk/unity/read-from-blockchain#read-from-blockchain","html":"</header>\n<p>Reading from the blockchain is done using Unity-Native implementation of our <a href=\"/api/indexer/overview\">Sequence Indexer</a>.</p>\n<p>We recommend creating an instance of the <a href=\"https://github.com/0xsequence/sequence-unity/blob/master/Assets/SequenceSDK/Indexer/ChainIndexer.cs\"><code>ChainIndexer</code> class</a>. This will expose you to all the functionality offered by the <a href=\"https://github.com/0xsequence/sequence-unity/blob/master/Assets/SequenceSDK/Indexer/IIndexer.cs\"><code>IIndexer</code> interface</a>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>IIndexer polygonIndexer = new ChainIndexer(Chain.Polygon);</span></span></code></pre>\n<p>You can check if the indexer API for your given chain is up and running using the <code>Ping</code> async Task. This can be useful if a request is failing. During development, you can also check the status of our indexers on <a href=\"https://status.sequence.info/\">our status page</a>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>IIndexer chainIndexer = new ChainIndexer(chain);</span></span>\n<span class=\"line\"><span>bool indexerIsWorking = await chainIndexer.Ping();</span></span></code></pre>\n","isPage":true,"text":"\nReading from the blockchain is done using Unity-Native implementation of our Sequence Indexer.\nWe recommend creating an instance of the ChainIndexer class. This will expose you to all the functionality offered by the IIndexer interface.\nIIndexer polygonIndexer = new ChainIndexer(Chain.Polygon);\nYou can check if the indexer API for your given chain is up and running using the Ping async Task. This can be useful if a request is failing. During development, you can also check the status of our indexers on our status page.\nIIndexer chainIndexer = new ChainIndexer(chain);\nbool indexerIsWorking = await chainIndexer.Ping();\n","title":"Read from Blockchain","titles":[]},"83":{"href":"/sdk/unity/read-from-blockchain#get-balance","html":"\n<p>To check the Ether (or whatever your network&#x27;s default gas currency is) balance of a user, use the <code>GetEtherBalance</code> async Task.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>IIndexer chainIndexer = new ChainIndexer(chain);</span></span>\n<span class=\"line\"><span>EtherBalance balance = await chainIndexer.GetEtherBalance(address);</span></span>\n<span class=\"line\"><span>BigInteger balanceInWei = balance.balanceWei;</span></span></code></pre>\n","isPage":false,"text":"\nTo check the Ether (or whatever your network&#x27;s default gas currency is) balance of a user, use the GetEtherBalance async Task.\nIIndexer chainIndexer = new ChainIndexer(chain);\nEtherBalance balance = await chainIndexer.GetEtherBalance(address);\nBigInteger balanceInWei = balance.balanceWei;\n","title":"Get Balance","titles":["Read from Blockchain"]},"84":{"href":"/sdk/unity/read-from-blockchain#get-token-balances","html":"\n<p>To fetch the token balances for a user you&#x27;ll want to use the <code>GetTokenBalances</code> async Task.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>IIndexer chainIndexer = new ChainIndexer(chain);</span></span>\n<span class=\"line\"><span>GetTokenBalancesReturn balances = await chainIndexer.GetTokenBalances(new GetTokenBalancesArgs(address));</span></span>\n<span class=\"line\"><span>TokenBalance[] tokenBalances = balances.balances;</span></span></code></pre>\n<p>When fetched this way, you will only receive one token instance for each smart contract. Fetching, without specifying the address, is useful to determine which contracts your player owns tokens from and which ERC20s they have in their wallet.</p>\n<p>To fetch individual balances for ERC721 or ERC1155 tokens, you&#x27;ll want to specify the contract in your <code>GetTokenBalancesArgs</code>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>IIndexer chainIndexer = new ChainIndexer(chain);</span></span>\n<span class=\"line\"><span>GetTokenBalancesReturn balances = await chainIndexer.GetTokenBalances(new GetTokenBalancesArgs(userAddress, contractAddress));</span></span>\n<span class=\"line\"><span>TokenBalance[] tokenBalances = balances.balances;</span></span></code></pre>\n<p>If the player has many tokenIds for a given contract (or owns tokens from many contracts), you&#x27;ll have to deal with pagination. In this case, you&#x27;ll want to check the <code>Page</code> you receive in your <code>GetTokenBalancesReturn</code> to see if it has more and then if it does make another request, including the Page.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>IIndexer chainIndexer = new ChainIndexer(chain);</span></span>\n<span class=\"line\"><span>GetTokenBalancesReturn balances = await chainIndexer.GetTokenBalances(new GetTokenBalancesArgs(userAddress, contractAddress));</span></span>\n<span class=\"line\"><span>List&lt;TokenBalance&gt; finalResult = new List&lt;TokenBalance&gt;();</span></span>\n<span class=\"line\"><span>TokenBalance[] tokenBalances = balances.balances;</span></span>\n<span class=\"line\"><span>AddItemsFromArrayToList(tokenBalances, finalResult);</span></span>\n<span class=\"line\"><span>while (tokenBalances.page.more) {</span></span>\n<span class=\"line\"><span>    tokenBalances = await GetTokenBalances(new GetTokenBalancesArgs(accountAddress, contractAddress, tokenBalances.page));</span></span>\n<span class=\"line\"><span>    AddItemsFromArrayToList(tokenBalances, finalResult);</span></span>\n<span class=\"line\"><span>}</span></span></code></pre>\n<p>To simplify this operation, we&#x27;ve created a wrapper <code>GetTokenBalancesOrganizedInDictionary</code>. This will fetch all of the TokenBalances for a given contractAddress and userAccountAddress and organize them into a Dictionary mapping tokenID (BigInteger) to TokenBalance. In general, you&#x27;ll want to use this most often.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>IIndexer chainIndexer = new ChainIndexer(chain);</span></span>\n<span class=\"line\"><span>Dictionary&lt;BigInteger, TokenBalance&gt; tokenBalancesDictionary = await chainIndexer.GetTokenBalancesOrganizedInDictionary(accountAddress, contractAddress);</span></span></code></pre>\n<p>This will make checking the respective balance for each token id much easier as well.</p>\n","isPage":false,"text":"\nTo fetch the token balances for a user you&#x27;ll want to use the GetTokenBalances async Task.\nIIndexer chainIndexer = new ChainIndexer(chain);\nGetTokenBalancesReturn balances = await chainIndexer.GetTokenBalances(new GetTokenBalancesArgs(address));\nTokenBalance[] tokenBalances = balances.balances;\nWhen fetched this way, you will only receive one token instance for each smart contract. Fetching, without specifying the address, is useful to determine which contracts your player owns tokens from and which ERC20s they have in their wallet.\nTo fetch individual balances for ERC721 or ERC1155 tokens, you&#x27;ll want to specify the contract in your GetTokenBalancesArgs.\nIIndexer chainIndexer = new ChainIndexer(chain);\nGetTokenBalancesReturn balances = await chainIndexer.GetTokenBalances(new GetTokenBalancesArgs(userAddress, contractAddress));\nTokenBalance[] tokenBalances = balances.balances;\nIf the player has many tokenIds for a given contract (or owns tokens from many contracts), you&#x27;ll have to deal with pagination. In this case, you&#x27;ll want to check the Page you receive in your GetTokenBalancesReturn to see if it has more and then if it does make another request, including the Page.\nIIndexer chainIndexer = new ChainIndexer(chain);\nGetTokenBalancesReturn balances = await chainIndexer.GetTokenBalances(new GetTokenBalancesArgs(userAddress, contractAddress));\nList&lt;TokenBalance&gt; finalResult = new List&lt;TokenBalance&gt;();\nTokenBalance[] tokenBalances = balances.balances;\nAddItemsFromArrayToList(tokenBalances, finalResult);\nwhile (tokenBalances.page.more) {\n    tokenBalances = await GetTokenBalances(new GetTokenBalancesArgs(accountAddress, contractAddress, tokenBalances.page));\n    AddItemsFromArrayToList(tokenBalances, finalResult);\n}\nTo simplify this operation, we&#x27;ve created a wrapper GetTokenBalancesOrganizedInDictionary. This will fetch all of the TokenBalances for a given contractAddress and userAccountAddress and organize them into a Dictionary mapping tokenID (BigInteger) to TokenBalance. In general, you&#x27;ll want to use this most often.\nIIndexer chainIndexer = new ChainIndexer(chain);\nDictionary&lt;BigInteger, TokenBalance&gt; tokenBalancesDictionary = await chainIndexer.GetTokenBalancesOrganizedInDictionary(accountAddress, contractAddress);\nThis will make checking the respective balance for each token id much easier as well.\n","title":"Get Token Balances","titles":["Read from Blockchain"]},"85":{"href":"/sdk/unity/read-from-blockchain#get-token-supplies","html":"\n<p>If you need to fetch the total token supply for a given smart contract, you can use the <code>GetTokenSupplies</code> async Task.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>IIndexer chainIndexer = new ChainIndexer(chain);</span></span>\n<span class=\"line\"><span>GetTokenSuppliesReturn tokenSupplies = await chainIndexer.GetTokenSupplies(new GetTokenSuppliesArgs(contractAddress))</span></span></code></pre>\n<p>We don&#x27;t expect this to be a very common operation, but it is exposed for you just in case you need it.</p>\n","isPage":false,"text":"\nIf you need to fetch the total token supply for a given smart contract, you can use the GetTokenSupplies async Task.\nIIndexer chainIndexer = new ChainIndexer(chain);\nGetTokenSuppliesReturn tokenSupplies = await chainIndexer.GetTokenSupplies(new GetTokenSuppliesArgs(contractAddress))\nWe don&#x27;t expect this to be a very common operation, but it is exposed for you just in case you need it.\n","title":"Get Token Supplies","titles":["Read from Blockchain"]},"86":{"href":"/sdk/unity/read-from-blockchain#get-token-supplies-map","html":"\n<p>For <code>GetTokenSupplies</code> power users, we also provide a <code>GetTokenSuppliesMap</code> async Task that allows you to fetch the supplies for multiple token contracts and token ids in a map.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>IIndexer indexer = new ChainIndexer(Chain.Polygon);</span></span>\n<span class=\"line\"><span>string usdcAddress = &quot;0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359&quot;.ToLower();</span></span>\n<span class=\"line\"><span>string wmaticAddress = &quot;0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270&quot;.ToLower();</span></span>\n<span class=\"line\"><span>string skyweaverAddress = &quot;0x631998e91476da5b870d741192fc5cbc55f5a52e&quot;.ToLower();</span></span>\n<span class=\"line\"><span>string skyweaverTokenId1 = &quot;68657&quot;;</span></span>\n<span class=\"line\"><span>string skyweaverTokenId2 = &quot;66669&quot;;</span></span>\n<span class=\"line\"><span>string skyweaverTokenId3 = &quot;66668&quot;;</span></span>\n<span class=\"line\"><span>GetTokenSuppliesMapReturn suppliesMapReturn = await indexer.GetTokenSuppliesMap(new GetTokenSuppliesMapArgs(</span></span>\n<span class=\"line\"><span>    new Dictionary&lt;string, string[]&gt;()</span></span>\n<span class=\"line\"><span>    {</span></span>\n<span class=\"line\"><span>        { usdcAddress, new string[] { } },</span></span>\n<span class=\"line\"><span>        { wmaticAddress, new string[] { &quot;0&quot; } },</span></span>\n<span class=\"line\"><span>        { skyweaverAddress, new string[] { skyweaverTokenId1, skyweaverTokenId2, skyweaverTokenId3 } },</span></span>\n<span class=\"line\"><span>    }));</span></span>\n<span class=\"line\"><span>Dictionary&lt;string, TokenSupply[]&gt; suppliesMap = suppliesMapReturn.supplies;</span></span></code></pre>\n<p>Here, you can expect that <code>suppliesMap[usdcAddress].Length = 1</code> with the TokenSupply object relating to the supply of the ERC20 token.</p>\n<p>Similarly, you can expect that <code>suppliesMap[skyweaverAddress].Length = 3</code> with the TokenSupply object relating to the specified token ids.</p>\n","isPage":false,"text":"\nFor GetTokenSupplies power users, we also provide a GetTokenSuppliesMap async Task that allows you to fetch the supplies for multiple token contracts and token ids in a map.\nIIndexer indexer = new ChainIndexer(Chain.Polygon);\nstring usdcAddress = &quot;0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359&quot;.ToLower();\nstring wmaticAddress = &quot;0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270&quot;.ToLower();\nstring skyweaverAddress = &quot;0x631998e91476da5b870d741192fc5cbc55f5a52e&quot;.ToLower();\nstring skyweaverTokenId1 = &quot;68657&quot;;\nstring skyweaverTokenId2 = &quot;66669&quot;;\nstring skyweaverTokenId3 = &quot;66668&quot;;\nGetTokenSuppliesMapReturn suppliesMapReturn = await indexer.GetTokenSuppliesMap(new GetTokenSuppliesMapArgs(\n    new Dictionary&lt;string, string[]&gt;()\n    {\n        { usdcAddress, new string[] { } },\n        { wmaticAddress, new string[] { &quot;0&quot; } },\n        { skyweaverAddress, new string[] { skyweaverTokenId1, skyweaverTokenId2, skyweaverTokenId3 } },\n    }));\nDictionary&lt;string, TokenSupply[]&gt; suppliesMap = suppliesMapReturn.supplies;\nHere, you can expect that suppliesMap[usdcAddress].Length = 1 with the TokenSupply object relating to the supply of the ERC20 token.\nSimilarly, you can expect that suppliesMap[skyweaverAddress].Length = 3 with the TokenSupply object relating to the specified token ids.\n","title":"Get Token Supplies Map","titles":["Read from Blockchain","Get Token Supplies"]},"87":{"href":"/sdk/unity/read-from-blockchain#get-transaction-history","html":"\n<p>To fetch the transaction history for a given account, you&#x27;ll want to use the <code>GetTransactionHistory</code> method.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>IIndexer chainIndexer = new ChainIndexer(chain);</span></span>\n<span class=\"line\"><span>GetTransactionHistoryReturn history = await chainIndexer.GetTransactionHistory(</span></span>\n<span class=\"line\"><span>    new GetTransactionHistoryArgs(new TransactionHistoryFilter()</span></span>\n<span class=\"line\"><span>    {</span></span>\n<span class=\"line\"><span>        accountAddress = userAccountAddress;</span></span>\n<span class=\"line\"><span>    })</span></span>\n<span class=\"line\"><span>);</span></span></code></pre>\n<p>The <code>TransactionHistoryFilter</code> object allows you to specify how you want to filter your transaction history query, e.g. by account address(es), contract address(es), etc. More info <a href=\"/api/indexer/examples/transaction-history\">here</a>.</p>","isPage":false,"text":"\nTo fetch the transaction history for a given account, you&#x27;ll want to use the GetTransactionHistory method.\nIIndexer chainIndexer = new ChainIndexer(chain);\nGetTransactionHistoryReturn history = await chainIndexer.GetTransactionHistory(\n    new GetTransactionHistoryArgs(new TransactionHistoryFilter()\n    {\n        accountAddress = userAccountAddress;\n    })\n);\nThe TransactionHistoryFilter object allows you to specify how you want to filter your transaction history query, e.g. by account address(es), contract address(es), etc. More info here.","title":"Get Transaction history","titles":["Read from Blockchain"]},"88":{"href":"/sdk/unity/recovering-sessions#recovering-sessions","html":"</header>\n<p>By default, the SDK will require users to sign in everytime the app is closed completely. This is because, by default, we do not write the session wallet information (e.g. private keys) to any form of persistent storage for user security.</p>\n<p>However, on select platforms, we have integrated with the platform&#x27;s native secure storage offering.</p>\n<p>If you enable <code>StoreSessionPrivateKeyInSecureStorage</code> in your <code>SequenceConfig</code> ScriptableObject, we will automatically store the session wallet information for you (on supported platforms) and expose the ability to attempt to recover the session in <code>SequenceLogin</code>. The default <code>LoginPanel</code> will automatically handle the UI flow for this as well (see <a href=\"/sdk/unity/authentication/intro\">Authentication</a>). If the platform is not supported, this flag will have no effect.</p>\n<p>See below the supported platforms and to learn about the platform&#x27;s secure storage solution - it is important to understand the basics of how these systems work and think carefully about the security implications of storing private keys (or any secret for that matter) in persistent storage.</p>\n","isPage":true,"text":"\nBy default, the SDK will require users to sign in everytime the app is closed completely. This is because, by default, we do not write the session wallet information (e.g. private keys) to any form of persistent storage for user security.\nHowever, on select platforms, we have integrated with the platform&#x27;s native secure storage offering.\nIf you enable StoreSessionPrivateKeyInSecureStorage in your SequenceConfig ScriptableObject, we will automatically store the session wallet information for you (on supported platforms) and expose the ability to attempt to recover the session in SequenceLogin. The default LoginPanel will automatically handle the UI flow for this as well (see Authentication). If the platform is not supported, this flag will have no effect.\nSee below the supported platforms and to learn about the platform&#x27;s secure storage solution - it is important to understand the basics of how these systems work and think carefully about the security implications of storing private keys (or any secret for that matter) in persistent storage.\n","title":"Recovering Sessions","titles":[]},"89":{"href":"/sdk/unity/recovering-sessions#ios","html":"\n<p>On iOS, we leverage the <a href=\"https://developer.apple.com/documentation/security/keychain_services?language=objc\">iOS Keychain</a>.</p>\n","isPage":false,"text":"\nOn iOS, we leverage the iOS Keychain.\n","title":"iOS","titles":["Recovering Sessions"]},"90":{"href":"/sdk/unity/recovering-sessions#macos","html":"\n<p>On MacOS, we leverage the <a href=\"https://developer.apple.com/documentation/security/keychain_services?language=objc\">MacOS Keychain</a>.</p>\n","isPage":false,"text":"\nOn MacOS, we leverage the MacOS Keychain.\n","title":"MacOS","titles":["Recovering Sessions"]},"91":{"href":"/sdk/unity/recovering-sessions#windows","html":"\n<p>On Windows PCs, we leverage the <a href=\"https://learn.microsoft.com/en-us/windows/win32/seccng/cng-dpapi\">Crypto: Next Generation - Data Protection API (CNG DPAPI)</a></p>\n","isPage":false,"text":"\nOn Windows PCs, we leverage the Crypto: Next Generation - Data Protection API (CNG DPAPI)\n","title":"Windows","titles":["Recovering Sessions"]},"92":{"href":"/sdk/unity/recovering-sessions#web","html":"\n<p>On Web builds, we leverage <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\">IndexedDB</a> via <a href=\"https://docs.unity3d.com/ScriptReference/PlayerPrefs.html\">PlayerPrefs</a>.</p>","isPage":false,"text":"\nOn Web builds, we leverage IndexedDB via PlayerPrefs.","title":"Web","titles":["Recovering Sessions"]},"93":{"href":"/sdk/unity/setup#setup","html":"</header>\n<ol>\n<li>\n<p>Navigate to the Resources folder imported via the <code>Setup</code> sample and locate the <code>SequenceConfig</code> ScriptableObject</p>\n<p>a) If you imported the SDK manually, you will need to create a Resources folder and SequenceConfig</p>\n<p>b) Create a <code>Resources</code> folder located at <code>Assets/Resources</code>. The SDK uses <a href=\"https://docs.unity3d.com/ScriptReference/Resources.Load.html\">Resources.Load</a> to load the config <code>ScriptableObject</code> we&#x27;ll create in the next step.</p>\n<p>c) On the top bar, click <code>Assets &gt; Create &gt; Sequence &gt; SequenceConfig</code> and place the newly created <code>ScriptableObject</code> at the root of your <code>Resources</code> folder.</p>\n</li>\n<li>\n<p>Fill in <code>SequenceConfig</code> with the appropriate values for your project.</p>\n<p>a) <code>Url Scheme</code> - You must replace this with a string that is unique to your application. This is very important. Failure to do so will cause unexpected behaviour when signing in with social sign in and it will not work.</p>\n<p>b) <code>Builder API Keys</code> - These are found in the <a href=\"https://sequence.build/\">Sequence Builder</a> under <code>Settings &gt; API Access Keys</code></p>\n<p>c) <code>WaaS Config Key</code> - You can get this key in <a href=\"https://sequence.build/\">Sequence Builder</a> under <code>Wallets &gt; Embedded Wallet</code></p>\n<p>d) <code>StoreSessionPrivateKeyInSecureStorage</code> - Available on select platforms: we have integrated with the platform&#x27;s native secure storage system. If enabled, we will store session wallet info (including the private key) in secure storage and automatically attempt to recover the session for the user after closing the app (so they won&#x27;t need to login again). With this disabled (default) or on an unsupported platform, the session wallet&#x27;s private keys never leave the application&#x27;s runtime memory; however, your user will need to sign in again anytime they close the app. The default <code>LoginPanel</code> UI (see <a href=\"/sdk/unity/recovering-sessions\">Recovering Sessions</a>) will handle this behaviour for you automatically, navigating to the appropriate page.</p>\n<p>e) <code>EnableMultipleAccountsPerEmail</code> - By default, the SDK will only allow users to create one account per email. The account is initially associated with the login method used (email + OTP, PlayFab, Google, etc.); the user can associate additional login methods with their account (more on this in the <a href=\"/sdk/unity/authentication/federated-accounts\">Authentication section</a>). If <code>EnableMultipleAccountsPerEmail</code> is enabled, users have the option to create multiple accounts per email address (associated with different login methods). While we have enabled this functionality, we, in general, feel this behaviour may be confusing to end-users and recommend integrators keep this option in the default disabled status.</p>\n</li>\n</ol>\n<aside data-callout=\"warning\"><p>Before proceeding, please make sure you have properly configured the Embedded Wallet in the Builder. See this <a href=\"/solutions/builder/embedded-wallet\">guide</a>.</p></aside>\n<aside data-callout=\"warning\"><p>Please double check that you have copy and pasted the configuration keys from the Builder correctly! This is the most common issue reported when integrating our SDK. If you receive an &quot;invalid tenant&quot; response, you have messed up your configuration! See this <a href=\"/solutions/builder/embedded-wallet\">guide</a>.</p></aside>","isPage":true,"text":"\n\n\nNavigate to the Resources folder imported via the Setup sample and locate the SequenceConfig ScriptableObject\na) If you imported the SDK manually, you will need to create a Resources folder and SequenceConfig\nb) Create a Resources folder located at Assets/Resources. The SDK uses Resources.Load to load the config ScriptableObject we&#x27;ll create in the next step.\nc) On the top bar, click Assets &gt; Create &gt; Sequence &gt; SequenceConfig and place the newly created ScriptableObject at the root of your Resources folder.\n\n\nFill in SequenceConfig with the appropriate values for your project.\na) Url Scheme - You must replace this with a string that is unique to your application. This is very important. Failure to do so will cause unexpected behaviour when signing in with social sign in and it will not work.\nb) Builder API Keys - These are found in the Sequence Builder under Settings &gt; API Access Keys\nc) WaaS Config Key - You can get this key in Sequence Builder under Wallets &gt; Embedded Wallet\nd) StoreSessionPrivateKeyInSecureStorage - Available on select platforms: we have integrated with the platform&#x27;s native secure storage system. If enabled, we will store session wallet info (including the private key) in secure storage and automatically attempt to recover the session for the user after closing the app (so they won&#x27;t need to login again). With this disabled (default) or on an unsupported platform, the session wallet&#x27;s private keys never leave the application&#x27;s runtime memory; however, your user will need to sign in again anytime they close the app. The default LoginPanel UI (see Recovering Sessions) will handle this behaviour for you automatically, navigating to the appropriate page.\ne) EnableMultipleAccountsPerEmail - By default, the SDK will only allow users to create one account per email. The account is initially associated with the login method used (email + OTP, PlayFab, Google, etc.); the user can associate additional login methods with their account (more on this in the Authentication section). If EnableMultipleAccountsPerEmail is enabled, users have the option to create multiple accounts per email address (associated with different login methods). While we have enabled this functionality, we, in general, feel this behaviour may be confusing to end-users and recommend integrators keep this option in the default disabled status.\n\n\nBefore proceeding, please make sure you have properly configured the Embedded Wallet in the Builder. See this guide.\nPlease double check that you have copy and pasted the configuration keys from the Builder correctly! This is the most common issue reported when integrating our SDK. If you receive an &quot;invalid tenant&quot; response, you have messed up your configuration! See this guide.","title":"Setup","titles":[]},"94":{"href":"/sdk/unity/sign-messages#sign-messages","html":"</header>\n<p>Signing a message is an <a href=\"https://medium.com/@sonusprocks/async-await-in-c-unity-explained-in-easy-words-571ebb6a9369\">asynchronous Task</a>. You can use <code>await</code> when calling <code>WaaSWallet.SignMessage</code> from within an async Task if you wish to obtain the <code>SignMessageReturn</code> object directly. Or, you can take the recommended approach which is to setup a handler function for the <code>WaaSWallet.OnSignMessageComplete</code> event and call the <code>WaaSWallet.SignMessage</code> method from anywhere (without await). For example:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>public void OnSignMessageCompleteHandler(string signature) {</span></span>\n<span class=\"line\"><span>    // Do something</span></span>\n<span class=\"line\"><span>}</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>public void OnWalletCreatedHander(SequenceWallet wallet) {</span></span>\n<span class=\"line\"><span>    wallet.OnSignMessageComplete += OnSignMessageCompleteHandler;</span></span>\n<span class=\"line\"><span>}</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>_wallet.SignMessage(Chain.Polygon, &quot;Message to sign&quot;);</span></span></code></pre>\n<p>If you&#x27;re unfamiliar with working with events in Unity, check out this great <a href=\"https://www.reddit.com/r/gamedev/comments/u3hz2v/how_to_use_events_a_supersimple_unity_example/\">Reddit post</a>!</p>","isPage":true,"text":"\nSigning a message is an asynchronous Task. You can use await when calling WaaSWallet.SignMessage from within an async Task if you wish to obtain the SignMessageReturn object directly. Or, you can take the recommended approach which is to setup a handler function for the WaaSWallet.OnSignMessageComplete event and call the WaaSWallet.SignMessage method from anywhere (without await). For example:\npublic void OnSignMessageCompleteHandler(string signature) {\n    // Do something\n}\n\npublic void OnWalletCreatedHander(SequenceWallet wallet) {\n    wallet.OnSignMessageComplete += OnSignMessageCompleteHandler;\n}\n_wallet.SignMessage(Chain.Polygon, &quot;Message to sign&quot;);\nIf you&#x27;re unfamiliar with working with events in Unity, check out this great Reddit post!","title":"Sign Messages","titles":[]},"95":{"href":"/sdk/unity/v2-to-v3-upgrade-guide#upgrading-from-v2-to-v3","html":"</header>\n","isPage":true,"text":"\n","title":"Upgrading from v2 to v3","titles":[]},"96":{"href":"/sdk/unity/v2-to-v3-upgrade-guide#installation","html":"\n<p>If you&#x27;ve installed via Package Manager using the git url, please perform the following:</p>\n<ol>\n<li>Remove Sequence-Unity package</li>\n<li>Re-install using <code>https://github.com/0xsequence/sequence-unity.git?path=/Packages/Sequence-Unity</code> as the link</li>\n</ol>\n","isPage":false,"text":"\nIf you&#x27;ve installed via Package Manager using the git url, please perform the following:\n\nRemove Sequence-Unity package\nRe-install using https://github.com/0xsequence/sequence-unity.git?path=/Packages/Sequence-Unity as the link\n\n","title":"Installation","titles":["Upgrading from v2 to v3"]},"97":{"href":"/sdk/unity/v2-to-v3-upgrade-guide#resolving-compile-errors","html":"\n<ol>\n<li>Delete <code>Samples/Sequence WaaS SDK/version/Setup/Editor</code> - this is now included in the SDK</li>\n<li>All namespaces (using statements) that contain <code>WaaS</code> have been replaced with <code>Sequence.EmbeddedWallet</code></li>\n</ol>\n<p>For example, if you have</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>using Sequence.WaaS;</span></span>\n<span class=\"line\"><span>using Sequence.WaaS.Authentication;</span></span>\n<span class=\"line\"><span>using SequenceSDK.WaaS;</span></span></code></pre>\n<p>Replace this with</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>using Sequence.EmbeddedWallet;</span></span></code></pre>\n<ol start=\"3\">\n<li>\n<p><code>WaaSTransactionQueuer</code> -&gt; <code>SequenceWalletTransactionQueuer</code></p>\n</li>\n<li>\n<p><code>WaaSWallet</code> -&gt; <code>SequenceWallet</code></p>\n</li>\n<li>\n<p>In general, any class, method, or event that contains <code>WaaS</code> in the name and gives you a compile error has had <code>WaaS</code> removed from its name (with the exception of the few previously mentioned classes)\nExamples:\n<code>OnWaaSWalletCreated</code> -&gt; <code>OnWalletCreated</code>\n<code>WaaSSession</code> -&gt; <code>Session</code>\n<code>EthWallet</code> -&gt; <code>EOAWallet</code></p>\n</li>\n<li>\n<p>For any existing <code>LoginPanel</code> instances</p>\n<p>a. Attach the <code>WaaSSessionManager</code> prefab (as Session Manager Prefab) under <code>Sequence &gt; SequenceSDK &gt; EmbeddedWallet &gt; WaaSSessionManager</code> (if it isn’t already there)</p>\n<p>b. Attach the <code>FederatedAuthPopupPanel</code> prefab under <code>Sequence &gt; SequenceFrontend &gt; Prefabs</code></p>\n</li>\n</ol>","isPage":false,"text":"\n\nDelete Samples/Sequence WaaS SDK/version/Setup/Editor - this is now included in the SDK\nAll namespaces (using statements) that contain WaaS have been replaced with Sequence.EmbeddedWallet\n\nFor example, if you have\nusing Sequence.WaaS;\nusing Sequence.WaaS.Authentication;\nusing SequenceSDK.WaaS;\nReplace this with\nusing Sequence.EmbeddedWallet;\n\n\nWaaSTransactionQueuer -&gt; SequenceWalletTransactionQueuer\n\n\nWaaSWallet -&gt; SequenceWallet\n\n\nIn general, any class, method, or event that contains WaaS in the name and gives you a compile error has had WaaS removed from its name (with the exception of the few previously mentioned classes)\nExamples:\nOnWaaSWalletCreated -&gt; OnWalletCreated\nWaaSSession -&gt; Session\nEthWallet -&gt; EOAWallet\n\n\nFor any existing LoginPanel instances\na. Attach the WaaSSessionManager prefab (as Session Manager Prefab) under Sequence &gt; SequenceSDK &gt; EmbeddedWallet &gt; WaaSSessionManager (if it isn’t already there)\nb. Attach the FederatedAuthPopupPanel prefab under Sequence &gt; SequenceFrontend &gt; Prefabs\n\n","title":"Resolving Compile Errors","titles":["Upgrading from v2 to v3"]},"98":{"href":"/sdk/unity/wallet-ui#wallet-ui","html":"</header>\n<p>As a Wallet as a Service product, this SDK requires no UI. However, as we expect some apps will still choose to provide some form of wallet UI to users, we are making efforts to provide a default UI for you to use.</p>\n<p>This UI can be found under <code>SequenceFrontend</code>.</p>\n<p>To add the UI to your scene, you can add the <code>WalletPanel</code> prefab found under <code>SequenceFrontend &gt; Prefabs</code>. It is opened using the Open method; you must provide an <code>Sequence.EmbeddedWallet.IWallet</code> (e.g. a <code>SequenceWallet</code>) as an argument.</p>\n<p>You&#x27;ll notice that the UI is still a work in progress and is also using mocks in some places (fetching transaction history and prices). These will be replaced in coming updates of the SDK, but please feel free to replace them on your own (and for bonus points, submit a PR!).</p>\n","isPage":true,"text":"\nAs a Wallet as a Service product, this SDK requires no UI. However, as we expect some apps will still choose to provide some form of wallet UI to users, we are making efforts to provide a default UI for you to use.\nThis UI can be found under SequenceFrontend.\nTo add the UI to your scene, you can add the WalletPanel prefab found under SequenceFrontend &gt; Prefabs. It is opened using the Open method; you must provide an Sequence.EmbeddedWallet.IWallet (e.g. a SequenceWallet) as an argument.\nYou&#x27;ll notice that the UI is still a work in progress and is also using mocks in some places (fetching transaction history and prices). These will be replaced in coming updates of the SDK, but please feel free to replace them on your own (and for bonus points, submit a PR!).\n","title":"Wallet UI","titles":[]},"99":{"href":"/sdk/unity/wallet-ui#how-it-works","html":"\n<p>The sample Sequence UI is comprised of a few important components.</p>\n","isPage":false,"text":"\nThe sample Sequence UI is comprised of a few important components.\n","title":"How It Works","titles":["Wallet UI"]},"100":{"href":"/sdk/unity/wallet-ui#uipage","html":"\n<p>A <code>UIPage</code> is the base implementation of a &quot;page&quot; in the sample UI. Example pages: <code>LoginPage</code>, <code>TokenInfoPage</code></p>\n<p>It is responsible for opening/closing the page and managing the chosen <code>ITween</code>.</p>\n","isPage":false,"text":"\nA UIPage is the base implementation of a &quot;page&quot; in the sample UI. Example pages: LoginPage, TokenInfoPage\nIt is responsible for opening/closing the page and managing the chosen ITween.\n","title":"UIPage","titles":["Wallet UI","How It Works"]},"101":{"href":"/sdk/unity/wallet-ui#itween","html":"\n<p>An <code>ITween</code> is an interface for an animation (in/out) that can be applied to a <code>RectTransform</code> (a required component of a <code>UIPage</code>). If you don&#x27;t like the animations for a given <code>UIPage</code> or <code>UIPanel</code> you can easily swap it for any other MonoBehaviour implementing the <code>ITween</code> interface, even your own!</p>\n<p>Tip: to save time creating your own animations, consider using the popular <a href=\"https://assetstore.unity.com/packages/tools/animation/dotween-hotween-v2-27676\">DOTween toolset</a></p>\n","isPage":false,"text":"\nAn ITween is an interface for an animation (in/out) that can be applied to a RectTransform (a required component of a UIPage). If you don&#x27;t like the animations for a given UIPage or UIPanel you can easily swap it for any other MonoBehaviour implementing the ITween interface, even your own!\nTip: to save time creating your own animations, consider using the popular DOTween toolset\n","title":"ITween","titles":["Wallet UI","How It Works"]},"102":{"href":"/sdk/unity/wallet-ui#uipanel","html":"\n<p>Inherriting from <code>UIPage</code>, a <code>UIPanel</code> is the base implementation of a &quot;panel&quot; in the sample UI. Example panels: <code>LoginPanel</code>, <code>WalletPanel</code></p>\n<p>In addition to <code>UIPage</code> responsibilities, UIPanels maintain a stack of UIPages and <code>object[]</code> (open arguments) and are responsible for managing any required event listeners and UI transitions between their child pages (according to Scene inspector heirarchy), including handling the &quot;Back&quot; button.</p>\n","isPage":false,"text":"\nInherriting from UIPage, a UIPanel is the base implementation of a &quot;panel&quot; in the sample UI. Example panels: LoginPanel, WalletPanel\nIn addition to UIPage responsibilities, UIPanels maintain a stack of UIPages and object[] (open arguments) and are responsible for managing any required event listeners and UI transitions between their child pages (according to Scene inspector heirarchy), including handling the &quot;Back&quot; button.\n","title":"UIPanel","titles":["Wallet UI","How It Works"]},"103":{"href":"/sdk/unity/wallet-ui#sequencesampleui","html":"\n<p><code>SequenceSampleUI</code> can be thought of as the &quot;manager&quot; of the sample UI. It holds a reference to all the UIPanels and is responsible for opening them as needed, including at <code>Start()</code>. If you are integrating all or part of the provided sample UI into your project, you may find it more practical to replace <code>SequenceSampleUI</code> with your own UI &quot;manager&quot;, using <code>SequenceSampleUI</code> as a reference.</p>\n","isPage":false,"text":"\nSequenceSampleUI can be thought of as the &quot;manager&quot; of the sample UI. It holds a reference to all the UIPanels and is responsible for opening them as needed, including at Start(). If you are integrating all or part of the provided sample UI into your project, you may find it more practical to replace SequenceSampleUI with your own UI &quot;manager&quot;, using SequenceSampleUI as a reference.\n","title":"SequenceSampleUI","titles":["Wallet UI","How It Works"]},"104":{"href":"/sdk/unity/wallet-ui#ui-customizability","html":"\n<p>Built on Unity&#x27;s UI system, the UI is entirely customizable. We encourage you to make it your own and &quot;beautify&quot; it to suit your app!</p>\n","isPage":false,"text":"\nBuilt on Unity&#x27;s UI system, the UI is entirely customizable. We encourage you to make it your own and &quot;beautify&quot; it to suit your app!\n","title":"UI Customizability","titles":["Wallet UI"]},"105":{"href":"/sdk/unity/wallet-ui#color-scheme-manager","html":"\n<p>To help you with the process, we&#x27;ve added a basic <code>ColorSchemeManager</code> script which you can experiment with in our Demo scene, which can be <a href=\"/sdk/unity/installation#samples\">imported via Package Manager</a>.</p>\n<p>To use the <code>ColorSchemeManager</code>, please perform the following in edit mode.</p>\n<ol>\n<li>Create a <code>Color Scheme</code> <a href=\"https://docs.unity3d.com/Manual/class-ScriptableObject.html\">scriptable object</a> by navigating to the top bar <code>Assets &gt; Create &gt; Sequence &gt; Color Scheme</code> and give it an appropriate name.</li>\n<li>Set the desired colors in your new scriptable object - don&#x27;t forget to set the alpha values! Unity defaults these to 0.</li>\n<li>Locate the <code>ColorSchemeManager</code> MonoBehaviour in your scene in the inspector. In our demo scene, this is attached to the <code>SequenceCanvas</code> gameObject.</li>\n<li>Set your newly created scriptable object as the Color Scheme.</li>\n<li>Click &quot;Apply&quot;. Note that this may take a few seconds to apply and you <i>may</i> need to click apply multiple times due to the way Unity refreshes after changes in the inspector (version dependant).</li>\n</ol>\n<p>The <code>ColorSchemeManager</code> isn&#x27;t meant to give you perfect results and the perfect UI right out of the gate, but we hope it saves you some time on the way there!</p>\n","isPage":false,"text":"\nTo help you with the process, we&#x27;ve added a basic ColorSchemeManager script which you can experiment with in our Demo scene, which can be imported via Package Manager.\nTo use the ColorSchemeManager, please perform the following in edit mode.\n\nCreate a Color Scheme scriptable object by navigating to the top bar Assets &gt; Create &gt; Sequence &gt; Color Scheme and give it an appropriate name.\nSet the desired colors in your new scriptable object - don&#x27;t forget to set the alpha values! Unity defaults these to 0.\nLocate the ColorSchemeManager MonoBehaviour in your scene in the inspector. In our demo scene, this is attached to the SequenceCanvas gameObject.\nSet your newly created scriptable object as the Color Scheme.\nClick &quot;Apply&quot;. Note that this may take a few seconds to apply and you may need to click apply multiple times due to the way Unity refreshes after changes in the inspector (version dependant).\n\nThe ColorSchemeManager isn&#x27;t meant to give you perfect results and the perfect UI right out of the gate, but we hope it saves you some time on the way there!\n","title":"Color Scheme Manager","titles":["Wallet UI","UI Customizability"]},"106":{"href":"/sdk/unity/wallet-ui#more-customization-tools-coming-soon","html":"\n<p>We hope to bring you more convenience tools to help you customize the UI quicker and easier! While we have ideas of our own, nobody understands your needs better than you do, so please don&#x27;t hesitate to reach out to us with any ideas you have! Or better yet, submit a PR!</p>","isPage":false,"text":"\nWe hope to bring you more convenience tools to help you customize the UI quicker and easier! While we have ideas of our own, nobody understands your needs better than you do, so please don&#x27;t hesitate to reach out to us with any ideas you have! Or better yet, submit a PR!","title":"More Customization Tools Coming Soon","titles":["Wallet UI","UI Customizability"]},"107":{"href":"/sdk/unity/write-to-blockchain#write-to-blockchain","html":"</header>\n<p>The blockchain can be thought of as a general-purpose, publically viewable and verified, database. To write to a blockchain, similar to with a typical database, you must make a <u>transaction</u>.</p>\n<p>Typically, creating a blockchain transaction is rather complex, but Embedded Wallet handles that complexity for you and exposes 5 types of <code>Transactions</code>.</p>\n<p>Sending a transaction is an <a href=\"https://medium.com/@sonusprocks/async-await-in-c-unity-explained-in-easy-words-571ebb6a9369\">asynchronous Task</a>. You can use <code>await</code> when calling <code>SequenceWallet.SendTransaction</code> if you wish to obtain the <code>TransactionReturn</code> object directly. Or, you can take the recommended approach which is to setup handler functions for the <code>SequenceWallet.OnSendTransactionComplete</code> and <code>SequenceWallet.OnSendTransactionFailed</code> events and call the <code>SequenceWallet.SendTransaction</code> method from anywhere (without await). For example:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>public void OnSendTransactionCompleteHandler(SuccessfulTransactionReturn result) {</span></span>\n<span class=\"line\"><span>    // Do something</span></span>\n<span class=\"line\"><span>}</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>public void OnSendTransactionFailedHandler(FailedTransactionReturn result) {</span></span>\n<span class=\"line\"><span>    // Do something</span></span>\n<span class=\"line\"><span>}</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>public void OnWalletCreatedHander(SequenceWallet wallet) {</span></span>\n<span class=\"line\"><span>    wallet.OnSendTransactionComplete += OnSendTransactionCompleteHandler;</span></span>\n<span class=\"line\"><span>    wallet.OnSendTransactionFailed += OnSendTransactionFailedHandler;</span></span>\n<span class=\"line\"><span>}</span></span></code></pre>\n<p>If you&#x27;re unfamiliar with working with events in Unity, check out this great <a href=\"https://www.reddit.com/r/gamedev/comments/u3hz2v/how_to_use_events_a_supersimple_unity_example/\">Reddit post</a>!</p>\n","isPage":true,"text":"\nThe blockchain can be thought of as a general-purpose, publically viewable and verified, database. To write to a blockchain, similar to with a typical database, you must make a transaction.\nTypically, creating a blockchain transaction is rather complex, but Embedded Wallet handles that complexity for you and exposes 5 types of Transactions.\nSending a transaction is an asynchronous Task. You can use await when calling SequenceWallet.SendTransaction if you wish to obtain the TransactionReturn object directly. Or, you can take the recommended approach which is to setup handler functions for the SequenceWallet.OnSendTransactionComplete and SequenceWallet.OnSendTransactionFailed events and call the SequenceWallet.SendTransaction method from anywhere (without await). For example:\npublic void OnSendTransactionCompleteHandler(SuccessfulTransactionReturn result) {\n    // Do something\n}\n\npublic void OnSendTransactionFailedHandler(FailedTransactionReturn result) {\n    // Do something\n}\n\npublic void OnWalletCreatedHander(SequenceWallet wallet) {\n    wallet.OnSendTransactionComplete += OnSendTransactionCompleteHandler;\n    wallet.OnSendTransactionFailed += OnSendTransactionFailedHandler;\n}\nIf you&#x27;re unfamiliar with working with events in Unity, check out this great Reddit post!\n","title":"Write to Blockchain","titles":[]},"108":{"href":"/sdk/unity/write-to-blockchain#rawtransaction","html":"\n<p>The most basic form of a <code>Transaction</code>, a raw transaction, is very useful to send ETH or the gas currency of the network you are interacting with to an <code>Address</code>.</p>\n<p>For example, to send one MATIC to <code>0x9766bf76b2E3e7BCB8c61410A3fC873f1e89b43f</code> you can use this snippet:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>_wallet.SendTransaction(</span></span>\n<span class=\"line\"><span>    Chain.Polygon,</span></span>\n<span class=\"line\"><span>    new Sequence.EmbeddedWallet.Transaction[]</span></span>\n<span class=\"line\"><span>    {</span></span>\n<span class=\"line\"><span>        new RawTransaction(&quot;0x9766bf76b2E3e7BCB8c61410A3fC873f1e89b43f&quot;, DecimalNormalizer.Normalize(1))</span></span>\n<span class=\"line\"><span>    });</span></span></code></pre>\n<p>where _wallet is a SequenceWallet.</p>\n<p>Note: the <a href=\"https://ethereum.org/en/developers/docs/evm/\">EVM</a> does not support floating point numbers. As a result, token (and gas currency) values are represented by whole numbers and a &quot;decimals&quot; value. 1 ETH (or in the example above 1 MATIC) is represented as <code>1000000000000000000</code> (1 * 10^18) as ETH, MATIC, and most gas currencies have a &quot;decimals&quot; value of 18. <code>DecimalNormalizer.Normalize</code> (above) is a basic helper function that will return <code>input value * 10^decimals</code> and optionally accepts a &quot;decimals&quot; value as a second parameter (defaulting to 18 when not provided).</p>\n<p>Additionally, you can include data with a raw transaction in hexadecimal format as a string. For more on this, please see the advanced section of this documentation.</p>\n","isPage":false,"text":"\nThe most basic form of a Transaction, a raw transaction, is very useful to send ETH or the gas currency of the network you are interacting with to an Address.\nFor example, to send one MATIC to 0x9766bf76b2E3e7BCB8c61410A3fC873f1e89b43f you can use this snippet:\n_wallet.SendTransaction(\n    Chain.Polygon,\n    new Sequence.EmbeddedWallet.Transaction[]\n    {\n        new RawTransaction(&quot;0x9766bf76b2E3e7BCB8c61410A3fC873f1e89b43f&quot;, DecimalNormalizer.Normalize(1))\n    });\nwhere _wallet is a SequenceWallet.\nNote: the EVM does not support floating point numbers. As a result, token (and gas currency) values are represented by whole numbers and a &quot;decimals&quot; value. 1 ETH (or in the example above 1 MATIC) is represented as 1000000000000000000 (1 * 10^18) as ETH, MATIC, and most gas currencies have a &quot;decimals&quot; value of 18. DecimalNormalizer.Normalize (above) is a basic helper function that will return input value * 10^decimals and optionally accepts a &quot;decimals&quot; value as a second parameter (defaulting to 18 when not provided).\nAdditionally, you can include data with a raw transaction in hexadecimal format as a string. For more on this, please see the advanced section of this documentation.\n","title":"RawTransaction","titles":["Write to Blockchain"]},"109":{"href":"/sdk/unity/write-to-blockchain#senderc20","html":"\n<p>An <a href=\"https://docs.openzeppelin.com/contracts/4.x/erc20\">ERC20</a> token is the fungible token standard. You can easily deploy an ERC20 contract and mint tokens using our <a href=\"https://sequence.build/\">Builder</a>. Learn how in our <a href=\"/solutions/builder/contracts\">Builder documentation</a>.</p>\n<p>To send an ERC20 token transaction, you can use this code snippet:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>_wallet.SendTransaction(Chain.Polygon, new Sequence.EmbeddedWallet.Transaction[]</span></span>\n<span class=\"line\"><span>    {</span></span>\n<span class=\"line\"><span>        new SendERC20(</span></span>\n<span class=\"line\"><span>            erc20TokenAddress,</span></span>\n<span class=\"line\"><span>            ToAddress,</span></span>\n<span class=\"line\"><span>            AmountAsString),</span></span>\n<span class=\"line\"><span>    });</span></span></code></pre>\n<p>Note: as above, it is recommended to use <code>DecimalNormalizer.Normalize</code> to convert the amount from human readable format to EVM format. Please make sure to include the optional &quot;decimals&quot; int parameter if your ERC20 token has a &quot;decimals&quot; value that is not 18. If you&#x27;re not sure how many &quot;decimals&quot; your ERC20 has, this can be easily read on the Builder using the &quot;decimals&quot; method under &quot;Read Contract&quot;.</p>\n","isPage":false,"text":"\nAn ERC20 token is the fungible token standard. You can easily deploy an ERC20 contract and mint tokens using our Builder. Learn how in our Builder documentation.\nTo send an ERC20 token transaction, you can use this code snippet:\n_wallet.SendTransaction(Chain.Polygon, new Sequence.EmbeddedWallet.Transaction[]\n    {\n        new SendERC20(\n            erc20TokenAddress,\n            ToAddress,\n            AmountAsString),\n    });\nNote: as above, it is recommended to use DecimalNormalizer.Normalize to convert the amount from human readable format to EVM format. Please make sure to include the optional &quot;decimals&quot; int parameter if your ERC20 token has a &quot;decimals&quot; value that is not 18. If you&#x27;re not sure how many &quot;decimals&quot; your ERC20 has, this can be easily read on the Builder using the &quot;decimals&quot; method under &quot;Read Contract&quot;.\n","title":"sendERC20","titles":["Write to Blockchain"]},"110":{"href":"/sdk/unity/write-to-blockchain#complex-erc20-interactions","html":"\n<p>For interactions with ERC20 tokens outside of basic transfers, you&#x27;ll want to use our <code>SequenceEthereum</code> library provided with the SDK. We&#x27;ve created ERC20 smart contract wrapper functions for your convenience that allow you to create and send <code>RawTransactions</code> with Embedded Wallets.</p>\n<p>First, you&#x27;ll need to create an <code>ERC20</code> object by providing a contract address and optionally, an <a href=\"https://docs.soliditylang.org/en/latest/abi-spec.html#json\">ABI</a> string, if you are using a custom variation of the ERC20 standard (not recommended).</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>ERC20 myToken = new ERC20(myTokenAddress);</span></span></code></pre>\n<p>with this reference, you&#x27;ll have access to all of the methods implemented by the ERC20 class. Any method that returns a <code>CallContractFunction</code>, e.g. <code>Mint</code>, can be used when creating a RawTransaction with Embedded Wallets. For example:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>ERC20 myToken = new ERC20(myTokenAddress);</span></span>\n<span class=\"line\"><span>_wallet.SendTransaction(Chain.Polygon, new Sequence.EmbeddedWallet.Transaction[]</span></span>\n<span class=\"line\"><span>    {</span></span>\n<span class=\"line\"><span>        new RawTransaction(myToken.Mint(toAddress, DecimalNormalizer.NormalizeAsBigInteger(amount))),</span></span>\n<span class=\"line\"><span>    });</span></span></code></pre>\n","isPage":false,"text":"\nFor interactions with ERC20 tokens outside of basic transfers, you&#x27;ll want to use our SequenceEthereum library provided with the SDK. We&#x27;ve created ERC20 smart contract wrapper functions for your convenience that allow you to create and send RawTransactions with Embedded Wallets.\nFirst, you&#x27;ll need to create an ERC20 object by providing a contract address and optionally, an ABI string, if you are using a custom variation of the ERC20 standard (not recommended).\nERC20 myToken = new ERC20(myTokenAddress);\nwith this reference, you&#x27;ll have access to all of the methods implemented by the ERC20 class. Any method that returns a CallContractFunction, e.g. Mint, can be used when creating a RawTransaction with Embedded Wallets. For example:\nERC20 myToken = new ERC20(myTokenAddress);\n_wallet.SendTransaction(Chain.Polygon, new Sequence.EmbeddedWallet.Transaction[]\n    {\n        new RawTransaction(myToken.Mint(toAddress, DecimalNormalizer.NormalizeAsBigInteger(amount))),\n    });\n","title":"Complex ERC20 Interactions","titles":["Write to Blockchain","sendERC20"]},"111":{"href":"/sdk/unity/write-to-blockchain#senderc721","html":"\n<p>An <a href=\"https://docs.openzeppelin.com/contracts/4.x/erc721\">ERC721</a> token is the non-fungible standard, you&#x27;ve probably heard of them as NFTs. You can easily deploy an ERC721 contract and mint tokens using our <a href=\"https://sequence.build/\">Builder</a>. Learn how in our <a href=\"/solutions/builder/contracts\">Builder documentation</a>.</p>\n<p>To send an ERC721 token transaction, you can use this code snippet:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>_wallet.SendTransaction(Chain.Polygon, new Sequence.EmbeddedWallet.Transaction[]</span></span>\n<span class=\"line\"><span>    {</span></span>\n<span class=\"line\"><span>        new SendERC721(</span></span>\n<span class=\"line\"><span>            erc721TokenAddress,</span></span>\n<span class=\"line\"><span>            ToAddress,</span></span>\n<span class=\"line\"><span>            TokenIdAsString),</span></span>\n<span class=\"line\"><span>    });</span></span></code></pre>\n","isPage":false,"text":"\nAn ERC721 token is the non-fungible standard, you&#x27;ve probably heard of them as NFTs. You can easily deploy an ERC721 contract and mint tokens using our Builder. Learn how in our Builder documentation.\nTo send an ERC721 token transaction, you can use this code snippet:\n_wallet.SendTransaction(Chain.Polygon, new Sequence.EmbeddedWallet.Transaction[]\n    {\n        new SendERC721(\n            erc721TokenAddress,\n            ToAddress,\n            TokenIdAsString),\n    });\n","title":"sendERC721","titles":["Write to Blockchain"]},"112":{"href":"/sdk/unity/write-to-blockchain#complex-erc721-interactions","html":"\n<p>For interactions with ERC721 tokens outside of basic transfers, you&#x27;ll want to use our <code>SequenceEthereum</code> library provided with the SDK. We&#x27;ve created ERC21 smart contract wrapper functions for your convenience that allow you to create and send <code>RawTransactions</code> with Embedded Wallets.</p>\n<p>First, you&#x27;ll need to create an <code>ERC721</code> object by providing a contract address and optionally, an <a href=\"https://docs.soliditylang.org/en/latest/abi-spec.html#json\">ABI</a> string, if you are using a custom variation of the ERC721 standard (not recommended).</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>ERC721 myToken = new ERC721(myTokenAddress);</span></span></code></pre>\n<p>with this reference, you&#x27;ll have access to all of the methods implemented by the ERC721 class. Any method that returns a <code>CallContractFunction</code>, e.g. <code>SafeMint</code>, can be used when creating a RawTransaction with Embedded Wallets. For example:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>ERC721 myToken = new ERC721(myTokenAddress);</span></span>\n<span class=\"line\"><span>_wallet.SendTransaction(Chain.Polygon, new Sequence.EmbeddedWallet.Transaction[]</span></span>\n<span class=\"line\"><span>    {</span></span>\n<span class=\"line\"><span>        new RawTransaction(myToken.SafeMint(toAddress)),</span></span>\n<span class=\"line\"><span>    });</span></span></code></pre>\n","isPage":false,"text":"\nFor interactions with ERC721 tokens outside of basic transfers, you&#x27;ll want to use our SequenceEthereum library provided with the SDK. We&#x27;ve created ERC21 smart contract wrapper functions for your convenience that allow you to create and send RawTransactions with Embedded Wallets.\nFirst, you&#x27;ll need to create an ERC721 object by providing a contract address and optionally, an ABI string, if you are using a custom variation of the ERC721 standard (not recommended).\nERC721 myToken = new ERC721(myTokenAddress);\nwith this reference, you&#x27;ll have access to all of the methods implemented by the ERC721 class. Any method that returns a CallContractFunction, e.g. SafeMint, can be used when creating a RawTransaction with Embedded Wallets. For example:\nERC721 myToken = new ERC721(myTokenAddress);\n_wallet.SendTransaction(Chain.Polygon, new Sequence.EmbeddedWallet.Transaction[]\n    {\n        new RawTransaction(myToken.SafeMint(toAddress)),\n    });\n","title":"Complex ERC721 Interactions","titles":["Write to Blockchain","sendERC721"]},"113":{"href":"/sdk/unity/write-to-blockchain#senderc1155","html":"\n<p>An <a href=\"https://docs.openzeppelin.com/contracts/4.x/api/token/erc1155\">ERC1155</a> token is the multi token standard, often referred to as SFTs (semi-fungible tokens). As <a href=\"https://eips.ethereum.org/EIPS/eip-1155\">co-creators of the ERC1155 standard</a> we are firm believers in its unparalleled usefulness for games. You can easily deploy an ERC1155 contract and mint tokens using our <a href=\"https://sequence.build/\">Builder</a>. Learn how in our <a href=\"/solutions/builder/contracts\">Builder documentation</a>.</p>\n<p>To send an ERC1155 token transaction, you can use this code snippet:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>_wallet.SendTransaction(Chain.Polygon, new Sequence.EmbeddedWallet.Transaction[]</span></span>\n<span class=\"line\"><span>    {</span></span>\n<span class=\"line\"><span>        new SendERC1155(</span></span>\n<span class=\"line\"><span>            erc1155TokenAddress,</span></span>\n<span class=\"line\"><span>            ToAddress,</span></span>\n<span class=\"line\"><span>            new SendERC1155Values[]</span></span>\n<span class=\"line\"><span>            {</span></span>\n<span class=\"line\"><span>                new SendERC1155Values(TokenIdAsString, AmountAsString),</span></span>\n<span class=\"line\"><span>                ...</span></span>\n<span class=\"line\"><span>            }),</span></span>\n<span class=\"line\"><span>    });</span></span></code></pre>\n<p>Note: you can send multiple token ids from the same ERC1155 contract in a single transaction by including multiple <code>SendERC1155Values</code> objects in the transaction</p>\n","isPage":false,"text":"\nAn ERC1155 token is the multi token standard, often referred to as SFTs (semi-fungible tokens). As co-creators of the ERC1155 standard we are firm believers in its unparalleled usefulness for games. You can easily deploy an ERC1155 contract and mint tokens using our Builder. Learn how in our Builder documentation.\nTo send an ERC1155 token transaction, you can use this code snippet:\n_wallet.SendTransaction(Chain.Polygon, new Sequence.EmbeddedWallet.Transaction[]\n    {\n        new SendERC1155(\n            erc1155TokenAddress,\n            ToAddress,\n            new SendERC1155Values[]\n            {\n                new SendERC1155Values(TokenIdAsString, AmountAsString),\n                ...\n            }),\n    });\nNote: you can send multiple token ids from the same ERC1155 contract in a single transaction by including multiple SendERC1155Values objects in the transaction\n","title":"sendERC1155","titles":["Write to Blockchain"]},"114":{"href":"/sdk/unity/write-to-blockchain#complex-erc1155-interactions","html":"\n<p>For interactions with ERC1155 tokens outside of basic transfers, you&#x27;ll want to use our <code>SequenceEthereum</code> library provided with the SDK. We&#x27;ve created ERC1155 smart contract wrapper functions for your convenience that allow you to create and send <code>RawTransactions</code> with Embedded Wallets.</p>\n<p>First, you&#x27;ll need to create an <code>ERC1155</code> object by providing a contract address and optionally, an <a href=\"https://docs.soliditylang.org/en/latest/abi-spec.html#json\">ABI</a> string, if you are using a custom variation of the ERC1155 standard (not recommended).</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>ERC1155 myToken = new ERC1155(myTokenAddress);</span></span></code></pre>\n<p>with this reference, you&#x27;ll have access to all of the methods implemented by the ERC1155 class. Any method that returns a <code>CallContractFunction</code>, e.g. <code>Mint</code>, can be used when creating a RawTransaction with Embedded Wallets. For example:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>ERC1155 myToken = new ERC1155(myTokenAddress);</span></span>\n<span class=\"line\"><span>_wallet.SendTransaction(Chain.Polygon, new Sequence.EmbeddedWallet.Transaction[]</span></span>\n<span class=\"line\"><span>    {</span></span>\n<span class=\"line\"><span>        new RawTransaction(myToken.Mint(toAddress, tokenId, amount)),</span></span>\n<span class=\"line\"><span>    });</span></span></code></pre>\n","isPage":false,"text":"\nFor interactions with ERC1155 tokens outside of basic transfers, you&#x27;ll want to use our SequenceEthereum library provided with the SDK. We&#x27;ve created ERC1155 smart contract wrapper functions for your convenience that allow you to create and send RawTransactions with Embedded Wallets.\nFirst, you&#x27;ll need to create an ERC1155 object by providing a contract address and optionally, an ABI string, if you are using a custom variation of the ERC1155 standard (not recommended).\nERC1155 myToken = new ERC1155(myTokenAddress);\nwith this reference, you&#x27;ll have access to all of the methods implemented by the ERC1155 class. Any method that returns a CallContractFunction, e.g. Mint, can be used when creating a RawTransaction with Embedded Wallets. For example:\nERC1155 myToken = new ERC1155(myTokenAddress);\n_wallet.SendTransaction(Chain.Polygon, new Sequence.EmbeddedWallet.Transaction[]\n    {\n        new RawTransaction(myToken.Mint(toAddress, tokenId, amount)),\n    });\n","title":"Complex ERC1155 Interactions","titles":["Write to Blockchain","sendERC1155"]},"115":{"href":"/sdk/unity/write-to-blockchain#delayedencode","html":"\n<p>When calling a smart contract on an EVM-based network, the client goes through a complex process known as &quot;ABI encoding&quot; where the function signature you want to call as well as the parameters you&#x27;re providing are encoded into a binary format. This process is complicated and error-prone so we&#x27;ve abstracted it all away so that you don&#x27;t have to deal with it. But, if you&#x27;re curious to learn how it works, please see <a href=\"https://docs.soliditylang.org/en/develop/abi-spec.html\">this document</a>.</p>\n<p>A DelayedEncode transaction allows you to call any method on an arbitrary smart contract, allowing us to handle the complicated ABI encoding process server-side.</p>\n<p>To send a DelayedEncode transaction, you can use this code snippet:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>_wallet.SendTransaction(Chain.Polygon, new Sequence.EmbeddedWallet.Transaction[]</span></span>\n<span class=\"line\"><span>    {</span></span>\n<span class=\"line\"><span>        new DelayedEncode(ContractAddress, ValueAsString, new DelayedEncodeData(</span></span>\n<span class=\"line\"><span>            ContractABIAsString,</span></span>\n<span class=\"line\"><span>            ParametersAsObjectArray,</span></span>\n<span class=\"line\"><span>            FunctionNameAsString)),</span></span>\n<span class=\"line\"><span>    });</span></span></code></pre>\n<p>Let&#x27;s examine the above to get a better understanding of some of the variables that may be non-obvious.</p>\n<p>ValueAsString: This will <i>usually</i> be &quot;0&quot; unless you are calling a <a href=\"https://solidity-by-example.org/payable/\">payable method</a> denoted by the <code>payable</code> keyword in the smart contract definition. If you are calling a payable method, it is recommended to use <code>DecimalNormalizer.Normalize</code> to convert the amount from human readable format to EVM format. Note that the user will need to have the required funds in their wallet in order to pay the value specified to a payable function.</p>\n<p>ContractABIAsString: This can either be the entire <a href=\"https://docs.soliditylang.org/en/latest/abi-spec.html#json\">ABI</a> or just the function you plan on interacting with. If you&#x27;re not familiar with ABIs, we&#x27;d recommend copy-pasting the function signature (with parameters) from the contract source code on Etherscan (or the appropriate block explorer for your network) and removing the whitespace and variable names.</p>\n<p>ParametersAsObjectArray: The parameters you want to provide to the method you wish to call. No need to provide the parameter names, just their values in the order they appear in the ABI. Provide parameters in string format when in doubt.</p>\n<p>FunctionNameAsString: The name of the function you want to call as it appears in the ABI (or source code). Exclude parentheses and parameters.</p>\n<p>Putting this together, an example of using delayed encode to call the &quot;mint&quot; function on an ERC20 would look like this:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>_wallet.SendTransaction(Chain.Polygon, new Sequence.EmbeddedWallet.Transaction[]</span></span>\n<span class=\"line\"><span>    {</span></span>\n<span class=\"line\"><span>        new DelayedEncode(ContractAddress, &quot;0&quot;, new DelayedEncodeData(</span></span>\n<span class=\"line\"><span>            &quot;mint(address,uint256)&quot;,</span></span>\n<span class=\"line\"><span>            new object[]</span></span>\n<span class=\"line\"><span>            {</span></span>\n<span class=\"line\"><span>                ToAddress, DecimalNormalizer.Normalize(1)</span></span>\n<span class=\"line\"><span>            },</span></span>\n<span class=\"line\"><span>            &quot;mint&quot;)),</span></span>\n<span class=\"line\"><span>    });</span></span></code></pre>\n","isPage":false,"text":"\nWhen calling a smart contract on an EVM-based network, the client goes through a complex process known as &quot;ABI encoding&quot; where the function signature you want to call as well as the parameters you&#x27;re providing are encoded into a binary format. This process is complicated and error-prone so we&#x27;ve abstracted it all away so that you don&#x27;t have to deal with it. But, if you&#x27;re curious to learn how it works, please see this document.\nA DelayedEncode transaction allows you to call any method on an arbitrary smart contract, allowing us to handle the complicated ABI encoding process server-side.\nTo send a DelayedEncode transaction, you can use this code snippet:\n_wallet.SendTransaction(Chain.Polygon, new Sequence.EmbeddedWallet.Transaction[]\n    {\n        new DelayedEncode(ContractAddress, ValueAsString, new DelayedEncodeData(\n            ContractABIAsString,\n            ParametersAsObjectArray,\n            FunctionNameAsString)),\n    });\nLet&#x27;s examine the above to get a better understanding of some of the variables that may be non-obvious.\nValueAsString: This will usually be &quot;0&quot; unless you are calling a payable method denoted by the payable keyword in the smart contract definition. If you are calling a payable method, it is recommended to use DecimalNormalizer.Normalize to convert the amount from human readable format to EVM format. Note that the user will need to have the required funds in their wallet in order to pay the value specified to a payable function.\nContractABIAsString: This can either be the entire ABI or just the function you plan on interacting with. If you&#x27;re not familiar with ABIs, we&#x27;d recommend copy-pasting the function signature (with parameters) from the contract source code on Etherscan (or the appropriate block explorer for your network) and removing the whitespace and variable names.\nParametersAsObjectArray: The parameters you want to provide to the method you wish to call. No need to provide the parameter names, just their values in the order they appear in the ABI. Provide parameters in string format when in doubt.\nFunctionNameAsString: The name of the function you want to call as it appears in the ABI (or source code). Exclude parentheses and parameters.\nPutting this together, an example of using delayed encode to call the &quot;mint&quot; function on an ERC20 would look like this:\n_wallet.SendTransaction(Chain.Polygon, new Sequence.EmbeddedWallet.Transaction[]\n    {\n        new DelayedEncode(ContractAddress, &quot;0&quot;, new DelayedEncodeData(\n            &quot;mint(address,uint256)&quot;,\n            new object[]\n            {\n                ToAddress, DecimalNormalizer.Normalize(1)\n            },\n            &quot;mint&quot;)),\n    });\n","title":"DelayedEncode","titles":["Write to Blockchain"]},"116":{"href":"/sdk/unity/write-to-blockchain#batch-transactions","html":"\n<p>Using the magic of the Sequence Smart Contract wallet, our SDK allows you to seemlessly batch transactions together. Batching transactions together is extremely beneficial as it provides material gas savings and allows you to create complex transactions, that either all pass or all fail, without deploying custom smart contracts for each bespoke use case, opening a whole new realm of design possibilities!</p>\n<p>Sending a batch transaction is easy! Simply include multiple transactions, of any type, in your transaction array when making the <code>SendTransaction</code> request.</p>\n<p>For example - sending a transaction of each type in a batch:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>_wallet.SendTransaction(</span></span>\n<span class=\"line\"><span>    Chain.Polygon,</span></span>\n<span class=\"line\"><span>    new Sequence.EmbeddedWallet.Transaction[]</span></span>\n<span class=\"line\"><span>    {</span></span>\n<span class=\"line\"><span>        new RawTransaction(ToAddress, DecimalNormalizer.Normalize(1)),</span></span>\n<span class=\"line\"><span>        new SendERC20(</span></span>\n<span class=\"line\"><span>            erc20TokenAddress,</span></span>\n<span class=\"line\"><span>            ToAddress,</span></span>\n<span class=\"line\"><span>            AmountAsString),</span></span>\n<span class=\"line\"><span>        new RawTransaction(new ERC20(erc20TokenAddress).Burn(DecimalNormalizer.NormalizeAsBigInteger(amount))),</span></span>\n<span class=\"line\"><span>        new SendERC721(</span></span>\n<span class=\"line\"><span>            erc721TokenAddress,</span></span>\n<span class=\"line\"><span>            ToAddress,</span></span>\n<span class=\"line\"><span>            TokenIdAsString),</span></span>\n<span class=\"line\"><span>        new SendERC1155(</span></span>\n<span class=\"line\"><span>            erc1155TokenAddress,</span></span>\n<span class=\"line\"><span>            ToAddress,</span></span>\n<span class=\"line\"><span>            new SendERC1155Values[]</span></span>\n<span class=\"line\"><span>            {</span></span>\n<span class=\"line\"><span>                new SendERC1155Values(TokenIdAsString, AmountAsString),</span></span>\n<span class=\"line\"><span>                ...</span></span>\n<span class=\"line\"><span>            }),</span></span>\n<span class=\"line\"><span>        new DelayedEncode(ContractAddress, ValueAsString, new DelayedEncodeData(</span></span>\n<span class=\"line\"><span>            ContractABIAsString,</span></span>\n<span class=\"line\"><span>            ParametersAsObjectArray,</span></span>\n<span class=\"line\"><span>            FunctionNameAsString)),</span></span>\n<span class=\"line\"><span>    });</span></span></code></pre>\n<p>Since these transactions are all batched into a single transaction by the Sequence Smart Contract Wallet before being submitted to the network, you will receive only one transaction receipt.</p>\n","isPage":false,"text":"\nUsing the magic of the Sequence Smart Contract wallet, our SDK allows you to seemlessly batch transactions together. Batching transactions together is extremely beneficial as it provides material gas savings and allows you to create complex transactions, that either all pass or all fail, without deploying custom smart contracts for each bespoke use case, opening a whole new realm of design possibilities!\nSending a batch transaction is easy! Simply include multiple transactions, of any type, in your transaction array when making the SendTransaction request.\nFor example - sending a transaction of each type in a batch:\n_wallet.SendTransaction(\n    Chain.Polygon,\n    new Sequence.EmbeddedWallet.Transaction[]\n    {\n        new RawTransaction(ToAddress, DecimalNormalizer.Normalize(1)),\n        new SendERC20(\n            erc20TokenAddress,\n            ToAddress,\n            AmountAsString),\n        new RawTransaction(new ERC20(erc20TokenAddress).Burn(DecimalNormalizer.NormalizeAsBigInteger(amount))),\n        new SendERC721(\n            erc721TokenAddress,\n            ToAddress,\n            TokenIdAsString),\n        new SendERC1155(\n            erc1155TokenAddress,\n            ToAddress,\n            new SendERC1155Values[]\n            {\n                new SendERC1155Values(TokenIdAsString, AmountAsString),\n                ...\n            }),\n        new DelayedEncode(ContractAddress, ValueAsString, new DelayedEncodeData(\n            ContractABIAsString,\n            ParametersAsObjectArray,\n            FunctionNameAsString)),\n    });\nSince these transactions are all batched into a single transaction by the Sequence Smart Contract Wallet before being submitted to the network, you will receive only one transaction receipt.\n","title":"Batch Transactions","titles":["Write to Blockchain"]},"117":{"href":"/sdk/unity/write-to-blockchain#feeoptions","html":"\n<p>By default, the SDK will automatically sponsor all Embedded Wallet transactions using your Builder API credits. However, in some niche use cases, you may find that you would prefer not to sponsor your users&#x27; transactions. This requires that your users are more experienced Web3 users and have tokens/gas currency in their wallet that can be used to pay gas fees. In addition to the gas currency for the selected network, gas fees can also be paid using select ERC20 and ERC1155 tokens.</p>\n<aside data-callout=\"info\"><p>Transaction sponsoring is only available for Developer tier and above. For more information on gas sponsoring, please see <a href=\"/solutions/builder/gas-tank\">this document</a>. For more information on upgrading your project billing tier, please see <a href=\"/support/builder/project-settings#update-your-project-subscription-plan\">this guide</a>.</p></aside>\n<p>First, you&#x27;ll need to assemble the transaction(s) you wish to submit in a batch. Then, you need to request the FeeOptions.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>Transaction[] transactions = new Transaction[]</span></span>\n<span class=\"line\"><span>{</span></span>\n<span class=\"line\"><span>    // Create your transactions here</span></span>\n<span class=\"line\"><span>};</span></span>\n<span class=\"line\"><span>FeeOptionsResponse response = await _wallet.GetFeeOptions(chain, transactions);</span></span></code></pre>\n<p>The <code>FeeOptionsResponse</code> contains a FeeQuote (string) that locks in the price for each <code>FeeOptionReturn</code> in the FeeOptions array that is returned for a limited time; you&#x27;ll need this in a moment when submitting your transactions. For your convenience, the SDK will automatically query the user&#x27;s wallet to see which of the FeeOptions the user can afford using the <a href=\"/sdk/unity/read-from-blockchain\">Indexer</a>.</p>\n<p>From here, you can display a UI to the user to allow them to select how they would like to pay the fee for their transactions.</p>\n<p>Once the user has selected how they&#x27;d like to pay their fee, you may submit the transactions, including the selected FeeOption and the FeeQuote string.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>_wallet.SendTransactionWithFeeOptions(chain, transactions, response.FeeOptions[selectionIndex].FeeOption, response.FeeQuote);</span></span></code></pre>\n<p>In the <code>Demo Scene</code> that can be imported via <code>Package Manager &gt; Samples</code>, you can see a barebones example usage of FeeOptions. Here, we do not provide a UI and instead opt to use the first available FeeOption in the user&#x27;s wallet. We do not recommend using this approach in a real game, but it serves as a useful example for your own integration. See our sample code below:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>private async Task WaitForFeeOptionsAndSubmitFirstAvailable(Address toAddress, string amount)</span></span>\n<span class=\"line\"><span>{</span></span>\n<span class=\"line\"><span>    Transaction[] transactions = new Transaction[]</span></span>\n<span class=\"line\"><span>    {</span></span>\n<span class=\"line\"><span>        new RawTransaction(toAddress, amount)</span></span>\n<span class=\"line\"><span>    };</span></span>\n<span class=\"line\"><span>    FeeOptionsResponse response = await _wallet.GetFeeOptions(_chain, transactions)</span></span>\n<span class=\"line\"><span>    int options = response.FeeOptions.Length;</span></span>\n<span class=\"line\"><span>    for (int i = 0; i &lt; options; i++)</span></span>\n<span class=\"line\"><span>    {</span></span>\n<span class=\"line\"><span>        if (response.FeeOptions[i].InWallet)</span></span>\n<span class=\"line\"><span>        {</span></span>\n<span class=\"line\"><span>            await _wallet.SendTransactionWithFeeOptions(_chain, transactions, response.FeeOptions[i].FeeOption,</span></span>\n<span class=\"line\"><span>                response.FeeQuote);</span></span>\n<span class=\"line\"><span>            return;</span></span>\n<span class=\"line\"><span>        }</span></span>\n<span class=\"line\"><span>    }</span></span>\n<span class=\"line\"><span>    </span></span>\n<span class=\"line\"><span>    Debug.LogError(&quot;The user does not have enough of the valid FeeOptions in their wallet&quot;);</span></span>\n<span class=\"line\"><span>}</span></span></code></pre>","isPage":false,"text":"\nBy default, the SDK will automatically sponsor all Embedded Wallet transactions using your Builder API credits. However, in some niche use cases, you may find that you would prefer not to sponsor your users&#x27; transactions. This requires that your users are more experienced Web3 users and have tokens/gas currency in their wallet that can be used to pay gas fees. In addition to the gas currency for the selected network, gas fees can also be paid using select ERC20 and ERC1155 tokens.\nTransaction sponsoring is only available for Developer tier and above. For more information on gas sponsoring, please see this document. For more information on upgrading your project billing tier, please see this guide.\nFirst, you&#x27;ll need to assemble the transaction(s) you wish to submit in a batch. Then, you need to request the FeeOptions.\nTransaction[] transactions = new Transaction[]\n{\n    // Create your transactions here\n};\nFeeOptionsResponse response = await _wallet.GetFeeOptions(chain, transactions);\nThe FeeOptionsResponse contains a FeeQuote (string) that locks in the price for each FeeOptionReturn in the FeeOptions array that is returned for a limited time; you&#x27;ll need this in a moment when submitting your transactions. For your convenience, the SDK will automatically query the user&#x27;s wallet to see which of the FeeOptions the user can afford using the Indexer.\nFrom here, you can display a UI to the user to allow them to select how they would like to pay the fee for their transactions.\nOnce the user has selected how they&#x27;d like to pay their fee, you may submit the transactions, including the selected FeeOption and the FeeQuote string.\n_wallet.SendTransactionWithFeeOptions(chain, transactions, response.FeeOptions[selectionIndex].FeeOption, response.FeeQuote);\nIn the Demo Scene that can be imported via Package Manager &gt; Samples, you can see a barebones example usage of FeeOptions. Here, we do not provide a UI and instead opt to use the first available FeeOption in the user&#x27;s wallet. We do not recommend using this approach in a real game, but it serves as a useful example for your own integration. See our sample code below:\nprivate async Task WaitForFeeOptionsAndSubmitFirstAvailable(Address toAddress, string amount)\n{\n    Transaction[] transactions = new Transaction[]\n    {\n        new RawTransaction(toAddress, amount)\n    };\n    FeeOptionsResponse response = await _wallet.GetFeeOptions(_chain, transactions)\n    int options = response.FeeOptions.Length;\n    for (int i = 0; i &lt; options; i++)\n    {\n        if (response.FeeOptions[i].InWallet)\n        {\n            await _wallet.SendTransactionWithFeeOptions(_chain, transactions, response.FeeOptions[i].FeeOption,\n                response.FeeQuote);\n            return;\n        }\n    }\n    \n    Debug.LogError(&quot;The user does not have enough of the valid FeeOptions in their wallet&quot;);\n}","title":"FeeOptions","titles":["Write to Blockchain"]},"118":{"href":"/sdk/unreal/advanced#advanced-blockchain-interactions","html":"</header>\n<p>Most users of the Sequence SDK will not need to interact with cryptographic functions directly.</p>\n","isPage":true,"text":"\nMost users of the Sequence SDK will not need to interact with cryptographic functions directly.\n","title":"Advanced Blockchain Interactions","titles":[]},"119":{"href":"/sdk/unreal/advanced#binary-data","html":"\n<p>We encapsulate binary data using the <code>FBinaryData</code> structs, which is a wrapper around a pointer to a shared byte array <code>TSharedPtr&lt;TArray&lt;uint8&gt;&gt;</code>. Binary data is further subtyped into <code>FUnsizedData</code>, which represents data of any variable size, and <code>TSizedData&lt;TSize&gt;</code>, which represents data of a required byte length <strong>TSize</strong>.</p>\n<p>Important cryptographic types of set size, such as 32-byte private keys, are defined as subtypes of TSizedData- for example, we define <code>FPrivateKey : TSizedData&lt;32&gt;</code>. These can also be loaded from hex strings using <code>From(FString Str)</code>, such as <code>FPrivateKey::From(&quot;0x0...0&quot;);</code>. Ensure that the input string is the correct size.</p>\n","isPage":false,"text":"\nWe encapsulate binary data using the FBinaryData structs, which is a wrapper around a pointer to a shared byte array TSharedPtr&lt;TArray&lt;uint8&gt;&gt;. Binary data is further subtyped into FUnsizedData, which represents data of any variable size, and TSizedData&lt;TSize&gt;, which represents data of a required byte length TSize.\nImportant cryptographic types of set size, such as 32-byte private keys, are defined as subtypes of TSizedData- for example, we define FPrivateKey : TSizedData&lt;32&gt;. These can also be loaded from hex strings using From(FString Str), such as FPrivateKey::From(&quot;0x0...0&quot;);. Ensure that the input string is the correct size.\n","title":"Binary Data","titles":["Advanced Blockchain Interactions"]},"120":{"href":"/sdk/unreal/advanced#the-abi","html":"\n<p>To call contracts on the blockchain, you will need to encode any data you wish to pass as arguments using the <strong>ABI</strong>. To read more about the ABI and its specification, check out the <a href=\"https://docs.soliditylang.org/en/latest/abi-spec.html\"><em>solidity</em> docs</a>.</p>\n<p>Our ABI implementation centers around the ABI class in <code>ABI/ABI.h</code>, which provides functions to convert the following types: <strong>UInt32</strong>, <strong>Int32</strong>, <strong>Bool</strong>, <strong>FAddress</strong>, and <strong>FString</strong>. Any other data may be transformed directly into <strong>TFixedABIArray</strong> or <strong>TDynamicABIArray</strong> for fixed-length and dynamic length arrays respectively, or to <strong>TFixedABIData</strong> and <code>TDynamicABIData</code> for fixed-length and dynamic length binary data.</p>\n<p>Once you have your data stored in <strong>ABIEncodeable</strong> types, you can provide the ABI an array of the type <code>TArray&lt;ABIEncodeable*&gt;</code> to <code>ABI::Encode</code> to receive the binary encoding of the arguments. See `<strong>TestABI.cpp</strong> for an example.</p>\n","isPage":false,"text":"\nTo call contracts on the blockchain, you will need to encode any data you wish to pass as arguments using the ABI. To read more about the ABI and its specification, check out the solidity docs.\nOur ABI implementation centers around the ABI class in ABI/ABI.h, which provides functions to convert the following types: UInt32, Int32, Bool, FAddress, and FString. Any other data may be transformed directly into TFixedABIArray or TDynamicABIArray for fixed-length and dynamic length arrays respectively, or to TFixedABIData and TDynamicABIData for fixed-length and dynamic length binary data.\nOnce you have your data stored in ABIEncodeable types, you can provide the ABI an array of the type TArray&lt;ABIEncodeable*&gt; to ABI::Encode to receive the binary encoding of the arguments. See `TestABI.cpp for an example.\n","title":"The ABI","titles":["Advanced Blockchain Interactions"]},"121":{"href":"/sdk/unreal/advanced#cryptographic-functions","html":"\n<p><strong>Eth/Crypto.h</strong> provides some important ethereum functions for interacting directly with the blockchain:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Derives a public key from a private key</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FPublicKey</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> GetPublicKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FPrivateKey</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> PrivateKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Derives an address from the public key</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FAddress</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> GetAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FPublicKey</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> PublicKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Finds a keccak hash for some binary data</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FHash256</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> GetKeccakHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FBinaryData</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Data</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Derives contract address from a given sending address and nonce</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FAddress</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> GetContractAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FAddress</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> Sender</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FBlockNonce</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> Nonce</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nEth/Crypto.h provides some important ethereum functions for interacting directly with the blockchain:\n// Derives a public key from a private key\nFPublicKey GetPublicKey(FPrivateKey PrivateKey);\n// Derives an address from the public key\nFAddress GetAddress(FPublicKey PublicKey);\n// Finds a keccak hash for some binary data\nFHash256 GetKeccakHash(FBinaryData &amp;Data);\n// Derives contract address from a given sending address and nonce\nFAddress GetContractAddress(FAddress Sender, FBlockNonce Nonce);\n","title":"Cryptographic Functions","titles":["Advanced Blockchain Interactions"]},"122":{"href":"/sdk/unreal/advanced#raw-ethereum-transactions","html":"\n<p><strong>EthTransaction.h</strong> contains a struct designed for managing raw ethereum transactions, including functions to sign and hash them. Note that transactions should usually be handled via the Sequence wallet interface, which sends the transactions via the Sequence WAAS.</p>","isPage":false,"text":"\nEthTransaction.h contains a struct designed for managing raw ethereum transactions, including functions to sign and hash them. Note that transactions should usually be handled via the Sequence wallet interface, which sends the transactions via the Sequence WAAS.","title":"Raw Ethereum Transactions","titles":["Advanced Blockchain Interactions"]},"123":{"href":"/sdk/unreal/api#sequence-wallet","html":"</header>\n<p>In order to gain access to the SequenceAPI be sure to #include <code>&quot;Sequence/SequenceAPI.h&quot;</code> After you&#x27;ve completed initial authentication and have intercepted the credentials either through your UI or ours, to use the <strong>Sequence API</strong> you&#x27;ll need to create a <code>[USequenceWallet*]</code> by using:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/*</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">   Automatically tries to read stored credentials on disk and initialize with them</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">   if none are found returns a TOptional&lt;USequenceWallet*&gt; Pointer without any set Credentials</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">*/</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">USequenceWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TOptional</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">USequenceWallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> USequenceWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsSet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">   USequenceWallet </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Wallet </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">   //Use here</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>or</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/*</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">   returns a TOptional&lt;USequenceWallet*&gt; Pointer set with the </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">   given Credentials</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">*/</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">USequenceWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> FCredentials_BE</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Credentials)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TOptional</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">USequenceWallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> USequenceWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Credentials);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsSet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">   USequenceWallet </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Wallet </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">   //Use here</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>or</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/*</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">   returns a TOptional&lt;USequenceWallet*&gt; Pointer set with the </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">   given Credentials &amp; ProviderUrl</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">*/</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">USequenceWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> FCredentials_BE</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Credentials,</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> FString</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ProviderUrl);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TOptional</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">USequenceWallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> USequenceWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Credentials,</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ProviderUrl&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsSet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">   USequenceWallet </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Wallet </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">   //Use here</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>Once you have your <code>[USequenceWallet]</code> you can feel free to call any of the functions Supplied by the object, as the register call is now automatically done for you.</p>\n","isPage":true,"text":"\nIn order to gain access to the SequenceAPI be sure to #include &quot;Sequence/SequenceAPI.h&quot; After you&#x27;ve completed initial authentication and have intercepted the credentials either through your UI or ours, to use the Sequence API you&#x27;ll need to create a [USequenceWallet*] by using:\n/*\n   Automatically tries to read stored credentials on disk and initialize with them\n   if none are found returns a TOptional&lt;USequenceWallet*&gt; Pointer without any set Credentials\n*/\n \nUSequenceWallet::Get()\nconst TOptional&lt;USequenceWallet*&gt; WalletOptional = USequenceWallet::Get();\nif (WalletOptional.IsSet() &amp;&amp; WalletOptional.GetValue())\n{\n   USequenceWallet * Wallet = WalletOptional.GetValue();\n   //Use here\n}\nor\n/*\n   returns a TOptional&lt;USequenceWallet*&gt; Pointer set with the \n   given Credentials\n*/\n \nUSequenceWallet::Get(const FCredentials_BE&amp; Credentials)\nconst TOptional&lt;USequenceWallet*&gt; WalletOptional = USequenceWallet::Get(Credentials);\nif (WalletOptional.IsSet() &amp;&amp; WalletOptional.GetValue())\n{\n   USequenceWallet * Wallet = WalletOptional.GetValue();\n   //Use here\n}\nor\n/*\n   returns a TOptional&lt;USequenceWallet*&gt; Pointer set with the \n   given Credentials &amp; ProviderUrl\n*/\n \nUSequenceWallet::Get(const FCredentials_BE&amp; Credentials,const FString&amp; ProviderUrl);\nconst TOptional&lt;USequenceWallet*&gt; WalletOptional = USequenceWallet::Get(Credentials,&quot;ProviderUrl&quot;);\nif (WalletOptional.IsSet() &amp;&amp; WalletOptional.GetValue())\n{\n   USequenceWallet * Wallet = WalletOptional.GetValue();\n   //Use here\n}\nOnce you have your [USequenceWallet] you can feel free to call any of the functions Supplied by the object, as the register call is now automatically done for you.\n","title":"Sequence Wallet","titles":[]},"124":{"href":"/sdk/unreal/api#usequencewallet-static-access--persistence","html":"\n<p><code>USequenceWallet</code> is now a Subsystem of <code>GameInstance</code>, what this means is not only can you access it from anywhere as if it was a static variable in your C++ code. But it also persists for the lifetime of your game. That is no data is reset when a level is changed in your games!</p>","isPage":false,"text":"\nUSequenceWallet is now a Subsystem of GameInstance, what this means is not only can you access it from anywhere as if it was a static variable in your C++ code. But it also persists for the lifetime of your game. That is no data is reset when a level is changed in your games!","title":"USequenceWallet, Static Access &amp; Persistence","titles":["Sequence Wallet"]},"125":{"href":"/sdk/unreal/authentication#authentication","html":"</header>\n","isPage":true,"text":"\n","title":"Authentication","titles":[]},"126":{"href":"/sdk/unreal/authentication#built-in-ui","html":"\n","isPage":false,"text":"\n","title":"Built-In UI","titles":["Authentication"]},"127":{"href":"/sdk/unreal/authentication#before-starting","html":"\n<p>You can simply duplicate the <code>[BP_CustomSpectatorPawn]</code> but since it and its parent class reside within the realm of the plugin, during updates all modifications you make within the plugin could potentially be lost. These are here as a reference for how things should be done. We recommend you duplicate the <code>BP_CustomSpectatorPawn</code> out of the plugin folder, then update its parent class to a C++ class of your own making that also resides outside the plugins content folder.</p>\n<p>Some additional setup of the GameMode will need to be done prior to any UI showing up. The SequencePlugin comes bundled with an example GameMode <code>[GM_Sequence]</code> stored within <code>[Demonstration]</code> in the plugin content folder. Duplicate this GameMode and move it outside the plugin folder. Then open up <code>[GM_Sequence]</code> and set the DefaultPawn to the Pawn Blueprint you&#x27;ve just made.</p>\n<p>Lastly in Project Settings you&#x27;ll need to set this GameMode as the default GameMode. Specifically in <code>ProjectSettings -&gt; Maps &amp; Modes</code></p>\n<p><em>Note: Unreal&#x27;s web browser plugin uses the Chromium embedded browser. If your device does not support it, you can instead use Unreal&#x27;s <code>Launch URL</code> function.</em></p>\n<aside data-callout=\"tip\"><p>Try running your project now! You should be able to log in using your social credentials if you&#x27;ve set everything up correctly so far!</p></aside>\n","isPage":false,"text":"\nYou can simply duplicate the [BP_CustomSpectatorPawn] but since it and its parent class reside within the realm of the plugin, during updates all modifications you make within the plugin could potentially be lost. These are here as a reference for how things should be done. We recommend you duplicate the BP_CustomSpectatorPawn out of the plugin folder, then update its parent class to a C++ class of your own making that also resides outside the plugins content folder.\nSome additional setup of the GameMode will need to be done prior to any UI showing up. The SequencePlugin comes bundled with an example GameMode [GM_Sequence] stored within [Demonstration] in the plugin content folder. Duplicate this GameMode and move it outside the plugin folder. Then open up [GM_Sequence] and set the DefaultPawn to the Pawn Blueprint you&#x27;ve just made.\nLastly in Project Settings you&#x27;ll need to set this GameMode as the default GameMode. Specifically in ProjectSettings -&gt; Maps &amp; Modes\nNote: Unreal&#x27;s web browser plugin uses the Chromium embedded browser. If your device does not support it, you can instead use Unreal&#x27;s Launch URL function.\nTry running your project now! You should be able to log in using your social credentials if you&#x27;ve set everything up correctly so far!\n","title":"Before Starting:","titles":["Authentication","Built-In UI"]},"128":{"href":"/sdk/unreal/authentication#customizing-the-built-in-ui","html":"\n<p>In the folder located at <em>SequencePlugin Content/Core/Style</em> you&#x27;ll find a struct <code>F_SequenceUIStyle</code>. In the default values section of this struct you&#x27;ll be able to update the colours and images displayed throughout the UI. Currently we only read from <code>Sequence_Style_Dark_Mode</code></p>\n","isPage":false,"text":"\nIn the folder located at SequencePlugin Content/Core/Style you&#x27;ll find a struct F_SequenceUIStyle. In the default values section of this struct you&#x27;ll be able to update the colours and images displayed throughout the UI. Currently we only read from Sequence_Style_Dark_Mode\n","title":"Customizing the built-in UI","titles":["Authentication","Built-In UI"]},"129":{"href":"/sdk/unreal/authentication#custom-ui","html":"\n<p>In a C++ <strong>UObject</strong> with a series of pass through <code>[UFUNCTIONS]</code> setup similarly to <code>[SequenceBackendManager.h/.cpp]</code>. Each of these calls are implemented in <code>[UAuthenticator]</code> you just need to pass through the data with <strong>YOUR</strong> UAuthenticator UObject</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/*</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">   Used to initiate mobile Social Signin</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">   (No other calls need to be made to complete mobile SSO)</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">*/</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">void</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> InitiateMobileSSO</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ESocialSigninType</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> Type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/*</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">   Optional Call,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">   Used to set a custom encryptor implementation for the Authentication Process</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">*/</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">void</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SetCustomEncryptor</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">UGenericNativeEncryptor</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> EncryptorIn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/*</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">   This call is for generating a login URL for Desktop based Social Signin</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">   the received URL is fed into a WebBrowser to begin the login process</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">*/</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FString</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> GetLoginURL</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ESocialSigninType</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> Type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">); </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/*</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">   This is call is for undergoing social login once an ID_Token has been collected.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">*/</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">void</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SocialLogin</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FString</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> IDTokenIn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/*</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">   This Call is made after you&#x27;ve collected the email address from the Users in the UI</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">   The Delegate **[AuthRequiresCode]** will fire when a code is ready to be received</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">   by the UAuthenticator</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">*/</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">void</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> EmailLogin</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FString</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> EmailIn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/*</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">   This is call is made after the Delegate **[AuthRequiresCode]** is fired</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">   The Code collected from the User in the GUI is sent in via this call</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">*/</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">void</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> EmailCode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FString</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> CodeIn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/*</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">   Optional call used to retrieve stored credentials on disk</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">*/</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FStoredCredentials_BE</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> GetStoredCredentials</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/*</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">   Optional call used to check if the credentials on disk are valid or not</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">*/</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">bool</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> StoredCredentialsValid</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span></code></pre>\n<p>To start you&#x27;ll want to create a <code>[UAuthenticator]</code> UObject like so <code>[UAuthenticator * Auth = NewObject&lt;UAuthenticator&gt;()]</code>, this UObject manages the authentication side of Sequence.</p>\n<p>Be sure to bind to the Delegates for <strong>[AuthSuccess]</strong>, <strong>[AuthFailure]</strong>, <strong>[AuthRequiresCode]</strong> prior to making any signin calls You can bind to these delegates like so:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">-&gt;authenticator-&gt;AuthRequiresCode.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">AddDynamic</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">AYourClass</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::YourCallReadyToReceiveCode);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">-&gt;authenticator-&gt;AuthFailure.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">AddDynamic</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">AYourClass</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::YourCallShowAuthFailureScreen);</span></span></code></pre>\n<p>In the case of <strong>[AuthSuccess]</strong> since a parameter is also passed we bind to it like this</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">FScriptDelegate del;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">del.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">BindUFunction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;CallShowAuthSuccessScreen&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">-&gt;authenticator-&gt;AuthSuccess.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(del);</span></span></code></pre>\n<p><strong>Note:</strong> Replace the usage of the <code>SequenceBackendManager.h/.cpp</code> with you&#x27;re own when building a custom GUI, it is only used here as a reference in the event more context is needed with these instructions. Where [CallShowAuthSuccessScreen] is defined in SequenceBackendManager.h as an example like so:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">UFUNCTION</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">void</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> CallShowAuthSuccessScreen</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FCredentials_BE</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> CredentialsIn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">And in SequenceBackendManager.cpp like so:</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">void</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ASequenceBackendManager</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">CallShowAuthSuccessScreen</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FCredentials_BE</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> CredentialsIn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">-&gt;Credentials </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> CredentialsIn;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">-&gt;ShowAuthSuccessDelegate.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsBound</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">-&gt;ShowAuthSuccessDelegate.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Broadcast</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Credentials);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  UE_LOG</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(LogTemp, Error, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">TEXT</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;**[Nothing bound to: ShowAuthSuccessDelegate]**&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}  </span></span></code></pre>\n","isPage":false,"text":"\nIn a C++ UObject with a series of pass through [UFUNCTIONS] setup similarly to [SequenceBackendManager.h/.cpp]. Each of these calls are implemented in [UAuthenticator] you just need to pass through the data with YOUR UAuthenticator UObject\n/*\n   Used to initiate mobile Social Signin\n   (No other calls need to be made to complete mobile SSO)\n*/\nvoid InitiateMobileSSO(const ESocialSigninType&amp; Type)\n/*\n   Optional Call,\n   Used to set a custom encryptor implementation for the Authentication Process\n*/\nvoid SetCustomEncryptor(UGenericNativeEncryptor * EncryptorIn);\n/*\n   This call is for generating a login URL for Desktop based Social Signin\n   the received URL is fed into a WebBrowser to begin the login process\n*/\nFString GetLoginURL(const ESocialSigninType&amp; Type); \n/*\n   This is call is for undergoing social login once an ID_Token has been collected.\n*/\nvoid SocialLogin(const FString&amp; IDTokenIn);\n/*\n   This Call is made after you&#x27;ve collected the email address from the Users in the UI\n   The Delegate **[AuthRequiresCode]** will fire when a code is ready to be received\n   by the UAuthenticator\n*/\nvoid EmailLogin(const FString&amp; EmailIn);\n/*\n   This is call is made after the Delegate **[AuthRequiresCode]** is fired\n   The Code collected from the User in the GUI is sent in via this call\n*/\nvoid EmailCode(const FString&amp; CodeIn);\n/*\n   Optional call used to retrieve stored credentials on disk\n*/\nFStoredCredentials_BE GetStoredCredentials() const;\n/*\n   Optional call used to check if the credentials on disk are valid or not\n*/\nbool StoredCredentialsValid();\nTo start you&#x27;ll want to create a [UAuthenticator] UObject like so [UAuthenticator * Auth = NewObject&lt;UAuthenticator&gt;()], this UObject manages the authentication side of Sequence.\nBe sure to bind to the Delegates for [AuthSuccess], [AuthFailure], [AuthRequiresCode] prior to making any signin calls You can bind to these delegates like so:\nthis-&gt;authenticator-&gt;AuthRequiresCode.AddDynamic(this, &amp;AYourClass::YourCallReadyToReceiveCode);\nthis-&gt;authenticator-&gt;AuthFailure.AddDynamic(this, &amp;AYourClass::YourCallShowAuthFailureScreen);\nIn the case of [AuthSuccess] since a parameter is also passed we bind to it like this\nFScriptDelegate del;\ndel.BindUFunction(this, &quot;CallShowAuthSuccessScreen&quot;);\nthis-&gt;authenticator-&gt;AuthSuccess.Add(del);\nNote: Replace the usage of the SequenceBackendManager.h/.cpp with you&#x27;re own when building a custom GUI, it is only used here as a reference in the event more context is needed with these instructions. Where [CallShowAuthSuccessScreen] is defined in SequenceBackendManager.h as an example like so:\nUFUNCTION()\nvoid CallShowAuthSuccessScreen(const FCredentials_BE&amp; CredentialsIn);\nAnd in SequenceBackendManager.cpp like so:\n \nvoid ASequenceBackendManager::CallShowAuthSuccessScreen(const FCredentials_BE&amp; CredentialsIn) \n{\nthis-&gt;Credentials = CredentialsIn;\nif (this-&gt;ShowAuthSuccessDelegate.IsBound())\n  this-&gt;ShowAuthSuccessDelegate.Broadcast(Credentials);\nelse\n  UE_LOG(LogTemp, Error, TEXT(&quot;**[Nothing bound to: ShowAuthSuccessDelegate]**&quot;));\n}  \n","title":"Custom UI","titles":["Authentication"]},"130":{"href":"/sdk/unreal/authentication#email-based-authentication-with-customui","html":"\n<p>To start email based authentication you&#x27;ll start it with this call <code>[EmailLogin(const FString&amp; EmailIn)]</code>, supplying an email you&#x27;ve collected from the User in your GUI.</p>\n<p>Next <code>[AuthRequiresCode]</code> will fire when the <code>[UAuthenticator]</code> is ready to receive the Code from your UI. Collect this code from your GUI and send it to the authenticator using <code>[EmailCode(CodeIn)]</code>.</p>\n<p>Finally <code>[AuthSuccess]</code> will fire with a <code>Credentials_BE</code> struct as a parameter. You are done Email Based Auth.</p>\n","isPage":false,"text":"\nTo start email based authentication you&#x27;ll start it with this call [EmailLogin(const FString&amp; EmailIn)], supplying an email you&#x27;ve collected from the User in your GUI.\nNext [AuthRequiresCode] will fire when the [UAuthenticator] is ready to receive the Code from your UI. Collect this code from your GUI and send it to the authenticator using [EmailCode(CodeIn)].\nFinally [AuthSuccess] will fire with a Credentials_BE struct as a parameter. You are done Email Based Auth.\n","title":"Email based Authentication With CustomUI","titles":["Authentication"]},"131":{"href":"/sdk/unreal/authentication#social-signin-based-authentication-on-desktop-with-customui","html":"\n<p>To start <strong>SSO based authentication</strong> with desktop you will need to navigate to a browser in order to get the necessary id_token.</p>\n<p>To get the URL to navigate to you can use the UAuthenticator supplied call <code>[FString GetSigninURL(const ESocialSigninType&amp; Type)]</code> where Type is the social login type you wish to use</p>\n<p>With whatever implementation you chose you can forward the collected id_token to the UAuthenticator object with <code>[SocialLogin(const FString&amp; IDTokenIn)]</code>, after which <code>[AuthSuccess]</code> will fire and you&#x27;re done desktop based SSO.</p>\n","isPage":false,"text":"\nTo start SSO based authentication with desktop you will need to navigate to a browser in order to get the necessary id_token.\nTo get the URL to navigate to you can use the UAuthenticator supplied call [FString GetSigninURL(const ESocialSigninType&amp; Type)] where Type is the social login type you wish to use\nWith whatever implementation you chose you can forward the collected id_token to the UAuthenticator object with [SocialLogin(const FString&amp; IDTokenIn)], after which [AuthSuccess] will fire and you&#x27;re done desktop based SSO.\n","title":"Social Signin based Authentication on Desktop With CustomUI","titles":["Authentication"]},"132":{"href":"/sdk/unreal/authentication#social-signin-based-authentication-on-mobile-with-customui","html":"\n<p>To start mobile SSO you will need to make use of the <code>[UAuthenticator::InitiateMobileSSO(const ESocialSigninType&amp; Type)]</code> where type is the Type of SSO you want to use. IE) Google or Apple, for the time being Discord &amp; Facebook aren&#x27;t supported. This function call is all that&#x27;s required for Mobile SSO</p>\n","isPage":false,"text":"\nTo start mobile SSO you will need to make use of the [UAuthenticator::InitiateMobileSSO(const ESocialSigninType&amp; Type)] where type is the Type of SSO you want to use. IE) Google or Apple, for the time being Discord &amp; Facebook aren&#x27;t supported. This function call is all that&#x27;s required for Mobile SSO\n","title":"Social Signin based Authentication on Mobile With CustomUI","titles":["Authentication"]},"133":{"href":"/sdk/unreal/authentication#android-sso-requirements","html":"\n<p><strong>Google:</strong> <div></div> order to be able to properly use Google Auth, create and place the Keystore file by following <a href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/signing-android-projects-for-release-on-the-google-play-store-with-unreal-engine?application_version=5.1\">these instructions</a>.</p>\n<p>You will also need to generate an [Android client ID] and a [Web Application client ID] for your application. And place the [Web Application client ID] in the <code>[YourProject/Config/SequenceConfig.ini]</code>, [GoogleClientID] field.</p>\n<p>Refer to <a href=\"https://developers.google.com/identity/one-tap/android/get-started#api-console\">these docs</a> to generate [Android client ID] and [Web Application client ID].</p>\n<p><a href=\"https://https://developers.google.com/android/guides/client-auth?hl=es-419\">This guide</a> helps explain how to collect SHA-1 key fingerprints for the [Android client ID].</p>\n<p><strong>Apple:</strong> Please ensure you have a proper [AppleClientID] set in <code>[YourProject/Config/SequenceConfig.ini]</code></p>\n","isPage":false,"text":"\nGoogle:  order to be able to properly use Google Auth, create and place the Keystore file by following these instructions.\nYou will also need to generate an [Android client ID] and a [Web Application client ID] for your application. And place the [Web Application client ID] in the [YourProject/Config/SequenceConfig.ini], [GoogleClientID] field.\nRefer to these docs to generate [Android client ID] and [Web Application client ID].\nThis guide helps explain how to collect SHA-1 key fingerprints for the [Android client ID].\nApple: Please ensure you have a proper [AppleClientID] set in [YourProject/Config/SequenceConfig.ini]\n","title":"Android SSO Requirements","titles":["Authentication","Social Signin based Authentication on Mobile With CustomUI"]},"134":{"href":"/sdk/unreal/authentication#ios-sso-requirements","html":"\n<p><strong>Google</strong>: Please ensure you have a proper [GoogleClientID] set in <code>[YourProject/Config/SequenceConfig.ini]</code></p>\n<p><strong>Apple</strong>: Please ensure you have a proper [AppleClientID] set in <code>[YourProject/Config/SequenceConfig.ini]</code>, be sure you register and set your bundle identifier properly for your app</p>\n<p><em>Apple Specific SSO Requirements</em></p>\n<p>For Apple SSO to work please be sure to register the [RedirectUrl] in [YourProject/Config/SequenceConfig.ini] appropriately for your app.</p>","isPage":false,"text":"\nGoogle: Please ensure you have a proper [GoogleClientID] set in [YourProject/Config/SequenceConfig.ini]\nApple: Please ensure you have a proper [AppleClientID] set in [YourProject/Config/SequenceConfig.ini], be sure you register and set your bundle identifier properly for your app\nApple Specific SSO Requirements\nFor Apple SSO to work please be sure to register the [RedirectUrl] in [YourProject/Config/SequenceConfig.ini] appropriately for your app.","title":"IOS SSO Requirements","titles":["Authentication","Social Signin based Authentication on Mobile With CustomUI"]},"135":{"href":"/sdk/unreal/installation#installation","html":"</header>\n","isPage":true,"text":"\n","title":"Installation","titles":[]},"136":{"href":"/sdk/unreal/installation#using-github","html":"\n<ol>\n<li>\n<p>Navigate to the root directory of your Unreal project using a file management system or command line and create a <code>Plugins</code> folder (if you don&#x27;t already have one)</p>\n</li>\n<li>\n<p><a href=\"https://github.com/0xsequence/sequence-unreal/releases\">Download &amp; unzip the <code>SequencePlugin</code></a>. Copy the <code>SequencePlugin</code> folder into the <code>Plugins</code> folder in your Unreal project&#x27;s root directory.</p>\n</li>\n<li>\n<p>Launch your project, then allow it to update the UProject Settings.</p>\n</li>\n<li>\n<p>To find the <code>SequencePlugin</code> content folder in your content drawer enable show plugin content: <code>Content Drawer &gt; Settings &gt; Show Plugin Content</code></p>\n</li>\n</ol>\n","isPage":false,"text":"\n\n\nNavigate to the root directory of your Unreal project using a file management system or command line and create a Plugins folder (if you don&#x27;t already have one)\n\n\nDownload &amp; unzip the SequencePlugin. Copy the SequencePlugin folder into the Plugins folder in your Unreal project&#x27;s root directory.\n\n\nLaunch your project, then allow it to update the UProject Settings.\n\n\nTo find the SequencePlugin content folder in your content drawer enable show plugin content: Content Drawer &gt; Settings &gt; Show Plugin Content\n\n\n","title":"Using Github","titles":["Installation"]},"137":{"href":"/sdk/unreal/installation#using-epic-games-marketplace","html":"\n<p>To get started with the Sequence SDK for Unreal, follow the link below.</p>\n<p><a href=\"https://www.unrealengine.com/marketplace/en-US/product/sequence-embedded-wallets\">https://www.unrealengine.com/marketplace/en-US/product/sequence-embedded-wallets</a></p>\n<ol>\n<li>Click &quot;Free&quot; to add the plugin to your purchased Assets</li>\n<li>Click &quot;Open in Launcher&quot;</li>\n<li>Click &quot;Install to Engine&quot;, select the engine version, then &quot;Install&quot;</li>\n<li>Open your project in Unreal Editor</li>\n<li>Navigate to <code>Edit &gt; Plugins</code></li>\n<li>Search for the <code>SequencePlugin</code> and enable it</li>\n<li>Restart the Unreal Editor so the changes can take effect</li>\n<li>To find the <code>SequencePlugin</code> content folder in your content drawer enable show engine content: <code>Content Drawer &gt; Settings &gt; Show Engine Content</code></li>\n</ol>\n","isPage":false,"text":"\nTo get started with the Sequence SDK for Unreal, follow the link below.\nhttps://www.unrealengine.com/marketplace/en-US/product/sequence-embedded-wallets\n\nClick &quot;Free&quot; to add the plugin to your purchased Assets\nClick &quot;Open in Launcher&quot;\nClick &quot;Install to Engine&quot;, select the engine version, then &quot;Install&quot;\nOpen your project in Unreal Editor\nNavigate to Edit &gt; Plugins\nSearch for the SequencePlugin and enable it\nRestart the Unreal Editor so the changes can take effect\nTo find the SequencePlugin content folder in your content drawer enable show engine content: Content Drawer &gt; Settings &gt; Show Engine Content\n\n","title":"Using Epic Games marketplace","titles":["Installation"]},"138":{"href":"/sdk/unreal/installation#adding-privatedependencymodule","html":"\n","isPage":false,"text":"\n","title":"Adding PrivateDependencyModule","titles":["Installation"]},"139":{"href":"/sdk/unreal/installation#yourprojectbuildcs","html":"\n<p>In your Projects Build.cs file please check the private Dependency module such that it includes &quot;SequencePlugin&quot;:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    public </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">SequenceTest</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ReadOnlyTargetRules Target) : </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">base</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Target)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        PCHUsage </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> PCHUsageMode.UseExplicitOrSharedPCHs;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tPublicDependencyModuleNames.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">AddRange</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> string[] { </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Core&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;CoreUObject&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Engine&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;InputCore&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> });</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        //The line below is what you want</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tPrivateDependencyModuleNames.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">AddRange</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> string[] { </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;SequencePlugin&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> });</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">\t\t// Uncomment if you are using Slate UI</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">\t\t// PrivateDependencyModuleNames.AddRange(new string[] { &quot;Slate&quot;, &quot;SlateCore&quot; });</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">\t\t// Uncomment if you are using online features</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">\t\t// PrivateDependencyModuleNames.Add(&quot;OnlineSubsystem&quot;);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">\t\t// To include OnlineSubsystemSteam, add it to the plugins section in your uproject file with the Enabled attribute set to true</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t}</span></span></code></pre>","isPage":false,"text":"\nIn your Projects Build.cs file please check the private Dependency module such that it includes &quot;SequencePlugin&quot;:\n    public SequenceTest(ReadOnlyTargetRules Target) : base(Target)\n    {\n        PCHUsage = PCHUsageMode.UseExplicitOrSharedPCHs;\n\t\tPublicDependencyModuleNames.AddRange(new string[] { &quot;Core&quot;, &quot;CoreUObject&quot;, &quot;Engine&quot;, &quot;InputCore&quot; });\n        //The line below is what you want\n\t\tPrivateDependencyModuleNames.AddRange(new string[] { &quot;SequencePlugin&quot; });\n\t\t// Uncomment if you are using Slate UI\n\t\t// PrivateDependencyModuleNames.AddRange(new string[] { &quot;Slate&quot;, &quot;SlateCore&quot; });\n\t\t// Uncomment if you are using online features\n\t\t// PrivateDependencyModuleNames.Add(&quot;OnlineSubsystem&quot;);\n\t\t// To include OnlineSubsystemSteam, add it to the plugins section in your uproject file with the Enabled attribute set to true\n\t}","title":"YourProject.Build.cs","titles":["Installation","Adding PrivateDependencyModule"]},"140":{"href":"/sdk/unreal/managing-session#managing-session","html":"</header>\n","isPage":true,"text":"\n","title":"Managing Session","titles":[]},"141":{"href":"/sdk/unreal/managing-session#example-registersession","html":"\n<p>Used to register a session (done automatically for you by <code>UAuthenticator</code>)</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TFunction</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;void</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(FCredentials_BE)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> OnSuccess </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">](</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FCredentials_BE</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> Response</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        //Successful registration</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    };</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">\tconst</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> FFailureCallback OnFailure </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">](</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FSequenceError</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t{</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">\t\tUE_LOG</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(LogTemp,Display,</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">TEXT</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Error Message: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Error.Message);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    };</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> FCredentials_BE Credentials;</span><span style=\"color:#6A737D;--shiki-dark:#768390\">//Replace this var with your own credentials however you choose to get them</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TOptional</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">USequenceWallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> USequenceWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Credentials);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsSet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t   USequenceWallet </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Api </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t   Api-&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">RegisterSession</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(OnSuccess,OnFailure);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span></code></pre>\n","isPage":false,"text":"\nUsed to register a session (done automatically for you by UAuthenticator)\n    const TFunction&lt;void(FCredentials_BE)&gt; OnSuccess = [=](FCredentials_BE Response)\n    {\n        //Successful registration\n    };\n\tconst FFailureCallback OnFailure = [=](const FSequenceError&amp; Error)\n\t{\n\t\tUE_LOG(LogTemp,Display,TEXT(&quot;Error Message: %s&quot;),*Error.Message);\n    };\n    const FCredentials_BE Credentials;//Replace this var with your own credentials however you choose to get them\n    const TOptional&lt;USequenceWallet*&gt; WalletOptional = USequenceWallet::Get(Credentials);\n    if (WalletOptional.IsSet() &amp;&amp; WalletOptional.GetValue())\n    {\n\t   USequenceWallet * Api = WalletOptional.GetValue();\n\t   Api-&gt;RegisterSession(OnSuccess,OnFailure);\n    }\n","title":"Example RegisterSession","titles":["Managing Session"]},"142":{"href":"/sdk/unreal/managing-session#example-listsessions","html":"\n<p>Lists the active sessions</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TSuccessCallback</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">TArray</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">FSession</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> OnSuccess </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">](</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">TArray</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FSession</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Response</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">       //Response is a list of Sessions</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    };</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">\tconst</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> FFailureCallback OnFailure </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">](</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FSequenceError</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t{</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">\t\tUE_LOG</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(LogTemp,Display,</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">TEXT</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Error Message: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Error.Message);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    };</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> FCredentials_BE Credentials;</span><span style=\"color:#6A737D;--shiki-dark:#768390\">//Replace this var with your own credentials however you choose to get them  </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TOptional</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">USequenceWallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> USequenceWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Credentials);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsSet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t   USequenceWallet </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Api </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">       Api-&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ListSessions</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(OnSuccess,OnFailure);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span></code></pre>\n","isPage":false,"text":"\nLists the active sessions\n    const TSuccessCallback&lt;TArray&lt;FSession&gt;&gt; OnSuccess = [=](TArray&lt;FSession&gt; Response)\n    {\n       //Response is a list of Sessions\n    };\n\tconst FFailureCallback OnFailure = [=](const FSequenceError&amp; Error)\n\t{\n\t\tUE_LOG(LogTemp,Display,TEXT(&quot;Error Message: %s&quot;),*Error.Message);\n    };\n    const FCredentials_BE Credentials;//Replace this var with your own credentials however you choose to get them  \n    const TOptional&lt;USequenceWallet*&gt; WalletOptional = USequenceWallet::Get(Credentials);\n    if (WalletOptional.IsSet() &amp;&amp; WalletOptional.GetValue())\n    {\n\t   USequenceWallet * Api = WalletOptional.GetValue();\n       Api-&gt;ListSessions(OnSuccess,OnFailure);\n    }\n","title":"Example ListSessions","titles":["Managing Session"]},"143":{"href":"/sdk/unreal/managing-session#example-closesession","html":"\n<p>Closes the session</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TFunction</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;void</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(FString)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> OnSuccess </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">](</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FString</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> Response</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t{</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">\t\t//Response is just a confirmation string</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    };</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">\tconst</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> FFailureCallback OnFailure </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">](</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FSequenceError</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t{</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">\t\tUE_LOG</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(LogTemp,Display,</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">TEXT</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Error Message: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Error.Message);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    };</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> FCredentials_BE Credentials;</span><span style=\"color:#6A737D;--shiki-dark:#768390\">//Replace this var with your own credentials however you choose to get them</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TOptional</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">USequenceWallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> USequenceWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Credentials);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsSet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t   USequenceWallet </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Api </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t   Api-&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">CloseSession</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(OnSuccess,OnFailure);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span></code></pre>\n","isPage":false,"text":"\nCloses the session\n    const TFunction&lt;void(FString)&gt; OnSuccess = [=](const FString&amp; Response)\n\t{\n\t\t//Response is just a confirmation string\n    };\n\tconst FFailureCallback OnFailure = [=](const FSequenceError&amp; Error)\n\t{\n\t\tUE_LOG(LogTemp,Display,TEXT(&quot;Error Message: %s&quot;),*Error.Message);\n    };\n    const FCredentials_BE Credentials;//Replace this var with your own credentials however you choose to get them\n    const TOptional&lt;USequenceWallet*&gt; WalletOptional = USequenceWallet::Get(Credentials);\n    if (WalletOptional.IsSet() &amp;&amp; WalletOptional.GetValue())\n    {\n\t   USequenceWallet * Api = WalletOptional.GetValue();\n\t   Api-&gt;CloseSession(OnSuccess,OnFailure);\n    }\n","title":"Example CloseSession","titles":["Managing Session"]},"144":{"href":"/sdk/unreal/managing-session#example-getwalletaddress","html":"\n<p>Gets the wallet address currently being used</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> FCredentials_BE Credentials;</span><span style=\"color:#6A737D;--shiki-dark:#768390\">//Replace this var with your own credentials however you choose to get them</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TOptional</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">USequenceWallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> USequenceWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Credentials);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsSet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t   USequenceWallet </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Api </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">       Api-&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetWalletAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span></code></pre>\n","isPage":false,"text":"\nGets the wallet address currently being used\n    const FCredentials_BE Credentials;//Replace this var with your own credentials however you choose to get them\n \n    const TOptional&lt;USequenceWallet*&gt; WalletOptional = USequenceWallet::Get(Credentials);\n    if (WalletOptional.IsSet() &amp;&amp; WalletOptional.GetValue())\n    {\n\t   USequenceWallet * Api = WalletOptional.GetValue();\n       Api-&gt;GetWalletAddress();\n    }\n","title":"Example GetWalletAddress","titles":["Managing Session"]},"145":{"href":"/sdk/unreal/managing-session#example-getnetworkid","html":"\n<p>Gets the network id being used</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> FCredentials_BE Credentials;</span><span style=\"color:#6A737D;--shiki-dark:#768390\">//Replace this var with your own credentials however you choose to get them</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TOptional</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">USequenceWallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> USequenceWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Credentials);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsSet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">       USequenceWallet </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Api </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">       Api-&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetNetworkId</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span></code></pre>\n","isPage":false,"text":"\nGets the network id being used\n    const FCredentials_BE Credentials;//Replace this var with your own credentials however you choose to get them\n    const TOptional&lt;USequenceWallet*&gt; WalletOptional = USequenceWallet::Get(Credentials);\n    if (WalletOptional.IsSet() &amp;&amp; WalletOptional.GetValue())\n    {\n       USequenceWallet * Api = WalletOptional.GetValue();\n       Api-&gt;GetNetworkId();\n    }\n","title":"Example GetNetworkId","titles":["Managing Session"]},"146":{"href":"/sdk/unreal/managing-session#example-updatenetworkid","html":"\n<p>Used to update the stored network id</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> FCredentials_BE Credentials;</span><span style=\"color:#6A737D;--shiki-dark:#768390\">//Replace this var with your own credentials however you choose to get them:</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TOptional</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">USequenceWallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> USequenceWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Credentials);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsSet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">       USequenceWallet </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Api </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">       Api-&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">UpdateNetworkId</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">137</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span></code></pre>\n","isPage":false,"text":"\nUsed to update the stored network id\n    const FCredentials_BE Credentials;//Replace this var with your own credentials however you choose to get them:\n    const TOptional&lt;USequenceWallet*&gt; WalletOptional = USequenceWallet::Get(Credentials);\n    \n    if (WalletOptional.IsSet() &amp;&amp; WalletOptional.GetValue())\n    {\n       USequenceWallet * Api = WalletOptional.GetValue();\n       Api-&gt;UpdateNetworkId(137);\n    }\n","title":"Example UpdateNetworkId","titles":["Managing Session"]},"147":{"href":"/sdk/unreal/managing-session#example-updateproviderurl","html":"\n<p>Used to update the provider url of the wallet const FCredentials_BE Credentials;//Replace this var with your own credentials however you choose to get them:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TOptional</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">USequenceWallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> USequenceWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Credentials);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsSet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">       USequenceWallet </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Api </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t   Api-&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">UpdateProviderURL</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;NewProviderUrl&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span></code></pre>\n","isPage":false,"text":"\nUsed to update the provider url of the wallet const FCredentials_BE Credentials;//Replace this var with your own credentials however you choose to get them:\n    const TOptional&lt;USequenceWallet*&gt; WalletOptional = USequenceWallet::Get(Credentials);\n    \n    if (WalletOptional.IsSet() &amp;&amp; WalletOptional.GetValue())\n    {\n       USequenceWallet * Api = WalletOptional.GetValue();\n\t   Api-&gt;UpdateProviderURL(&quot;NewProviderUrl&quot;);\n    }\n","title":"Example UpdateProviderUrl","titles":["Managing Session"]},"148":{"href":"/sdk/unreal/managing-session#example-signout","html":"\n<p>Closes the session &amp; clears out cached credentials with blank ones</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> FCredentials_BE Credentials;</span><span style=\"color:#6A737D;--shiki-dark:#768390\">//Replace this var with your own credentials however you choose to get them</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TOptional</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">USequenceWallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> USequenceWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Credentials);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsSet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t   USequenceWallet </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Api </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">       Api-&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">SignOut</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span></code></pre>","isPage":false,"text":"\nCloses the session &amp; clears out cached credentials with blank ones\n    const FCredentials_BE Credentials;//Replace this var with your own credentials however you choose to get them\n    const TOptional&lt;USequenceWallet*&gt; WalletOptional = USequenceWallet::Get(Credentials);\n    if (WalletOptional.IsSet() &amp;&amp; WalletOptional.GetValue())\n    {\n\t   USequenceWallet * Api = WalletOptional.GetValue();\n       Api-&gt;SignOut();\n    }","title":"Example SignOut","titles":["Managing Session"]},"149":{"href":"/sdk/unreal/onboard-user-funds#onramp","html":"</header>\n<p>If you wish for your users to be able to pay for things in your game using cryptocurrencies, you&#x27;ll find our Transak integration to be very helpful.\nTransak allows users to purchase a variety of cryptocurrencies on a variety of blockchains using their credit card using a user friendly web interface. Learn more about Transak <a href=\"https://transak.com/\">here</a>.</p>\n","isPage":true,"text":"\nIf you wish for your users to be able to pay for things in your game using cryptocurrencies, you&#x27;ll find our Transak integration to be very helpful.\nTransak allows users to purchase a variety of cryptocurrencies on a variety of blockchains using their credit card using a user friendly web interface. Learn more about Transak here.\n","title":"OnRamp","titles":[]},"150":{"href":"/sdk/unreal/onboard-user-funds#on-ramp-user-funds-via-credit-card","html":"\n<p>To generate a link for your user&#x27;s Transak on-ramping:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">UTransakOnRamp</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Transak </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> UTransakOnRamp</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Init</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;UserWalletAddress&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">FString OnRampLink </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Transak-&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetTransakLink</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;USD&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;100&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;BTC&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;network1,network2&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// You can tailor the user experience by providing different default values for the parameters.</span></span></code></pre>\n<p>From here, you can open the OnRampLink using <code>FPlatformProcess::LaunchURL</code>. Alternatively, you can use:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">UTransakOnRamp</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Transak </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> UTransakOnRamp</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Init</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;UserWalletAddress&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Transak-&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">OpenTransakLink</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;USD&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;100&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;BTC&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;network1,network2&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// This will automatically open the generated Transak On-Ramp link in the default web browser.</span></span></code></pre>\n","isPage":false,"text":"\nTo generate a link for your user&#x27;s Transak on-ramping:\nUTransakOnRamp* Transak = UTransakOnRamp::Init(&quot;UserWalletAddress&quot;);\nFString OnRampLink = Transak-&gt;GetTransakLink(&quot;USD&quot;, &quot;100&quot;, &quot;BTC&quot;, &quot;network1,network2&quot;, false);\n// You can tailor the user experience by providing different default values for the parameters.\nFrom here, you can open the OnRampLink using FPlatformProcess::LaunchURL. Alternatively, you can use:\nUTransakOnRamp* Transak = UTransakOnRamp::Init(&quot;UserWalletAddress&quot;);\nTransak-&gt;OpenTransakLink(&quot;USD&quot;, &quot;100&quot;, &quot;BTC&quot;, &quot;network1,network2&quot;, false);\n// This will automatically open the generated Transak On-Ramp link in the default web browser.\n","title":"On-Ramp User Funds via Credit Card","titles":["OnRamp"]},"151":{"href":"/sdk/unreal/onboard-user-funds#check-supported-countries","html":"\n<p>To check the countries supported by Transak and learn about how they are supported, use the <code>GetSupportedCountries</code> method.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Transak-&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetSupportedCountries</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    [](</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">TArray</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FSupportedCountry</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">SupportedCountries</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Handle the supported countries, e.g., log their names</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> FSupportedCountry</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Country : SupportedCountries) {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">            UE_LOG</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(LogTemp, Log, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">TEXT</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Country: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Country.CountryName);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    [](</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FSequenceError</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Handle any errors that occur</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        UE_LOG</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(LogTemp, Error, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">TEXT</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Encountered error fetching supported countries from Transak: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Error.ErrorMessage);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nTo check the countries supported by Transak and learn about how they are supported, use the GetSupportedCountries method.\nTransak-&gt;GetSupportedCountries(\n    [](TArray&lt;FSupportedCountry&gt; SupportedCountries) {\n        // Handle the supported countries, e.g., log their names\n        for (const FSupportedCountry&amp; Country : SupportedCountries) {\n            UE_LOG(LogTemp, Log, TEXT(&quot;Country: %s&quot;), *Country.CountryName);\n        }\n    },\n    [](FSequenceError Error) {\n        // Handle any errors that occur\n        UE_LOG(LogTemp, Error, TEXT(&quot;Encountered error fetching supported countries from Transak: %s&quot;), *Error.ErrorMessage);\n    }\n);\n","title":"Check Supported Countries","titles":["OnRamp"]},"152":{"href":"/sdk/unreal/onboard-user-funds#using-transak-from-usequencewallet","html":"\n<p>You can also access the Transak functionalities straight from <code>USequenceWallet</code>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> FCredentials_BE Credentials;</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // Replace this var with your own credentials however you choose to get them</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TOptional</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">USequenceWallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> USequenceWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Credentials);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsSet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tUSequenceWallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Wallet </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Wallet-&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetSupportedTransakCountries</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    [](</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">TArray</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FSupportedCountry</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">SupportedCountries</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Handle the supported countries, e.g., log their names</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> FSupportedCountry</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Country : SupportedCountries) {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">            UE_LOG</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(LogTemp, Log, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">TEXT</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Country: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Country.CountryName);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    [](</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FSequenceError</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Handle any errors that occur</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        UE_LOG</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(LogTemp, Error, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">TEXT</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Encountered error fetching supported countries from Transak: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Error.ErrorMessage);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    );</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Open the Transak link in the default browser</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Wallet-&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">OpenTransakLink</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;USD&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;100&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;BTC&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;network1,network2&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>","isPage":false,"text":"\nYou can also access the Transak functionalities straight from USequenceWallet:\nconst FCredentials_BE Credentials; // Replace this var with your own credentials however you choose to get them\nconst TOptional&lt;USequenceWallet*&gt; WalletOptional = USequenceWallet::Get(Credentials);\nif (WalletOptional.IsSet() &amp;&amp; WalletOptional.GetValue())\n{\n\tUSequenceWallet* Wallet = WalletOptional.GetValue();\n    Wallet-&gt;GetSupportedTransakCountries(\n    [](TArray&lt;FSupportedCountry&gt; SupportedCountries) {\n        // Handle the supported countries, e.g., log their names\n        for (const FSupportedCountry&amp; Country : SupportedCountries) {\n            UE_LOG(LogTemp, Log, TEXT(&quot;Country: %s&quot;), *Country.CountryName);\n        }\n    },\n    [](FSequenceError Error) {\n        // Handle any errors that occur\n        UE_LOG(LogTemp, Error, TEXT(&quot;Encountered error fetching supported countries from Transak: %s&quot;), *Error.ErrorMessage);\n    }\n    );\n}\n// Open the Transak link in the default browser\nWallet-&gt;OpenTransakLink(&quot;USD&quot;, &quot;100&quot;, &quot;BTC&quot;, &quot;network1,network2&quot;, false);","title":"Using Transak from USequenceWallet","titles":["OnRamp"]},"153":{"href":"/sdk/unreal/overview#introduction","html":"</header>\n<p>The Sequence Unreal Embedded Wallet SDK provides full Sequence <a href=\"/solutions/wallets/embedded-wallet/overview\">Embedded Wallet</a> and <a href=\"/api/indexer/overview\">Indexer</a> integration for games built on the Unreal Framework.</p>\n<p>This SDK follows <a href=\"https://semver.org/\">Semantic Versioning</a> (<code>major.minor.patch</code>). Breaking changes will always cause a <code>major</code> version increment, non-breaking new features will cause a <code>minor</code> version increment, and bugfixes will cause a <code>patch</code> version increment.</p>\n<p>Latest Sequence Unreal SDK <a href=\"https://github.com/0xsequence/sequence-unreal/releases\">releases can be found here</a>.</p>\n","isPage":true,"text":"\nThe Sequence Unreal Embedded Wallet SDK provides full Sequence Embedded Wallet and Indexer integration for games built on the Unreal Framework.\nThis SDK follows Semantic Versioning (major.minor.patch). Breaking changes will always cause a major version increment, non-breaking new features will cause a minor version increment, and bugfixes will cause a patch version increment.\nLatest Sequence Unreal SDK releases can be found here.\n","title":"Introduction","titles":[]},"154":{"href":"/sdk/unreal/overview#requirements","html":"\n<ul>\n<li>Unreal 5.2, 5.3, or 5.4</li>\n<li>Android</li>\n<li>iOS</li>\n<li>PC standalone</li>\n<li>Mac standalone</li>\n</ul>","isPage":false,"text":"\n\nUnreal 5.2, 5.3, or 5.4\nAndroid\niOS\nPC standalone\nMac standalone\n","title":"Requirements","titles":["Introduction"]},"155":{"href":"/sdk/unreal/packaging#packaging","html":"</header>\n<p>To set your system up for Packaging please refer to the following links:</p>\n<ul>\n<li><a href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/packaging-unreal-engine-projects?application_version=5.3\">Windows and macOS</a></li>\n<li><a href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/setting-up-visual-studio-development-environment-for-cplusplus-projects-in-unreal-engine\">Setting up Visual Studio for Unreal on Windows</a></li>\n<li><a href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/packaging-android-projects-in-unreal-engine?application_version=5.3\">Android</a></li>\n<li><a href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/packaging-ios-projects-in-unreal-engine?application_version=5.3\">iOS</a></li>\n<li><a href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/hardware-and-software-specifications-for-unreal-engine\">Mac Specific Software Requirements</a></li>\n</ul>\n","isPage":true,"text":"\nTo set your system up for Packaging please refer to the following links:\n\nWindows and macOS\nSetting up Visual Studio for Unreal on Windows\nAndroid\niOS\nMac Specific Software Requirements\n\n","title":"Packaging","titles":[]},"156":{"href":"/sdk/unreal/packaging#ios","html":"\n<p>For iOS apps you also need to setup provisioning, <a href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/setting-up-ios-tvos-and-ipados-provisioning-profiles-and-signing-certificates-for-unreal-engine-projects?application_version=5.3\">following these docs</a></p>\n","isPage":false,"text":"\nFor iOS apps you also need to setup provisioning, following these docs\n","title":"iOS","titles":["Packaging"]},"157":{"href":"/sdk/unreal/packaging#android","html":"\n<p>When setting up your project to build for Android you&#x27;ll need to update the following settings:\nIn ProjectSettings/Android SDK\nSet SDK API Level to Android-34\nSet NDK API Level to anything in the range [26,33] (We personally used android-32)</p>\n","isPage":false,"text":"\nWhen setting up your project to build for Android you&#x27;ll need to update the following settings:\nIn ProjectSettings/Android SDK\nSet SDK API Level to Android-34\nSet NDK API Level to anything in the range [26,33] (We personally used android-32)\n","title":"Android","titles":["Packaging"]},"158":{"href":"/sdk/unreal/packaging#hardware-requirements","html":"\n<p>For Hardware Requirements with Unreal please refer to <a href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/hardware-and-software-specifications-for-unreal-engine?application_version=5.3\">these docs</a></p>\n","isPage":false,"text":"\nFor Hardware Requirements with Unreal please refer to these docs\n","title":"Hardware Requirements","titles":["Packaging"]},"159":{"href":"/sdk/unreal/packaging#unreal-and-xcode-specifics","html":"\n<p>During the Unreal Package process in the event a code signing error occurs you can take the following steps within XCode to get your packaged .app file</p>\n<ol>\n<li>After packaging the project in Unreal, open the Xcode project (Sequence-unreal folder -&gt; Intermediate -&gt; ProjectFilesIOS -&gt; SequenceUnreal.xcodeproj)</li>\n<li>Click on the project name on the left hand side to open up project settings</li>\n<li>Click the Build Phase Tab</li>\n<li>Click on the ‘+’ icon at the top left</li>\n<li>Select Run Script</li>\n<li>Drag the new run script to one below from the last item in the phase list</li>\n<li>Expand the run script</li>\n<li>In the script box, add the following command: <code>xattr -cr /[path-to-your-project]/[your-project-name]/Binaries/IOS/Payload/[your-project-name.app]</code></li>\n<li>Click on the Build Settings tab</li>\n<li>Click on each item under the Architectures header that contains macOS and hit the delete key</li>\n<li>Click on the General tab</li>\n<li>Click on Mac and Applevision Pro under supported destinations and hit the delete key</li>\n<li>Now the project can be built (if the build fails at first, wait a few moments then try again. It can sometimes take a bit before the build registers the run script)</li>\n<li>Once you have finished running the project, and want to make changes to the code, REMEMBER to delete this xcodeproj file in the sequence-unreal folder to ensure that a new xcodeproj is creating when you packaging the project again.</li>\n</ol>","isPage":false,"text":"\nDuring the Unreal Package process in the event a code signing error occurs you can take the following steps within XCode to get your packaged .app file\n\nAfter packaging the project in Unreal, open the Xcode project (Sequence-unreal folder -&gt; Intermediate -&gt; ProjectFilesIOS -&gt; SequenceUnreal.xcodeproj)\nClick on the project name on the left hand side to open up project settings\nClick the Build Phase Tab\nClick on the ‘+’ icon at the top left\nSelect Run Script\nDrag the new run script to one below from the last item in the phase list\nExpand the run script\nIn the script box, add the following command: xattr -cr /[path-to-your-project]/[your-project-name]/Binaries/IOS/Payload/[your-project-name.app]\nClick on the Build Settings tab\nClick on each item under the Architectures header that contains macOS and hit the delete key\nClick on the General tab\nClick on Mac and Applevision Pro under supported destinations and hit the delete key\nNow the project can be built (if the build fails at first, wait a few moments then try again. It can sometimes take a bit before the build registers the run script)\nOnce you have finished running the project, and want to make changes to the code, REMEMBER to delete this xcodeproj file in the sequence-unreal folder to ensure that a new xcodeproj is creating when you packaging the project again.\n","title":"Unreal and Xcode Specifics","titles":["Packaging"]},"160":{"href":"/sdk/unreal/read-from-blockchain#read-from-blockchain","html":"</header>\n","isPage":true,"text":"\n","title":"Read From Blockchain","titles":[]},"161":{"href":"/sdk/unreal/read-from-blockchain#indexer--the-wallet","html":"\n<p>The <a href=\"/api/indexer/overview\">Indexer</a> is tied nicely with the wallet to allow for ease of use. One thing to note is the NetworkId you set with your wallet is the one that will be used with the Indexer. The default network we set is 137 (Polygon Mainnet). See the list of network ids supported by Sequence <a href=\"https://status.sequence.info/\">here</a>.</p>\n","isPage":false,"text":"\nThe Indexer is tied nicely with the wallet to allow for ease of use. One thing to note is the NetworkId you set with your wallet is the one that will be used with the Indexer. The default network we set is 137 (Polygon Mainnet). See the list of network ids supported by Sequence here.\n","title":"Indexer &amp; the Wallet","titles":["Read From Blockchain"]},"162":{"href":"/sdk/unreal/read-from-blockchain#ping","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TSuccessCallback</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;bool&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> GenericSuccess </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">](</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> bool</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> bSuccess</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">\t//Ping response is in bSuccess</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> FFailureCallback GenericFailure </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">](</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FSequenceError</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">\t//Ping failure</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> FCredentials_BE Credentials;</span><span style=\"color:#6A737D;--shiki-dark:#768390\">//Replace this var with your own credentials however you choose to get them</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TOptional</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">USequenceWallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> USequenceWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Credentials);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsSet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tUSequenceWallet </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Api </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tApi-&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Ping</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(GenericSuccess, GenericFailure);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nconst TSuccessCallback&lt;bool&gt; GenericSuccess = [=](const bool bSuccess)\n{\n\t//Ping response is in bSuccess\n};\nconst FFailureCallback GenericFailure = [=](const FSequenceError&amp; Error)\n{\n\t//Ping failure\n};\nconst FCredentials_BE Credentials;//Replace this var with your own credentials however you choose to get them\nconst TOptional&lt;USequenceWallet*&gt; WalletOptional = USequenceWallet::Get(Credentials);\nif (WalletOptional.IsSet() &amp;&amp; WalletOptional.GetValue())\n{\n\tUSequenceWallet * Api = WalletOptional.GetValue();\n\tApi-&gt;Ping(GenericSuccess, GenericFailure);\n}\n","title":"Ping","titles":["Read From Blockchain"]},"163":{"href":"/sdk/unreal/read-from-blockchain#version","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TSuccessCallback</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">FVersion</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> GenericSuccess </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">](</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FVersion</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> version</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">\t//Response contained in FVersion</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> FFailureCallback GenericFailure </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">](</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FSequenceError</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">\t//Version Failure</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> FCredentials_BE Credentials;</span><span style=\"color:#6A737D;--shiki-dark:#768390\">//Replace this var with your own credentials however you choose to get them</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TOptional</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">USequenceWallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> USequenceWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Credentials);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsSet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tUSequenceWallet </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Api </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tApi-&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Version</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(GenericSuccess, GenericFailure);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nconst TSuccessCallback&lt;FVersion&gt; GenericSuccess = [=](const FVersion&amp; version)\n{\n\t//Response contained in FVersion\n};\nconst FFailureCallback GenericFailure = [=](const FSequenceError&amp; Error)\n{\n\t//Version Failure\n};\nconst FCredentials_BE Credentials;//Replace this var with your own credentials however you choose to get them\nconst TOptional&lt;USequenceWallet*&gt; WalletOptional = USequenceWallet::Get(Credentials);\nif (WalletOptional.IsSet() &amp;&amp; WalletOptional.GetValue())\n{\n\tUSequenceWallet * Api = WalletOptional.GetValue();\n\tApi-&gt;Version(GenericSuccess, GenericFailure);\n}\n","title":"Version","titles":["Read From Blockchain"]},"164":{"href":"/sdk/unreal/read-from-blockchain#runtimestatus","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TSuccessCallback</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">FRuntimeStatus</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> GenericSuccess </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">](</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FRuntimeStatus</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> runTimeStatus</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">\t//Response is in FRunTimeStatus</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> FFailureCallback GenericFailure </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">](</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FSequenceError</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">\t//RunTimeStatus Failure</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> FCredentials_BE Credentials;</span><span style=\"color:#6A737D;--shiki-dark:#768390\">//Replace this var with your own credentials however you choose to get them</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TOptional</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">USequenceWallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> USequenceWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Credentials);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsSet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tUSequenceWallet </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Api </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tApi-&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">RunTimeStatus</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(GenericSuccess, GenericFailure);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nconst TSuccessCallback&lt;FRuntimeStatus&gt; GenericSuccess = [=](const FRuntimeStatus&amp; runTimeStatus)\n{\n\t//Response is in FRunTimeStatus\n};\nconst FFailureCallback GenericFailure = [=](const FSequenceError&amp; Error)\n{\n\t//RunTimeStatus Failure\n};\nconst FCredentials_BE Credentials;//Replace this var with your own credentials however you choose to get them\nconst TOptional&lt;USequenceWallet*&gt; WalletOptional = USequenceWallet::Get(Credentials);\nif (WalletOptional.IsSet() &amp;&amp; WalletOptional.GetValue())\n{\n\tUSequenceWallet * Api = WalletOptional.GetValue();\n\tApi-&gt;RunTimeStatus(GenericSuccess, GenericFailure);\n}\n","title":"RunTimeStatus","titles":["Read From Blockchain"]},"165":{"href":"/sdk/unreal/read-from-blockchain#getchainid","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TSuccessCallback</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">int64</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> GenericSuccess </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">](</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> int64</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> chainID</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">\t//Response in int64</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> FFailureCallback GenericFailure </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">](</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FSequenceError</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">\t//GetChainID Failure</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> FCredentials_BE Credentials;</span><span style=\"color:#6A737D;--shiki-dark:#768390\">//Replace this var with your own credentials however you choose to get them</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TOptional</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">USequenceWallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> USequenceWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Credentials);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsSet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tUSequenceWallet </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Api </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tApi-&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetChainID</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(GenericSuccess, GenericFailure);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nconst TSuccessCallback&lt;int64&gt; GenericSuccess = [=](const int64 chainID)\n{\n\t//Response in int64\n};\nconst FFailureCallback GenericFailure = [=](const FSequenceError&amp; Error)\n{\n\t//GetChainID Failure\n};\nconst FCredentials_BE Credentials;//Replace this var with your own credentials however you choose to get them\nconst TOptional&lt;USequenceWallet*&gt; WalletOptional = USequenceWallet::Get(Credentials);\nif (WalletOptional.IsSet() &amp;&amp; WalletOptional.GetValue())\n{\n\tUSequenceWallet * Api = WalletOptional.GetValue();\n\tApi-&gt;GetChainID(GenericSuccess, GenericFailure);\n}\n","title":"GetChainID","titles":["Read From Blockchain"]},"166":{"href":"/sdk/unreal/read-from-blockchain#getetherbalance","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TSuccessCallback</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">FEtherBalance</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> GenericSuccess </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">](</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FEtherBalance</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> etherBalance</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">\t//Response in FEtherBalance</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> FFailureCallback GenericFailure </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">](</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FSequenceError</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">\t//GetEtherBalance Failure</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> FCredentials_BE Credentials;</span><span style=\"color:#6A737D;--shiki-dark:#768390\">//Replace this var with your own credentials however you choose to get them</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TOptional</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">USequenceWallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> USequenceWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Credentials);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsSet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tUSequenceWallet </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Api </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tApi-&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetEtherBalance</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Api-&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetWalletAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), GenericSuccess, GenericFailure);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nconst TSuccessCallback&lt;FEtherBalance&gt; GenericSuccess = [=](const FEtherBalance&amp; etherBalance)\n{\n\t//Response in FEtherBalance\n};\nconst FFailureCallback GenericFailure = [=](const FSequenceError&amp; Error)\n{\n\t//GetEtherBalance Failure\n};\n\t\nconst FCredentials_BE Credentials;//Replace this var with your own credentials however you choose to get them\nconst TOptional&lt;USequenceWallet*&gt; WalletOptional = USequenceWallet::Get(Credentials);\nif (WalletOptional.IsSet() &amp;&amp; WalletOptional.GetValue())\n{\n\tUSequenceWallet * Api = WalletOptional.GetValue();\n\tApi-&gt;GetEtherBalance(Api-&gt;GetWalletAddress(), GenericSuccess, GenericFailure);\n}\n","title":"GetEtherBalance","titles":["Read From Blockchain"]},"167":{"href":"/sdk/unreal/read-from-blockchain#gettokenbalances","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">\tconst</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TSuccessCallback</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">FGetTokenBalancesReturn</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> GenericSuccess </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">](</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FGetTokenBalancesReturn</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> tokenBalances</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t{</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">\t\t//Response in FGetTokenBalancesReturn</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t};</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">\tconst</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> FFailureCallback GenericFailure </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">](</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FSequenceError</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t{</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">\t\t//GetTokenBalances Failure</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t};</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">   </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">\tconst</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> FCredentials_BE Credentials;</span><span style=\"color:#6A737D;--shiki-dark:#768390\">//Replace this var with your own credentials however you choose to get them</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">\tconst</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TOptional</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">USequenceWallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> USequenceWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Credentials);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">\tif</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsSet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tUSequenceWallet </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Api </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tFGetTokenBalancesArgs args;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\targs.accountAddress </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Api-&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetWalletAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\targs.includeMetaData </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tApi-&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetTokenBalances</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(args, GenericSuccess, GenericFailure);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t}</span></span></code></pre>\n","isPage":false,"text":"\n\tconst TSuccessCallback&lt;FGetTokenBalancesReturn&gt; GenericSuccess = [=](const FGetTokenBalancesReturn&amp; tokenBalances)\n\t{\n\t\t//Response in FGetTokenBalancesReturn\n\t};\n\tconst FFailureCallback GenericFailure = [=](const FSequenceError&amp; Error)\n\t{\n\t\t//GetTokenBalances Failure\n\t};\n   \n\tconst FCredentials_BE Credentials;//Replace this var with your own credentials however you choose to get them\n\tconst TOptional&lt;USequenceWallet*&gt; WalletOptional = USequenceWallet::Get(Credentials);\n\tif (WalletOptional.IsSet() &amp;&amp; WalletOptional.GetValue())\n\t{\n\t\tUSequenceWallet * Api = WalletOptional.GetValue();\n\t\tFGetTokenBalancesArgs args;\n\t\targs.accountAddress = Api-&gt;GetWalletAddress();\n\t\targs.includeMetaData = true;\n\t\tApi-&gt;GetTokenBalances(args, GenericSuccess, GenericFailure);\n\t}\n","title":"GetTokenBalances","titles":["Read From Blockchain"]},"168":{"href":"/sdk/unreal/read-from-blockchain#gettokensupplies","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TSuccessCallback</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">FGetTokenSuppliesReturn</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> GenericSuccess </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">](</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FGetTokenSuppliesReturn</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> tokenSupplies</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t{</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">\t\t//Response is in FGetTokenSuppliesReturn</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t};</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">\tconst</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> FFailureCallback GenericFailure </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">](</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FSequenceError</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t{</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">\t\t//GetTokenSupplies Failure</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t};</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">\tconst</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> FCredentials_BE Credentials;</span><span style=\"color:#6A737D;--shiki-dark:#768390\">//Replace this var with your own credentials however you choose to get them</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">\tconst</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TOptional</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">USequenceWallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> USequenceWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Credentials);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">\tif</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsSet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tUSequenceWallet </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Api </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tFGetTokenSuppliesArgs args;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\targs.contractAddress </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;0x01&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span><span style=\"color:#6A737D;--shiki-dark:#768390\">//Testing Contract Address in hex with leading 0x</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\targs.includeMetaData </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tApi-&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetTokenSupplies</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(args, GenericSuccess, GenericFailure);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t}</span></span></code></pre>\n","isPage":false,"text":"\n  const TSuccessCallback&lt;FGetTokenSuppliesReturn&gt; GenericSuccess = [=](const FGetTokenSuppliesReturn&amp; tokenSupplies)\n\t{\n\t\t//Response is in FGetTokenSuppliesReturn\n\t};\n\tconst FFailureCallback GenericFailure = [=](const FSequenceError&amp; Error)\n\t{\n\t\t//GetTokenSupplies Failure\n\t};\n    \n\tconst FCredentials_BE Credentials;//Replace this var with your own credentials however you choose to get them\n\tconst TOptional&lt;USequenceWallet*&gt; WalletOptional = USequenceWallet::Get(Credentials);\n\tif (WalletOptional.IsSet() &amp;&amp; WalletOptional.GetValue())\n\t{\n\t\tUSequenceWallet * Api = WalletOptional.GetValue();\n\t\tFGetTokenSuppliesArgs args;\n\t\targs.contractAddress = &quot;0x01&quot;;//Testing Contract Address in hex with leading 0x\n\t\targs.includeMetaData = true;\n\t\tApi-&gt;GetTokenSupplies(args, GenericSuccess, GenericFailure);\n\t}\n","title":"GetTokenSupplies","titles":["Read From Blockchain"]},"169":{"href":"/sdk/unreal/read-from-blockchain#gettokensuppliesmap","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TSuccessCallback</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">FGetTokenSuppliesMapReturn</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> GenericSuccess </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">](</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FGetTokenSuppliesMapReturn</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> tokenSuppliesMap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">\t//Response is in FGetTokenSuppliesMapReturn</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> FFailureCallback GenericFailure </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">](</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FSequenceError</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">\t//GetTokenSuppliesMap Failure</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> FCredentials_BE Credentials;</span><span style=\"color:#6A737D;--shiki-dark:#768390\">//Replace this var with your own credentials however you choose to get them</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TOptional</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">USequenceWallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> USequenceWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Credentials);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsSet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tUSequenceWallet </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Api </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tTMap</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">FString, FTokenList</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> tokenMap;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">\tconst</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TPair</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">FString,FTokenList</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> item;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\ttokenMap.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(item);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tFGetTokenSuppliesMapArgs args;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\targs.includeMetaData </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\targs.tokenMap </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> tokenMap;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tApi-&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetTokenSuppliesMap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(args, GenericSuccess, GenericFailure);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nconst TSuccessCallback&lt;FGetTokenSuppliesMapReturn&gt; GenericSuccess = [=](const FGetTokenSuppliesMapReturn&amp; tokenSuppliesMap)\n{\n\t//Response is in FGetTokenSuppliesMapReturn\n};\nconst FFailureCallback GenericFailure = [=](const FSequenceError&amp; Error)\n{\n\t//GetTokenSuppliesMap Failure\n};\nconst FCredentials_BE Credentials;//Replace this var with your own credentials however you choose to get them\nconst TOptional&lt;USequenceWallet*&gt; WalletOptional = USequenceWallet::Get(Credentials);\nif (WalletOptional.IsSet() &amp;&amp; WalletOptional.GetValue())\n{\n\tUSequenceWallet * Api = WalletOptional.GetValue();    \n\tTMap&lt;FString, FTokenList&gt; tokenMap;\n\tconst TPair&lt;FString,FTokenList&gt; item;\n\ttokenMap.Add(item);\n\tFGetTokenSuppliesMapArgs args;\n\targs.includeMetaData = true;\n\targs.tokenMap = tokenMap;\n\tApi-&gt;GetTokenSuppliesMap(args, GenericSuccess, GenericFailure);\n}\n","title":"GetTokenSuppliesMap","titles":["Read From Blockchain"]},"170":{"href":"/sdk/unreal/read-from-blockchain#getbalanceupdates","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TSuccessCallback</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">FGetBalanceUpdatesReturn</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> GenericSuccess </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">](</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FGetBalanceUpdatesReturn</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> balanceUpdates</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">\t//Response in FGetBalanceUpdatesReturn</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> FFailureCallback GenericFailure </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">](</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FSequenceError</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">\t//GetBalanceUpdates Failure</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> FCredentials_BE Credentials;</span><span style=\"color:#6A737D;--shiki-dark:#768390\">//Replace this var with your own credentials however you choose to get them</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TOptional</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">USequenceWallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> USequenceWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Credentials);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsSet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tUSequenceWallet </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Api </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tFGetBalanceUpdatesArgs args;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\targs.contractAddress </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;0x0E0f9d1c4BeF9f0B8a2D9D4c09529F260C7758A2&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\targs.page.page </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\targs.page.more </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tApi-&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetBalanceUpdates</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(args, GenericSuccess, GenericFailure);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nconst TSuccessCallback&lt;FGetBalanceUpdatesReturn&gt; GenericSuccess = [=](const FGetBalanceUpdatesReturn&amp; balanceUpdates)\n{\n\t//Response in FGetBalanceUpdatesReturn\n};\nconst FFailureCallback GenericFailure = [=](const FSequenceError&amp; Error)\n{\n\t//GetBalanceUpdates Failure\n};\n\t\nconst FCredentials_BE Credentials;//Replace this var with your own credentials however you choose to get them\nconst TOptional&lt;USequenceWallet*&gt; WalletOptional = USequenceWallet::Get(Credentials);\nif (WalletOptional.IsSet() &amp;&amp; WalletOptional.GetValue())\n{\n\tUSequenceWallet * Api = WalletOptional.GetValue();\n\tFGetBalanceUpdatesArgs args;\n\targs.contractAddress = &quot;0x0E0f9d1c4BeF9f0B8a2D9D4c09529F260C7758A2&quot;;\n\targs.page.page = 10;\n\targs.page.more = true;\n\tApi-&gt;GetBalanceUpdates(args, GenericSuccess, GenericFailure);\n}\n","title":"GetBalanceUpdates","titles":["Read From Blockchain"]},"171":{"href":"/sdk/unreal/read-from-blockchain#gettransactionhistory","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TSuccessCallback</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">FGetTransactionHistoryReturn</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> GenericSuccess </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">](</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FGetTransactionHistoryReturn</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> transactionHistory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">\t//Response is in FGetTransactionHistoryReturn</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> FFailureCallback GenericFailure </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">](</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FSequenceError</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">\t//GetTransactionHistory Failure</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">   </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> FCredentials_BE Credentials;</span><span style=\"color:#6A737D;--shiki-dark:#768390\">//Replace this var with your own credentials however you choose to get them</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TOptional</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">USequenceWallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> USequenceWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Credentials);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsSet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tUSequenceWallet </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Api </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tFGetTransactionHistoryArgs args;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\targs.filter.accountAddress </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Api-&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetWalletAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\targs.includeMetaData </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\targs.page.page </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\targs.page.more </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tApi-&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetTransactionHistory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(args, GenericSuccess, GenericFailure);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>","isPage":false,"text":"\nconst TSuccessCallback&lt;FGetTransactionHistoryReturn&gt; GenericSuccess = [=](const FGetTransactionHistoryReturn&amp; transactionHistory)\n{\n\t//Response is in FGetTransactionHistoryReturn\n};\nconst FFailureCallback GenericFailure = [=](const FSequenceError&amp; Error)\n{\n\t//GetTransactionHistory Failure\n};\n   \nconst FCredentials_BE Credentials;//Replace this var with your own credentials however you choose to get them\nconst TOptional&lt;USequenceWallet*&gt; WalletOptional = USequenceWallet::Get(Credentials);\nif (WalletOptional.IsSet() &amp;&amp; WalletOptional.GetValue())\n{\n\tUSequenceWallet * Api = WalletOptional.GetValue();\n\tFGetTransactionHistoryArgs args;\n\targs.filter.accountAddress = Api-&gt;GetWalletAddress();\n\targs.includeMetaData = true;\n\targs.page.page = 0;\n\targs.page.more = true;    \n\tApi-&gt;GetTransactionHistory(args, GenericSuccess, GenericFailure);\n}","title":"GetTransactionHistory","titles":["Read From Blockchain"]},"172":{"href":"/sdk/unreal/setup#setup","html":"</header>\n","isPage":true,"text":"\n","title":"Setup","titles":[]},"173":{"href":"/sdk/unreal/setup#configini","html":"\n<p>We now are opting to use .ini files to store configurations for the plugin rather than storing them in the plugin itself. This will make integrating updates to the plugin much simpler.</p>\n<p>To do this please go to [YourProjectDirectory]/Config And create a file named [SequenceConfig.ini]</p>\n<p>Within <strong>[SequenceConfig.ini]</strong> add the following lines:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>[/Script/Sequence.Config]</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>FallbackEncryptionKey = &quot;&quot; </span></span>\n<span class=\"line\"><span>WaaSConfigKey = &quot;&quot; </span></span>\n<span class=\"line\"><span>ProjectAccessKey = &quot;&quot; </span></span>\n<span class=\"line\"><span>GoogleClientID = &quot;&quot; </span></span>\n<span class=\"line\"><span>AppleClientID = &quot;&quot; </span></span>\n<span class=\"line\"><span>FacebookClientID = &quot;&quot; </span></span>\n<span class=\"line\"><span>DiscordClientID = &quot;&quot; </span></span>\n<span class=\"line\"><span>RedirectUrl = &quot;https://api.sequence.app&quot;</span></span></code></pre>\n","isPage":false,"text":"\nWe now are opting to use .ini files to store configurations for the plugin rather than storing them in the plugin itself. This will make integrating updates to the plugin much simpler.\nTo do this please go to [YourProjectDirectory]/Config And create a file named [SequenceConfig.ini]\nWithin [SequenceConfig.ini] add the following lines:\n[/Script/Sequence.Config]\n\nFallbackEncryptionKey = &quot;&quot; \nWaaSConfigKey = &quot;&quot; \nProjectAccessKey = &quot;&quot; \nGoogleClientID = &quot;&quot; \nAppleClientID = &quot;&quot; \nFacebookClientID = &quot;&quot; \nDiscordClientID = &quot;&quot; \nRedirectUrl = &quot;https://api.sequence.app&quot;\n","title":"Config.ini","titles":["Setup"]},"174":{"href":"/sdk/unreal/setup#configuration-key-management","html":"\n<p>Before you can use the Sequence Unreal SDK, you need to acquire the following configuration keys from the Sequence Builder:</p>\n<p><strong>WaaSConfigKey</strong>: This key can be learned about <a href=\"https://docs.sequence.xyz/solutions/builder/embedded-wallet\">here</a></p>\n<p><strong>ProjectAccessKey</strong>: This key can be learned about <a href=\"https://docs.sequence.xyz/solutions/builder/getting-started#claim-an-api-access-key\">here</a></p>\n<p>You can then add these credentials in the SequenceConfig.ini file under <strong>[YourProject]/Config/SequenceConfig.ini.</strong></p>\n<p><em>Note: Make sure to get the WaaS keys from <strong>Production Mode</strong>.</em></p>\n","isPage":false,"text":"\nBefore you can use the Sequence Unreal SDK, you need to acquire the following configuration keys from the Sequence Builder:\nWaaSConfigKey: This key can be learned about here\nProjectAccessKey: This key can be learned about here\nYou can then add these credentials in the SequenceConfig.ini file under [YourProject]/Config/SequenceConfig.ini.\nNote: Make sure to get the WaaS keys from Production Mode.\n","title":"Configuration Key Management","titles":["Setup"]},"175":{"href":"/sdk/unreal/setup#security","html":"\n<p>You must provide a 32 character encryption key in the [SequenceConfig.ini] file under [YourProject]/Config/SequenceConfig.ini under the config variable FallbackEncryptionKey.</p>\n<p>In order to prevent tampering with data you must encrypt your packaged project using Unreals packaging settings. You can refer to <a href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/packaging-unreal-engine-projects?application_version=5.3\">these docs</a> for more information.</p>\n<aside data-callout=\"warning\"><p>Only alphanumeric characters are accepted!</p></aside>","isPage":false,"text":"\nYou must provide a 32 character encryption key in the [SequenceConfig.ini] file under [YourProject]/Config/SequenceConfig.ini under the config variable FallbackEncryptionKey.\nIn order to prevent tampering with data you must encrypt your packaged project using Unreals packaging settings. You can refer to these docs for more information.\nOnly alphanumeric characters are accepted!","title":"Security","titles":["Setup"]},"176":{"href":"/sdk/unreal/upgrading#upgrading","html":"</header>\n","isPage":true,"text":"\n","title":"Upgrading","titles":[]},"177":{"href":"/sdk/unreal/upgrading#manually-upgrading-from-previous-versions","html":"\n<p>If you are using release Beta 1.0.3 or older, you can continue using Unreal versions 5.2 or 5.3. For releases after 1.0.3, you will need to upgrade to Unreal Engine version 5.4.</p>\n<p>Before updating, please backup any configuration data stored in <code>PluginConfig/Config.h</code> or <code>Config/Config.h</code>. Once backed up, delete the entire SequencePlugin directory. Replace it with the new updated version of the plugin.</p>\n","isPage":false,"text":"\nIf you are using release Beta 1.0.3 or older, you can continue using Unreal versions 5.2 or 5.3. For releases after 1.0.3, you will need to upgrade to Unreal Engine version 5.4.\nBefore updating, please backup any configuration data stored in PluginConfig/Config.h or Config/Config.h. Once backed up, delete the entire SequencePlugin directory. Replace it with the new updated version of the plugin.\n","title":"Manually Upgrading from previous versions","titles":["Upgrading"]},"178":{"href":"/sdk/unreal/upgrading#upgrading-to-unreal-54","html":"\n<p>If your project is currently on 5.2 or 5.3, then for this version you&#x27;ll want to upgrade to 5.4.</p>\n<ol>\n<li>Close the Unreal Editor and your your Code Editor</li>\n<li>Right click on your Unreal Project file &gt; &quot;Switch Unreal Engine Version&quot; (you may need to click &quot;Show more options&quot;), choose 5.4 and confirm</li>\n<li>Open your code editor and rebuild your source code</li>\n</ol>\n<p>As a way of future proofing we recommend installing Visual Studio 2022 in accordance with <a href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/setting-up-visual-studio-development-environment-for-cplusplus-projects-in-unreal-engine\">these docs</a> as Unreal 5.4 and onward will be dropping support for Visual Studio 2019.</p>","isPage":false,"text":"\nIf your project is currently on 5.2 or 5.3, then for this version you&#x27;ll want to upgrade to 5.4.\n\nClose the Unreal Editor and your your Code Editor\nRight click on your Unreal Project file &gt; &quot;Switch Unreal Engine Version&quot; (you may need to click &quot;Show more options&quot;), choose 5.4 and confirm\nOpen your code editor and rebuild your source code\n\nAs a way of future proofing we recommend installing Visual Studio 2022 in accordance with these docs as Unreal 5.4 and onward will be dropping support for Visual Studio 2019.","title":"Upgrading to Unreal 5.4","titles":["Upgrading","Manually Upgrading from previous versions"]},"179":{"href":"/sdk/unreal/write-to-blockchain#write-to-blockchain","html":"</header>\n","isPage":true,"text":"\n","title":"Write to Blockchain","titles":[]},"180":{"href":"/sdk/unreal/write-to-blockchain#example-signmessage","html":"\n<p>Used to Sign a message</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TSuccessCallback</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">FSignedMessage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> OnResponse </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FSignedMessage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> Response</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">\t//Response is the signed message</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> FFailureCallback OnFailure </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">](</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FSequenceError</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">\tUE_LOG</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(LogTemp,Display,</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">TEXT</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Error Message: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Error.Message);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> FCredentials_BE Credentials;</span><span style=\"color:#6A737D;--shiki-dark:#768390\">//Replace this var with your own credentials however you choose to get them</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TOptional</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">USequenceWallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> USequenceWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Credentials);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsSet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">   USequenceWallet </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Api </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">   const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> FString Message </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;Hi&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">   Api-&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">SignMessage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Message,OnResponse,OnFailure);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nUsed to Sign a message\nconst TSuccessCallback&lt;FSignedMessage&gt; OnResponse = [this] (const FSignedMessage&amp; Response)\n{\n\t//Response is the signed message\n};\nconst FFailureCallback OnFailure = [this](const FSequenceError&amp; Error)\n{\n\tUE_LOG(LogTemp,Display,TEXT(&quot;Error Message: %s&quot;),*Error.Message);\n};\nconst FCredentials_BE Credentials;//Replace this var with your own credentials however you choose to get them\nconst TOptional&lt;USequenceWallet*&gt; WalletOptional = USequenceWallet::Get(Credentials);\nif (WalletOptional.IsSet() &amp;&amp; WalletOptional.GetValue())\n{\n   USequenceWallet * Api = WalletOptional.GetValue();\n   const FString Message = &quot;Hi&quot;;\n   Api-&gt;SignMessage(Message,OnResponse,OnFailure);\n}\n","title":"Example SignMessage","titles":["Write to Blockchain"]},"181":{"href":"/sdk/unreal/write-to-blockchain#example-sendtransaction","html":"\n<p>Used to send a transaction / perform contract calls.</p>\n<p>To send transactions, first create each desired transaction individually and append it to a <code>TArray&lt;TUnion&lt;FRawTransaction,FERC20Transaction,FERC721Transaction,FERC1155Transaction&gt;&gt;</code> object. This allows you to send multiple transactions in a single request.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> FFailureCallback OnFailure </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">](</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FSequenceError</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">\tUE_LOG</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(LogTemp,Display,</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">TEXT</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Error Message: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Error.Message);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create the Transaction object list</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">TArray</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">TUnion</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">FRawTransaction,FERC20Transaction,FERC721Transaction,FERC1155Transaction</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Txn;</span></span></code></pre>\n","isPage":false,"text":"\nUsed to send a transaction / perform contract calls.\nTo send transactions, first create each desired transaction individually and append it to a TArray&lt;TUnion&lt;FRawTransaction,FERC20Transaction,FERC721Transaction,FERC1155Transaction&gt;&gt; object. This allows you to send multiple transactions in a single request.\nconst FFailureCallback OnFailure = [this](const FSequenceError&amp; Error)\n{\n\tUE_LOG(LogTemp,Display,TEXT(&quot;Error Message: %s&quot;),*Error.Message);\n};\n \n// Create the Transaction object list\nTArray&lt;TUnion&lt;FRawTransaction,FERC20Transaction,FERC721Transaction,FERC1155Transaction&gt;&gt; Txn;\n","title":"Example SendTransaction","titles":["Write to Blockchain"]},"182":{"href":"/sdk/unreal/write-to-blockchain#erc20-transaction","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create the ERC20 transaction</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">FERC20Transaction T20;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">T20.to </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;0x0E0f9d1c4BeF9f0B8a2D9D4c09529F260C7758A2&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">T20.tokenAddress </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">T20.value </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;1000&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Append the ERC20 transaction to the Txn object</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Txn.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Push</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">TUnion</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FRawTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FERC20Transaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FERC721Transaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FERC1155Transaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;(T20));</span></span></code></pre>\n<p>*Note: To send the correct value for the transaction of the ERC20 you will need to make a conversion of the expected transfer value to the expected input value, to make up for the different decimals a contract might have. The formula to do so is as follows: **Transfer Value = Input Value /(10 ^ Contract Decimals) *<em>.\n(i.e: To transfer 1 USDC -&gt; Input Value = 1 × 10^6)</em></p>\n","isPage":false,"text":"\n// Create the ERC20 transaction\nFERC20Transaction T20;\nT20.to = &quot;0x0E0f9d1c4BeF9f0B8a2D9D4c09529F260C7758A2&quot;;\nT20.tokenAddress = &quot;0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174&quot;;\nT20.value = &quot;1000&quot;;\n \n// Append the ERC20 transaction to the Txn object\nTxn.Push(TUnion&lt;FRawTransaction,FERC20Transaction,FERC721Transaction,FERC1155Transaction&gt;(T20));\n*Note: To send the correct value for the transaction of the ERC20 you will need to make a conversion of the expected transfer value to the expected input value, to make up for the different decimals a contract might have. The formula to do so is as follows: **Transfer Value = Input Value /(10 ^ Contract Decimals) *.\n(i.e: To transfer 1 USDC -&gt; Input Value = 1 × 10^6)\n","title":"ERC20 Transaction","titles":["Write to Blockchain","Example SendTransaction"]},"183":{"href":"/sdk/unreal/write-to-blockchain#erc721-transaction","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create the ERC721 transaction</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">FERC721Transaction T721;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">T721.safe </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">T721.id </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;54530968763798660137294927684252503703134533114052628080002308208148824588621&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">T721.to </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;0x0E0f9d1c4BeF9f0B8a2D9D4c09529F260C7758A2&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">T721.tokenAddress </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;0xa9a6A3626993D487d2Dbda3173cf58cA1a9D9e9f&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Append the ERC721 transaction to the Txn object</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Txn.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Push</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">TUnion</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FRawTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FERC20Transaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FERC721Transaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FERC1155Transaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;(T721));</span></span></code></pre>\n","isPage":false,"text":"\n// Create the ERC721 transaction\nFERC721Transaction T721;\nT721.safe = true;\nT721.id = &quot;54530968763798660137294927684252503703134533114052628080002308208148824588621&quot;;\nT721.to = &quot;0x0E0f9d1c4BeF9f0B8a2D9D4c09529F260C7758A2&quot;;\nT721.tokenAddress = &quot;0xa9a6A3626993D487d2Dbda3173cf58cA1a9D9e9f&quot;;\n \n// Append the ERC721 transaction to the Txn object\nTxn.Push(TUnion&lt;FRawTransaction,FERC20Transaction,FERC721Transaction,FERC1155Transaction&gt;(T721));\n","title":"ERC721 Transaction","titles":["Write to Blockchain","Example SendTransaction"]},"184":{"href":"/sdk/unreal/write-to-blockchain#erc1155-transaction","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create the ERC1155 transaction</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">FERC1155Transaction T1155;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">T1155.to </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;0x0E0f9d1c4BeF9f0B8a2D9D4c09529F260C7758A2&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">T1155.tokenAddress </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;0x631998e91476DA5B870D741192fc5Cbc55F5a52E&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">FERC1155TxnValue Val;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Val.amount </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;1&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Val.id </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;66635&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">T1155.vals.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Val);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Append the ERC1155 transaction to the Txn object</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Txn.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Push</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">TUnion</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FRawTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FERC20Transaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FERC721Transaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FERC1155Transaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;(T1155));</span></span></code></pre>\n","isPage":false,"text":"\n// Create the ERC1155 transaction\nFERC1155Transaction T1155;\nT1155.to = &quot;0x0E0f9d1c4BeF9f0B8a2D9D4c09529F260C7758A2&quot;;\nT1155.tokenAddress = &quot;0x631998e91476DA5B870D741192fc5Cbc55F5a52E&quot;;\n \nFERC1155TxnValue Val;\nVal.amount = &quot;1&quot;;\nVal.id = &quot;66635&quot;;\nT1155.vals.Add(Val);\n \n// Append the ERC1155 transaction to the Txn object\nTxn.Push(TUnion&lt;FRawTransaction,FERC20Transaction,FERC721Transaction,FERC1155Transaction&gt;(T1155));\n","title":"ERC1155 Transaction","titles":["Write to Blockchain","Example SendTransaction"]},"185":{"href":"/sdk/unreal/write-to-blockchain#raw-transaction-example-contract-call","html":"\n<p><em>Note: if you want call contracts with the Raw type you&#x27;ll want include the header #include &quot;ABI/ABI.h&quot; in order to use the ABI to encode the data for a contract call.</em></p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create the Raw transaction</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">FString FunctionSignature </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;balanceOf(address,uint256)&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">TFixedABIData Account </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ABI</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">From</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0E0f9d1c4BeF9f0B8a2D9D4c09529F260C7758A2&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">TFixedABIData Id </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ABI</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">UInt32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">0x</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">01</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">TArray</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">ABIEncodeable</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Arr;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Arr.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Account);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Arr.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Id);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">FUnsizedData EncodedData </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ABI</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Encode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(FunctionSignature, Arr);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">FRawTransaction T;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">T.data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;0x&quot;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> +</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> EncodedData.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ToHex</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">T.to </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;0x64d9f9d527abe2a1c1ce3fada98601c4ac5bfdd2&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">T.value </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;0&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Append the Raw transaction to the Txn object</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Txn.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Push</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">TUnion</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FRawTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FERC20Transaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FERC721Transaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FERC1155Transaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;(T));</span></span></code></pre>\n","isPage":false,"text":"\nNote: if you want call contracts with the Raw type you&#x27;ll want include the header #include &quot;ABI/ABI.h&quot; in order to use the ABI to encode the data for a contract call.\n// Create the Raw transaction\nFString FunctionSignature = &quot;balanceOf(address,uint256)&quot;;\nTFixedABIData Account = ABI::Address(FAddress::From(&quot;0E0f9d1c4BeF9f0B8a2D9D4c09529F260C7758A2&quot;));\nTFixedABIData Id = ABI::UInt32(0x01);\nTArray&lt;ABIEncodeable*&gt; Arr;\nArr.Add(&amp;Account);\nArr.Add(&amp;Id);\nFUnsizedData EncodedData = ABI::Encode(FunctionSignature, Arr);\nFRawTransaction T;\nT.data = &quot;0x&quot; + EncodedData.ToHex();\nT.to = &quot;0x64d9f9d527abe2a1c1ce3fada98601c4ac5bfdd2&quot;;\nT.value = &quot;0&quot;;\n \n// Append the Raw transaction to the Txn object\nTxn.Push(TUnion&lt;FRawTransaction,FERC20Transaction,FERC721Transaction,FERC1155Transaction&gt;(T));\n","title":"Raw Transaction (Example Contract Call)","titles":["Write to Blockchain","Example SendTransaction"]},"186":{"href":"/sdk/unreal/write-to-blockchain#sending-the-transaction","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Now send the transaction</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> FCredentials_BE Credentials;</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // Replace this var with your own credentials however you choose to get them</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TOptional</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">USequenceWallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> USequenceWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Credentials);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsSet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tUSequenceWallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Api </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tApi-&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">SendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Txn, [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">](</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FTransactionResponse</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> Transaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tTSharedPtr</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">FJsonObject</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Json </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Transaction.Json;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tTSharedPtr</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">FJsonObject</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Receipt </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Transaction.Receipt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tTSharedPtr</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">FJsonObject</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> NativeReceipt </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Transaction.NativeReceipt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tTSharedPtr</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">FJsonObject</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Request </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Transaction.Request;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tTArray</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">TSharedPtr</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">FJsonValue</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Simulations </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Transaction.Simulations;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tFString TxHash </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Transaction.TxHash;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tFString IdentifyingCode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Transaction.IdentifyingCode;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tFString MetaTxHash </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Transaction.MetaTxHash;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t}, OnFailure);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\n// Now send the transaction\nconst FCredentials_BE Credentials; // Replace this var with your own credentials however you choose to get them\nconst TOptional&lt;USequenceWallet*&gt; WalletOptional = USequenceWallet::Get(Credentials);\nif (WalletOptional.IsSet() &amp;&amp; WalletOptional.GetValue())\n{\n\tUSequenceWallet* Api = WalletOptional.GetValue();\n\tApi-&gt;SendTransaction(Txn, [this](const FTransactionResponse&amp; Transaction)\n\t{\n\t\tTSharedPtr&lt;FJsonObject&gt; Json = Transaction.Json;\n\t\tTSharedPtr&lt;FJsonObject&gt; Receipt = Transaction.Receipt;\n\t\tTSharedPtr&lt;FJsonObject&gt; NativeReceipt = Transaction.NativeReceipt;\n\t\tTSharedPtr&lt;FJsonObject&gt; Request = Transaction.Request;\n\t\tTArray&lt;TSharedPtr&lt;FJsonValue&gt;&gt; Simulations = Transaction.Simulations;\n\t\tFString TxHash = Transaction.TxHash;\n\t\tFString IdentifyingCode = Transaction.IdentifyingCode;\n\t\tFString MetaTxHash = Transaction.MetaTxHash;\n\t}, OnFailure);\n}\n","title":"Sending the Transaction","titles":["Write to Blockchain","Example SendTransaction"]},"187":{"href":"/sdk/unreal/write-to-blockchain#send-transaction-with-fee-options","html":"\n<p>To send transactions with fee options, first retrieve the available fee options using the <code>GetFeeOptions</code> method. Once the fee options are received, select a fee option and use the <code>SendTransactionWithFeeOption</code> method to send the transaction with the selected fee.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Define the callback for handling the fee options response</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TFunction</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;void</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(TArray</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">FFeeOption</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> OnFeeResponse </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Transactions</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">OnSuccess</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">OnFailure</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">](</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TArray</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FFeeOption</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> Response</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">   if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (Response.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Num</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">   {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> FFeeOption SelectedFeeOption </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Response[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">];</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">      UE_LOG</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(LogTemp, Display, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">TEXT</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Using FeeOption: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">UIndexerSupport</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">StructToString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(SelectedFeeOption));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> FFailureCallback OnTransactionFailure </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">OnFailure</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">](</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FSequenceError</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">         OnFailure</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Transaction failure&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, Error);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      };</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> UAuthenticator</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Auth </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> NewObject</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">UAuthenticator</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;();</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TOptional</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">USequenceWallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> USequenceWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Auth-&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetStoredCredentials</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetCredentials</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">());</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsSet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">         USequenceWallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Api </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">         Api-&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">SendTransactionWithFeeOption</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Transactions, SelectedFeeOption, [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">](</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FTransactionResponse</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> Transaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">         {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            FString OutputString;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TSharedRef</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">TJsonWriter</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;&gt;&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Writer </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TJsonWriterFactory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;&gt;::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Create</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">OutputString);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">            FJsonSerializer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Serialize</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Transaction.Json.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ToSharedRef</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), Writer);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">            OnSuccess</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(OutputString);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">         }, OnTransactionFailure);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">   }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">   else</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">   {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">      OnFailure</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Test failed no fee options in response&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">FSequenceError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">EErrorType</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::EmptyResponse, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Empty fee option response&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">   }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Define the callback for handling fee options retrieval failure</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> FFailureCallback OnFeeFailure </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">OnFailure</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">](</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FSequenceError</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">   OnFailure</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Get Fee Option Response failure&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, Error);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Retrieve fee options and send the transaction with the selected fee option</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> UAuthenticator</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Auth </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> NewObject</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">UAuthenticator</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;();</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TOptional</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">USequenceWallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> USequenceWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Auth-&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetStoredCredentials</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetCredentials</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">());</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsSet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">   USequenceWallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Api </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WalletOptional.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">   Api-&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetFeeOptions</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Transactions, OnFeeResponse, OnFeeFailure);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<aside data-callout=\"info\"><p>Your array of transactions will automatically be batched together into one single transaction by the API and will all pass or all fail.</p></aside>","isPage":false,"text":"\nTo send transactions with fee options, first retrieve the available fee options using the GetFeeOptions method. Once the fee options are received, select a fee option and use the SendTransactionWithFeeOption method to send the transaction with the selected fee.\n// Define the callback for handling the fee options response\nconst TFunction&lt;void(TArray&lt;FFeeOption&gt;)&gt; OnFeeResponse = [Transactions, OnSuccess, OnFailure](const TArray&lt;FFeeOption&gt;&amp; Response)\n{\n   if (Response.Num() &gt; 0)\n   {\n      const FFeeOption SelectedFeeOption = Response[0];\n      UE_LOG(LogTemp, Display, TEXT(&quot;Using FeeOption: %s&quot;), *UIndexerSupport::StructToString(SelectedFeeOption));\n      \n      const FFailureCallback OnTransactionFailure = [OnFailure](const FSequenceError&amp; Error)\n      {\n         OnFailure(&quot;Transaction failure&quot;, Error);\n      };\n \n      const UAuthenticator* Auth = NewObject&lt;UAuthenticator&gt;();\n      const TOptional&lt;USequenceWallet*&gt; WalletOptional = USequenceWallet::Get(Auth-&gt;GetStoredCredentials().GetCredentials());\n      if (WalletOptional.IsSet() &amp;&amp; WalletOptional.GetValue())\n      {\n         USequenceWallet* Api = WalletOptional.GetValue();\n         Api-&gt;SendTransactionWithFeeOption(Transactions, SelectedFeeOption, [=](const FTransactionResponse&amp; Transaction)\n         {\n            FString OutputString;\n            const TSharedRef&lt;TJsonWriter&lt;&gt;&gt; Writer = TJsonWriterFactory&lt;&gt;::Create(&amp;OutputString);\n            FJsonSerializer::Serialize(Transaction.Json.ToSharedRef(), Writer);\n            OnSuccess(OutputString);\n         }, OnTransactionFailure);\n      }\n   }\n   else\n   {\n      OnFailure(&quot;Test failed no fee options in response&quot;, FSequenceError(EErrorType::EmptyResponse, &quot;Empty fee option response&quot;));\n   }\n};\n \n// Define the callback for handling fee options retrieval failure\nconst FFailureCallback OnFeeFailure = [OnFailure](const FSequenceError&amp; Error)\n{\n   OnFailure(&quot;Get Fee Option Response failure&quot;, Error);\n};\n \n// Retrieve fee options and send the transaction with the selected fee option\nconst UAuthenticator* Auth = NewObject&lt;UAuthenticator&gt;();\nconst TOptional&lt;USequenceWallet*&gt; WalletOptional = USequenceWallet::Get(Auth-&gt;GetStoredCredentials().GetCredentials());\nif (WalletOptional.IsSet() &amp;&amp; WalletOptional.GetValue())\n{\n   USequenceWallet* Api = WalletOptional.GetValue();\n   Api-&gt;GetFeeOptions(Transactions, OnFeeResponse, OnFeeFailure);\n}\nYour array of transactions will automatically be batched together into one single transaction by the API and will all pass or all fail.","title":"Send Transaction with Fee Options","titles":["Write to Blockchain"]},"188":{"href":"/solutions/builder/analytics#analytics","html":"</header>\n<p>When you use Sequence, via our SDKs, to build your application, you can see key insights in Sequence Builder.\nYou don&#x27;t need to do any additional work to see valuable metrics about your project, such as the number\nof connected wallets or daily transaction requests.</p>\n<aside data-callout=\"tip\"><p>You can also query your analytics programatically or connect to services like Dune via our <a href=\"/api/analytics/overview\">APIs</a>.</p></aside>\n","isPage":true,"text":"\nWhen you use Sequence, via our SDKs, to build your application, you can see key insights in Sequence Builder.\nYou don&#x27;t need to do any additional work to see valuable metrics about your project, such as the number\nof connected wallets or daily transaction requests.\nYou can also query your analytics programatically or connect to services like Dune via our APIs.\n","title":"Analytics","titles":[]},"189":{"href":"/solutions/builder/analytics#how-it-works","html":"\n<p>When requests are made with Sequence SDKs/APIs, analytics events are fired and sent to our internal analytics system, Databeat.\nDatabeat anonymizes the data and stores it in a secure database designed for high-volume, real-time applications. The metrics you see in Builder are\nqueried from the database, in real-time, for your project and presented in insightful visualizations.</p>\n","isPage":false,"text":"\nWhen requests are made with Sequence SDKs/APIs, analytics events are fired and sent to our internal analytics system, Databeat.\nDatabeat anonymizes the data and stores it in a secure database designed for high-volume, real-time applications. The metrics you see in Builder are\nqueried from the database, in real-time, for your project and presented in insightful visualizations.\n","title":"How it works","titles":["Analytics",null,null]},"190":{"href":"/solutions/builder/analytics#overview","html":"\n<p>In the Overview tab of Builder, you will see the key, high-level metrics for your project. Metric cards will show the total value for that metric, and\nclicking on one will change the chart to show time-series data for that metric.</p>\n<aside data-callout=\"tip\"><p>You also have the option to look back at your data beyond the default <strong>Last 30 days</strong>\nby toggling the filter in the top right corner.</p></aside>\n","isPage":false,"text":"\nIn the Overview tab of Builder, you will see the key, high-level metrics for your project. Metric cards will show the total value for that metric, and\nclicking on one will change the chart to show time-series data for that metric.\nYou also have the option to look back at your data beyond the default Last 30 days\nby toggling the filter in the top right corner.\n","title":"Overview","titles":["Analytics"]},"191":{"href":"/solutions/builder/analytics#wallets-connected","html":"\n<p><em>Wallets connected</em> represents the count of distinct wallet addresses connected via Sequence SDKs for the selected time period.</p>\n<p><img src=\"/img/builder/builder_analytics_wallets_connected.png\" alt=\"Sequence Builder analytics wallets connected\"/></p>\n","isPage":false,"text":"\nWallets connected represents the count of distinct wallet addresses connected via Sequence SDKs for the selected time period.\n\n","title":"Wallets connected","titles":["Analytics","Overview",null]},"192":{"href":"/solutions/builder/analytics#marketplace-transactions","html":"\n<p><em>Marketplace transactions</em> shows the total number of buy and sell events that occure via the Sequence Marketplace API.</p>\n<p><img src=\"/img/builder/builder_analytics_market_txns.png\" alt=\"Sequence Builder analytics marketplace transactions\"/></p>\n","isPage":false,"text":"\nMarketplace transactions shows the total number of buy and sell events that occure via the Sequence Marketplace API.\n\n","title":"Marketplace transactions","titles":["Analytics","Overview",null]},"193":{"href":"/solutions/builder/analytics#transaction-requests","html":"\n<p><em>Transaction requests</em> represents the total number of transactions sent by wallets associated with the project.</p>\n<p><img src=\"/img/builder/builder_analytics_txn_requests.png\" alt=\"Sequence Builder analytics transaction requests\"/></p>","isPage":false,"text":"\nTransaction requests represents the total number of transactions sent by wallets associated with the project.\n","title":"Transaction requests","titles":["Analytics","Overview",null]},"194":{"href":"/solutions/builder/collections#collections","html":"</header>\n<p>The Sequence Builder offers the ability to manage Collections of collectible metadata, including: collectible details, images, and properties. Within the Builder, Collections can be linked to deployable contracts from the Builder for easy crafting flows.</p>\n<p>Media and metadata is saved to Sequence servers where certain functionality allows you to have control over updates and public / private viewing of your collection information.</p>\n<aside data-callout=\"tip\"><p><a href=\"/api/metadata/overview\">APIs</a> are also available to manage your NFT collection metadata.</p></aside>\n<p>The following functions are possible:</p>\n<ol>\n<li><a href=\"/solutions/builder/collections#1-create-a-collection\">Create Collection</a>: Create a new collection and specify details</li>\n<li><a href=\"/solutions/builder/collections#2-link-a-contract\">Link a Contract</a>:  Deploy and link a contract</li>\n<li><a href=\"/solutions/builder/collections#3-create-a-collectible\">Create Collectible</a>: Upload media artwork as an image and encode properties</li>\n<li><a href=\"/solutions/builder/collections#4-update-info-in-settings\">Upate Settings</a>: Update collection details in settings</li>\n<li><a href=\"/solutions/builder/collections#5-reference-metadata-token-uri\">(Optional) Reference Metadata Token URIs</a>: Reference token metadata base URI for any collectible contract</li>\n</ol>\n","isPage":true,"text":"\nThe Sequence Builder offers the ability to manage Collections of collectible metadata, including: collectible details, images, and properties. Within the Builder, Collections can be linked to deployable contracts from the Builder for easy crafting flows.\nMedia and metadata is saved to Sequence servers where certain functionality allows you to have control over updates and public / private viewing of your collection information.\nAPIs are also available to manage your NFT collection metadata.\nThe following functions are possible:\n\nCreate Collection: Create a new collection and specify details\nLink a Contract:  Deploy and link a contract\nCreate Collectible: Upload media artwork as an image and encode properties\nUpate Settings: Update collection details in settings\n(Optional) Reference Metadata Token URIs: Reference token metadata base URI for any collectible contract\n\n","title":"Collections","titles":[]},"195":{"href":"/solutions/builder/collections#1-create-a-collection","html":"\n<p>First navigate to your project from the top left hand drop down of <a href=\"https://sequence.build\">Sequence Builder</a> and select the <code>Collections</code> page view from the left nav, then select the <code>+ Create a collection</code></p>\n<p><img src=\"/img/builder/builder_create_collection.png\" alt=\"create collection\"/></p>\n<p>Then input your details for the collection, like <code>Collection Name</code>, <code>Description</code> for the contract info, <code>Collection Data</code> being <code>Visible (Public)</code> or <code>Private (Hidden)</code> where for the data to be viewable select Visible (Public), and include your projects <code>External Link</code> to a website.</p>\n<p><img src=\"/img/builder/builder_create_collection_input_details.png\" alt=\"add details to collection\"/></p>\n","isPage":false,"text":"\nFirst navigate to your project from the top left hand drop down of Sequence Builder and select the Collections page view from the left nav, then select the + Create a collection\n\nThen input your details for the collection, like Collection Name, Description for the contract info, Collection Data being Visible (Public) or Private (Hidden) where for the data to be viewable select Visible (Public), and include your projects External Link to a website.\n\n","title":"1. Create a Collection","titles":["Collections"]},"196":{"href":"/solutions/builder/collections#2-link-a-contract","html":"\n<p>After a collection has been created you can first link a contract by deploying a collectible contract (i.e. <code>ERC1155</code> or <code>ERC721</code>) and having the <code>baseMetadataURI</code> being set on the deployment by selecting the <code>+ Link contract</code></p>\n<p><img src=\"/img/builder/builder_collections_link_contract.png\" alt=\"link a contract\"/></p>\n<p>Then select the <code>+ Deploy new contract</code></p>\n<p><img src=\"/img/builder/builder_collection_deploy_contract.png\" alt=\"deploy a contract\"/></p>\n<p>Select your contract type or upload your own</p>\n<p><img src=\"/img/builder/builder_select_contract_type.png\" alt=\"contract type\"/></p>\n<p>And complete your contract details, specifying the <code>Network</code>, <code>Contract Name</code>, and <code>Royalties</code>, and finally select <code>Deploy Contract</code> to then complete the transaction signing in the Sequence popup.</p>\n<p><img src=\"/img/builder/builder_deploy_contract_details.png\" alt=\"contract details\"/></p>\n<p>Then you will notice if you check out the <code>Read Contract</code> section tab of the contract, if you <code>Read</code> from the <code>baseURI</code> it will show you the metadata url from Sequence where when read from the Indexer, <code>&lt;token_id&gt;.json</code> will get appended to the end to reference the json for the collectible.</p>\n<p><img src=\"/img/builder/builder_read_base_uri.png\" alt=\"read base uri\"/></p>\n","isPage":false,"text":"\nAfter a collection has been created you can first link a contract by deploying a collectible contract (i.e. ERC1155 or ERC721) and having the baseMetadataURI being set on the deployment by selecting the + Link contract\n\nThen select the + Deploy new contract\n\nSelect your contract type or upload your own\n\nAnd complete your contract details, specifying the Network, Contract Name, and Royalties, and finally select Deploy Contract to then complete the transaction signing in the Sequence popup.\n\nThen you will notice if you check out the Read Contract section tab of the contract, if you Read from the baseURI it will show you the metadata url from Sequence where when read from the Indexer, &lt;token_id&gt;.json will get appended to the end to reference the json for the collectible.\n\n","title":"2. Link a Contract","titles":["Collections"]},"197":{"href":"/solutions/builder/collections#3-create-a-collectible","html":"\n<p>In order to create a Collectible as part of the Collection, return to the <code>Collections</code> page and select the <code>+ Add a collectible</code></p>\n<p><img src=\"/img/builder/builder_collections_add_a_collectible.png\" alt=\"add a collectible\"/></p>\n<p>Then update the details like <code>Collectible Name</code> and <code>Description</code>, then upload your artwork by selecting the greyish field</p>\n<p><img src=\"/img/builder/builder_collections_update_art_and_details.png\" alt=\"update collectible details\"/></p>\n","isPage":false,"text":"\nIn order to create a Collectible as part of the Collection, return to the Collections page and select the + Add a collectible\n\nThen update the details like Collectible Name and Description, then upload your artwork by selecting the greyish field\n\n","title":"3. Create a Collectible","titles":["Collections"]},"198":{"href":"/solutions/builder/collections#add-a-metadata-property","html":"\n<p>You can also add certain properties to your collectible, by selecting the <code>+ Add a property</code> which can be useful for inscribing more information like numbers or strings when using the metadata in any game.</p>\n<p><img src=\"/img/builder/builder_collection_add_propery.png\" alt=\"add a property\"/></p>\n<p>Assigning the key and value to each property</p>\n<p><img src=\"/img/builder/builder_collections_assign_properties.png\" alt=\"asign properties\"/></p>\n<p>Complete the prior steps until you get your final result of a collectible added to a collection</p>\n<p><img src=\"/img/builder/builder_collections_final_result_of_collectible.png\" alt=\"final result of collectible added\"/></p>\n","isPage":false,"text":"\nYou can also add certain properties to your collectible, by selecting the + Add a property which can be useful for inscribing more information like numbers or strings when using the metadata in any game.\n\nAssigning the key and value to each property\n\nComplete the prior steps until you get your final result of a collectible added to a collection\n\n","title":"Add a metadata property","titles":["Collections","3. Create a Collectible",null]},"199":{"href":"/solutions/builder/collections#4-update-info-in-settings","html":"\n<p>At any point you can update the details for your collectible in the settings</p>\n<p><img src=\"/img/builder/builder_collections_access_settings.png\" alt=\"settings\"/></p>\n<p>Once in settings, you can update any one of the information fields, like: <code>Collection Name</code>, <code>Description</code>, visibility of <code>Collection data</code>, and an <code>External Link</code> to reference a website on the web.</p>\n<p><img src=\"/img/builder/builder_collections_update_info.png\" alt=\"settings\"/></p>\n","isPage":false,"text":"\nAt any point you can update the details for your collectible in the settings\n\nOnce in settings, you can update any one of the information fields, like: Collection Name, Description, visibility of Collection data, and an External Link to reference a website on the web.\n\n","title":"4. Update Info in Settings","titles":["Collections"]},"200":{"href":"/solutions/builder/collections#delete-collection-data","html":"\n<p>You can delete all of the Collection data for the contract by selecting <code>Delete collection data</code> which will permanently delete data all data, an action that cannot be undone.</p>\n","isPage":false,"text":"\nYou can delete all of the Collection data for the contract by selecting Delete collection data which will permanently delete data all data, an action that cannot be undone.\n","title":"Delete Collection Data","titles":["Collections","4. Update Info in Settings",null]},"201":{"href":"/solutions/builder/collections#5-reference-metadata-token-uri","html":"\n<p>Currently in order to <code>Link Contract</code> you can&#x27;t use predeployed contracts, but you can read the <code>Token Metadata URI</code> from the Collection to set your existing contracts&#x27; <code>setBaseMetadataURI</code>. The URI can be retrieved by accessing <code>Metadata URIs</code> purple button</p>\n<p><img src=\"/img/builder/builder_collections_metadata_uris.png\" alt=\"access metadata uris\"/></p>\n<p>Then copy the <code>Token Metadata URI</code> from the modal and use the URI to write to a contract with the <code>setBaseMetadataURI</code> function, or, use to reference metadata directly in an application by appending a <code>&lt;token_id&gt;.json</code> to the URI to access the metadata</p>\n<p><img src=\"/img/builder/builder_collections_token_metadata_uri.png\" alt=\"copy metadata uris\"/></p>","isPage":false,"text":"\nCurrently in order to Link Contract you can&#x27;t use predeployed contracts, but you can read the Token Metadata URI from the Collection to set your existing contracts&#x27; setBaseMetadataURI. The URI can be retrieved by accessing Metadata URIs purple button\n\nThen copy the Token Metadata URI from the modal and use the URI to write to a contract with the setBaseMetadataURI function, or, use to reference metadata directly in an application by appending a &lt;token_id&gt;.json to the URI to access the metadata\n","title":"5. Reference Metadata Token URI","titles":["Collections"]},"202":{"href":"/solutions/builder/gas-tank#gas-sponsorship","html":"</header>\n<p>Sequence wallets are controlled by smart contracts, enabling transaction fees to be abstracted away from users, a concept known in web3 as <em>gas</em>. With Sequence Builder&#x27;s Gas Tank, you have a streamlined process for sponsoring gas for your users.</p>\n","isPage":true,"text":"\nSequence wallets are controlled by smart contracts, enabling transaction fees to be abstracted away from users, a concept known in web3 as gas. With Sequence Builder&#x27;s Gas Tank, you have a streamlined process for sponsoring gas for your users.\n","title":"Gas Sponsorship","titles":[]},"203":{"href":"/solutions/builder/gas-tank#why-would-i-want-to-sponsor-gas-for-my-game","html":"\n<p>Obtaining the crypto needed to cover fees poses a challenge for traditional gamers. Sponsoring gas on their behalf solves this problem.</p>\n<p>Gas sponsoring in a web3 game provides seamless onboarding by removing gas fees, making transactions efficient and cost-effective for trading virtual assets in various in-game activities. This creates a more enjoyable gaming experience, fostering player loyalty and community engagement.</p>\n","isPage":false,"text":"\nObtaining the crypto needed to cover fees poses a challenge for traditional gamers. Sponsoring gas on their behalf solves this problem.\nGas sponsoring in a web3 game provides seamless onboarding by removing gas fees, making transactions efficient and cost-effective for trading virtual assets in various in-game activities. This creates a more enjoyable gaming experience, fostering player loyalty and community engagement.\n","title":"Why would I want to sponsor gas for my game?","titles":["Gas Sponsorship",null,null,null]},"204":{"href":"/solutions/builder/gas-tank#sponsoring-gas-with-the-gas-tank","html":"\n<p>Sponsoring gas on contracts is easy, and can be done either by searching and adding a contract or selecting a contract that you have already deployed on a project. Project owners also have control over the contracts they sponsor, allowing them to temporarily disable a sponsor for a specific contract by toggling it off and updating the sponsor settings.</p>\n","isPage":false,"text":"\nSponsoring gas on contracts is easy, and can be done either by searching and adding a contract or selecting a contract that you have already deployed on a project. Project owners also have control over the contracts they sponsor, allowing them to temporarily disable a sponsor for a specific contract by toggling it off and updating the sponsor settings.\n","title":"Sponsoring gas with the Gas Tank","titles":["Gas Sponsorship",null,null,null]},"205":{"href":"/solutions/builder/gas-tank#how-to-sponsor-a-contract","html":"\n<div data-vocs-steps=\"true\"><div data-depth=\"2\">","isPage":false,"text":"\n","title":"How to Sponsor a Contract","titles":["Gas Sponsorship",null,null]},"206":{"href":"/solutions/builder/gas-tank#create-or-select-project","html":"<p>To create a project, follow <a href=\"/support/builder/project-management#watch-a-project-be-created-in-the-builder\">this video walk through</a></p><p>If you have a project already, sign in and select from the listed projects</p></div><div data-depth=\"2\">","isPage":false,"text":"To create a project, follow this video walk throughIf you have a project already, sign in and select from the listed projects","title":"Create or Select Project","titles":["Gas Sponsorship"]},"207":{"href":"/solutions/builder/gas-tank#upgrade-billing","html":"<p>To upgrade Billing follow <a href=\"/support/builder/project-settings#update-your-project-subscription-plan\">this walk through</a></p></div><div data-depth=\"2\">","isPage":false,"text":"To upgrade Billing follow this walk through","title":"Upgrade Billing","titles":["Gas Sponsorship"]},"208":{"href":"/solutions/builder/gas-tank#select-relayer-network","html":"<p>After selecting a project, go to the <code>Gas Sponsoring</code> page, and select from the relayer dropdown the network</p><p><img src=\"/img/builder/builder_select_network_relayer.png\" alt=\"select relayer network\"/></p></div><div data-depth=\"2\">","isPage":false,"text":"After selecting a project, go to the Gas Sponsoring page, and select from the relayer dropdown the network","title":"Select Relayer Network","titles":["Gas Sponsorship"]},"209":{"href":"/solutions/builder/gas-tank#sponsor-contract-address","html":"<p>Then, either <code>+ Add Address</code> from a contract not already linked to your project</p><p><img src=\"/img/builder/builder_gas_sponsoring_add_address.png\" alt=\"select relayer network\"/></p><p>Or, <code>Add Contract</code> from an already <code>Linked</code> contracts</p><p><img src=\"/img/builder/builder_gas_sponsoring_add_contract.png\" alt=\"select relayer network\"/></p></div></div>","isPage":false,"text":"Then, either + Add Address from a contract not already linked to your projectOr, Add Contract from an already Linked contracts","title":"Sponsor Contract Address","titles":["Gas Sponsorship"]},"210":{"href":"/solutions/wallets/overview#onboard-with-sequence","html":"</header>\n<p>Sequence is the best way to onboard players to your blockchain-enabled game. We have two main options to get started: the <a href=\"/solutions/wallets/embedded-wallet/overview\">Embedded Wallet</a> and the <a href=\"/solutions/wallets/universal-wallet/overview\">Universal Wallet</a>. Both are completely non-custodial.</p>\n<p>The <a href=\"/solutions/wallets/embedded-wallet/overview\">Embedded Wallet</a> is designed for a traditional gaming experience. The advantages are:</p>\n<ul>\n<li>Authenticate users with common social providers or email.</li>\n<li>Support for Unity, Unreal, Web, and Mobile.</li>\n<li>Optional pop-ups, modals, and transaction signing for a seamless UX.</li>\n<li>Fully non-custodial, smart contract wallet.</li>\n<li>Out of the box login with <a href=\"/solutions/wallets/sequence-kit/overview\">Sequence Kit</a> or build your own flow.</li>\n</ul>\n<p>On the other hand, the <a href=\"/solutions/wallets/universal-wallet/overview\">Universal Wallet</a> caters primarily to native web3 gaming users on Web.</p>\n<div class=\"text--center\"><a href=\"https://sequence.build\"><img src=\"/img/Walletcomparison.png\" alt=\"Wallet Comparison between embedded and universal wallets\"/></a></div>\n<p>Our <a href=\"/solutions/wallets/sequence-kit/overview\">Sequence Kit</a> library merges both options into a customizable UI written in Typescript, tailored for a browser experience. This is great when you want to support users with existing wallets like Metamask, have an out-of-the-box experience, as well as millions of potential new users who prefer the convenience of social login.</p>\n<p>Lastly, we provide <a href=\"/solutions/wallets/link-wallets/overview\">Wallet Linking</a> for your ecosystem which enables the ability for a developer to create a verifiable association between two wallets from a single user. Generally, this is a link between an embedded wallet for a game or application and an external wallet, such as Metamask so you can easily query all wallets associated with a single user - across games, ecosystems, and blockchains.</p>\n","isPage":true,"text":"\nSequence is the best way to onboard players to your blockchain-enabled game. We have two main options to get started: the Embedded Wallet and the Universal Wallet. Both are completely non-custodial.\nThe Embedded Wallet is designed for a traditional gaming experience. The advantages are:\n\nAuthenticate users with common social providers or email.\nSupport for Unity, Unreal, Web, and Mobile.\nOptional pop-ups, modals, and transaction signing for a seamless UX.\nFully non-custodial, smart contract wallet.\nOut of the box login with Sequence Kit or build your own flow.\n\nOn the other hand, the Universal Wallet caters primarily to native web3 gaming users on Web.\n\nOur Sequence Kit library merges both options into a customizable UI written in Typescript, tailored for a browser experience. This is great when you want to support users with existing wallets like Metamask, have an out-of-the-box experience, as well as millions of potential new users who prefer the convenience of social login.\nLastly, we provide Wallet Linking for your ecosystem which enables the ability for a developer to create a verifiable association between two wallets from a single user. Generally, this is a link between an embedded wallet for a game or application and an external wallet, such as Metamask so you can easily query all wallets associated with a single user - across games, ecosystems, and blockchains.\n","title":"Onboard with Sequence","titles":[]},"211":{"href":"/solutions/wallets/overview#getting-started","html":"\n<p>Start your integration with Sequence at our quickstart for <a href=\"/solutions/wallets/embedded-wallet/quickstart\">Embedded Wallets</a> in just a few minutes.</p>","isPage":false,"text":"\nStart your integration with Sequence at our quickstart for Embedded Wallets in just a few minutes.","title":"Getting Started","titles":["Onboard with Sequence"]},"212":{"href":"/api/analytics/examples/marketplace#marketplace-analytics-examples","html":"</header>\n<p>Additionally, you can get deep insights into how your Sequence Marketplace is performing so you can report, track, and refine to earn more revenue.</p>\n<aside data-callout=\"info\"><p>Replace the PROJECT_ID and SECRET_API_ACCESS_KEY variables with your project ID and secret token from Sequence Builder.</p></aside>\n","isPage":true,"text":"\nAdditionally, you can get deep insights into how your Sequence Marketplace is performing so you can report, track, and refine to earn more revenue.\nReplace the PROJECT_ID and SECRET_API_ACCESS_KEY variables with your project ID and secret token from Sequence Builder.\n","title":"Marketplace Analytics Examples","titles":[]},"213":{"href":"/api/analytics/examples/marketplace#fetch-transactions-on-your-marketplace","html":"\n<p>Fetching the number of transaction events on the Sequence marketplace - these can used either be by total or a fixed time interval.</p>\n","isPage":false,"text":"\nFetching the number of transaction events on the Sequence marketplace - these can used either be by total or a fixed time interval.\n","title":"Fetch Transactions on your Marketplace","titles":["Marketplace Analytics Examples"]},"214":{"href":"/api/analytics/examples/marketplace#total","html":"\n<div class=\"code-group\"><div data-title=\"cURL\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"cURL\" data-lang=\"sh\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">curl</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;https://api.sequence.build/rpc/Builder/MarketTxnEventTotal&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;accept: */*&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;authorization: BEARER &lt;SECRET_API_ACCESS_KEY&gt;&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;content-type: application/json&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  --data-raw</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;{&quot;filter&quot;:{&quot;projectId&quot;:&lt;PROJECT_ID&gt;,&quot;startDate&quot;:&quot;2024-04-23&quot;,&quot;endDate&quot;:&quot;2024-05-23&quot;}}&#x27;</span></span></code></pre></div><div data-title=\"TypeScript\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"TypeScript\" data-lang=\"ts\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Works in both a Webapp (browser) or Node.js by importing cross-fetch:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// import fetch from &quot;cross-fetch&quot;;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> res</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> fetch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;https://api.sequence.build/rpc/Builder/MarketTxnEventTotal&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      method: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;POST&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      headers: {</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;Content-Type&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;application/json&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      body: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">JSON</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">stringify</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t&quot;filter&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t\t&quot;projectId&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">4859</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t\t&quot;startDate&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;2024-01-23&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t\t&quot;endDate&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;2024-05-23&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t\t&quot;dateInterval&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;DAY&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t}),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  );</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;res&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> res.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">json</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">());</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})();</span></span></code></pre></div></div>\n","isPage":false,"text":"\ncurl &#x27;https://api.sequence.build/rpc/Builder/MarketTxnEventTotal&#x27; \\\n  -H &#x27;accept: */*&#x27; \\\n  -H &#x27;authorization: BEARER &lt;SECRET_API_ACCESS_KEY&gt;&#x27; \\\n  -H &#x27;content-type: application/json&#x27; \\\n  --data-raw &#x27;{&quot;filter&quot;:{&quot;projectId&quot;:&lt;PROJECT_ID&gt;,&quot;startDate&quot;:&quot;2024-04-23&quot;,&quot;endDate&quot;:&quot;2024-05-23&quot;}}&#x27;// Works in both a Webapp (browser) or Node.js by importing cross-fetch:\n// import fetch from &quot;cross-fetch&quot;;\n(async () =&gt; {\n  const res = await fetch(\n    &quot;https://api.sequence.build/rpc/Builder/MarketTxnEventTotal&quot;,\n    {\n      method: &quot;POST&quot;,\n      headers: {\n        &quot;Content-Type&quot;: &quot;application/json&quot;,\n      },\n      body: JSON.stringify({\n\t\t&quot;filter&quot;:{\n\t\t\t&quot;projectId&quot;:4859,\n\t\t\t&quot;startDate&quot;:&quot;2024-01-23&quot;,\n\t\t\t&quot;endDate&quot;:&quot;2024-05-23&quot;,\n\t\t\t&quot;dateInterval&quot;:&quot;DAY&quot;\n\t\t\t}\n\t\t}),\n    }\n  );\n  console.log(&quot;res&quot;, await res.json());\n})();\n","title":"Total","titles":["Marketplace Analytics Examples","Fetch Transactions on your Marketplace"]},"215":{"href":"/api/analytics/examples/marketplace#time-interval","html":"\n<div class=\"code-group\"><div data-title=\"cURL\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"cURL\" data-lang=\"sh\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">curl</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;https://api.sequence.build/rpc/Builder/MarketTxnEventDaily&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;accept: */*&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;authorization: BEARER &lt;SECRET_API_ACCESS_KEY&gt;&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;content-type: application/json&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  --data-raw</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;{&quot;filter&quot;:{&quot;projectId&quot;:&lt;PROJECT_ID&gt;,&quot;startDate&quot;:&quot;2024-04-23&quot;,&quot;endDate&quot;:&quot;2024-05-23&quot;, &quot;dateInterval&quot;:&quot;DAY&quot;}}&#x27;</span></span></code></pre></div><div data-title=\"TypeScript\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"TypeScript\" data-lang=\"ts\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Works in both a Webapp (browser) or Node.js by importing cross-fetch:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// import fetch from &quot;cross-fetch&quot;;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> res</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> fetch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;https://api.sequence.build/rpc/Builder/MarketTxnEventDaily&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      method: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;POST&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      headers: {</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;Content-Type&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;application/json&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      body: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">JSON</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">stringify</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t&quot;filter&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t\t&quot;projectId&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">4859</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t\t&quot;startDate&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;2024-01-23&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t\t&quot;endDate&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;2024-05-23&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t\t&quot;dateInterval&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;DAY&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t}),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  );</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;res&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> res.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">json</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">());</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})();</span></span></code></pre></div></div>\n","isPage":false,"text":"\ncurl &#x27;https://api.sequence.build/rpc/Builder/MarketTxnEventDaily&#x27; \\\n  -H &#x27;accept: */*&#x27; \\\n  -H &#x27;authorization: BEARER &lt;SECRET_API_ACCESS_KEY&gt;&#x27; \\\n  -H &#x27;content-type: application/json&#x27; \\\n  --data-raw &#x27;{&quot;filter&quot;:{&quot;projectId&quot;:&lt;PROJECT_ID&gt;,&quot;startDate&quot;:&quot;2024-04-23&quot;,&quot;endDate&quot;:&quot;2024-05-23&quot;, &quot;dateInterval&quot;:&quot;DAY&quot;}}&#x27;// Works in both a Webapp (browser) or Node.js by importing cross-fetch:\n// import fetch from &quot;cross-fetch&quot;;\n(async () =&gt; {\n  const res = await fetch(\n    &quot;https://api.sequence.build/rpc/Builder/MarketTxnEventDaily&quot;,\n    {\n      method: &quot;POST&quot;,\n      headers: {\n        &quot;Content-Type&quot;: &quot;application/json&quot;,\n      },\n      body: JSON.stringify({\n\t\t&quot;filter&quot;:{\n\t\t\t&quot;projectId&quot;:4859,\n\t\t\t&quot;startDate&quot;:&quot;2024-01-23&quot;,\n\t\t\t&quot;endDate&quot;:&quot;2024-05-23&quot;,\n\t\t\t&quot;dateInterval&quot;:&quot;DAY&quot;\n\t\t\t}\n\t\t}),\n    }\n  );\n  console.log(&quot;res&quot;, await res.json());\n})();\n","title":"Time Interval","titles":["Marketplace Analytics Examples","Fetch Transactions on your Marketplace"]},"216":{"href":"/api/analytics/examples/marketplace#fetch-wallets-on-your-marketplace","html":"\n<p>Fetch wallets that have interacted with your marketplace - either by total across all time or broken down by days, weeks or months.</p>\n","isPage":false,"text":"\nFetch wallets that have interacted with your marketplace - either by total across all time or broken down by days, weeks or months.\n","title":"Fetch Wallets on your Marketplace","titles":["Marketplace Analytics Examples"]},"217":{"href":"/api/analytics/examples/marketplace#total-1","html":"\n<div class=\"code-group\"><div data-title=\"cURL\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"cURL\" data-lang=\"sh\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">curl</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;https://api.sequence.build/rpc/Builder/MarketWalletsTotal&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;accept: */*&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;authorization: BEARER &lt;SECRET_API_ACCESS_KEY&gt;&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;content-type: application/json&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  --data-raw</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;{&quot;filter&quot;:{&quot;projectId&quot;:&lt;PROJECT_ID&gt;,&quot;startDate&quot;:&quot;2024-04-23&quot;,&quot;endDate&quot;:&quot;2024-05-23&quot;}}&#x27;</span></span></code></pre></div><div data-title=\"TypeScript\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"TypeScript\" data-lang=\"ts\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Works in both a Webapp (browser) or Node.js by importing cross-fetch:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// import fetch from &quot;cross-fetch&quot;;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> res</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> fetch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;https://api.sequence.build/rpc/Builder/MarketWalletsTotal&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      method: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;POST&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      headers: {</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;Content-Type&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;application/json&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      body: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">JSON</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">stringify</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t&quot;filter&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t\t&quot;projectId&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">4859</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t\t&quot;startDate&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;2024-01-23&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t\t&quot;endDate&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;2024-05-23&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t\t&quot;dateInterval&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;DAY&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t}),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  );</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;res&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> res.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">json</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">());</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})();</span></span></code></pre></div></div>\n","isPage":false,"text":"\ncurl &#x27;https://api.sequence.build/rpc/Builder/MarketWalletsTotal&#x27; \\\n  -H &#x27;accept: */*&#x27; \\\n  -H &#x27;authorization: BEARER &lt;SECRET_API_ACCESS_KEY&gt;&#x27; \\\n  -H &#x27;content-type: application/json&#x27; \\\n  --data-raw &#x27;{&quot;filter&quot;:{&quot;projectId&quot;:&lt;PROJECT_ID&gt;,&quot;startDate&quot;:&quot;2024-04-23&quot;,&quot;endDate&quot;:&quot;2024-05-23&quot;}}&#x27;// Works in both a Webapp (browser) or Node.js by importing cross-fetch:\n// import fetch from &quot;cross-fetch&quot;;\n(async () =&gt; {\n  const res = await fetch(\n    &quot;https://api.sequence.build/rpc/Builder/MarketWalletsTotal&quot;,\n    {\n      method: &quot;POST&quot;,\n      headers: {\n        &quot;Content-Type&quot;: &quot;application/json&quot;,\n      },\n      body: JSON.stringify({\n\t\t&quot;filter&quot;:{\n\t\t\t&quot;projectId&quot;:4859,\n\t\t\t&quot;startDate&quot;:&quot;2024-01-23&quot;,\n\t\t\t&quot;endDate&quot;:&quot;2024-05-23&quot;,\n\t\t\t&quot;dateInterval&quot;:&quot;DAY&quot;\n\t\t\t}\n\t\t}),\n    }\n  );\n  console.log(&quot;res&quot;, await res.json());\n})();\n","title":"Total","titles":["Marketplace Analytics Examples","Fetch Wallets on your Marketplace"]},"218":{"href":"/api/analytics/examples/marketplace#time-interval-1","html":"\n<div class=\"code-group\"><div data-title=\"cURL\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"cURL\" data-lang=\"sh\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">curl</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;https://api.sequence.build/rpc/Builder/MarketWalletsDaily&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;accept: */*&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;authorization: BEARER &lt;SECRET_API_ACCESS_KEY&gt;&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;content-type: application/json&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  --data-raw</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;{&quot;filter&quot;:{&quot;projectId&quot;:&lt;PROJECT_ID&gt;,&quot;startDate&quot;:&quot;2024-04-23&quot;,&quot;endDate&quot;:&quot;2024-05-23&quot;, &quot;dateInterval&quot;:&quot;DAY&quot;}}&#x27;</span></span></code></pre></div><div data-title=\"TypeScript\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"TypeScript\" data-lang=\"ts\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Works in both a Webapp (browser) or Node.js by importing cross-fetch:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// import fetch from &quot;cross-fetch&quot;;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> res</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> fetch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;https://api.sequence.build/rpc/Builder/MarketWalletsDaily&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      method: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;POST&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      headers: {</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;Content-Type&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;application/json&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      body: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">JSON</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">stringify</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t&quot;filter&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t\t&quot;projectId&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">4859</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t\t&quot;startDate&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;2024-01-23&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t\t&quot;endDate&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;2024-05-23&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t\t&quot;dateInterval&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;DAY&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t}),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  );</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;res&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> res.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">json</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">());</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})();</span></span></code></pre></div></div>\n","isPage":false,"text":"\ncurl &#x27;https://api.sequence.build/rpc/Builder/MarketWalletsDaily&#x27; \\\n  -H &#x27;accept: */*&#x27; \\\n  -H &#x27;authorization: BEARER &lt;SECRET_API_ACCESS_KEY&gt;&#x27; \\\n  -H &#x27;content-type: application/json&#x27; \\\n  --data-raw &#x27;{&quot;filter&quot;:{&quot;projectId&quot;:&lt;PROJECT_ID&gt;,&quot;startDate&quot;:&quot;2024-04-23&quot;,&quot;endDate&quot;:&quot;2024-05-23&quot;, &quot;dateInterval&quot;:&quot;DAY&quot;}}&#x27;// Works in both a Webapp (browser) or Node.js by importing cross-fetch:\n// import fetch from &quot;cross-fetch&quot;;\n(async () =&gt; {\n  const res = await fetch(\n    &quot;https://api.sequence.build/rpc/Builder/MarketWalletsDaily&quot;,\n    {\n      method: &quot;POST&quot;,\n      headers: {\n        &quot;Content-Type&quot;: &quot;application/json&quot;,\n      },\n      body: JSON.stringify({\n\t\t&quot;filter&quot;:{\n\t\t\t&quot;projectId&quot;:4859,\n\t\t\t&quot;startDate&quot;:&quot;2024-01-23&quot;,\n\t\t\t&quot;endDate&quot;:&quot;2024-05-23&quot;,\n\t\t\t&quot;dateInterval&quot;:&quot;DAY&quot;\n\t\t\t}\n\t\t}),\n    }\n  );\n  console.log(&quot;res&quot;, await res.json());\n})();\n","title":"Time Interval","titles":["Marketplace Analytics Examples","Fetch Wallets on your Marketplace"]},"219":{"href":"/api/analytics/examples/marketplace#schema","html":"\n<p>All wallet analytic endpoints follow a similar request schema</p>\n<ul>\n<li>Request: POST</li>\n<li>Content-Type: application/json</li>\n<li>Body (in JSON):\n<ul>\n<li><code>projectId</code> (uint64) -- projectID of your project, can be found in the URL of the Builder project.</li>\n<li><code>startDate</code> (timestamp) -- starting date of the query in YYYY--MM--DD format</li>\n<li><code>endDate</code> (timestamp) -- ending date of the query in YYYY--MM--DD format</li>\n<li><code>dateInterval</code> (OPTIONAL string) -- date interval for the query, options are &quot;DAY&quot;, &quot;WEEK&quot;, or &quot;MONTH&quot;</li>\n</ul>\n</li>\n<li>Response (in JSON):\n<ul>\n<li><code>marketStats</code> (marketStats[])\n[\n<ul>\n<li><code>value</code>\n<ul>\n<li><code>buyItems</code> (uint64) -- number of items bought.</li>\n<li><code>sellItems</code> (uint64) -- number of items sold</li>\n</ul>\n</li>\n<li><code>label</code> (string) -- label associated with the corresponding endpoint\n]</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","isPage":false,"text":"\nAll wallet analytic endpoints follow a similar request schema\n\nRequest: POST\nContent-Type: application/json\nBody (in JSON):\n\nprojectId (uint64) -- projectID of your project, can be found in the URL of the Builder project.\nstartDate (timestamp) -- starting date of the query in YYYY--MM--DD format\nendDate (timestamp) -- ending date of the query in YYYY--MM--DD format\ndateInterval (OPTIONAL string) -- date interval for the query, options are &quot;DAY&quot;, &quot;WEEK&quot;, or &quot;MONTH&quot;\n\n\nResponse (in JSON):\n\nmarketStats (marketStats[])\n[\n\nvalue\n\nbuyItems (uint64) -- number of items bought.\nsellItems (uint64) -- number of items sold\n\n\nlabel (string) -- label associated with the corresponding endpoint\n]\n\n\n\n\n","title":"Schema","titles":["Marketplace Analytics Examples"]},"220":{"href":"/api/analytics/examples/wallets#wallet-analytics-examples","html":"</header>\n<p>A common use case is to see the number of wallets that are integrated with your project. We have a variety of endpoints that can be used for tracking and reporting fine-grained data such as device, country, and more so you can precisely identify</p>\n<aside data-callout=\"info\"><p>Replace the PROJECT_ID and SECRET_API_ACCESS_KEY variables with your project ID and secret token from Sequence Builder.</p></aside>\n","isPage":true,"text":"\nA common use case is to see the number of wallets that are integrated with your project. We have a variety of endpoints that can be used for tracking and reporting fine-grained data such as device, country, and more so you can precisely identify\nReplace the PROJECT_ID and SECRET_API_ACCESS_KEY variables with your project ID and secret token from Sequence Builder.\n","title":"Wallet Analytics Examples","titles":[]},"221":{"href":"/api/analytics/examples/wallets#fetch-wallets-for-a-time-interval-for-a-project-id","html":"\n<p>Here we can pass a specific date range along with the dateInterval parameter in order to get wallets within a time interval. The endpoints can use &quot;DAY&quot;, &quot;WEEK&quot; or &quot;MONTH&quot; as possible options.</p>\n<div class=\"code-group\"><div data-title=\"cURL\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"cURL\" data-lang=\"sh\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">curl</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;https://api.sequence.build/rpc/Builder/WalletsDaily&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;accept: */*&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;authorization: BEARER &lt;SECRET_API_ACCESS_KEY&gt;&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;content-type: application/json&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  --data-raw</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;{&quot;filter&quot;:{&quot;projectId&quot;:&lt;PROJECT_ID&gt;,&quot;startDate&quot;:&quot;2024-04-23&quot;,&quot;endDate&quot;:&quot;2024-05-23&quot;, &quot;dateInterval&quot;:&quot;DAY&quot;}}&#x27;</span></span></code></pre></div><div data-title=\"TypeScript\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"TypeScript\" data-lang=\"ts\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Works in both a Webapp (browser) or Node.js by importing cross-fetch:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// import fetch from &quot;cross-fetch&quot;;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> res</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> fetch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;https://api.sequence.build/rpc/Builder/WalletsDaily&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      method: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;POST&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      headers: {</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;Content-Type&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;application/json&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      body: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">JSON</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">stringify</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t&quot;filter&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t\t&quot;projectId&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">4859</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t\t&quot;startDate&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;2024-01-23&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t\t&quot;endDate&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;2024-05-23&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t\t&quot;dateInterval&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;DAY&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t}),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  );</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;res&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> res.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">json</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">());</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})();</span></span></code></pre></div></div>\n","isPage":false,"text":"\nHere we can pass a specific date range along with the dateInterval parameter in order to get wallets within a time interval. The endpoints can use &quot;DAY&quot;, &quot;WEEK&quot; or &quot;MONTH&quot; as possible options.\ncurl &#x27;https://api.sequence.build/rpc/Builder/WalletsDaily&#x27; \\\n  -H &#x27;accept: */*&#x27; \\\n  -H &#x27;authorization: BEARER &lt;SECRET_API_ACCESS_KEY&gt;&#x27; \\\n  -H &#x27;content-type: application/json&#x27; \\\n  --data-raw &#x27;{&quot;filter&quot;:{&quot;projectId&quot;:&lt;PROJECT_ID&gt;,&quot;startDate&quot;:&quot;2024-04-23&quot;,&quot;endDate&quot;:&quot;2024-05-23&quot;, &quot;dateInterval&quot;:&quot;DAY&quot;}}&#x27;// Works in both a Webapp (browser) or Node.js by importing cross-fetch:\n// import fetch from &quot;cross-fetch&quot;;\n \n(async () =&gt; {\n  const res = await fetch(\n    &quot;https://api.sequence.build/rpc/Builder/WalletsDaily&quot;,\n    {\n      method: &quot;POST&quot;,\n      headers: {\n        &quot;Content-Type&quot;: &quot;application/json&quot;,\n      },\n      body: JSON.stringify({\n\t\t&quot;filter&quot;:{\n\t\t\t&quot;projectId&quot;:4859,\n\t\t\t&quot;startDate&quot;:&quot;2024-01-23&quot;,\n\t\t\t&quot;endDate&quot;:&quot;2024-05-23&quot;,\n\t\t\t&quot;dateInterval&quot;:&quot;DAY&quot;\n\t\t\t}\n\t\t}),\n    }\n  );\n  console.log(&quot;res&quot;, await res.json());\n})();\n","title":"Fetch wallets for a time interval for a project ID","titles":["Wallet Analytics Examples"]},"222":{"href":"/api/analytics/examples/wallets#fetch-wallets-by-country","html":"\n<p>You can also fetch wallets by country to see where your users are logged in from.</p>\n<div class=\"code-group\"><div data-title=\"cURL\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"cURL\" data-lang=\"sh\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">curl</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;https://api.sequence.build/rpc/Builder/WalletsByCountry&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;accept: */*&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;authorization: BEARER &lt;SECRET_API_ACCESS_KEY&gt;&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;content-type: application/json&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  --data-raw</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;{&quot;filter&quot;:{&quot;projectId&quot;:&lt;PROJECT_ID&gt;,&quot;startDate&quot;:&quot;2024-04-23&quot;,&quot;endDate&quot;:&quot;2024-05-23&quot;, &quot;dateInterval&quot;:&quot;DAY&quot;}}&#x27;</span></span></code></pre></div><div data-title=\"TypeScript\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"TypeScript\" data-lang=\"ts\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Works in both a Webapp (browser) or Node.js by importing cross-fetch:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// import fetch from &quot;cross-fetch&quot;;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> res</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> fetch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;https://api.sequence.build/rpc/Builder/WalletsByCountry&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      method: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;POST&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      headers: {</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;Content-Type&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;application/json&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      body: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">JSON</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">stringify</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t&quot;filter&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t\t&quot;projectId&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">4859</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t\t&quot;startDate&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;2024-01-23&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t\t&quot;endDate&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;2024-05-23&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t\t&quot;dateInterval&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;DAY&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t}),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  );</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;res&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> res.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">json</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">());</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})();</span></span></code></pre></div></div>\n","isPage":false,"text":"\nYou can also fetch wallets by country to see where your users are logged in from.\ncurl &#x27;https://api.sequence.build/rpc/Builder/WalletsByCountry&#x27; \\\n  -H &#x27;accept: */*&#x27; \\\n  -H &#x27;authorization: BEARER &lt;SECRET_API_ACCESS_KEY&gt;&#x27; \\\n  -H &#x27;content-type: application/json&#x27; \\\n  --data-raw &#x27;{&quot;filter&quot;:{&quot;projectId&quot;:&lt;PROJECT_ID&gt;,&quot;startDate&quot;:&quot;2024-04-23&quot;,&quot;endDate&quot;:&quot;2024-05-23&quot;, &quot;dateInterval&quot;:&quot;DAY&quot;}}&#x27;// Works in both a Webapp (browser) or Node.js by importing cross-fetch:\n// import fetch from &quot;cross-fetch&quot;;\n \n(async () =&gt; {\n  const res = await fetch(\n    &quot;https://api.sequence.build/rpc/Builder/WalletsByCountry&quot;,\n    {\n      method: &quot;POST&quot;,\n      headers: {\n        &quot;Content-Type&quot;: &quot;application/json&quot;,\n      },\n      body: JSON.stringify({\n\t\t&quot;filter&quot;:{\n\t\t\t&quot;projectId&quot;:4859,\n\t\t\t&quot;startDate&quot;:&quot;2024-01-23&quot;,\n\t\t\t&quot;endDate&quot;:&quot;2024-05-23&quot;,\n\t\t\t&quot;dateInterval&quot;:&quot;DAY&quot;\n\t\t\t}\n\t\t}),\n    }\n  );\n  console.log(&quot;res&quot;, await res.json());\n})();\n","title":"Fetch wallets by Country","titles":["Wallet Analytics Examples"]},"223":{"href":"/api/analytics/examples/wallets#fetch-wallets-by-device","html":"\n<p>Additionally, you may want to query by device to get an aggregrated snapshot of where your users are authenticating from.</p>\n<div class=\"code-group\"><div data-title=\"cURL\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"cURL\" data-lang=\"sh\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">curl</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;https://api.sequence.build/rpc/Builder/WalletsByDevice&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;accept: */*&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;authorization: BEARER &lt;SECRET_API_ACCESS_KEY&gt;&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;content-type: application/json&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  --data-raw</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;{&quot;filter&quot;:{&quot;projectId&quot;:&lt;PROJECT_ID&gt;,&quot;startDate&quot;:&quot;2024-04-23&quot;,&quot;endDate&quot;:&quot;2024-05-23&quot;, &quot;dateInterval&quot;:&quot;DAY&quot;}}&#x27;</span></span></code></pre></div><div data-title=\"TypeScript\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"TypeScript\" data-lang=\"ts\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Works in both a Webapp (browser) or Node.js by importing cross-fetch:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// import fetch from &quot;cross-fetch&quot;;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> res</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> fetch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;https://api.sequence.build/rpc/Builder/WalletsByDevice&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      method: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;POST&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      headers: {</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;Content-Type&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;application/json&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      body: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">JSON</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">stringify</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t&quot;filter&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t\t&quot;projectId&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">4859</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t\t&quot;startDate&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;2024-01-23&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t\t&quot;endDate&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;2024-05-23&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t\t&quot;dateInterval&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;DAY&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t}),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  );</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;res&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> res.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">json</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">());</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})();</span></span></code></pre></div></div>\n","isPage":false,"text":"\nAdditionally, you may want to query by device to get an aggregrated snapshot of where your users are authenticating from.\ncurl &#x27;https://api.sequence.build/rpc/Builder/WalletsByDevice&#x27; \\\n  -H &#x27;accept: */*&#x27; \\\n  -H &#x27;authorization: BEARER &lt;SECRET_API_ACCESS_KEY&gt;&#x27; \\\n  -H &#x27;content-type: application/json&#x27; \\\n  --data-raw &#x27;{&quot;filter&quot;:{&quot;projectId&quot;:&lt;PROJECT_ID&gt;,&quot;startDate&quot;:&quot;2024-04-23&quot;,&quot;endDate&quot;:&quot;2024-05-23&quot;, &quot;dateInterval&quot;:&quot;DAY&quot;}}&#x27;// Works in both a Webapp (browser) or Node.js by importing cross-fetch:\n// import fetch from &quot;cross-fetch&quot;;\n \n(async () =&gt; {\n  const res = await fetch(\n    &quot;https://api.sequence.build/rpc/Builder/WalletsByDevice&quot;,\n    {\n      method: &quot;POST&quot;,\n      headers: {\n        &quot;Content-Type&quot;: &quot;application/json&quot;,\n      },\n      body: JSON.stringify({\n\t\t&quot;filter&quot;:{\n\t\t\t&quot;projectId&quot;:4859,\n\t\t\t&quot;startDate&quot;:&quot;2024-01-23&quot;,\n\t\t\t&quot;endDate&quot;:&quot;2024-05-23&quot;,\n\t\t\t&quot;dateInterval&quot;:&quot;DAY&quot;\n\t\t\t}\n\t\t}),\n    }\n  );\n  console.log(&quot;res&quot;, await res.json());\n})();\n","title":"Fetch wallets by Device","titles":["Wallet Analytics Examples"]},"224":{"href":"/api/analytics/examples/wallets#fetch-transactions-by-wallets","html":"\n<p>Lastly, you may want to fetch the number of transactions by wallets - these can used either by total or a fixed time interval.</p>\n","isPage":false,"text":"\nLastly, you may want to fetch the number of transactions by wallets - these can used either by total or a fixed time interval.\n","title":"Fetch transactions by wallets","titles":["Wallet Analytics Examples"]},"225":{"href":"/api/analytics/examples/wallets#total","html":"\n<div class=\"code-group\"><div data-title=\"cURL\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"cURL\" data-lang=\"sh\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">curl</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;https://api.sequence.build/rpc/Builder/WalletsTxnSentTotal&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;accept: */*&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;authorization: BEARER &lt;SECRET_API_ACCESS_KEY&gt;&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;content-type: application/json&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  --data-raw</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;{&quot;filter&quot;:{&quot;projectId&quot;:&lt;PROJECT_ID&gt;,&quot;startDate&quot;:&quot;2024-04-23&quot;,&quot;endDate&quot;:&quot;2024-05-23&quot;}}&#x27;</span></span></code></pre></div><div data-title=\"TypeScript\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"TypeScript\" data-lang=\"ts\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Works in both a Webapp (browser) or Node.js by importing cross-fetch:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// import fetch from &quot;cross-fetch&quot;;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> res</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> fetch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;https://api.sequence.build/rpc/Builder/WalletsTxnSentTotal&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      method: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;POST&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      headers: {</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;Content-Type&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;application/json&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      body: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">JSON</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">stringify</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t&quot;filter&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t\t&quot;projectId&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">4859</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t\t&quot;startDate&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;2024-01-23&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t\t&quot;endDate&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;2024-05-23&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t\t&quot;dateInterval&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;DAY&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t}),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  );</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;res&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> res.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">json</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">());</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})();</span></span></code></pre></div></div>\n","isPage":false,"text":"\ncurl &#x27;https://api.sequence.build/rpc/Builder/WalletsTxnSentTotal&#x27; \\\n  -H &#x27;accept: */*&#x27; \\\n  -H &#x27;authorization: BEARER &lt;SECRET_API_ACCESS_KEY&gt;&#x27; \\\n  -H &#x27;content-type: application/json&#x27; \\\n  --data-raw &#x27;{&quot;filter&quot;:{&quot;projectId&quot;:&lt;PROJECT_ID&gt;,&quot;startDate&quot;:&quot;2024-04-23&quot;,&quot;endDate&quot;:&quot;2024-05-23&quot;}}&#x27;// Works in both a Webapp (browser) or Node.js by importing cross-fetch:\n// import fetch from &quot;cross-fetch&quot;;\n \n(async () =&gt; {\n  const res = await fetch(\n    &quot;https://api.sequence.build/rpc/Builder/WalletsTxnSentTotal&quot;,\n    {\n      method: &quot;POST&quot;,\n      headers: {\n        &quot;Content-Type&quot;: &quot;application/json&quot;,\n      },\n      body: JSON.stringify({\n\t\t&quot;filter&quot;:{\n\t\t\t&quot;projectId&quot;:4859,\n\t\t\t&quot;startDate&quot;:&quot;2024-01-23&quot;,\n\t\t\t&quot;endDate&quot;:&quot;2024-05-23&quot;,\n\t\t\t&quot;dateInterval&quot;:&quot;DAY&quot;\n\t\t\t}\n\t\t}),\n    }\n  );\n  console.log(&quot;res&quot;, await res.json());\n})();\n","title":"Total","titles":["Wallet Analytics Examples","Fetch transactions by wallets"]},"226":{"href":"/api/analytics/examples/wallets#time-interval","html":"\n<div class=\"code-group\"><div data-title=\"cURL\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"cURL\" data-lang=\"sh\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">curl</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;https://api.sequence.build/rpc/Builder/WalletsTxnSentDaily&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;accept: */*&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;authorization: BEARER &lt;SECRET_API_ACCESS_KEY&gt;&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;content-type: application/json&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  --data-raw</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;{&quot;filter&quot;:{&quot;projectId&quot;:&lt;PROJECT_ID&gt;,&quot;startDate&quot;:&quot;2024-04-23&quot;,&quot;endDate&quot;:&quot;2024-05-23&quot;, &quot;dateInterval&quot;:&quot;DAY&quot;}}&#x27;</span></span></code></pre></div><div data-title=\"TypeScript\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"TypeScript\" data-lang=\"ts\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Works in both a Webapp (browser) or Node.js by importing cross-fetch:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// import fetch from &quot;cross-fetch&quot;;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> res</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> fetch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;https://api.sequence.build/rpc/Builder/WalletsTxnSentDaily&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      method: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;POST&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      headers: {</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;Content-Type&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;application/json&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      body: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">JSON</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">stringify</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t&quot;filter&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t\t&quot;projectId&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">4859</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t\t&quot;startDate&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;2024-01-23&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t\t&quot;endDate&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;2024-05-23&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t\t&quot;dateInterval&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;DAY&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t}),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  );</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;res&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> res.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">json</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">());</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})();</span></span></code></pre></div></div>\n","isPage":false,"text":"\ncurl &#x27;https://api.sequence.build/rpc/Builder/WalletsTxnSentDaily&#x27; \\\n  -H &#x27;accept: */*&#x27; \\\n  -H &#x27;authorization: BEARER &lt;SECRET_API_ACCESS_KEY&gt;&#x27; \\\n  -H &#x27;content-type: application/json&#x27; \\\n  --data-raw &#x27;{&quot;filter&quot;:{&quot;projectId&quot;:&lt;PROJECT_ID&gt;,&quot;startDate&quot;:&quot;2024-04-23&quot;,&quot;endDate&quot;:&quot;2024-05-23&quot;, &quot;dateInterval&quot;:&quot;DAY&quot;}}&#x27;// Works in both a Webapp (browser) or Node.js by importing cross-fetch:\n// import fetch from &quot;cross-fetch&quot;;\n \n(async () =&gt; {\n  const res = await fetch(\n    &quot;https://api.sequence.build/rpc/Builder/WalletsTxnSentDaily&quot;,\n    {\n      method: &quot;POST&quot;,\n      headers: {\n        &quot;Content-Type&quot;: &quot;application/json&quot;,\n      },\n      body: JSON.stringify({\n\t\t&quot;filter&quot;:{\n\t\t\t&quot;projectId&quot;:4859,\n\t\t\t&quot;startDate&quot;:&quot;2024-01-23&quot;,\n\t\t\t&quot;endDate&quot;:&quot;2024-05-23&quot;,\n\t\t\t&quot;dateInterval&quot;:&quot;DAY&quot;\n\t\t\t}\n\t\t}),\n    }\n  );\n  console.log(&quot;res&quot;, await res.json());\n})();\n","title":"Time Interval","titles":["Wallet Analytics Examples","Fetch transactions by wallets"]},"227":{"href":"/api/analytics/examples/wallets#schema","html":"\n<p>All wallet analytic endpoints follow a similar request schema</p>\n<ul>\n<li>Request: POST</li>\n<li>Content-Type: application/json</li>\n<li>Body (in JSON):\n<ul>\n<li><code>projectId</code> (uint64) -- projectID of your project, can be found in the URL of the Builder project.</li>\n<li><code>startDate</code> (timestamp) -- starting date of the query in YYYY--MM--DD format</li>\n<li><code>endDate</code> (timestamp) -- ending date of the query in YYYY--MM--DD format</li>\n<li><code>dateInterval</code> (string) -- date interval for the query, options are &quot;DAY&quot;, &quot;WEEK&quot;, or &quot;MONTH&quot;</li>\n</ul>\n</li>\n<li>Response (in JSON):\n<ul>\n<li><code>walletStats</code> (walletStats[])\n[\n<ul>\n<li><code>value</code> (uint64) -- # of wallets matching the query</li>\n<li><code>label</code> (string) -- label associated with the corresponding endpoint\n]</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","isPage":false,"text":"\nAll wallet analytic endpoints follow a similar request schema\n\nRequest: POST\nContent-Type: application/json\nBody (in JSON):\n\nprojectId (uint64) -- projectID of your project, can be found in the URL of the Builder project.\nstartDate (timestamp) -- starting date of the query in YYYY--MM--DD format\nendDate (timestamp) -- ending date of the query in YYYY--MM--DD format\ndateInterval (string) -- date interval for the query, options are &quot;DAY&quot;, &quot;WEEK&quot;, or &quot;MONTH&quot;\n\n\nResponse (in JSON):\n\nwalletStats (walletStats[])\n[\n\nvalue (uint64) -- # of wallets matching the query\nlabel (string) -- label associated with the corresponding endpoint\n]\n\n\n\n\n","title":"Schema","titles":["Wallet Analytics Examples"]},"228":{"href":"/api/indexer/examples/fetch-tokens#tokens-api","html":"</header>\n","isPage":true,"text":"\n","title":"Tokens API","titles":[]},"229":{"href":"/api/indexer/examples/fetch-tokens#fetches-list-of-erc20-erc721-and-erc1155-tokens-and-metadata-in-any-wallet","html":"\n<p><em>Sequence Indexer <code>GetTokenBalances</code> Method:</em></p>\n<ul>\n<li>Request: POST /rpc/Indexer/GetTokenBalances</li>\n<li>Content-Type: application/json</li>\n<li>Body (in JSON):\n<ul>\n<li><code>accountAddress</code> (string) -- the wallet account address</li>\n<li><code>includeMetadata</code> (boolean - optional - default: false) -- toggle token metadata to be included in the response</li>\n<li><code>metadataOptions</code> (object - optional) -- additional options for metadata\n<ul>\n<li><code>verifiedOnly</code> (boolean - optional) -- return only contracts which are &#x27;verified&#x27; to help reduce spam</li>\n<li><code>includeContracts</code> ([]string - optional) -- list of specific contract addresses to always be included, even if verifiedOnly is enabled.</li>\n</ul>\n</li>\n<li><code>includeCollectionTokens</code> (boolean - optional - default: true) -- toggle to represent ERC721 / ERC1155 tokens as a single summary item in the response</li>\n</ul>\n</li>\n</ul>\n<br/>\n<strong>Example: <code>GetTokenBalances</code> of a wallet account address on Polygon using an <code>API_Access_Key</code></strong>\n<aside data-callout=\"info\"><p>This code requires an API Access Key from <a href=\"https://sequence.build\">Sequence Builder</a>.</p></aside>\n<div class=\"code-group\"><div data-title=\"Curl\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Curl\" data-lang=\"shell\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">curl</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -X</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> POST</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;Content-Type: application/json&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;X-Access-Key: AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://polygon-indexer.sequence.app/rpc/Indexer/GetTokenBalances</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;{ &quot;accountAddress&quot;: &quot;0x8e3E38fe7367dd3b52D1e281E4e8400447C8d8B9&quot;, &quot;includeMetadata&quot;: true }&#x27;</span></span></code></pre></div><div data-title=\"Typescript\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Typescript\" data-lang=\"ts\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Works in both a Webapp (browser) or Node.js:</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { SequenceIndexer } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/indexer&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> indexer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SequenceIndexer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;https://polygon-indexer.sequence.app&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// try any account address you&#x27;d like :)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> accountAddress</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;0xabc...&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// query Sequence Indexer for all token balances of the account on Polygon</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tokenBalances</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> indexer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getTokenBalances</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\taccountAddress: accountAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tincludeMetadata: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;tokens in your account:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, tokenBalances)</span></span></code></pre></div><div data-title=\"Go\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Go\" data-lang=\"go\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t&quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">context</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t&quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">fmt</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t&quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">log</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t&quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">net/http</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t&quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">github.com/0xsequence/go-sequence/indexer</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> GetTokenBalances</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">accountAddress</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tseqIndexer </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> indexer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewIndexer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://polygon-indexer.sequence.app&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tincludeMetadata </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> true</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\ttokenBalances, _, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> seqIndexer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetTokenBalances</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(context.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Background</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">accountAddress, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">includeMetadata, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">\tif</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tlog.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Fatal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tfmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Println</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;tokenBalances:&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, tokenBalances)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre></div><div data-title=\"Other\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Other\" data-lang=\"shell\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Please</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [contact </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">our</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> team]</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">/support</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">for</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> assistance</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> with</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> integrations</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> to</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> another</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> target.</span></span></code></pre></div></div>\n<br/>\n<aside data-callout=\"info\"><strong data-callout-title=\"true\">PRO TIP: fetching ERC721/1155 token IDs</strong><p>You&#x27;ll notice that, by default, <code>GetTokenBalances</code> will return at most one token instance from each contract.\nIn order to fetch ERC721/1155 token balances, you must pass the <code>contractAddress</code> to the <code>GetTokenBalances</code> method.\nThis will return all of the tokens owned by <code>accountAddress</code> from the specified <code>contractAddress</code>.\nSee section below for more information.</p></aside>\n","isPage":false,"text":"\nSequence Indexer GetTokenBalances Method:\n\nRequest: POST /rpc/Indexer/GetTokenBalances\nContent-Type: application/json\nBody (in JSON):\n\naccountAddress (string) -- the wallet account address\nincludeMetadata (boolean - optional - default: false) -- toggle token metadata to be included in the response\nmetadataOptions (object - optional) -- additional options for metadata\n\nverifiedOnly (boolean - optional) -- return only contracts which are &#x27;verified&#x27; to help reduce spam\nincludeContracts ([]string - optional) -- list of specific contract addresses to always be included, even if verifiedOnly is enabled.\n\n\nincludeCollectionTokens (boolean - optional - default: true) -- toggle to represent ERC721 / ERC1155 tokens as a single summary item in the response\n\n\n\n\nExample: GetTokenBalances of a wallet account address on Polygon using an API_Access_Key\nThis code requires an API Access Key from Sequence Builder.\ncurl -X POST -H &quot;Content-Type: application/json&quot; -H &quot;X-Access-Key: AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&quot; https://polygon-indexer.sequence.app/rpc/Indexer/GetTokenBalances -d &#x27;{ &quot;accountAddress&quot;: &quot;0x8e3E38fe7367dd3b52D1e281E4e8400447C8d8B9&quot;, &quot;includeMetadata&quot;: true }&#x27;// Works in both a Webapp (browser) or Node.js:\nimport { SequenceIndexer } from &#x27;@0xsequence/indexer&#x27;\n \nconst indexer = new SequenceIndexer(&#x27;https://polygon-indexer.sequence.app&#x27;, &#x27;AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&#x27;)\n \n// try any account address you&#x27;d like :)\nconst accountAddress = &#x27;0xabc...&#x27;\n \n// query Sequence Indexer for all token balances of the account on Polygon\nconst tokenBalances = await indexer.getTokenBalances({\n\taccountAddress: accountAddress,\n\tincludeMetadata: true\n})\nconsole.log(&#x27;tokens in your account:&#x27;, tokenBalances)import (\n\t&quot;context&quot;\n\t&quot;fmt&quot;\n\t&quot;log&quot;\n\t&quot;net/http&quot;\n \n\t&quot;github.com/0xsequence/go-sequence/indexer&quot;\n)\n \nfunc GetTokenBalances(accountAddress string) {\n\tseqIndexer := indexer.NewIndexer(&quot;https://polygon-indexer.sequence.app&quot;, &quot;AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&quot;)\n \n\tincludeMetadata := true\n \n\ttokenBalances, _, err := seqIndexer.GetTokenBalances(context.Background(), &amp;accountAddress, nil, &amp;includeMetadata, nil, nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(&quot;tokenBalances:&quot;, tokenBalances)\n}Please [contact our team](/support) for assistance with integrations to another target.\n\nPRO TIP: fetching ERC721/1155 token IDsYou&#x27;ll notice that, by default, GetTokenBalances will return at most one token instance from each contract.\nIn order to fetch ERC721/1155 token balances, you must pass the contractAddress to the GetTokenBalances method.\nThis will return all of the tokens owned by accountAddress from the specified contractAddress.\nSee section below for more information.\n","title":"Fetches list of ERC20, ERC721 and ERC1155 tokens and metadata in any wallet.","titles":["Tokens API",null]},"230":{"href":"/api/indexer/examples/fetch-tokens#fetch-token-ids-balances-and-metadata-of-erc721-and-erc1155-collections","html":"\n<p><em>Sequence Indexer <code>GetTokenBalances</code> Method:</em></p>\n<ul>\n<li>Request: POST /rpc/Indexer/GetTokenBalances</li>\n<li>Content-Type: application/json</li>\n<li>Body (in JSON):\n<ul>\n<li><code>accountAddress</code> (string) -- the wallet account address</li>\n<li><code>contractAddress</code> (string) -- the contract address of the ERC721 / ERC1155 collection</li>\n<li><code>includeMetadata</code> (boolean - optional - default: false) -- toggle token metadata to be included in the response</li>\n<li><code>metadataOptions</code> (object - optional) -- additional options for metadata\n<ul>\n<li><code>verifiedOnly</code> (boolean - optional) -- return only contracts which are &#x27;verified&#x27; to help reduce spam</li>\n<li><code>includeContracts</code> ([]string - optional) -- list of specific contract addresses to always be included, even if verifiedOnly is enabled.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<br/>\n<strong>Example: <code>GetTokenBalances</code> of a contract + account address on Polygon using an <code>PROJECT_ACCESS_KEY</code></strong>\n<div class=\"code-group\"><div data-title=\"Curl\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Curl\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">curl</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -X</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> POST</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;Content-Type: application/json&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;X-Access-Key: AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://polygon-indexer.sequence.app/rpc/Indexer/GetTokenBalances</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;{ &quot;contractAddress&quot;: &quot;0x631998e91476DA5B870D741192fc5Cbc55F5a52E&quot;, &quot;accountAddress&quot;: &quot;0x8e3E38fe7367dd3b52D1e281E4e8400447C8d8B9&quot;, &quot;includeMetadata&quot;: true }&#x27;</span></span></code></pre></div><div data-title=\"Typescript\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Typescript\" data-lang=\"typescript\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Works in both a Webapp (browser) or Node.js:</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { SequenceIndexer } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/indexer&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> indexer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SequenceIndexer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;https://polygon-indexer.sequence.app&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// try any contract and account address you&#x27;d like :)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contractAddress</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;0x631998e91476DA5B870D741192fc5Cbc55F5a52E&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> accountAddress</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;0xabc...&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// query Sequence Indexer for all nft balances of the account on Polygon</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nftBalances</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> indexer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getTokenBalances</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tcontractAddress: contractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\taccountAddress: accountAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tincludeMetadata: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;collection of items:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, nftBalances)</span></span></code></pre></div><div data-title=\"Go\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Go\" data-lang=\"go\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t&quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">context</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t&quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">fmt</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t&quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">log</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t&quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">net/http</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t&quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">github.com/0xsequence/go-sequence/indexer</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> GetTokenBalances</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">contractAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">accountAddress</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tseqIndexer </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> indexer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewIndexer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://polygon-indexer.sequence.app&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tincludeMetadata </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> true</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tmetadataOptions </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> indexer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MetadataOptions</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tVerifiedOnly:     </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Set to true if you want to fetch only verified contracts</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tUnverifiedOnly:   </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tIncludeContracts: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Provide a list of specific contracts to include, if any</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tnftBalances, _, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> seqIndexer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetTokenBalances</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(context.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Background</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">accountAddress, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">metadataOptions, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">\tif</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tlog.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Fatal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tfmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Println</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;nftBalances:&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, nftBalances)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre></div></div>","isPage":false,"text":"\nSequence Indexer GetTokenBalances Method:\n\nRequest: POST /rpc/Indexer/GetTokenBalances\nContent-Type: application/json\nBody (in JSON):\n\naccountAddress (string) -- the wallet account address\ncontractAddress (string) -- the contract address of the ERC721 / ERC1155 collection\nincludeMetadata (boolean - optional - default: false) -- toggle token metadata to be included in the response\nmetadataOptions (object - optional) -- additional options for metadata\n\nverifiedOnly (boolean - optional) -- return only contracts which are &#x27;verified&#x27; to help reduce spam\nincludeContracts ([]string - optional) -- list of specific contract addresses to always be included, even if verifiedOnly is enabled.\n\n\n\n\n\n\nExample: GetTokenBalances of a contract + account address on Polygon using an PROJECT_ACCESS_KEY\ncurl -X POST -H &quot;Content-Type: application/json&quot; -H &quot;X-Access-Key: AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&quot; https://polygon-indexer.sequence.app/rpc/Indexer/GetTokenBalances -d &#x27;{ &quot;contractAddress&quot;: &quot;0x631998e91476DA5B870D741192fc5Cbc55F5a52E&quot;, &quot;accountAddress&quot;: &quot;0x8e3E38fe7367dd3b52D1e281E4e8400447C8d8B9&quot;, &quot;includeMetadata&quot;: true }&#x27;// Works in both a Webapp (browser) or Node.js:\nimport { SequenceIndexer } from &#x27;@0xsequence/indexer&#x27;\n \nconst indexer = new SequenceIndexer(&#x27;https://polygon-indexer.sequence.app&#x27;, &#x27;AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&#x27;)\n \n// try any contract and account address you&#x27;d like :)\nconst contractAddress = &#x27;0x631998e91476DA5B870D741192fc5Cbc55F5a52E&#x27;\nconst accountAddress = &#x27;0xabc...&#x27;\n \n// query Sequence Indexer for all nft balances of the account on Polygon\nconst nftBalances = await indexer.getTokenBalances({\n\tcontractAddress: contractAddress,\n\taccountAddress: accountAddress,\n\tincludeMetadata: true\n})\n \nconsole.log(&#x27;collection of items:&#x27;, nftBalances)import (\n\t&quot;context&quot;\n\t&quot;fmt&quot;\n\t&quot;log&quot;\n\t&quot;net/http&quot;\n \n\t&quot;github.com/0xsequence/go-sequence/indexer&quot;\n)\n \nfunc GetTokenBalances(contractAddress, accountAddress string) {\n\tseqIndexer := indexer.NewIndexer(&quot;https://polygon-indexer.sequence.app&quot;, &quot;AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&quot;)\n \n\tincludeMetadata := true\n \n\tmetadataOptions := indexer.MetadataOptions{\n\t\tVerifiedOnly:     true, // Set to true if you want to fetch only verified contracts\n\t\tUnverifiedOnly:   false,\n\t\tIncludeContracts: nil, // Provide a list of specific contracts to include, if any\n\t}\n \n\tnftBalances, _, err := seqIndexer.GetTokenBalances(context.Background(), &amp;accountAddress, nil, nil, nil, &amp;metadataOptions, nil, nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n \n\tfmt.Println(&quot;nftBalances:&quot;, nftBalances)\n}","title":"Fetch token IDs, balances and metadata of ERC721 and ERC1155 collections.","titles":["Tokens API",null]},"231":{"href":"/api/indexer/examples/native-network-balance#native-network-balances-ie-eth-matic-etc","html":"</header>\n","isPage":true,"text":"\n","title":"Native network balances (ie. ETH, MATIC, etc.)","titles":[]},"232":{"href":"/api/indexer/examples/native-network-balance#fetch-native-network-balance-aka-eth-on-ethereum-matic-on-polygon-avax-on-avalanche-bnb-on-bsc-etc","html":"\n<p><em>Sequence Indexer <code>GetEtherBalance</code> Method:</em></p>\n<ul>\n<li>Request: POST /rpc/Indexer/GetEtherBalance</li>\n<li>Content-Type: application/json</li>\n<li>Body (in JSON):\n<ul>\n<li><code>accountAddress</code> (string) -- the wallet account address</li>\n</ul>\n</li>\n</ul>\n<br/>\n<strong>Example: <code>GetEtherBalance</code> MATIC balance of a wallet account address on Polygon using an <code>API_Access_Key</code></strong>\n<div class=\"code-group\"><div data-title=\"cURL\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"cURL\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">curl</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -X</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> POST</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;Content-Type: application/json&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;X-Access-Key: AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://polygon-indexer.sequence.app/rpc/Indexer/GetEtherBalance</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;{ &quot;accountAddress&quot;: &quot;0x8e3E38fe7367dd3b52D1e281E4e8400447C8d8B9&quot; }&#x27;</span></span></code></pre></div><div data-title=\"Typescript\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Typescript\" data-lang=\"ts\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Works in both a Webapp (browser) or Node.js:</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { SequenceIndexer } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/indexer&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> indexer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SequenceIndexer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;https://polygon-indexer.sequence.app&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// try any account address you&#x27;d like :)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> accountAddress</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;0xabc...&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// query Sequence Indexer for the MATIC balance on Polygon</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> balance</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> indexer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getEtherBalance</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\taccountAddress: accountAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;tokens in your account:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, tokenBalances)</span></span></code></pre></div><div data-title=\"Go\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Go\" data-lang=\"go\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t&quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">context</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t&quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">fmt</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t&quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">log</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t&quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">net/http</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t&quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">github.com/0xsequence/go-sequence/indexer</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> GetEtherBalance</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">accountAddress</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tseqIndexer </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> indexer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewIndexer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://polygon-indexer.sequence.app&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tnativeBalance, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> seqIndexer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetEtherBalance</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(context.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Background</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">accountAddress)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">\tif</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tlog.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Fatal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tfmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Println</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;nativeBalance:&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, nativeBalance)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre></div></div>","isPage":false,"text":"\nSequence Indexer GetEtherBalance Method:\n\nRequest: POST /rpc/Indexer/GetEtherBalance\nContent-Type: application/json\nBody (in JSON):\n\naccountAddress (string) -- the wallet account address\n\n\n\n\nExample: GetEtherBalance MATIC balance of a wallet account address on Polygon using an API_Access_Key\ncurl -X POST -H &quot;Content-Type: application/json&quot; -H &quot;X-Access-Key: AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&quot; https://polygon-indexer.sequence.app/rpc/Indexer/GetEtherBalance -d &#x27;{ &quot;accountAddress&quot;: &quot;0x8e3E38fe7367dd3b52D1e281E4e8400447C8d8B9&quot; }&#x27;// Works in both a Webapp (browser) or Node.js:\nimport { SequenceIndexer } from &#x27;@0xsequence/indexer&#x27;\n \nconst indexer = new SequenceIndexer(&#x27;https://polygon-indexer.sequence.app&#x27;, &#x27;AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&#x27;)\n \n// try any account address you&#x27;d like :)\nconst accountAddress = &#x27;0xabc...&#x27;\n \n// query Sequence Indexer for the MATIC balance on Polygon\nconst balance = await indexer.getEtherBalance({\n\taccountAddress: accountAddress,\n})\n\t\nconsole.log(&#x27;tokens in your account:&#x27;, tokenBalances)import (\n\t&quot;context&quot;\n\t&quot;fmt&quot;\n\t&quot;log&quot;\n\t&quot;net/http&quot;\n \n\t&quot;github.com/0xsequence/go-sequence/indexer&quot;\n)\n \nfunc GetEtherBalance(accountAddress string) {\n\tseqIndexer := indexer.NewIndexer(&quot;https://polygon-indexer.sequence.app&quot;, &quot;AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&quot;)\n \n\tnativeBalance, err := seqIndexer.GetEtherBalance(context.Background(), &amp;accountAddress)\n\t\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(&quot;nativeBalance:&quot;, nativeBalance)\n}","title":"Fetch native network balance (aka ETH on Ethereum, MATIC on Polygon, AVAX on Avalanche, BNB on BSC, etc.)","titles":["Native network balances (ie. ETH, MATIC, etc.)",null]},"233":{"href":"/api/indexer/examples/subscriptions#subscriptions","html":"</header>\n","isPage":true,"text":"\n","title":"Subscriptions","titles":[]},"234":{"href":"/api/indexer/examples/subscriptions#subscribe-to-blockchain-events","html":"\n<p>You can subscribe to different blockchain events in real time using\nsubscription endpoints. Use filters to listen for particular contract\naddresses, account addresses, and/or token IDs.</p>\n","isPage":false,"text":"\nYou can subscribe to different blockchain events in real time using\nsubscription endpoints. Use filters to listen for particular contract\naddresses, account addresses, and/or token IDs.\n","title":"Subscribe to Blockchain Events","titles":["Subscriptions"]},"235":{"href":"/api/indexer/examples/subscriptions#subscribing-to-events","html":"\n<p><em>Sequence Indexer <code>SubscribeEvents</code> Method:</em></p>\n<ul>\n<li>Request: <code>POST /rpc/Indexer/SubscribeEvents</code></li>\n<li>Content-Type: <code>application/json</code></li>\n<li>Body (in JSON):\n<ul>\n<li><code>Filters</code> ([]object) -- an array of filters\n<ul>\n<li><code>contractAddresses</code> ([]string) -- a ERC20 / ERC721 / ERC1155 contract address</li>\n<li><code>accounts</code> ([]string) -- wallet addresses</li>\n<li><code>tokenIDs</code> ([]int) <em>optional</em> -- an array of token ids</li>\n<li><code>events</code> ([]string) -- an array of event names</li>\n<li><code>topicHashes</code> ([]string) -- an array of topic hashes</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<br/>\n<p>One of <code>contractAddresses</code>, <code>accounts</code> must be provided in the filter.</p>\n","isPage":false,"text":"\nSequence Indexer SubscribeEvents Method:\n\nRequest: POST /rpc/Indexer/SubscribeEvents\nContent-Type: application/json\nBody (in JSON):\n\nFilters ([]object) -- an array of filters\n\ncontractAddresses ([]string) -- a ERC20 / ERC721 / ERC1155 contract address\naccounts ([]string) -- wallet addresses\ntokenIDs ([]int) optional -- an array of token ids\nevents ([]string) -- an array of event names\ntopicHashes ([]string) -- an array of topic hashes\n\n\n\n\n\n\nOne of contractAddresses, accounts must be provided in the filter.\n","title":"Subscribing to Events","titles":["Subscriptions","Subscribe to Blockchain Events"]},"236":{"href":"/api/indexer/examples/subscriptions#subscribing-to-balance-updates","html":"\n<p><em>Sequence Indexer <code>SubscribeBalanceUpdates</code> Method:</em></p>\n","isPage":false,"text":"\nSequence Indexer SubscribeBalanceUpdates Method:\n","title":"Subscribing to Balance Updates","titles":["Subscriptions","Subscribe to Blockchain Events"]},"237":{"href":"/api/indexer/examples/subscriptions#subscribing-to-receipts","html":"\n<p><em>Sequence Indexer <code>SubscribeBalanceUpdates</code> Method:</em></p>\n<p>Example <code>SubscribeEvents</code></p>\n<div class=\"code-group\"><div data-title=\"cURL\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"cURL\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">curl</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -X</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> POST</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;Content-type: application/json&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;X-Access-Key: c3bgcU3LkFR9Bp9jFssLenPAAAAAAAAAA&quot;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  https://polygon-indexer.sequence.app/rpc/Indexer/SubscribeBalanceUpdates</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  -d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;{&quot;contractAddress&quot;:&quot;0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359&quot;}&#x27;</span></span></code></pre></div><div data-title=\"Go\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Go\" data-lang=\"go\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">context</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">log</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">github.com/0xsequence/go-sequence/indexer</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">github.com/0xsequence/go-sequence/lib/prototyp</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SubscribeEvents</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  seqIndexer </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> indexer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewIndexer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://polygon-indexer.sequence.app&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;c3bgcU3LkFR9Bp9jFssLenPAAAAAAAAAA&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  reader, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> seqIndexer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">SubscribeEvents</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    context.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Background</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">indexer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">EventFilter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      ContractAddresses: []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">prototyp</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Hash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{prototyp.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">HashFromString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)},</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  )</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Fatalf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;SubscribeEvents: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    event, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> reader.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Read</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Fatalf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Read: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Println</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Event&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, event)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre></div><div data-title=\"TypeScript\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"TypeScript\" data-lang=\"typescript\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Works in both a Webapp (browser) or Node.js:</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { SequenceIndexer, WebrpcError } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/indexer&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> indexer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SequenceIndexer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;https://polygon-indexer.sequence.app&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;c3bgcU3LkFR9Bp9jFssLenPAAAAAAAAAA&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> req</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    filter: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      contractAddresses: [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> options</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  onMessage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">msg</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;msg&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, msg)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  onError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">err</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> WebrpcError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;err&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> indexer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">subscribeEvents</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(req, options)</span></span></code></pre></div></div>","isPage":false,"text":"\nSequence Indexer SubscribeBalanceUpdates Method:\nExample SubscribeEvents\ncurl -X POST \\\n  -H &#x27;Content-type: application/json&#x27; \\\n  -H &quot;X-Access-Key: c3bgcU3LkFR9Bp9jFssLenPAAAAAAAAAA&quot; \\\n  https://polygon-indexer.sequence.app/rpc/Indexer/SubscribeBalanceUpdates \\\n  -d &#x27;{&quot;contractAddress&quot;:&quot;0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359&quot;}&#x27;import (\n  &quot;context&quot;\n  &quot;log&quot;\n \n  &quot;github.com/0xsequence/go-sequence/indexer&quot;\n  &quot;github.com/0xsequence/go-sequence/lib/prototyp&quot;\n)\n \nfunc SubscribeEvents() {\n  seqIndexer := indexer.NewIndexer(&quot;https://polygon-indexer.sequence.app&quot;, &quot;c3bgcU3LkFR9Bp9jFssLenPAAAAAAAAAA&quot;)\n \n  reader, err := seqIndexer.SubscribeEvents(\n    context.Background(),\n    &amp;indexer.EventFilter{\n      ContractAddresses: []prototyp.Hash{prototyp.HashFromString(&quot;0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359&quot;)},\n    },\n  )\n  if err != nil {\n    log.Fatalf(&quot;SubscribeEvents: %v&quot;, err)\n  }\n \n  for {\n    event, err := reader.Read()\n    if err != nil {\n      log.Fatalf(&quot;Read: %v&quot;, err)\n    }\n \n    log.Println(&quot;Event&quot;, event)\n  }\n}// Works in both a Webapp (browser) or Node.js:\nimport { SequenceIndexer, WebrpcError } from &#x27;@0xsequence/indexer&#x27;\n \nconst indexer = new SequenceIndexer(&#x27;https://polygon-indexer.sequence.app&#x27;, &#x27;c3bgcU3LkFR9Bp9jFssLenPAAAAAAAAAA&#x27;)\n \nconst req = {\n    filter: {\n      contractAddresses: [&#x27;0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359&#x27;],\n    },\n}\n \nconst options = {\n  onMessage: (msg: any) =&gt; {\n    console.log(&#x27;msg&#x27;, msg)\n  },\n  onError: (err: WebrpcError) =&gt; {\n    console.error(&#x27;err&#x27;, err)\n  }\n}\n \nawait indexer.subscribeEvents(req, options)","title":"Subscribing to Receipts","titles":["Subscriptions","Subscribe to Blockchain Events"]},"238":{"href":"/api/indexer/examples/transaction-history#wallet-transaction-history","html":"</header>\n","isPage":true,"text":"\n","title":"Wallet transaction history","titles":[]},"239":{"href":"/api/indexer/examples/transaction-history#fetch-the-transaction-history-for-any-wallet-address","html":"\n<p>Fetches the transaction / token history for any wallet address of any ERC20, ERC721 and ERC1155 token.\nThe response includes decoded transaction details for easy consumption / rendering.</p>\n<p><em>Sequence Indexer <code>GetTransactionHistory</code> Method:</em></p>\n<ul>\n<li>Request: POST /rpc/Indexer/GetTransactionHistory</li>\n<li>Content-Type: application/json</li>\n<li>Body (in JSON):\n<ul>\n<li><code>filter</code> (object)\n<ul>\n<li><code>accountAddress</code> (string) -- the wallet account address</li>\n<li><code>contractAddress</code> (string) -- optionally specify a contract address to filter</li>\n<li><code>accountAddresses</code> (string array) -- optionally specify a list of wallet account addresses</li>\n<li><code>contractAddresses</code> (string array) -- optionally specify a list of contract address</li>\n<li><code>transactionHashes</code> (string array) -- optionally specify a list of transaction hashes</li>\n<li><code>metaTransactionIDs</code> (string array) -- optionally specify a list of meta transaction IDs</li>\n</ul>\n</li>\n<li><code>includeMetadata</code> (boolean - optional - default: false) -- toggle token metadata to be included in the response</li>\n<li><code>metadataOptions</code> (object - optional) -- additional options for metadata\n<ul>\n<li><code>verifiedOnly</code> (boolean - optional) -- return only contracts which are &#x27;verified&#x27; to help reduce spam</li>\n<li><code>includeContracts</code> ([]string - optional) -- list of specific contract addresses to always be included, even if verifiedOnly is enabled.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<br/>\n<strong>Example: <code>GetTransactionHistory</code> of a wallet account address on Polygon using an <code>API_ACCESS_KEY</code></strong>\n<div class=\"code-group\"><div data-title=\"cURL\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"cURL\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">curl</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -X</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> POST</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;Content-Type: application/json&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;X-Access-Key: AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://polygon-indexer.sequence.app/rpc/Indexer/GetTransactionHistory</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;{ &quot;filter&quot;: { &quot;accountAddress&quot;: &quot;0x8e3E38fe7367dd3b52D1e281E4e8400447C8d8B9&quot; }, &quot;includeMetadata&quot;: true }&#x27;</span></span></code></pre></div><div data-title=\"Typescript\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Typescript\" data-lang=\"ts\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Works in both a Webapp (browser) or Node.js:</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { SequenceIndexer } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/indexer&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> indexer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SequenceIndexer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;https://polygon-indexer.sequence.app&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// try any account address you&#x27;d like :)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> filter</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\taccountAddress: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0xabc...&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// query Sequence Indexer for all token transaction history on Polygon</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transactionHistory</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> indexer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getTransactionHistory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tfilter: filter,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tincludeMetadata: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;transaction history in account:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, transactionHistory)</span></span></code></pre></div><div data-title=\"Go\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Go\" data-lang=\"go\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t&quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">context</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t&quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">fmt</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t&quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">log</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t&quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">net/http</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t&quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">github.com/0xsequence/go-sequence/indexer</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> GetTransactionHistory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">accountAddress</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tseqIndexer </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> indexer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewIndexer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://polygon-indexer.sequence.app&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tfilter </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">indexer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">TransactionHistoryFilter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tAccountAddress: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">accountAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tmetadataOptions </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> indexer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MetadataOptions</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tVerifiedOnly:     </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Set to true if you want to fetch only verified contracts</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tUnverifiedOnly:   </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tIncludeContracts: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Provide a list of specific contracts to include, if any</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t_, history, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> seqIndexer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetTransactionHistory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(context.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Background</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), filter, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">metadataOptions)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">\tif</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tlog.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Fatal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tfmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Println</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;transaction history:&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, history)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre></div></div>","isPage":false,"text":"\nFetches the transaction / token history for any wallet address of any ERC20, ERC721 and ERC1155 token.\nThe response includes decoded transaction details for easy consumption / rendering.\nSequence Indexer GetTransactionHistory Method:\n\nRequest: POST /rpc/Indexer/GetTransactionHistory\nContent-Type: application/json\nBody (in JSON):\n\nfilter (object)\n\naccountAddress (string) -- the wallet account address\ncontractAddress (string) -- optionally specify a contract address to filter\naccountAddresses (string array) -- optionally specify a list of wallet account addresses\ncontractAddresses (string array) -- optionally specify a list of contract address\ntransactionHashes (string array) -- optionally specify a list of transaction hashes\nmetaTransactionIDs (string array) -- optionally specify a list of meta transaction IDs\n\n\nincludeMetadata (boolean - optional - default: false) -- toggle token metadata to be included in the response\nmetadataOptions (object - optional) -- additional options for metadata\n\nverifiedOnly (boolean - optional) -- return only contracts which are &#x27;verified&#x27; to help reduce spam\nincludeContracts ([]string - optional) -- list of specific contract addresses to always be included, even if verifiedOnly is enabled.\n\n\n\n\n\n\nExample: GetTransactionHistory of a wallet account address on Polygon using an API_ACCESS_KEY\ncurl -X POST -H &quot;Content-Type: application/json&quot; -H &quot;X-Access-Key: AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&quot; https://polygon-indexer.sequence.app/rpc/Indexer/GetTransactionHistory -d &#x27;{ &quot;filter&quot;: { &quot;accountAddress&quot;: &quot;0x8e3E38fe7367dd3b52D1e281E4e8400447C8d8B9&quot; }, &quot;includeMetadata&quot;: true }&#x27;// Works in both a Webapp (browser) or Node.js:\nimport { SequenceIndexer } from &#x27;@0xsequence/indexer&#x27;\n \nconst indexer = new SequenceIndexer(&#x27;https://polygon-indexer.sequence.app&#x27;, &#x27;AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&#x27;)\n \n// try any account address you&#x27;d like :)\nconst filter = {\n\taccountAddress: &quot;0xabc...&quot;\n}\n \n// query Sequence Indexer for all token transaction history on Polygon\nconst transactionHistory = await indexer.getTransactionHistory({\n\tfilter: filter,\n\tincludeMetadata: true\n})\n\t\nconsole.log(&#x27;transaction history in account:&#x27;, transactionHistory)import (\n\t&quot;context&quot;\n\t&quot;fmt&quot;\n\t&quot;log&quot;\n\t&quot;net/http&quot;\n \n\t&quot;github.com/0xsequence/go-sequence/indexer&quot;\n)\n \nfunc GetTransactionHistory(accountAddress string) {\n\tseqIndexer := indexer.NewIndexer(&quot;https://polygon-indexer.sequence.app&quot;, &quot;AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&quot;)\n \n\tfilter := &amp;indexer.TransactionHistoryFilter{\n\t\tAccountAddress: &amp;accountAddress,\n\t}\n \n\tmetadataOptions := indexer.MetadataOptions{\n\t\tVerifiedOnly:     true, // Set to true if you want to fetch only verified contracts\n\t\tUnverifiedOnly:   false,\n\t\tIncludeContracts: nil, // Provide a list of specific contracts to include, if any\n\t}\n \n\t_, history, err := seqIndexer.GetTransactionHistory(context.Background(), filter, nil, nil, &amp;metadataOptions)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(&quot;transaction history:&quot;, history)\n}","title":"Fetch the transaction history for any wallet address","titles":["Wallet transaction history"]},"240":{"href":"/api/indexer/examples/transation-history-token-contract#contract-token-history","html":"</header>\n","isPage":true,"text":"\n","title":"Contract token history","titles":[]},"241":{"href":"/api/indexer/examples/transation-history-token-contract#fetch--listen-to-the-transaction-history-for-any-erc20-erc721-erc1155-contract","html":"\n<p>This query is helpful to track transaction history of a particular token contract.\nIn this example, we use the Skyweaver token contract address 0x631998e91476DA5B870D741192fc5Cbc55F5a52E\non the Polygon network. You may query any contract address on any of the supported networks (but make\nsure to query the indexer of the corresponding network).</p>\n<p><em>Sequence Indexer <code>GetTransactionHistory</code> Method:</em></p>\n<ul>\n<li>Request: POST /rpc/Indexer/GetTransactionHistory</li>\n<li>Content-Type: application/json</li>\n<li>Body (in JSON):\n<ul>\n<li><code>filter</code> (object)\n<ul>\n<li><code>contractAddress</code> (string) -- a ERC20 / ERC721 / ERC1155 contract address</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<br/>\n<strong>Example: <code>GetTransactionHistory</code> of Skyweaver contract on Polygon using an <code>API_ACCESS_KEY</code></strong>\n<div class=\"code-group\"><div data-title=\"cURL\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"cURL\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">curl</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -X</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> POST</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;Content-Type: application/json&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;X-Access-Key: AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://polygon-indexer.sequence.app/rpc/Indexer/GetTransactionHistory</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;{ &quot;filter&quot;: { &quot;accountAddress&quot;: &quot;0x631998e91476DA5B870D741192fc5Cbc55F5a52E&quot; }, &quot;includeMetadata&quot;: true }&#x27;</span></span></code></pre></div><div data-title=\"Typescript\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Typescript\" data-lang=\"typescript\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Works in both a Webapp (browser) or Node.js:</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { SequenceIndexer } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;@0xsequence/indexer&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> indexer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SequenceIndexer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;https://polygon-indexer.sequence.app&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// here we query the Skyweaver contract address, but you can use any</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contractAddress</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;0x631998e91476DA5B870D741192fc5Cbc55F5a52E&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// query Sequence Indexer for all token details / supplies</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// try any contract address you&#x27;d like :)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> filter</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  contractAddress: contractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// query Sequence Indexer for all token transaction history on Polygon</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transactionHistory</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> indexer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getTransactionHistory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  filter: filter,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">});</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;transaction history of contract:&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, transactionHistory);</span></span></code></pre></div><div data-title=\"Go\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Go\" data-lang=\"go\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t&quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">context</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t&quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">fmt</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t&quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">log</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t&quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">net/http</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t&quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">github.com/0xsequence/go-sequence/indexer</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> GetTransactionHistory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">contractAddress</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tseqIndexer </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> indexer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewIndexer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://polygon-indexer.sequence.app&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tfilter </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">indexer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">TransactionHistoryFilter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tContractAddress: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">contractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tmetadataOptions </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> indexer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MetadataOptions</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tVerifiedOnly:     </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Set to true if you want to fetch only verified contracts</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tUnverifiedOnly:   </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tIncludeContracts: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Provide a list of specific contracts to include, if any</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t_, history, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> seqIndexer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetTransactionHistory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(context.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Background</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), filter, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">metadataOptions)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">\tif</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tlog.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Fatal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tfmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Println</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;transaction history:&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, history)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre></div></div>","isPage":false,"text":"\nThis query is helpful to track transaction history of a particular token contract.\nIn this example, we use the Skyweaver token contract address 0x631998e91476DA5B870D741192fc5Cbc55F5a52E\non the Polygon network. You may query any contract address on any of the supported networks (but make\nsure to query the indexer of the corresponding network).\nSequence Indexer GetTransactionHistory Method:\n\nRequest: POST /rpc/Indexer/GetTransactionHistory\nContent-Type: application/json\nBody (in JSON):\n\nfilter (object)\n\ncontractAddress (string) -- a ERC20 / ERC721 / ERC1155 contract address\n\n\n\n\n\n\nExample: GetTransactionHistory of Skyweaver contract on Polygon using an API_ACCESS_KEY\ncurl -X POST -H &quot;Content-Type: application/json&quot; -H &quot;X-Access-Key: AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&quot; https://polygon-indexer.sequence.app/rpc/Indexer/GetTransactionHistory -d &#x27;{ &quot;filter&quot;: { &quot;accountAddress&quot;: &quot;0x631998e91476DA5B870D741192fc5Cbc55F5a52E&quot; }, &quot;includeMetadata&quot;: true }&#x27;// Works in both a Webapp (browser) or Node.js:\nimport { SequenceIndexer } from &quot;@0xsequence/indexer&quot;;\n \nconst indexer = new SequenceIndexer(&#x27;https://polygon-indexer.sequence.app&#x27;, &#x27;AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&#x27;)\n \n// here we query the Skyweaver contract address, but you can use any\nconst contractAddress = &quot;0x631998e91476DA5B870D741192fc5Cbc55F5a52E&quot;;\n \n// query Sequence Indexer for all token details / supplies\n// try any contract address you&#x27;d like :)\nconst filter = {\n  contractAddress: contractAddress,\n};\n \n// query Sequence Indexer for all token transaction history on Polygon\nconst transactionHistory = await indexer.getTransactionHistory({\n  filter: filter,\n});\n \nconsole.log(&quot;transaction history of contract:&quot;, transactionHistory);import (\n\t&quot;context&quot;\n\t&quot;fmt&quot;\n\t&quot;log&quot;\n\t&quot;net/http&quot;\n \n\t&quot;github.com/0xsequence/go-sequence/indexer&quot;\n)\n \nfunc GetTransactionHistory(contractAddress string) {\n\tseqIndexer := indexer.NewIndexer(&quot;https://polygon-indexer.sequence.app&quot;, &quot;AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&quot;)\n \n\tfilter := &amp;indexer.TransactionHistoryFilter{\n\t\tContractAddress: &amp;contractAddress,\n\t}\n \n\tmetadataOptions := indexer.MetadataOptions{\n\t\tVerifiedOnly:     true, // Set to true if you want to fetch only verified contracts\n\t\tUnverifiedOnly:   false,\n\t\tIncludeContracts: nil, // Provide a list of specific contracts to include, if any\n\t}\n \n\t_, history, err := seqIndexer.GetTransactionHistory(context.Background(), filter, nil, nil, &amp;metadataOptions)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(&quot;transaction history:&quot;, history)\n}","title":"Fetch / listen to the transaction history for any ERC20, ERC721, ERC1155 contract.","titles":["Contract token history",null]},"242":{"href":"/api/indexer/examples/unique-tokens#tokens-in-a-contract","html":"</header>\n","isPage":true,"text":"\n","title":"Tokens in a contract","titles":[]},"243":{"href":"/api/indexer/examples/unique-tokens#fetch-all-unique-tokens-in-a-particular-erc207211155-contract-including-total-supplies","html":"\n<strong>Fetches token supplies and metadata for any ERC20, ERC721, ERC1155 contract.</strong>\n<p>This query is helpful to render all tokens in a token contract, or to query the total token supplies.\nIn this example, we use the Skyweaver token contract address 0x631998e91476DA5B870D741192fc5Cbc55F5a52E\non the Polygon network. You may query any contract address on any of the supported networks (but make\nsure to query the indexer of the corresponding network).</p>\n<p><em>Sequence Indexer <code>GetTokenSupplies</code> Method:</em></p>\n<ul>\n<li>Request: POST /rpc/Indexer/GetTokenSupplies</li>\n<li>Content-Type: application/json</li>\n<li>Body (in JSON):\n<ul>\n<li><code>contractAddress</code> (string) -- a ERC20 / ERC721 / ERC1155 contract address</li>\n<li><code>includeMetadata</code> (boolean - optional - default: false) -- toggle token metadata to be included in the response</li>\n<li><code>metadataOptions</code> (object - optional) -- additional options for metadata\n<ul>\n<li><code>verifiedOnly</code> (boolean - optional) -- return only contracts which are &#x27;verified&#x27; to help reduce spam</li>\n<li><code>includeContracts</code> ([]string - optional) -- list of specific contract addresses to always be included, even if verifiedOnly is enabled.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<br/>\n<strong>Example: <code>GetTokenSupplies</code> of Skyweaver contract on Polygon using an <code>AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY</code></strong>\n<div class=\"code-group\"><div data-title=\"cURL\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"cURL\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">curl</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -X</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> POST</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;Content-Type: application/json&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;X-Access-Key: AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://polygon-indexer.sequence.app/rpc/Indexer/GetTokenSupplies</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;{ &quot;contractAddress&quot;: &quot;0x631998e91476DA5B870D741192fc5Cbc55F5a52E&quot;, &quot;includeMetadata&quot;: true }&#x27;</span></span></code></pre></div><div data-title=\"Typescript\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Typescript\" data-lang=\"ts\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Works in both a Webapp (browser) or Node.js:</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { SequenceIndexer } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/indexer&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> indexer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SequenceIndexer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;https://polygon-indexer.sequence.app&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// here we query the Skyweaver contract address, but you can use any</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contractAddress</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;0x631998e91476DA5B870D741192fc5Cbc55F5a52E&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// query Sequence Indexer for all token details / supplies</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tokenDetails</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> indexer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getTokenSupplies</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tcontractAddress: contractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tincludeMetadata: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;token details of contract:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, tokenDetails)</span></span></code></pre></div><div data-title=\"Go\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Go\" data-lang=\"go\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">go</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t&quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">context</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t&quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">fmt</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t&quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">log</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t&quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">net/http</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t&quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">github.com/0xsequence/go-sequence/indexer</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> GetTokenSupplies</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">contractAddress</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tseqIndexer </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> indexer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewIndexer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://polygon-indexer.sequence.app&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tmetadataOptions </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> indexer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MetadataOptions</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tVerifiedOnly:     </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Set to true if you want to fetch only verified contracts</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tUnverifiedOnly:   </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tIncludeContracts: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Provide a list of specific contracts to include, if any</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t_, _, tokenDetails, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> seqIndexer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetTokenSupplies</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(context.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Background</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), contractAddress, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">metadataOptions, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">\tif</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tlog.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Fatal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tfmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Println</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;token details:&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, tokenDetails)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre></div></div>","isPage":false,"text":"\nFetches token supplies and metadata for any ERC20, ERC721, ERC1155 contract.\nThis query is helpful to render all tokens in a token contract, or to query the total token supplies.\nIn this example, we use the Skyweaver token contract address 0x631998e91476DA5B870D741192fc5Cbc55F5a52E\non the Polygon network. You may query any contract address on any of the supported networks (but make\nsure to query the indexer of the corresponding network).\nSequence Indexer GetTokenSupplies Method:\n\nRequest: POST /rpc/Indexer/GetTokenSupplies\nContent-Type: application/json\nBody (in JSON):\n\ncontractAddress (string) -- a ERC20 / ERC721 / ERC1155 contract address\nincludeMetadata (boolean - optional - default: false) -- toggle token metadata to be included in the response\nmetadataOptions (object - optional) -- additional options for metadata\n\nverifiedOnly (boolean - optional) -- return only contracts which are &#x27;verified&#x27; to help reduce spam\nincludeContracts ([]string - optional) -- list of specific contract addresses to always be included, even if verifiedOnly is enabled.\n\n\n\n\n\n\nExample: GetTokenSupplies of Skyweaver contract on Polygon using an AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY\ncurl -X POST -H &quot;Content-Type: application/json&quot; -H &quot;X-Access-Key: AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&quot; https://polygon-indexer.sequence.app/rpc/Indexer/GetTokenSupplies -d &#x27;{ &quot;contractAddress&quot;: &quot;0x631998e91476DA5B870D741192fc5Cbc55F5a52E&quot;, &quot;includeMetadata&quot;: true }&#x27;// Works in both a Webapp (browser) or Node.js:\nimport { SequenceIndexer } from &#x27;@0xsequence/indexer&#x27;\n \nconst indexer = new SequenceIndexer(&#x27;https://polygon-indexer.sequence.app&#x27;, &#x27;AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&#x27;)\n \n// here we query the Skyweaver contract address, but you can use any\nconst contractAddress = &#x27;0x631998e91476DA5B870D741192fc5Cbc55F5a52E&#x27;\n \n// query Sequence Indexer for all token details / supplies\nconst tokenDetails = await indexer.getTokenSupplies({\n\tcontractAddress: contractAddress,\n\tincludeMetadata: true\n})\nconsole.log(&#x27;token details of contract:&#x27;, tokenDetails)go\nimport (\n\t&quot;context&quot;\n\t&quot;fmt&quot;\n\t&quot;log&quot;\n\t&quot;net/http&quot;\n \n\t&quot;github.com/0xsequence/go-sequence/indexer&quot;\n)\n \nfunc GetTokenSupplies(contractAddress string) {\n\tseqIndexer := indexer.NewIndexer(&quot;https://polygon-indexer.sequence.app&quot;, &quot;AQAAAAAAAF_JvPALhBthL7VGn6jV0YDqaFY&quot;)\n \n\tmetadataOptions := indexer.MetadataOptions{\n\t\tVerifiedOnly:     true, // Set to true if you want to fetch only verified contracts\n\t\tUnverifiedOnly:   false,\n\t\tIncludeContracts: nil, // Provide a list of specific contracts to include, if any\n\t}\n \n\t_, _, tokenDetails, err := seqIndexer.GetTokenSupplies(context.Background(), contractAddress, nil, &amp;metadataOptions, nil)\n\t\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n \n\tfmt.Println(&quot;token details:&quot;, tokenDetails)\n}","title":"Fetch all unique tokens in a particular ERC20/721/1155 contract, including total supplies","titles":["Tokens in a contract",null]},"244":{"href":"/api/marketplace/examples/get-user-activities#getuseractivities","html":"\n<p>Enables you to retrieve activity data for a specific user, including orders and trades. With the use of the <code>GetUserActivities</code> api developers can build custom and personalized social or tracking experiences to follow certain users in various interfaces.</p>\n<p><img src=\"/img/marketplace/activities.png\" alt=\"GetUserActivities\"/></p>\n","isPage":true,"text":"\nEnables you to retrieve activity data for a specific user, including orders and trades. With the use of the GetUserActivities api developers can build custom and personalized social or tracking experiences to follow certain users in various interfaces.\n\n","title":"GetUserActivities","titles":[null]},"245":{"href":"/api/marketplace/examples/get-user-activities#example","html":"\n<p><code>GetUserActivities</code> for a user with specific token IDs:</p>\n<div class=\"code-group\"><div data-title=\"cURL\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"cURL\" data-lang=\"shell\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">curl</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -X</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> POST</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;Content-Type: application/json&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://marketplace-api.sequence.app/arbitrum-sepolia/rpc/Marketplace/GetUserActivities</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;orderbookContractAddress&quot;: &quot;0xB537a160472183f2150d42EB1c3DD6684A55f74c&quot;,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;collectionAddress&quot;: &quot;0x1693ffc74edbb50d6138517fe5cd64fd1c917709&quot;,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;currencyAddresses&quot;: [</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;0xa9c88358862211870db6f18bc9b3f6e4f8b3eae7&quot;</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    ],</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;userAddress&quot;: &quot;0xC2Be9CF6D9ee4fd211f88620760e829792659b16&quot;,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;tokenIDs&quot;: [&quot;1&quot;]</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}&#x27;</span></span></code></pre></div><div data-title=\"TypeScript\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"TypeScript\" data-lang=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Works in both a Webapp (browser) or Node.js:</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> fetch </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;cross-fetch&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> res</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> fetch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;https://marketplace-api.sequence.app/arbitrum-sepolia/rpc/Marketplace/GetUserActivities&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      method: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;POST&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      headers: {</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;Content-Type&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;application/json&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      body: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">JSON</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">stringify</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;orderbookContractAddress&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0xB537a160472183f2150d42EB1c3DD6684A55f74c&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;collectionAddress&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x1693ffc74edbb50d6138517fe5cd64fd1c917709&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;currencyAddresses&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;0xa9c88358862211870db6f18bc9b3f6e4f8b3eae7&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        ],</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;userAddress&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0xC2Be9CF6D9ee4fd211f88620760e829792659b16&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;tokenIDs&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;1&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  );</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;res&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> res.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">json</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">());</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})();</span></span></code></pre></div></div>\n","isPage":false,"text":"\nGetUserActivities for a user with specific token IDs:\ncurl -X POST -H &quot;Content-Type: application/json&quot; https://marketplace-api.sequence.app/arbitrum-sepolia/rpc/Marketplace/GetUserActivities -d &#x27;{\n    &quot;orderbookContractAddress&quot;: &quot;0xB537a160472183f2150d42EB1c3DD6684A55f74c&quot;,\n    &quot;collectionAddress&quot;: &quot;0x1693ffc74edbb50d6138517fe5cd64fd1c917709&quot;,\n    &quot;currencyAddresses&quot;: [\n        &quot;0xa9c88358862211870db6f18bc9b3f6e4f8b3eae7&quot;\n    ],\n    &quot;userAddress&quot;: &quot;0xC2Be9CF6D9ee4fd211f88620760e829792659b16&quot;,\n    &quot;tokenIDs&quot;: [&quot;1&quot;]\n}&#x27;// Works in both a Webapp (browser) or Node.js:\nimport fetch from &quot;cross-fetch&quot;;\n \n(async () =&gt; {\n  const res = await fetch(\n    &quot;https://marketplace-api.sequence.app/arbitrum-sepolia/rpc/Marketplace/GetUserActivities&quot;,\n    {\n      method: &quot;POST&quot;,\n      headers: {\n        &quot;Content-Type&quot;: &quot;application/json&quot;,\n      },\n      body: JSON.stringify({\n        &quot;orderbookContractAddress&quot;: &quot;0xB537a160472183f2150d42EB1c3DD6684A55f74c&quot;,\n        &quot;collectionAddress&quot;: &quot;0x1693ffc74edbb50d6138517fe5cd64fd1c917709&quot;,\n        &quot;currencyAddresses&quot;: [\n            &quot;0xa9c88358862211870db6f18bc9b3f6e4f8b3eae7&quot;\n        ],\n        &quot;userAddress&quot;: &quot;0xC2Be9CF6D9ee4fd211f88620760e829792659b16&quot;,\n        &quot;tokenIDs&quot;: [&quot;1&quot;]\n      }),\n    }\n  );\n \n  console.log(&quot;res&quot;, await res.json());\n})();\n","title":"Example","titles":[null,"GetUserActivities"]},"246":{"href":"/api/marketplace/examples/get-user-activities#schema","html":"\n<ul>\n<li>Request: POST /api/Marketplace/GetUserActivities</li>\n<li>Content-Type: application/json</li>\n<li>Body (in JSON):\n<ul>\n<li><code>orderbookContractAddress</code> (string) -- the address of the protocol contract.</li>\n<li><code>collectionAddress</code> (string) -- the address of the NFT collection.</li>\n<li><code>currencyAddresses</code> (string[]) -- an array of currency contract addresses.</li>\n<li><code>userAddress</code> (string) -- the address of the user whose activities are being queried.</li>\n<li><code>tokenIDs</code> (string[]) -- an array of token IDs to filter the activities by.</li>\n</ul>\n</li>\n<li>Response (in JSON):\n<ul>\n<li><code>page</code>\n<ul>\n<li><code>page</code> (i32) -- number of the page</li>\n<li><code>pageSize</code> (i32) -- number of orders on the page</li>\n<li><code>more</code> (bool) -- if there are more orders</li>\n</ul>\n</li>\n<li><code>orders</code> (OrderbookOrder[])\n[\n<ul>\n<li><code>orderId</code> (string) -- order id</li>\n<li><code>tokenContract</code> (string) -- the collection contract</li>\n<li><code>tokenId</code> (string) -- the tokenId of the collection in the order</li>\n<li><code>isListing</code> (bool) -- is true if it&#x27;s a listing for sale, or false if it&#x27;s an offer</li>\n<li><code>quantity</code> (string) -- the number of tokens the order is for</li>\n<li><code>quantityRemaining</code> (string) -- the number of tokens after the order</li>\n<li><code>currencyAddress</code> (string) -- the currency the token is trading in</li>\n<li><code>pricePerToken</code> (string) -- the price per token</li>\n<li><code>expiry</code> (string) -- the expiry of when the order is no longer valid</li>\n<li><code>orderStatus</code> (OrderStatus) -- the status of the order as an enum fom <code>&quot;OPEN&quot;</code>, <code>&quot;CLOSED&quot;</code>, <code>&quot;CANCELLED&quot;</code></li>\n<li><code>createdBy</code> (string) -- the address the order was created by</li>\n<li><code>createdAt</code> (uint64) -- the time the order was created</li>\n<li><code>orderbookContractAddress</code> (string) -- the orderbook contract address\n]</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","isPage":false,"text":"\n\nRequest: POST /api/Marketplace/GetUserActivities\nContent-Type: application/json\nBody (in JSON):\n\norderbookContractAddress (string) -- the address of the protocol contract.\ncollectionAddress (string) -- the address of the NFT collection.\ncurrencyAddresses (string[]) -- an array of currency contract addresses.\nuserAddress (string) -- the address of the user whose activities are being queried.\ntokenIDs (string[]) -- an array of token IDs to filter the activities by.\n\n\nResponse (in JSON):\n\npage\n\npage (i32) -- number of the page\npageSize (i32) -- number of orders on the page\nmore (bool) -- if there are more orders\n\n\norders (OrderbookOrder[])\n[\n\norderId (string) -- order id\ntokenContract (string) -- the collection contract\ntokenId (string) -- the tokenId of the collection in the order\nisListing (bool) -- is true if it&#x27;s a listing for sale, or false if it&#x27;s an offer\nquantity (string) -- the number of tokens the order is for\nquantityRemaining (string) -- the number of tokens after the order\ncurrencyAddress (string) -- the currency the token is trading in\npricePerToken (string) -- the price per token\nexpiry (string) -- the expiry of when the order is no longer valid\norderStatus (OrderStatus) -- the status of the order as an enum fom &quot;OPEN&quot;, &quot;CLOSED&quot;, &quot;CANCELLED&quot;\ncreatedBy (string) -- the address the order was created by\ncreatedAt (uint64) -- the time the order was created\norderbookContractAddress (string) -- the orderbook contract address\n]\n\n\n\n\n","title":"Schema","titles":[null,"GetUserActivities"]},"247":{"href":"/api/transactions/examples/fetch-fee-options#fetching-fee-options","html":"\n<aside data-callout=\"warning\"><p>Fee selection is only necessary if you aren&#x27;t already using Sequence Builder&#x27;s gas sponsorship capabilities!\nCreate your project in Sequence Builder for ease of development today!</p></aside>\n<div class=\"code-group\"><div data-title=\"TypeScript\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"TypeScript\" data-lang=\"typescript\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Session } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/auth&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { ethers } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;ethers&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> config</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  mnemonic: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;YOUR MNEMONIC&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  projectAccessKey: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;YOUR PROJECT ACCESS KEY&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  chainId: ChainId.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">YOUR_CHAIN_ID</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // e.g. ChainId.MAINNET, ChainId.POLYGON, etc.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.Wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">fromMnemonic</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(config.mnemonic)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> session</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Session.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">singleSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ signer, projectAccessKey: config.projectAccessKey })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> account</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> session.account.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(config.chainId, {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  async</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> selectFee</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">_transactions</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">options</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // This callback is called with the list of candidate fee options.</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Fee options:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">JSON</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">stringify</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(options, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">undefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">))</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Select the USDC fee option.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> options.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">find</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">option</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> option.token.symbol </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">===</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;USDC&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre></div><div data-title=\"Go\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Go\" data-lang=\"go\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mnemonic </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;YOUR MNEMONIC&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">projectAccessKey </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;YOUR PROJECT ACCESS KEY&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">rpcURL </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Sprintf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://nodes.sequence.app/YOUR-NETWORK/</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, projectAccessKey)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">relayerURL </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;https://YOUR-NETWORK-relayer.sequence.app&quot;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">signer, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethwallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewWalletFromMnemonic</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(mnemonic)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">wallet, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sequence.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewWalletSingleOwner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(signer)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">provider, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethrpc.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(rpcURL)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">SetProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(provider)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">relayer, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> relayer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewRpcRelayer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(relayerURL, projectAccessKey, provider, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">SetRelayer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(relayer)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">transactions </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> sequence</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Transactions</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sequence</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Transaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    To:    common.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">HexToAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x468E8e29F6cfb0F6b7ff10ec6A1AB516ec849c04&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Value: big.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewInt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000000000000000000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">options, quote, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">FeeOptions</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, transactions)</span></span></code></pre></div></div>","isPage":true,"text":"\nFee selection is only necessary if you aren&#x27;t already using Sequence Builder&#x27;s gas sponsorship capabilities!\nCreate your project in Sequence Builder for ease of development today!\nimport { Session } from &#x27;@0xsequence/auth&#x27;\nimport { ethers } from &#x27;ethers&#x27;\n \nconst config = {\n  mnemonic: &#x27;YOUR MNEMONIC&#x27;,\n  projectAccessKey: &#x27;YOUR PROJECT ACCESS KEY&#x27;,\n  chainId: ChainId.YOUR_CHAIN_ID // e.g. ChainId.MAINNET, ChainId.POLYGON, etc.\n}\n \nconst signer = ethers.Wallet.fromMnemonic(config.mnemonic)\n \nconst session = await Session.singleSigner({ signer, projectAccessKey: config.projectAccessKey })\n \nconst account = session.account.getSigner(config.chainId, {\n  async selectFee(_transactions, options) {\n    // This callback is called with the list of candidate fee options.\n \n    console.log(&#x27;Fee options:&#x27;, JSON.stringify(options, undefined, 2))\n \n    // Select the USDC fee option.\n    return options.find(option =&gt; option.token.symbol === &#x27;USDC&#x27;)\n  }\n})mnemonic := &quot;YOUR MNEMONIC&quot;\nprojectAccessKey := &quot;YOUR PROJECT ACCESS KEY&quot;\nrpcURL := fmt.Sprintf(&quot;https://nodes.sequence.app/YOUR-NETWORK/%v&quot;, projectAccessKey)\nrelayerURL := &quot;https://YOUR-NETWORK-relayer.sequence.app&quot;\n \nsigner, _ := ethwallet.NewWalletFromMnemonic(mnemonic)\n \nwallet, _ := sequence.NewWalletSingleOwner(signer)\n \nprovider, _ := ethrpc.NewProvider(rpcURL)\nwallet.SetProvider(provider)\n \nrelayer, _ := relayer.NewRpcRelayer(relayerURL, projectAccessKey, provider, nil)\nwallet.SetRelayer(relayer)\n \ntransactions := sequence.Transactions{\n  &amp;sequence.Transaction{\n    To:    common.HexToAddress(&quot;0x468E8e29F6cfb0F6b7ff10ec6A1AB516ec849c04&quot;),\n    Value: big.NewInt(1000000000000000000),\n  },\n}\n \noptions, quote, _ := wallet.FeeOptions(ctx, transactions)","title":"Fetching fee options","titles":[null]},"248":{"href":"/api/transactions/examples/fetch-transaction-receipts#fetching-transaction-receipts","html":"\n<p>To fetch a transaction receipt for an arbitrary transaction that was dispatched via the transactions API, call the <code>/GetMetaTxnReceipt</code> endpoint.\nThe <code>metaTxID</code> is the <code>txnHash</code> from the response of the <code>/SendMetaTxn</code> endpoint.</p>\n<div class=\"code-group\"><div data-title=\"cURL\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"cURL\" data-lang=\"sh\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">curl</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -s</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -X</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> POST</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -H</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;Content-Type: application/json&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  -d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;{&quot;metaTxID&quot;:&quot;462de2756e45c93698b89ada5ba4a3c9d1bfb9fb354ad2e7f36f1a9fefbc550b&quot;}&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  https://polygon-relayer.sequence.app/rpc/Relayer/GetMetaTxnReceipt</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> jq</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">  &quot;receipt&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">    &quot;id&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;462de2756e45c93698b89ada5ba4a3c9d1bfb9fb354ad2e7f36f1a9fefbc550b&quot;,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">    &quot;status&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;SUCCEEDED&quot;,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">    &quot;revertReason&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> null,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">    &quot;index&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 0,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">    &quot;logs&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">...</span></span></code></pre></div><div data-title=\"TypeScript\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"TypeScript\" data-lang=\"typescript\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">receipt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> session.account.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">relayer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(config.chainId).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">wait</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;462de2756e45c93698b89ada5ba4a3c9d1bfb9fb354ad2e7f36f1a9fefbc550b&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre></div><div data-title=\"Go\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Go\" data-lang=\"go\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">status, receipt, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> relayer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Wait</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;462de2756e45c93698b89ada5ba4a3c9d1bfb9fb354ad2e7f36f1a9fefbc550b&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre></div></div>","isPage":true,"text":"\nTo fetch a transaction receipt for an arbitrary transaction that was dispatched via the transactions API, call the /GetMetaTxnReceipt endpoint.\nThe metaTxID is the txnHash from the response of the /SendMetaTxn endpoint.\ncurl -s -X POST -H &#x27;Content-Type: application/json&#x27; \\\n  -d &#x27;{&quot;metaTxID&quot;:&quot;462de2756e45c93698b89ada5ba4a3c9d1bfb9fb354ad2e7f36f1a9fefbc550b&quot;}&#x27; \\\n  https://polygon-relayer.sequence.app/rpc/Relayer/GetMetaTxnReceipt | jq\n \n{\n  &quot;receipt&quot;: {\n    &quot;id&quot;: &quot;462de2756e45c93698b89ada5ba4a3c9d1bfb9fb354ad2e7f36f1a9fefbc550b&quot;,\n    &quot;status&quot;: &quot;SUCCEEDED&quot;,\n    &quot;revertReason&quot;: null,\n    &quot;index&quot;: 0,\n    &quot;logs&quot;: []\n  }\n}\n \n...const { receipt } = await session.account.relayer(config.chainId).wait(&#x27;462de2756e45c93698b89ada5ba4a3c9d1bfb9fb354ad2e7f36f1a9fefbc550b&#x27;)status, receipt, _ := relayer.Wait(ctx, &quot;462de2756e45c93698b89ada5ba4a3c9d1bfb9fb354ad2e7f36f1a9fefbc550b&quot;)","title":"Fetching transaction receipts","titles":[null]},"249":{"href":"/api/transactions/examples/send-transactions#sending-transactions","html":"\n<div class=\"code-group\"><div data-title=\"TypeScript\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"TypeScript\" data-lang=\"typescript\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transactions</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x468E8e29F6cfb0F6b7ff10ec6A1AB516ec849c04&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    value: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;1000000000000000000&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// This sends the transaction to the transactions API, and returns immediately once the transactions API responds.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> response</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> account.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(transactions)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// This waits for the transaction to be confirmed on-chain.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> receipt</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> response.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">wait</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">JSON</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">stringify</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(receipt, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">undefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">))</span></span></code></pre></div><div data-title=\"Go\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Go\" data-lang=\"go\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Select the USDC fee option.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Not required if using Sequence Builder&#x27;s gas sponsorship capabilities!</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> selectedOption </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sequence</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">RelayerFeeOption</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, option </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> options {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> option.Token.Symbol </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;USDC&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    selectedOption </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> option</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    break</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Pay the transaction api.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Not required if using Sequence Builder&#x27;s gas sponsorship capabilities!</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">data, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> contracts.IERC20.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Encode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;transfer&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, selectedOption.To, selectedOption.Value)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">transactions.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sequence</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Transactions</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sequence</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Transaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  To:            </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">selectedOption.Token.ContractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  Data:          data,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  RevertOnError: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">signed, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">SignTransactions</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, transactions)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Send the transaction to the transactions api.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">metaTxnID, _, wait, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">SendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, signed, quote)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Println</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;meta-transaction ID&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, metaTxnID)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">receipt, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> wait</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Println</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;transaction hash&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, receipt.TxHash)</span></span></code></pre></div></div>","isPage":true,"text":"\nconst transactions = [\n  {\n    to: &#x27;0x468E8e29F6cfb0F6b7ff10ec6A1AB516ec849c04&#x27;,\n    value: &#x27;1000000000000000000&#x27;\n  }\n]\n \n// This sends the transaction to the transactions API, and returns immediately once the transactions API responds.\nconst response = await account.sendTransaction(transactions)\n \n// This waits for the transaction to be confirmed on-chain.\nconst receipt = await response.wait()\n \nconsole.log(JSON.stringify(receipt, undefined, 2))// Select the USDC fee option.\n// Not required if using Sequence Builder&#x27;s gas sponsorship capabilities!\nvar selectedOption *sequence.RelayerFeeOption\nfor _, option := range options {\n  if option.Token.Symbol == &quot;USDC&quot; {\n    selectedOption = option\n    break\n  }\n}\n \n// Pay the transaction api.\n// Not required if using Sequence Builder&#x27;s gas sponsorship capabilities!\ndata, _ := contracts.IERC20.Encode(&quot;transfer&quot;, selectedOption.To, selectedOption.Value)\ntransactions.Append(sequence.Transactions{&amp;sequence.Transaction{\n  To:            *selectedOption.Token.ContractAddress,\n  Data:          data,\n  RevertOnError: true,\n}})\n \nsigned, _ := wallet.SignTransactions(ctx, transactions)\n \n// Send the transaction to the transactions api.\nmetaTxnID, _, wait, _ := wallet.SendTransaction(ctx, signed, quote)\n \nfmt.Println(&quot;meta-transaction ID&quot;, metaTxnID)\n \nreceipt, _ := wait(ctx)\n \nfmt.Println(&quot;transaction hash&quot;, receipt.TxHash)","title":"Sending transactions","titles":[null]},"250":{"href":"/sdk/typescript/connectors/FAQ#nextjs","html":"\n","isPage":true,"text":"\n","title":"NextJs","titles":[null]},"251":{"href":"/sdk/typescript/connectors/FAQ#why-does-my-wallet-integration-produce-an-error-when-used-with-nextjs","html":"\n<p>Wallet libraries and connectors must be rendered in the browser. This is particularly true for Wagmi and Wagmi-based libraries. Attempts to render the page elsewhere, such as on backend server, can produce errors in some situations. Rendering on the server is therefore highly discouraged.</p>\n<p>The method for fixing this issue will depend on the folder structure. The <code>pages</code> folder structure is available for all versions of NextJs, while the <code>app</code> folder structure is only available for NextJs version 13 and above and may require being turned on through an experimental setting.</p>\n<p>See using wallet libraries with <a href=\"/sdk/typescript/connectors/FAQ#how-do-i-use-a-wallet-library-and-connector-with-nextjs-using-the-pages-directory-all-versions-of-nextjs\">next.js pages directory</a></p>\n<p>See using wallet libraries with <a href=\"/sdk/typescript/connectors/FAQ#how-do-i-use-a-wallet-library-and-connector-with-nextjs-using-the-app-directory-version-13-and-above-only\">next.js app directory(NextJs 13+ feature)</a></p>\n","isPage":false,"text":"\nWallet libraries and connectors must be rendered in the browser. This is particularly true for Wagmi and Wagmi-based libraries. Attempts to render the page elsewhere, such as on backend server, can produce errors in some situations. Rendering on the server is therefore highly discouraged.\nThe method for fixing this issue will depend on the folder structure. The pages folder structure is available for all versions of NextJs, while the app folder structure is only available for NextJs version 13 and above and may require being turned on through an experimental setting.\nSee using wallet libraries with next.js pages directory\nSee using wallet libraries with next.js app directory(NextJs 13+ feature)\n","title":"Why does my wallet integration produce an error when used with next.js?","titles":[null,"NextJs"]},"252":{"href":"/sdk/typescript/connectors/FAQ#how-do-i-use-a-wallet-library-and-connector-with-nextjs-using-the-pages-directory-all-versions-of-nextjs","html":"\n<p>The content of the application which depends on Wagmi hooks must be mounted only once the application is rendered in the client. This is a limitation due to wagmi when used with NextJs, and all wagmi-based libraries will inherit this limitation. To do so we can use a <code>useEffect</code> hook to wait before rendering the application.</p>\n<p>In the example below, we wait until the app is mounted in the client before rendering the rest of the application:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { useIsMounted } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;../hooks&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Home </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;../components/Home&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Page</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> isMounted</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> useIsMounted</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">isMounted) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> null</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">Home</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;/&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">export</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> default</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Page</span></span></code></pre>\n<p>A full code example of this setup working with the Wagmi library can be found <a href=\"https://github.com/0xsequence/demo-dapp-wagmi-next/tree/mount-hook\">on github</a>.\nThe method described above is the one recommended by Wagmi and is demonstrated in their <a href=\"https://github.com/wagmi-dev/wagmi/blob/0.12.x/examples/_dev/src/pages/index.tsx\">official example</a>.</p>\n","isPage":false,"text":"\nThe content of the application which depends on Wagmi hooks must be mounted only once the application is rendered in the client. This is a limitation due to wagmi when used with NextJs, and all wagmi-based libraries will inherit this limitation. To do so we can use a useEffect hook to wait before rendering the application.\nIn the example below, we wait until the app is mounted in the client before rendering the rest of the application:\nimport { useIsMounted } from &#x27;../hooks&#x27;\nimport Home from &#x27;../components/Home&#x27;\n \nconst Page = () =&gt; {\n  const isMounted = useIsMounted()\n \n  if (!isMounted) return null\n  return (\n    &lt;&gt;\n      &lt;Home /&gt;\n    &lt;/&gt;\n  )\n}\n \nexport default Page\nA full code example of this setup working with the Wagmi library can be found on github.\nThe method described above is the one recommended by Wagmi and is demonstrated in their official example.\n","title":"How do I use a wallet library and connector with next.js using the pages directory (all versions of NextJs)?","titles":[null,"NextJs"]},"253":{"href":"/sdk/typescript/connectors/FAQ#how-do-i-use-a-wallet-library-and-connector-with-nextjs-using-the-app-directory-version-13-and-above-only","html":"\n<p>NextJs 13 and above allows using a new folder structure in which the content is placed in an <code>app</code> directory. Enabling this feature may require explicitly indicating it with an experimental setting.\nWhen using such a folder structure, NextJs allows the declaration of Client Components which are components that will be rendered in the browser.\nA wrapper component containing the wallet library initialized with all the connectors must be declared with the <code>&quot;use client&quot;</code> directive. The <code>&quot;use client&quot;</code> directive is what will turn the wrapper component into a Client Component to be rendered in the browser.</p>\n<p>In addition, there is a bug with wagmi and nextJs when using the autoConnect feature which causes</p>\n<p>In the example below, we declare a wrapper component with the <code>&quot;use client&quot;</code> directive:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;use client&quot;</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // this directive informs next.js that the component is a Client Component to be rendered in the browser</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> WagmiWrapper</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ({ </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">children</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> wagmiClient</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createClient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    autoConnect: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    connectors,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    provider,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    webSocketProvider,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  });</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">WagmiConfig</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> client</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">wagmiClient</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#F47067\">      {</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">children</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;/</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">WagmiConfig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  );</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">export</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> default</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WagmiWrapper</span></span></code></pre>\n<p>This wrapper component can then be imported normally and wrap the rest of the application. The child components can be a combination of Client and Server components.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// We import a custom wrapper component that initializes the wallet library and all its connectors</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// An example of the content of this wrapper component can be found here: https://github.com/0xsequence/demo-dapp-wagmi-next/blob/master/components/WagmiProvider.tsx</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WagmiWrapper </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;./WagmiWrapper&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// We can then wrap our entire app with this browser&#x27;s rendered component</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> MyApp</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Component</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">pageProps</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> AppProps</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">WagmiWrapper</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">Component</span><span style=\"color:#24292E;--shiki-dark:#F47067\"> {</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">pageProps</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;/</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">WagmiWrapper</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  );</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>A full code example using Nextjs and the <code>app</code> directory can be found <a href=\"https://github.com/0xsequence/demo-dapp-wagmi-next/tree/use-client-method\">on github</a>.\nThe method described above is the one recommended by Wagmi through their NextJs example which can be consulted by running the command <code>npx create-wagmi</code> and selecting the nextJs option.</p>\n<p>Click <a href=\"https://beta.nextjs.org/docs/rendering/server-and-client-components#client-components\">here</a> for more information about Client Components.</p>","isPage":false,"text":"\nNextJs 13 and above allows using a new folder structure in which the content is placed in an app directory. Enabling this feature may require explicitly indicating it with an experimental setting.\nWhen using such a folder structure, NextJs allows the declaration of Client Components which are components that will be rendered in the browser.\nA wrapper component containing the wallet library initialized with all the connectors must be declared with the &quot;use client&quot; directive. The &quot;use client&quot; directive is what will turn the wrapper component into a Client Component to be rendered in the browser.\nIn addition, there is a bug with wagmi and nextJs when using the autoConnect feature which causes\nIn the example below, we declare a wrapper component with the &quot;use client&quot; directive:\n&quot;use client&quot; // this directive informs next.js that the component is a Client Component to be rendered in the browser\n \nconst WagmiWrapper = ({ children }) =&gt; {\n  const wagmiClient = createClient({\n    autoConnect: true,\n    connectors,\n    provider,\n    webSocketProvider,\n  });\n \n \n  return (\n    &lt;WagmiConfig client={wagmiClient}&gt;\n      {children}\n    &lt;/WagmiConfig&gt;\n  );\n}\n \nexport default WagmiWrapper\nThis wrapper component can then be imported normally and wrap the rest of the application. The child components can be a combination of Client and Server components.\n// We import a custom wrapper component that initializes the wallet library and all its connectors\n// An example of the content of this wrapper component can be found here: https://github.com/0xsequence/demo-dapp-wagmi-next/blob/master/components/WagmiProvider.tsx\nimport WagmiWrapper from &#x27;./WagmiWrapper&#x27;\n \n// We can then wrap our entire app with this browser&#x27;s rendered component\nfunction MyApp({ Component, pageProps }: AppProps) {\n  return (\n    &lt;WagmiWrapper&gt;\n      &lt;Component {...pageProps} /&gt;\n    &lt;/WagmiWrapper&gt;\n  );\n}\nA full code example using Nextjs and the app directory can be found on github.\nThe method described above is the one recommended by Wagmi through their NextJs example which can be consulted by running the command npx create-wagmi and selecting the nextJs option.\nClick here for more information about Client Components.","title":"How do I use a wallet library and connector with next.js using the app directory (version 13 and above only)?","titles":[null,"NextJs"]},"254":{"href":"/sdk/typescript/connectors/overview#wallet-connectors","html":"</header>\n<p>Sequence is compatible with all standard Ethereum libraries and connectors. If you&#x27;ve\ndeveloped your dapp to with work Metamask, it will also automatically work with Sequence.</p>\n<p>Our SDKs offer all the functionality you&#x27;d need to build a web3 dapp, but you can also\ncombine other libraries, tools, and wallet connectors :) Please see our open sourced <a href=\"https://github.com/0xsequence/demo-dapp\">Demo Dapp</a>\nproject for an example use of Sequence, or see below on usage with additional connectors.</p>\n<p>For your dapps, you may also want to support many different kinds of wallets in addition\nto the Sequence Wallet. You may do this by using sequence.js or using one of the connectors below:</p>\n<ul>\n<li><a href=\"kit/overview.mdx\">Sequence Kit</a></li>\n<li><a href=\"/sdk/typescript/connectors/wagmi\">Wagmi</a></li>\n<li><a href=\"/sdk/typescript/connectors/web3modal\">Web3Modal</a></li>\n<li><a href=\"/sdk/typescript/connectors/rainbow-kit\">RainbowKit</a></li>\n<li><a href=\"/sdk/typescript/connectors/web3-onboard\">web3-onboard</a></li>\n<li><a href=\"/sdk/typescript/connectors/web3-react-v6\">web3-react</a></li>\n</ul>\n<p>Additionally, if you are building a mobile app or video game, please see the docs for\nthe respective SDK. Feel free to reach out to our team for help/questions too.</p>","isPage":true,"text":"\nSequence is compatible with all standard Ethereum libraries and connectors. If you&#x27;ve\ndeveloped your dapp to with work Metamask, it will also automatically work with Sequence.\nOur SDKs offer all the functionality you&#x27;d need to build a web3 dapp, but you can also\ncombine other libraries, tools, and wallet connectors :) Please see our open sourced Demo Dapp\nproject for an example use of Sequence, or see below on usage with additional connectors.\nFor your dapps, you may also want to support many different kinds of wallets in addition\nto the Sequence Wallet. You may do this by using sequence.js or using one of the connectors below:\n\nSequence Kit\nWagmi\nWeb3Modal\nRainbowKit\nweb3-onboard\nweb3-react\n\nAdditionally, if you are building a mobile app or video game, please see the docs for\nthe respective SDK. Feel free to reach out to our team for help/questions too.","title":"Wallet Connectors","titles":[]},"255":{"href":"/sdk/typescript/connectors/sequence-kit#sequence-kit-seamlessly-integrate-web3-wallets-into-your-applications","html":"</header>\n<p>Sequence Kit 🧰 is the ultimate toolkit for effortlessly integrating web3 wallets into your applications, providing your users with a smooth and secure onboarding experience. With our robust tools built on the popular <a href=\"https://wagmi.sh/\">wagmi</a> library, unlock a realm of possibilities in the world of web3.</p>\n","isPage":true,"text":"\nSequence Kit 🧰 is the ultimate toolkit for effortlessly integrating web3 wallets into your applications, providing your users with a smooth and secure onboarding experience. With our robust tools built on the popular wagmi library, unlock a realm of possibilities in the world of web3.\n","title":"Sequence Kit: Seamlessly Integrate Web3 Wallets into Your Applications","titles":[]},"256":{"href":"/sdk/typescript/connectors/sequence-kit#key-features","html":"\n<ul>\n<li>\n<p><strong>Universal Connections</strong>: Seamlessly connect via popular social logins such as Facebook, Google, Discord, and more! Your users will enjoy a smooth, secure onboarding process. 🔐🪪</p>\n</li>\n<li>\n<p><strong>Web3 Wallet Integration</strong>: Effortlessly integrate with leading web3 wallets like WalletConnect and MetaMask. Unleash the power of blockchain with just a few clicks! 🦊 ⛓️</p>\n</li>\n<li>\n<p><strong>Embedded Wallet Experience</strong>: Provide your users with a comprehensive in-game wallet, enabling them to manage their coins and collectibles all within your own application. 👛 🖼️ 🪙</p>\n</li>\n</ul>\n<p>Explore the potential of Sequence Kit by trying out our <a href=\"https://0xsequence.github.io/kit\">demo</a>!</p>\n<header>","isPage":false,"text":"\n\n\nUniversal Connections: Seamlessly connect via popular social logins such as Facebook, Google, Discord, and more! Your users will enjoy a smooth, secure onboarding process. 🔐🪪\n\n\nWeb3 Wallet Integration: Effortlessly integrate with leading web3 wallets like WalletConnect and MetaMask. Unleash the power of blockchain with just a few clicks! 🦊 ⛓️\n\n\nEmbedded Wallet Experience: Provide your users with a comprehensive in-game wallet, enabling them to manage their coins and collectibles all within your own application. 👛 🖼️ 🪙\n\n\nExplore the potential of Sequence Kit by trying out our demo!\n","title":"Key Features","titles":["Sequence Kit: Seamlessly Integrate Web3 Wallets into Your Applications"]},"257":{"href":"/sdk/typescript/connectors/sequence-kit#next-steps","html":"</header>\n","isPage":false,"text":"\n","title":"Next Steps","titles":[]},"258":{"href":"/sdk/typescript/connectors/sequence-kit#x27;re already familiar with Sequence Kit dive into the available <a href=","html":"\n<hr/>\n<h2 id=\"slug-overviewtitle-sequence-kit-documentation\">slug: overview\ntitle: Sequence Kit Documentation<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#slug-overviewtitle-sequence-kit-documentation\"><div data-autolink-icon=\"true\"></div></a></h2>\n<header>","isPage":false,"text":"\n\nslug: overview\ntitle: Sequence Kit Documentation\n","title":"Ready to integrate Sequence Kit into your application? Check out our","titles":["Next Steps"]},"259":{"href":"/sdk/typescript/connectors/sequence-kit#sequence-kit-seamlessly-integrate-web3-wallets-into-your-applications-1","html":"</header>\n<p>Sequence Kit 🧰 is the ultimate toolkit for effortlessly integrating web3 wallets into your applications, providing your users with a smooth and secure onboarding experience. With our robust tools built on the popular <a href=\"https://wagmi.sh/\">wagmi</a> library, unlock a realm of possibilities in the world of web3.</p>\n","isPage":false,"text":"\nSequence Kit 🧰 is the ultimate toolkit for effortlessly integrating web3 wallets into your applications, providing your users with a smooth and secure onboarding experience. With our robust tools built on the popular wagmi library, unlock a realm of possibilities in the world of web3.\n","title":"Sequence Kit: Seamlessly Integrate Web3 Wallets into Your Applications","titles":[]},"260":{"href":"/sdk/typescript/connectors/sequence-kit#key-features-1","html":"\n<ul>\n<li>\n<p><strong>Universal Connections</strong>: Seamlessly connect via popular social logins such as Facebook, Google, Discord, and more! Your users will enjoy a smooth, secure onboarding process. 🔐🪪</p>\n</li>\n<li>\n<p><strong>Web3 Wallet Integration</strong>: Effortlessly integrate with leading web3 wallets like WalletConnect and MetaMask. Unleash the power of blockchain with just a few clicks! 🦊 ⛓️</p>\n</li>\n<li>\n<p><strong>Embedded Wallet Experience</strong>: Provide your users with a comprehensive in-game wallet, enabling them to manage their coins and collectibles all within your own application. 👛 🖼️ 🪙</p>\n</li>\n</ul>\n<p>Explore the potential of Sequence Kit by trying out our <a href=\"https://0xsequence.github.io/kit\">demo</a>!</p>\n<header>","isPage":false,"text":"\n\n\nUniversal Connections: Seamlessly connect via popular social logins such as Facebook, Google, Discord, and more! Your users will enjoy a smooth, secure onboarding process. 🔐🪪\n\n\nWeb3 Wallet Integration: Effortlessly integrate with leading web3 wallets like WalletConnect and MetaMask. Unleash the power of blockchain with just a few clicks! 🦊 ⛓️\n\n\nEmbedded Wallet Experience: Provide your users with a comprehensive in-game wallet, enabling them to manage their coins and collectibles all within your own application. 👛 🖼️ 🪙\n\n\nExplore the potential of Sequence Kit by trying out our demo!\n","title":"Key Features","titles":["Sequence Kit: Seamlessly Integrate Web3 Wallets into Your Applications"]},"261":{"href":"/sdk/typescript/connectors/sequence-kit#next-steps-1","html":"</header>\n<p>Ready to integrate Sequence Kit into your application? Check out our <a href=\"/solutions/wallets/sequence-kit/getting-started\">Getting Started guide</a>. If you&#x27;re already familiar with Sequence Kit dive into the available <a href=\"/solutions/wallets/sequence-kit/configuration\">configuration options</a> or take a look at the <a href=\"/solutions/wallets/sequence-kit/checkout\">checkout</a>.</p>","isPage":false,"text":"\nReady to integrate Sequence Kit into your application? Check out our Getting Started guide. If you&#x27;re already familiar with Sequence Kit dive into the available configuration options or take a look at the checkout.","title":"Next Steps","titles":[]},"262":{"href":"/sdk/typescript/connectors/web3-react-v6#using-web3-react-v6","html":"</header>\n<p>The connector is available for web3-react V6. Please note that later versions of web3-react cannot be used with the Web3-React V6 connector due to breaking changes.</p>\n","isPage":true,"text":"\nThe connector is available for web3-react V6. Please note that later versions of web3-react cannot be used with the Web3-React V6 connector due to breaking changes.\n","title":"Using Web3-React V6","titles":[]},"263":{"href":"/sdk/typescript/connectors/web3-react-v6#installation","html":"\n<p>The connector may be installed via the npm package:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> npm install @0xsequence</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">web3</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">react</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">v6</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">connector 0xsequence ethers</span></span></code></pre>\n","isPage":false,"text":"\nThe connector may be installed via the npm package:\n npm install @0xsequence/web3-react-v6-connector 0xsequence ethers\n","title":"Installation","titles":["Using Web3-React V6"]},"264":{"href":"/sdk/typescript/connectors/web3-react-v6#usage","html":"\n","isPage":false,"text":"\n","title":"Usage","titles":["Using Web3-React V6"]},"265":{"href":"/sdk/typescript/connectors/web3-react-v6#initialization","html":"\n<p>The connector must be initialized similarly to other connectors.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { SequenceConnector } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/web3-react-v6-connector&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> options</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  appName: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Web3 React Demo app&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">export</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> sequence</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SequenceConnector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ chainId: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">137</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, appName: options.appName  })</span></span></code></pre>\n","isPage":false,"text":"\nThe connector must be initialized similarly to other connectors.\nimport { SequenceConnector } from &#x27;@0xsequence/web3-react-v6-connector&#x27;\n \nconst options = {\n  appName: &#x27;Web3 React Demo app&#x27;\n}\n \nexport const sequence = new SequenceConnector({ chainId: 137, appName: options.appName  })\n","title":"Initialization","titles":["Using Web3-React V6","Usage"]},"266":{"href":"/sdk/typescript/connectors/web3-react-v6#activationdeactivation","html":"\n<p>The connection can be activated and deactivated from the initialized connector similarly to other connectors.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { useWeb3React } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@web3-react/core&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { sequence </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">as</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sequenceConnector } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;./connectors/sequence&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">activate</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> useWeb3React</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> connectWeb3React</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  activate</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(sequenceConnector);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> disconnectWeb3React</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  sequenceConnector.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">deactivate</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nThe connection can be activated and deactivated from the initialized connector similarly to other connectors.\nimport { useWeb3React } from &#x27;@web3-react/core&#x27;\nimport { sequence as sequenceConnector } from &#x27;./connectors/sequence&#x27;\n \nconst { activate } = useWeb3React()\n \nconst connectWeb3React = async () =&gt; {\n  activate(sequenceConnector);\n}\n \nconst disconnectWeb3React = async () =&gt; {\n  sequenceConnector.deactivate();\n}\n","title":"Activation/Deactivation","titles":["Using Web3-React V6","Usage"]},"267":{"href":"/sdk/typescript/connectors/web3-react-v6#options","html":"\n","isPage":false,"text":"\n","title":"Options","titles":["Using Web3-React V6"]},"268":{"href":"/sdk/typescript/connectors/web3-react-v6#chainid","html":"\n<p>The default chain id as number that the Sequence wallet will attempt to connect to.</p>\n","isPage":false,"text":"\nThe default chain id as number that the Sequence wallet will attempt to connect to.\n","title":"chainId","titles":["Using Web3-React V6","Options"]},"269":{"href":"/sdk/typescript/connectors/web3-react-v6#appname-optional","html":"\n<p>The value of appName will be displayed by the Sequence wallet when initiating a connection.</p>\n","isPage":false,"text":"\nThe value of appName will be displayed by the Sequence wallet when initiating a connection.\n","title":"appName (optional)","titles":["Using Web3-React V6","Options"]},"270":{"href":"/sdk/typescript/connectors/web3-react-v6#example","html":"\n<p>A demo app for Web3-React v6 is available <a href=\"https://github.com/0xsequence/demo-dapp-web3-react/tree/v6\">here</a></p>","isPage":false,"text":"\nA demo app for Web3-React v6 is available here","title":"Example","titles":["Using Web3-React V6"]},"271":{"href":"/sdk/typescript/guides/auth-address#authenticate-users-with-message-signature","html":"</header>\n","isPage":true,"text":"\n","title":"Authenticate Users with Message Signature","titles":[]},"272":{"href":"/sdk/typescript/guides/auth-address#ask-for-the-wallet-address","html":"\n<p>To get the user&#x27;s Sequence wallet address:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> wallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sequence.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address)</span></span></code></pre>\n","isPage":false,"text":"\nTo get the user&#x27;s Sequence wallet address:\nconst wallet = sequence.getWallet()\nconst address = wallet.getAddress()\nconsole.log(address)\n","title":"Ask for the wallet address","titles":["Authenticate Users with Message Signature"]},"273":{"href":"/sdk/typescript/guides/auth-address#authenticate-wallet","html":"\n<p>In many cases, you&#x27;ll want your users to connect and then verify they do control this wallet address. Applications typically do this by asking the user\nto sign a message with their wallet, and then verify the signature from the user to ensure its integrity.</p>\n<p>As this is such a common workflow, Sequence can automatically authenticate the account address at the same time\nwhile the user is prompt to connect their wallet to your dapp. This allows the user experience to be simpler and\nmore seamless.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { sequence } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;0xsequence&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> wallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sequence.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> connectDetails</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  app: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Your Dapp name&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  authorize: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // &lt;---&lt;&lt;&lt; this will automatically sign+verify a EIP712 message when user clicks &quot;Connect&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n<p>It will look like this to your users:</p>\n<img alt=\"Sequence on-demand sign in, connect\" src=\"/img/authorize_connect.png\" width=\"400\"/>\n<p>In the above example, we pass <code>authorize: true</code> to the <code>connect()</code> function, which will automatically have the user\nsign a <strong>EIP712 signed message</strong> to prove their identity. This allows you to then easily authenticate the connected\nwallet address with absolute certainty.</p>\n<p>You can find the signed message proof returned in <code>connectDetails.proof</code>, which is an EIP712 signed object using\na simple convention from <a href=\"https://github.com/0xsequence/ethauth.js\">ethauth</a>. NOTE: EIP712 allows you to use an actual object for\nsigning instead of just a plain-text string.</p>\n","isPage":false,"text":"\nIn many cases, you&#x27;ll want your users to connect and then verify they do control this wallet address. Applications typically do this by asking the user\nto sign a message with their wallet, and then verify the signature from the user to ensure its integrity.\nAs this is such a common workflow, Sequence can automatically authenticate the account address at the same time\nwhile the user is prompt to connect their wallet to your dapp. This allows the user experience to be simpler and\nmore seamless.\nimport { sequence } from &#x27;0xsequence&#x27;\n \nconst wallet = sequence.getWallet()\n \nconst connectDetails = await wallet.connect({\n  app: &#x27;Your Dapp name&#x27;,\n  authorize: true // &lt;---&lt;&lt;&lt; this will automatically sign+verify a EIP712 message when user clicks &quot;Connect&quot;\n})\nIt will look like this to your users:\n\nIn the above example, we pass authorize: true to the connect() function, which will automatically have the user\nsign a EIP712 signed message to prove their identity. This allows you to then easily authenticate the connected\nwallet address with absolute certainty.\nYou can find the signed message proof returned in connectDetails.proof, which is an EIP712 signed object using\na simple convention from ethauth. NOTE: EIP712 allows you to use an actual object for\nsigning instead of just a plain-text string.\n","title":"Authenticate wallet","titles":["Authenticate Users with Message Signature"]},"274":{"href":"/sdk/typescript/guides/auth-address#authenticate-wallet-server-side","html":"\n<p>The above example demonstrates how to connect and verify the user&#x27;s identity in your dapp on the client-side,\nbut if you&#x27;d like to authenticate the Sequence authorization proof on your server, then you can do so with the following snippet:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { ValidateSequenceWalletProof } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/auth&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { commons, v2 } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/core&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { ETHAuth } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/ethauth&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { trackers } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/sessions&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> *</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> as</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;ethers&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// ...</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> rpcUrl</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;https://polygon-mainnet.infura.io/v3/&lt;your infura key here&gt;&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> provider</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.providers.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">JsonRpcProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(rpcUrl)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// create an EIP-6492-aware ETHAuth proof validator</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> validator</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> ValidateSequenceWalletProof</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> commons.reader.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">OnChainReader</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(provider),</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> trackers.remote.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">RemoteConfigTracker</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;https://sessions.sequence.app&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  v2.DeployedWalletContext</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ethauth</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> ETHAuth</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validator)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethauth.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">configJsonRpcProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(rpcUrl)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">try</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> proof</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethAuth.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">decodeProof</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(connectDetails.proof.proofString)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`proof for address ${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">proof</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">address</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">} is valid`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (err) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`invalid proof -- do not trust address: ${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">err</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>See the <a href=\"https://github.com/0xsequence/go-sequence\">Go Sequence SDK</a> on using Sequence in your Go applications.</p>\n<p>If your server is written in a language other than Javascript/Typescript or Go, all you have to do is validate\nthe signature with <a href=\"https://eips.ethereum.org/EIPS/eip-1271\">EIP1271, the standard method for validating signed messages for a smart wallet</a>.</p>\n<p>As always, if you have any questions or require help, reach out to us on <a href=\"https://discord.gg/sequence\">Discord</a>.</p>","isPage":false,"text":"\nThe above example demonstrates how to connect and verify the user&#x27;s identity in your dapp on the client-side,\nbut if you&#x27;d like to authenticate the Sequence authorization proof on your server, then you can do so with the following snippet:\nimport { ValidateSequenceWalletProof } from &#x27;@0xsequence/auth&#x27;\nimport { commons, v2 } from &#x27;@0xsequence/core&#x27;\nimport { ETHAuth } from &#x27;@0xsequence/ethauth&#x27;\nimport { trackers } from &#x27;@0xsequence/sessions&#x27;\nimport * as ethers from &#x27;ethers&#x27;\n \n// ...\n \nconst rpcUrl = &#x27;https://polygon-mainnet.infura.io/v3/&lt;your infura key here&gt;&#x27;\nconst provider = new ethers.providers.JsonRpcProvider(rpcUrl)\n \n// create an EIP-6492-aware ETHAuth proof validator\nconst validator = ValidateSequenceWalletProof(\n  () =&gt; new commons.reader.OnChainReader(provider),\n  new trackers.remote.RemoteConfigTracker(&#x27;https://sessions.sequence.app&#x27;),\n  v2.DeployedWalletContext\n)\nconst ethauth = new ETHAuth(validator)\nawait ethauth.configJsonRpcProvider(rpcUrl)\n \ntry {\n  const proof = await ethAuth.decodeProof(connectDetails.proof.proofString)\n  console.log(`proof for address ${proof.address} is valid`)\n} catch (err) {\n  console.log(`invalid proof -- do not trust address: ${err}`)\n}\nSee the Go Sequence SDK on using Sequence in your Go applications.\nIf your server is written in a language other than Javascript/Typescript or Go, all you have to do is validate\nthe signature with EIP1271, the standard method for validating signed messages for a smart wallet.\nAs always, if you have any questions or require help, reach out to us on Discord.","title":"Authenticate wallet server-side","titles":["Authenticate Users with Message Signature"]},"275":{"href":"/sdk/typescript/guides/building-backends#building-backends-with-sequence","html":"</header>\n","isPage":true,"text":"\n","title":"Building Backends with Sequence","titles":[]},"276":{"href":"/sdk/typescript/guides/building-backends#nodejs","html":"\n<p>The <a href=\"https://github.com/0xsequence/sequence.js\">0xsequence</a> package which is available for browser / client use, also works perfectly on nodejs backends\nwritten in Javascript or Typescript.</p>\n","isPage":false,"text":"\nThe 0xsequence package which is available for browser / client use, also works perfectly on nodejs backends\nwritten in Javascript or Typescript.\n","title":"nodejs","titles":["Building Backends with Sequence",null]},"277":{"href":"/sdk/typescript/guides/building-backends#go","html":"\n<p>A complete Sequence SDK is also available in Go: <a href=\"https://github.com/0xsequence/go-sequence\">https://github.com/0xsequence/go-sequence</a>.</p>\n<p><a href=\"https://github.com/0xsequence/go-sequence\">go-sequence</a> is the equivalent of <a href=\"https://github.com/0xsequence/sequence.js\">0xsequence</a>\nbut for Go / Golang backends. In fact, all of Sequence&#x27;s infrastructure is written in Go and is built with <a href=\"https://github.com/0xsequence/go-sequence\">go-sequence</a>.</p>\n","isPage":false,"text":"\nA complete Sequence SDK is also available in Go: https://github.com/0xsequence/go-sequence.\ngo-sequence is the equivalent of 0xsequence\nbut for Go / Golang backends. In fact, all of Sequence&#x27;s infrastructure is written in Go and is built with go-sequence.\n","title":"Go","titles":["Building Backends with Sequence",null]},"278":{"href":"/sdk/typescript/guides/building-backends#ethkit","html":"\n<p>As part of the Sequence open source tools, our team has also built <a href=\"https://github.com/0xsequence/ethkit\">ethkit</a>, which\nis an Ethereum dev toolkit for Go backends. <a href=\"https://github.com/0xsequence/ethkit\">ethkit</a> supports EOA wallets,\nand you can think of it like <code>ethers.js</code> but for Go.</p>\n","isPage":false,"text":"\nAs part of the Sequence open source tools, our team has also built ethkit, which\nis an Ethereum dev toolkit for Go backends. ethkit supports EOA wallets,\nand you can think of it like ethers.js but for Go.\n","title":"ethkit","titles":["Building Backends with Sequence",null]},"279":{"href":"/sdk/typescript/guides/building-backends#support-for-other-backend-languages","html":"\n<p>If your backend services are written in a language other than JS or Go, you can still easily integrate Sequence,\nas Sequence is really just a standard Ethereum client library with some extra features. In many cases, the extra\nfeatures are best utilized on the client-side / dapp.</p>\n<p>If your situation for example is a Python or Java backend where you&#x27;d like to verify signatures from a Sequence Wallet,\nwell then, you can call the standard <a href=\"https://eips.ethereum.org/EIPS/eip-1271\">EIP1271</a> function for the account address\nfrom your backend.</p>\n<p>If you&#x27;d like to use the Sequence&#x27;s Meta-Transaction capabilities, see <a href=\"/guides/building-relaying-server\">Building Relaying Server with Sequence</a>.</p>","isPage":false,"text":"\nIf your backend services are written in a language other than JS or Go, you can still easily integrate Sequence,\nas Sequence is really just a standard Ethereum client library with some extra features. In many cases, the extra\nfeatures are best utilized on the client-side / dapp.\nIf your situation for example is a Python or Java backend where you&#x27;d like to verify signatures from a Sequence Wallet,\nwell then, you can call the standard EIP1271 function for the account address\nfrom your backend.\nIf you&#x27;d like to use the Sequence&#x27;s Meta-Transaction capabilities, see Building Relaying Server with Sequence.","title":"Support for other backend languages","titles":["Building Backends with Sequence",null]},"280":{"href":"/sdk/typescript/guides/connect-wallet#connect-wallet","html":"</header>\n<p>Sequence is a very flexible wallet which allow users multiple ways to connect / access their wallet. This includes:</p>\n<ol>\n<li>\n<p><strong>On-demand Ethereum web wallet for new users</strong> via <a href=\"https://www.npmjs.com/package/0xsequence\">0xsequence</a> npm package + <a href=\"https://sequence.app\">https://sequence.app</a> -- this option allows\ndevelopers to offer users an on-demand web3 wallet. No user install required -- any browser will <em>just work</em>, and users\ncan onboard with a familiar Web2 experience. Think of it like <em>Paypal / Stripe but for web3</em>.</p>\n</li>\n<li>\n<p><strong>Surf all of web3</strong> via <a href=\"https://chrome.google.com/webstore/detail/sequence-wallet/ocmccklecaalljlflmclidjeclpcpdim?hl=en\">Sequence Wallet Chrome Extension</a> -- users\nwho have the Sequence Wallet Chrome Extension installed are able to access any Ethereum-compatible Dapp on the Web :) Just like how MetaMask works,\nbut of course with a bunch of the benefits of Sequence.</p>\n</li>\n<li>\n<p><strong>Mobile phone access</strong> via <a href=\"https://walletconnect.com/\">WalletConnect</a> support within Sequence Wallet -- users are able to communicate with their wallets remotely\nvia the awesome Wallet Connect protocol. This is an excellent option if using Sequence Wallet from your mobile phone and want to connect\nyour wallet to a desktop dapp.</p>\n</li>\n</ol>\n<p>Sequence Wallet is built on Web Browser (W3C) and Ethereum web3 standards -- and is available everywhere that a modern browser is able to run.\nWe&#x27;ve carefully designed the wallet for simple onboarding, while maintaining security for users, and allowing users to progressively\nincrease the level of their security through additional keys and measures.</p>\n<p>This means, that if you&#x27;ve developed a dapp to work with MetaMask, then Sequence will work too without any changes. If you&#x27;re\nusing web3.js or ethers.js, Sequence will just work too. This is the beauty of interoperability on web3 :)</p>\n","isPage":true,"text":"\nSequence is a very flexible wallet which allow users multiple ways to connect / access their wallet. This includes:\n\n\nOn-demand Ethereum web wallet for new users via 0xsequence npm package + https://sequence.app -- this option allows\ndevelopers to offer users an on-demand web3 wallet. No user install required -- any browser will just work, and users\ncan onboard with a familiar Web2 experience. Think of it like Paypal / Stripe but for web3.\n\n\nSurf all of web3 via Sequence Wallet Chrome Extension -- users\nwho have the Sequence Wallet Chrome Extension installed are able to access any Ethereum-compatible Dapp on the Web :) Just like how MetaMask works,\nbut of course with a bunch of the benefits of Sequence.\n\n\nMobile phone access via WalletConnect support within Sequence Wallet -- users are able to communicate with their wallets remotely\nvia the awesome Wallet Connect protocol. This is an excellent option if using Sequence Wallet from your mobile phone and want to connect\nyour wallet to a desktop dapp.\n\n\nSequence Wallet is built on Web Browser (W3C) and Ethereum web3 standards -- and is available everywhere that a modern browser is able to run.\nWe&#x27;ve carefully designed the wallet for simple onboarding, while maintaining security for users, and allowing users to progressively\nincrease the level of their security through additional keys and measures.\nThis means, that if you&#x27;ve developed a dapp to work with MetaMask, then Sequence will work too without any changes. If you&#x27;re\nusing web3.js or ethers.js, Sequence will just work too. This is the beauty of interoperability on web3 :)\n","title":"Connect Wallet","titles":[]},"281":{"href":"/sdk/typescript/guides/connect-wallet#connecting-your-dapp-with-0xsequence","html":"\n<aside data-callout=\"info\"><strong data-callout-title=\"true\">A delightful wallet without requiring your users to install anything </strong><p>By integrating <code>0xsequence</code>, users may access your dapp without having to install any special extensions,\nand the wallet also works on mobile browsers!</p></aside>\n<p>Your dapp can connect to your user&#x27;s wallet by first instantiating the Wallet provider:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { sequence } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;0xsequence&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> projectAccessKey</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;&lt;access_key&gt;&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// This assumes your dapp runs on Ethereum mainnet</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> wallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sequence.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">initWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(projectAccessKey);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// If your dapp runs on a different EVM-compatible blockchain, you can specify its name</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// const wallet = sequence.initWallet(projectAccessKey, { defaultNetwork: &#x27;polygon&#x27; });</span></span></code></pre>\n<p>Note that is possible to retrieve the above instance by using the <code>getWallet()</code> method:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { sequence } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;0xsequence&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> wallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sequence.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span></code></pre>\n<p>Once you have the instance, you can connect to the wallet:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> connectDetails</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  app: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Your Dapp name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  authorize: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // And pass settings if you would like to customize further</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  settings: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    theme: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;light&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    bannerUrl: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://yoursite.com/banner-image.png&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 3:1 aspect ratio, 1200x400 works best</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    includedPaymentProviders: [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;moonpay&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ramp&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    defaultFundingCurrency: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;matic&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    lockFundingCurrencyToDefault: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">});</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;user accepted connect?&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, connectDetails.connected);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &quot;users signed connect proof to valid their account address:&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  connectDetails.proof</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<p>You can pick/limit the available sign in options with <code>signInOptions</code>. Will be ignored if user is already signed in.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> wallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sequence.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  app: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Your Dapp name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  settings: { signInOptions: [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;google&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">});</span></span></code></pre>\n<p>After you connect, you can use <code>wallet.openWallet()</code> to open the wallet:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> wallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sequence.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">openWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span></code></pre>\n<p>You can also optionally pass a path, and use <code>openWithOptions</code> intent to pass settings when you open the wallet:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> settings</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Settings</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  theme: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;dark&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  bannerUrl: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://yoursite.com/banner-image.png&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 3:1 aspect ratio, 1200x400 works best</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  includedPaymentProviders: [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;moonpay&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ramp&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  defaultFundingCurrency: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;eth&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  lockFundingCurrencyToDefault: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> intent</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> OpenWalletIntent</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  type: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;openWithOptions&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  options: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    settings: settings,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> wallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sequence.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> path</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;wallet/add-funds&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">openWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(path, intent);</span></span></code></pre>\n<aside data-callout=\"tip\"><strong data-callout-title=\"true\">Check out some example Dapp source code</strong><p>For a complete examples, see <a href=\"https://github.com/0xsequence/demo-dapp\">Demo-Dapp</a> and <a href=\"https://github.com/0xsequence/demo-dapp-web3modal\">Demo-Dapp-Web3Modal</a>.</p></aside>\n<div><p>Avoid Browsers Blocking Sequence Popup</p><p>Most browsers will block popups if they are called outside of user-triggered event handlers like <code>onclick</code>, or when it takes too long to process between the user action and the actual window</p><p>Read more about browser popup-blocking <a href=\"https://javascript.info/popup-windows#popup-blocking\">here</a>.</p></div>\n<p><img src=\"/img/sign-in-fresh.png\" alt=\"Sequence on-demand sign in\"/></p>\n<p><img src=\"/img/sign-in-connect.png\" alt=\"Sequence on-demand sign in, connect\"/></p>\n","isPage":false,"text":"\nA delightful wallet without requiring your users to install anything By integrating 0xsequence, users may access your dapp without having to install any special extensions,\nand the wallet also works on mobile browsers!\nYour dapp can connect to your user&#x27;s wallet by first instantiating the Wallet provider:\nimport { sequence } from &quot;0xsequence&quot;;\n \nconst projectAccessKey = &#x27;&lt;access_key&gt;&#x27;\n \n// This assumes your dapp runs on Ethereum mainnet\nconst wallet = sequence.initWallet(projectAccessKey);\n \n// If your dapp runs on a different EVM-compatible blockchain, you can specify its name\n// const wallet = sequence.initWallet(projectAccessKey, { defaultNetwork: &#x27;polygon&#x27; });\nNote that is possible to retrieve the above instance by using the getWallet() method:\nimport { sequence } from &quot;0xsequence&quot;;\nconst wallet = sequence.getWallet();\nOnce you have the instance, you can connect to the wallet:\nconst connectDetails = await wallet.connect({\n  app: &quot;Your Dapp name&quot;,\n  authorize: true,\n  // And pass settings if you would like to customize further\n  settings: {\n    theme: &quot;light&quot;,\n    bannerUrl: &quot;https://yoursite.com/banner-image.png&quot;, // 3:1 aspect ratio, 1200x400 works best\n    includedPaymentProviders: [&quot;moonpay&quot;, &quot;ramp&quot;],\n    defaultFundingCurrency: &quot;matic&quot;,\n    lockFundingCurrencyToDefault: false,\n  },\n});\n \nconsole.log(&quot;user accepted connect?&quot;, connectDetails.connected);\nconsole.log(\n  &quot;users signed connect proof to valid their account address:&quot;,\n  connectDetails.proof\n);\nYou can pick/limit the available sign in options with signInOptions. Will be ignored if user is already signed in.\nconst wallet = sequence.getWallet();\n \nawait wallet.connect({\n  app: &quot;Your Dapp name&quot;,\n  settings: { signInOptions: [&quot;google&quot;] },\n});\nAfter you connect, you can use wallet.openWallet() to open the wallet:\nconst wallet = sequence.getWallet();\nwallet.openWallet();\nYou can also optionally pass a path, and use openWithOptions intent to pass settings when you open the wallet:\nconst settings: Settings = {\n  theme: &quot;dark&quot;,\n  bannerUrl: &quot;https://yoursite.com/banner-image.png&quot;, // 3:1 aspect ratio, 1200x400 works best\n  includedPaymentProviders: [&quot;moonpay&quot;, &quot;ramp&quot;],\n  defaultFundingCurrency: &quot;eth&quot;,\n  lockFundingCurrencyToDefault: false,\n};\n \nconst intent: OpenWalletIntent = {\n  type: &quot;openWithOptions&quot;,\n  options: {\n    settings: settings,\n  },\n};\n \nconst wallet = sequence.getWallet();\n \nconst path = &quot;wallet/add-funds&quot;;\nwallet.openWallet(path, intent);\nCheck out some example Dapp source codeFor a complete examples, see Demo-Dapp and Demo-Dapp-Web3Modal.\nAvoid Browsers Blocking Sequence PopupMost browsers will block popups if they are called outside of user-triggered event handlers like onclick, or when it takes too long to process between the user action and the actual windowRead more about browser popup-blocking here.\n\n\n","title":"Connecting your dapp with 0xsequence","titles":["Connect Wallet"]},"282":{"href":"/sdk/typescript/guides/connect-wallet#wallet-login-and-connect-options","html":"\n<p>Dapps with direct sequence integration can specify a <code>ConnectOptions</code> object when running <code>wallet.connect()</code>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>const connectDetails = await wallet.connect(connectOptions)</span></span></code></pre>\n<p>The option parameters are described below.</p>\n","isPage":false,"text":"\nDapps with direct sequence integration can specify a ConnectOptions object when running wallet.connect().\nconst connectDetails = await wallet.connect(connectOptions)\nThe option parameters are described below.\n","title":"Wallet Login and Connect Options","titles":["Connect Wallet"]},"283":{"href":"/sdk/typescript/guides/connect-wallet#app","html":"\n<p>App name of the dapp which will be announced to user on connect screen.</p>\n<p>Example: <code>await wallet.connect({ app: &#x27;My defi app&#x27; })</code></p>\n","isPage":false,"text":"\nApp name of the dapp which will be announced to user on connect screen.\nExample: await wallet.connect({ app: &#x27;My defi app&#x27; })\n","title":"app","titles":["Connect Wallet","Wallet Login and Connect Options",null]},"284":{"href":"/sdk/typescript/guides/connect-wallet#appprotocol","html":"\n<p>Custom protocol for auth redirect (unity/unreal).</p>\n","isPage":false,"text":"\nCustom protocol for auth redirect (unity/unreal).\n","title":"appProtocol","titles":["Connect Wallet","Wallet Login and Connect Options",null]},"285":{"href":"/sdk/typescript/guides/connect-wallet#origin","html":"\n<p>Origin hint of the dapp&#x27;s host opening the wallet. This value will automatically be determined and verified for integrity, and can be omitted.</p>\n","isPage":false,"text":"\nOrigin hint of the dapp&#x27;s host opening the wallet. This value will automatically be determined and verified for integrity, and can be omitted.\n","title":"origin","titles":["Connect Wallet","Wallet Login and Connect Options",null]},"286":{"href":"/sdk/typescript/guides/connect-wallet#expiry","html":"\n<p>Expiry number (in seconds) that is used for ETHAuth proof. Default is 1 week in seconds.</p>\n<p>Example: <code>await wallet.connect({ expiry: 36000 })</code></p>\n","isPage":false,"text":"\nExpiry number (in seconds) that is used for ETHAuth proof. Default is 1 week in seconds.\nExample: await wallet.connect({ expiry: 36000 })\n","title":"expiry","titles":["Connect Wallet","Wallet Login and Connect Options",null]},"287":{"href":"/sdk/typescript/guides/connect-wallet#authorize","html":"\n<p><code>authorize</code> will perform an ETHAuth eip712 signing and return the proof to the dapp.</p>\n<p>Example: <code>await wallet.connect({ authorize: true })</code></p>\n","isPage":false,"text":"\nauthorize will perform an ETHAuth eip712 signing and return the proof to the dapp.\nExample: await wallet.connect({ authorize: true })\n","title":"authorize","titles":["Connect Wallet","Wallet Login and Connect Options",null]},"288":{"href":"/sdk/typescript/guides/connect-wallet#authorizenonce","html":"\n<p><code>authorizeNonce</code> is an optional number to be passed as ETHAuth&#x27;s nonce claim for replay protection.</p>\n<p>Example: <code>await wallet.connect({ authorizeNonce: 123 })</code></p>\n","isPage":false,"text":"\nauthorizeNonce is an optional number to be passed as ETHAuth&#x27;s nonce claim for replay protection.\nExample: await wallet.connect({ authorizeNonce: 123 })\n","title":"authorizeNonce","titles":["Connect Wallet","Wallet Login and Connect Options",null]},"289":{"href":"/sdk/typescript/guides/connect-wallet#refresh","html":"\n<p><code>refresh</code> flag will force a full re-connect (ie. disconnect then connect again).</p>\n<p>Example: <code>await wallet.connect({ refresh: true })</code></p>\n","isPage":false,"text":"\nrefresh flag will force a full re-connect (ie. disconnect then connect again).\nExample: await wallet.connect({ refresh: true })\n","title":"refresh","titles":["Connect Wallet","Wallet Login and Connect Options",null]},"290":{"href":"/sdk/typescript/guides/connect-wallet#keepwalletopened","html":"\n<p><code>keepWalletOpened</code> will keep the wallet window open after connecting. The default is to automatically close the wallet after connecting.</p>\n<p>Example: <code>await wallet.connect({ keepWalletOpened: true })</code></p>\n","isPage":false,"text":"\nkeepWalletOpened will keep the wallet window open after connecting. The default is to automatically close the wallet after connecting.\nExample: await wallet.connect({ keepWalletOpened: true })\n","title":"keepWalletOpened","titles":["Connect Wallet","Wallet Login and Connect Options",null]},"291":{"href":"/sdk/typescript/guides/connect-wallet#askforemail","html":"\n<p><code>askForEmail</code> will ask user whether they want to share the email they use to sign in to wallet while connecting, and will be returned in <code>connectDetails</code>.</p>\n<p>Example: <code>await wallet.connect({ askForEmail: true })</code></p>\n","isPage":false,"text":"\naskForEmail will ask user whether they want to share the email they use to sign in to wallet while connecting, and will be returned in connectDetails.\nExample: await wallet.connect({ askForEmail: true })\n","title":"askForEmail","titles":["Connect Wallet","Wallet Login and Connect Options",null]},"292":{"href":"/sdk/typescript/guides/connect-wallet#settingstheme","html":"\n<p>Name of one of the available theme provided by sequence the sequence wallet will be rendered with.</p>\n<p>Example: <code>await wallet.connect({ settings: {theme: &quot;light&quot;}}</code></p>\n","isPage":false,"text":"\nName of one of the available theme provided by sequence the sequence wallet will be rendered with.\nExample: await wallet.connect({ settings: {theme: &quot;light&quot;}}\n","title":"settings.theme","titles":["Connect Wallet","Wallet Login and Connect Options",null]},"293":{"href":"/sdk/typescript/guides/connect-wallet#settingsbannerurl","html":"\n<p>URL of a banner image users will see when connecting or logging into your dapp. The banner image should follow a 3:1 aspect ration where 1200x400 works best.</p>\n<p>Example: <code>await wallet.connect({ settings: {bannerUrl: &quot;https://yoursite.com/banner-image.png&quot;}}</code></p>\n","isPage":false,"text":"\nURL of a banner image users will see when connecting or logging into your dapp. The banner image should follow a 3:1 aspect ration where 1200x400 works best.\nExample: await wallet.connect({ settings: {bannerUrl: &quot;https://yoursite.com/banner-image.png&quot;}}\n","title":"settings.bannerUrl","titles":["Connect Wallet","Wallet Login and Connect Options",null]},"294":{"href":"/sdk/typescript/guides/connect-wallet#settingssigninwith","html":"\n<p>Specify <code>signInWith</code> with a supported auth provider to automatically sign in the user with that provider only. Will be ignored if user is already signed in.</p>\n<p>Example: <code>await wallet.connect({ settings: {signInWith: &quot;google&quot;}}</code></p>\n<p>Supported Providers: &quot;google&quot;, &quot;discord&quot;, &quot;twitch&quot;, &quot;apple&quot;, &quot;facebook&quot;</p>\n","isPage":false,"text":"\nSpecify signInWith with a supported auth provider to automatically sign in the user with that provider only. Will be ignored if user is already signed in.\nExample: await wallet.connect({ settings: {signInWith: &quot;google&quot;}}\nSupported Providers: &quot;google&quot;, &quot;discord&quot;, &quot;twitch&quot;, &quot;apple&quot;, &quot;facebook&quot;\n","title":"settings.signInWith","titles":["Connect Wallet","Wallet Login and Connect Options",null]},"295":{"href":"/sdk/typescript/guides/connect-wallet#settingssigninwithemail","html":"\n<p>Specify signInWithEmail with an email address to allow user automatically sign in with the email option. Will be ignored if user is already signed in.</p>\n<p>Example: <code>await wallet.connect({ settings: {signInWithEmail: &quot;user@email.com&quot;}}</code></p>\n","isPage":false,"text":"\nSpecify signInWithEmail with an email address to allow user automatically sign in with the email option. Will be ignored if user is already signed in.\nExample: await wallet.connect({ settings: {signInWithEmail: &quot;user@email.com&quot;}}\n","title":"settings.signInWithEmail","titles":["Connect Wallet","Wallet Login and Connect Options",null]},"296":{"href":"/sdk/typescript/guides/connect-wallet#settingssigninoptions","html":"\n<p>Specify signInOptions to pick/limit the available sign in options. Will be ignored if user is already signed in.</p>\n<p>Example: <code>await wallet.connect({ settings: {signInOptions: [&quot;email&quot;, &quot;google&quot;, &quot;apple&quot;]}}</code></p>\n","isPage":false,"text":"\nSpecify signInOptions to pick/limit the available sign in options. Will be ignored if user is already signed in.\nExample: await wallet.connect({ settings: {signInOptions: [&quot;email&quot;, &quot;google&quot;, &quot;apple&quot;]}}\n","title":"settings.signInOptions","titles":["Connect Wallet","Wallet Login and Connect Options",null]},"297":{"href":"/sdk/typescript/guides/connect-wallet#settingsincludedpaymentproviders","html":"\n<p>List of payment providers users will be able to access. By default, users can access all payment providers integrated in Sequence.</p>\n<p>Example: <code>await wallet.connect({ settings: {includedPaymentProviders: [&quot;moonpay&quot;, &quot;ramp&quot;]}}</code></p>\n","isPage":false,"text":"\nList of payment providers users will be able to access. By default, users can access all payment providers integrated in Sequence.\nExample: await wallet.connect({ settings: {includedPaymentProviders: [&quot;moonpay&quot;, &quot;ramp&quot;]}}\n","title":"settings.includedPaymentProviders","titles":["Connect Wallet","Wallet Login and Connect Options",null]},"298":{"href":"/sdk/typescript/guides/connect-wallet#settingsdefaultfundingcurrency","html":"\n<p>The tag of the default currency to show when users open the payment provider page. The currency has to be supported by the payment providers integrated in sequence.</p>\n<p>Example: <code>await wallet.connect({ settings: {defaultFundingCurrency: &quot;usdc&quot;}}</code></p>\n","isPage":false,"text":"\nThe tag of the default currency to show when users open the payment provider page. The currency has to be supported by the payment providers integrated in sequence.\nExample: await wallet.connect({ settings: {defaultFundingCurrency: &quot;usdc&quot;}}\n","title":"settings.defaultFundingCurrency","titles":["Connect Wallet","Wallet Login and Connect Options",null]},"299":{"href":"/sdk/typescript/guides/connect-wallet#settingsdefaultpurchaseamount","html":"\n<p>Use to specify a default purchase amount, as an integer, for prefilling the funding amount. If not specified, the default is 100.</p>\n<p>Example: <code>await wallet.connect({ settings: {defaultPurchaseAmount: 200}}</code></p>\n","isPage":false,"text":"\nUse to specify a default purchase amount, as an integer, for prefilling the funding amount. If not specified, the default is 100.\nExample: await wallet.connect({ settings: {defaultPurchaseAmount: 200}}\n","title":"settings.defaultPurchaseAmount","titles":["Connect Wallet","Wallet Login and Connect Options",null]},"300":{"href":"/sdk/typescript/guides/connect-wallet#settingslockfundingcurrencytodefault","html":"\n<p>Whether to only allow users to purchase the default currency specified by the <code>defaultFundingCurrency</code> option. If set to false, users will also be able to purchase other tokens. locking the default funding currency can be useful to prevent users from purchasing the wrong currency or the currency on the wrong chain.</p>\n<p>Example: <code>await wallet.connect({ settings: {defaultFundingCurrency: true}}</code></p>\n","isPage":false,"text":"\nWhether to only allow users to purchase the default currency specified by the defaultFundingCurrency option. If set to false, users will also be able to purchase other tokens. locking the default funding currency can be useful to prevent users from purchasing the wrong currency or the currency on the wrong chain.\nExample: await wallet.connect({ settings: {defaultFundingCurrency: true}}\n","title":"settings.lockFundingCurrencyToDefault","titles":["Connect Wallet","Wallet Login and Connect Options",null]},"301":{"href":"/sdk/typescript/guides/connect-wallet#connecting-your-dapp-with-web3js-or-ethersjs","html":"\n<p>For a full example of a dapp which supports Sequence (on-demand + chrome extension), Metamask, and WalletConnect\nplease see the <a href=\"https://github.com/0xsequence/demo-dapp-web3modal\">Demo-Dapp-Web3Modal repo</a>.</p>\n<p><img src=\"/img/web3modal.png\" alt=\"Sequence Web3Modal Integration\"/></p>\n","isPage":false,"text":"\nFor a full example of a dapp which supports Sequence (on-demand + chrome extension), Metamask, and WalletConnect\nplease see the Demo-Dapp-Web3Modal repo.\n\n","title":"Connecting your dapp with web3.js or ethers.js","titles":["Connect Wallet"]},"302":{"href":"/sdk/typescript/guides/connect-wallet#connecting-to-any-ethereum-dapp-with-the-sequence-wallet-chrome-extension","html":"\n<p>Sequence Chrome Extension: <a href=\"https://chrome.google.com/webstore/detail/sequence-wallet/ocmccklecaalljlflmclidjeclpcpdim?hl=en\">Install</a></p>\n<p><img src=\"/img/build/seq-chrome-store.png\" alt=\"Sequence Chrome Extension\"/></p>\n","isPage":false,"text":"\nSequence Chrome Extension: Install\n\n","title":"Connecting to any Ethereum dapp with the Sequence Wallet Chrome Extension","titles":["Connect Wallet"]},"303":{"href":"/sdk/typescript/guides/connect-wallet#connecting-via-walletconnect","html":"\n<p>Sequence already supports connecting to dapps via <a href=\"https://walletconnect.com\">WalletConnect</a>.\nIf your dapp already supports WalletConnect, and you don&#x27;t need Sequence-specific functionality, nothing more needs to be done.\nFrom the user&#x27;s perspective, the WalletConnect flow behaves as follows.</p>\n<p>Taking <a href=\"https://app.uniswap.org\">Uniswap</a> as an example, the user is prompted to connect their wallet using one of multiple possible protocols.</p>\n<img src=\"/img/walletconnect/connect-wallet.png\" alt=\"Uniswap swap page\"/>\n<p>The user selects the WalletConnect option.</p>\n<img src=\"/img/walletconnect/select-walletconnect.png\" alt=\"Uniswap select Wallet Connect option\"/>\n<p>A QR code is displayed, which can be scanned by Sequence.\nAlternatively, the user can also choose to copy the connection details via their OS clipboard.</p>\n<img src=\"/img/walletconnect/qr-code.png\" alt=\"Sign users in with a QR code using wallet connect\"/>\n<p>Back in the Sequence interface, the user chooses &quot;Scan&quot;.</p>\n<img src=\"/img/walletconnect/scan-qr-code.png\" alt=\"scan a QR code to enable wallet sign in\"/>\n<p>The QR code from the dapp is scanned.\nAlternatively, the code is pasted from the OS clipboard if the user chose that previously.</p>\n<img src=\"/img/walletconnect/scan.png\" alt=\"Camera to scan a Wallet Connect QR code\"/>\n<p>The user confirms the connection request.</p>\n<img src=\"/img/walletconnect/confirm.png\" alt=\"A user confirming a request with Wallet Connect\"/>\n<p>The connection succeeded, and the dapp is updated to reflect that.</p>\n<img src=\"/img/walletconnect/success.png\" alt=\"A success message for Wallet Connect\"/>\n<p>While connected, the dapp is able to make signing requests to Sequence.\nSequence will always prompt for confirmation from the user for any activity initiated by the dapp.</p>\n<img src=\"/img/walletconnect/activity.png\" alt=\"Confirmation by user activity to initiate a dapp transaction\"/>\n<p>Once the user has finished using the dapp, they can disconnect the wallet via the session menu.</p>\n<img src=\"/img/walletconnect/disconnect.png\" alt=\"A user disconnecting from the app using Wallet Connect\"/>","isPage":false,"text":"\nSequence already supports connecting to dapps via WalletConnect.\nIf your dapp already supports WalletConnect, and you don&#x27;t need Sequence-specific functionality, nothing more needs to be done.\nFrom the user&#x27;s perspective, the WalletConnect flow behaves as follows.\nTaking Uniswap as an example, the user is prompted to connect their wallet using one of multiple possible protocols.\n\nThe user selects the WalletConnect option.\n\nA QR code is displayed, which can be scanned by Sequence.\nAlternatively, the user can also choose to copy the connection details via their OS clipboard.\n\nBack in the Sequence interface, the user chooses &quot;Scan&quot;.\n\nThe QR code from the dapp is scanned.\nAlternatively, the code is pasted from the OS clipboard if the user chose that previously.\n\nThe user confirms the connection request.\n\nThe connection succeeded, and the dapp is updated to reflect that.\n\nWhile connected, the dapp is able to make signing requests to Sequence.\nSequence will always prompt for confirmation from the user for any activity initiated by the dapp.\n\nOnce the user has finished using the dapp, they can disconnect the wallet via the session menu.\n","title":"Connecting via WalletConnect","titles":["Connect Wallet"]},"304":{"href":"/sdk/typescript/guides/overview#install","html":"\n<p>Sequence.js is a modular web3 stack and smart wallet package for Ethereum chains. You can think of it similar to ethers.js, but tailored to the Sequence stack which streamlines common functions needed for blockchain-enabled game development. The sequence.js SDK is composed of several sub-packages combined into a single meta-package called <code>0xsequence</code>.\nTo add the SDK to your project, add a dependency on 0xsequence to your package.json:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 0xsequence</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ethers</span></span></code></pre>\n<p>or</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">pnpm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 0xsequence</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ethers</span></span></code></pre>\n<p>or</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">yarn</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> add</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 0xsequence</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ethers</span></span></code></pre>\n<p>If you know that your project only requires specific sub-packages, you can also depend on those directly with\n<code>npm add @0xsequence/&lt;sub-package name&gt;</code>.</p>\n<p>Your package.json should look something like this (actual version may vary):</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;my-dapp&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#B31D28;--shiki-dark:#FF938A;font-style:italic;--shiki-dark-font-style:italic\">  ...</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;dependencies&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;0xsequence&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;^1.0.0&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;ethers&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#B31D28;--shiki-dark:#FF938A;font-style:italic;--shiki-dark-font-style:italic\">^</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5.7</span><span style=\"color:#B31D28;--shiki-dark:#FF938A;font-style:italic;--shiki-dark-font-style:italic\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    ...</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  }</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}</span></span></code></pre>\n","isPage":true,"text":"\nSequence.js is a modular web3 stack and smart wallet package for Ethereum chains. You can think of it similar to ethers.js, but tailored to the Sequence stack which streamlines common functions needed for blockchain-enabled game development. The sequence.js SDK is composed of several sub-packages combined into a single meta-package called 0xsequence.\nTo add the SDK to your project, add a dependency on 0xsequence to your package.json:\nnpm install 0xsequence ethers\nor\npnpm install 0xsequence ethers\nor\nyarn add 0xsequence ethers\nIf you know that your project only requires specific sub-packages, you can also depend on those directly with\nnpm add @0xsequence/&lt;sub-package name&gt;.\nYour package.json should look something like this (actual version may vary):\n{\n  &quot;name&quot;: &quot;my-dapp&quot;,\n  ...\n  &quot;dependencies&quot;: {\n    &quot;0xsequence&quot;: &quot;^1.0.0&quot;,\n    &quot;ethers&quot;: ^5.7.0&quot;\n    ...\n  }\n}\n","title":"Install","titles":[null]},"305":{"href":"/sdk/typescript/guides/overview#cdn-distribution-as-native-js","html":"\n<p>Optionally, <code>0xsequence</code> can be installed as a JS script source (UMD distribution) via:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">script</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> src</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://cdn.ethers.io/lib/ethers-5.7.umd.min.js&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">script</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">script</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> src</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://unpkg.com/0xsequence@latest/dist/0xsequence.umd.min.js&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">script</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span></code></pre>","isPage":false,"text":"\nOptionally, 0xsequence can be installed as a JS script source (UMD distribution) via:\n&lt;script src=&quot;https://cdn.ethers.io/lib/ethers-5.7.umd.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://unpkg.com/0xsequence@latest/dist/0xsequence.umd.min.js&quot;&gt;&lt;/script&gt;","title":"CDN distribution as native JS","titles":[null,"Install",null]},"306":{"href":"/sdk/typescript/guides/send-batch-transactions#sending-a-batch-of-transactions","html":"</header>\n<p>Likewise, bundling multiple transactions to be sent in a single native transaction is equally as easy:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: recipient1Address,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  value: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000000000000000000</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: recipient2Address,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  value: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000000000000000000</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> response</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([transaction1, transaction2])</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(response)</span></span></code></pre>\n<p>The transactions don&#x27;t have to be the same token or even token standard either.\nYou can mix and match:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc20Interface</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function transfer(address _to, uint256 _value)&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc721Interface</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function safeTransferFrom(address _from, address _to, uint256 _tokenId)&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc1155Interface</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data)&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc20Data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc20Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;transfer&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [recipient2Address, amount2]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc721Data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc721Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;safeTransferFrom&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [address, recipient3Address, amount3]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc1155Data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc1155Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;safeTransferFrom&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [address, recipient4Address, token4Id, amount4, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transactions</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  { to: recipient1Address, value: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;1000000000000000000&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  { to: daiContractAddress, data: erc20Data },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  { to: erc721ContractAddress, data: erc721Data },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  { to: erc1155ContractAddress, data: erc1155Data }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> response</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(transactions)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(response)</span></span></code></pre>","isPage":true,"text":"\nLikewise, bundling multiple transactions to be sent in a single native transaction is equally as easy:\nconst transaction1 = {\n  to: recipient1Address,\n  value: 1000000000000000000\n}\n \nconst transaction2 = {\n  to: recipient2Address,\n  value: 1000000000000000000\n}\n \nconst signer = wallet.getSigner()\nconst response = await signer.sendTransaction([transaction1, transaction2])\nconsole.log(response)\nThe transactions don&#x27;t have to be the same token or even token standard either.\nYou can mix and match:\nconst erc20Interface = new ethers.utils.Interface([\n  &#x27;function transfer(address _to, uint256 _value)&#x27;\n])\nconst erc721Interface = new ethers.utils.Interface([\n  &#x27;function safeTransferFrom(address _from, address _to, uint256 _tokenId)&#x27;\n])\nconst erc1155Interface = new ethers.utils.Interface([\n  &#x27;function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data)&#x27;\n])\n \nconst erc20Data = erc20Interface.encodeFunctionData(\n  &#x27;transfer&#x27;, [recipient2Address, amount2]\n)\nconst erc721Data = erc721Interface.encodeFunctionData(\n  &#x27;safeTransferFrom&#x27;, [address, recipient3Address, amount3]\n)\nconst erc1155Data = erc1155Interface.encodeFunctionData(\n  &#x27;safeTransferFrom&#x27;, [address, recipient4Address, token4Id, amount4, &#x27;0x&#x27;]\n)\n \nconst transactions = [\n  { to: recipient1Address, value: &#x27;1000000000000000000&#x27; },\n  { to: daiContractAddress, data: erc20Data },\n  { to: erc721ContractAddress, data: erc721Data },\n  { to: erc1155ContractAddress, data: erc1155Data }\n]\n \nconst signer = wallet.getSigner()\nconst response = await signer.sendTransaction(transactions)\nconsole.log(response)","title":"Sending a Batch of Transactions","titles":[]},"307":{"href":"/sdk/typescript/guides/send-erc1155#sending-erc-1155-collectible-tokens","html":"</header>\n<p>Sending an ERC-1155 collectible is similar to sending an ERC-20 token.\nThe only notable difference is in the contract standard itself:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc1155Interface</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data)&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Encode the transfer of the collectible to recipient</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc1155Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;safeTransferFrom&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [address, recipientAddress, tokenId, amount, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: erc1155TokenAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txnResponse</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(transaction)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txnResponse)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span></code></pre>\n<p>With batching functionality, you can send multiple token transfers in a single native transaction:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc1155Interface</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data)&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Encode two different ERC-1155 token transfers</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> data1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc1155Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;safeTransferFrom&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [address, recipient1Address, token1Id, amount1, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> data2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc1155Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;safeTransferFrom&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [address, recipient2Address, token2Id, amount2, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: erc1155ContractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: data1</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: erc1155ContractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: data2</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Send a multiple transactions as a single bundle which is executed as one transaction on-chain.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txnResponse</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransactionBatch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([transaction1, transaction2])</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txnResponse)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span></code></pre>","isPage":true,"text":"\nSending an ERC-1155 collectible is similar to sending an ERC-20 token.\nThe only notable difference is in the contract standard itself:\nconst erc1155Interface = new ethers.utils.Interface([\n  &#x27;function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data)&#x27;\n])\n \n// Encode the transfer of the collectible to recipient\nconst address = await wallet.getAddress()\nconst data = erc1155Interface.encodeFunctionData(\n  &#x27;safeTransferFrom&#x27;, [address, recipientAddress, tokenId, amount, &#x27;0x&#x27;]\n)\n \nconst transaction = {\n  to: erc1155TokenAddress,\n  data\n}\n \nconst signer = wallet.getSigner()\nconst txnResponse = await signer.sendTransaction(transaction)\nconsole.log(txnResponse)\n \nWith batching functionality, you can send multiple token transfers in a single native transaction:\nconst erc1155Interface = new ethers.utils.Interface([\n  &#x27;function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data)&#x27;\n])\n \n// Encode two different ERC-1155 token transfers\nconst data1 = erc1155Interface.encodeFunctionData(\n  &#x27;safeTransferFrom&#x27;, [address, recipient1Address, token1Id, amount1, &#x27;0x&#x27;]\n)\nconst data2 = erc1155Interface.encodeFunctionData(\n  &#x27;safeTransferFrom&#x27;, [address, recipient2Address, token2Id, amount2, &#x27;0x&#x27;]\n)\n \nconst transaction1 = {\n  to: erc1155ContractAddress,\n  data: data1\n}\nconst transaction2 = {\n  to: erc1155ContractAddress,\n  data: data2\n}\n \n// Send a multiple transactions as a single bundle which is executed as one transaction on-chain.\nconst signer = wallet.getSigner()\nconst txnResponse = await signer.sendTransactionBatch([transaction1, transaction2])\nconsole.log(txnResponse)\n ","title":"Sending ERC-1155 (Collectible) Tokens","titles":[]},"308":{"href":"/sdk/typescript/guides/send-erc20#sending-erc-20-tokens","html":"</header>\n<p>You can ask the wallet to send a single ERC-20 token transfer:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc20Interface</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function transfer(address _to, uint256 _value)&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Encode an ERC-20 token transfer to recipient of the specified amount</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc20Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;transfer&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [recipientAddress, amount]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: daiContractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txnResponse</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(transaction)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txnResponse)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span></code></pre>\n<p>With batching functionality, you can send multiple token transfers in a single native transaction:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc20Interface</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function transfer(address _to, uint256 _value)&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Encode two different ERC-20 token transfers</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> data1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc20Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;transfer&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [recipient1Address, amount1]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> data2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc20Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;transfer&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [recipient2Address, amount2]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: daiContractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: data1</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: daiContractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: data2</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Send a multiple transactions as a single bundle which is executed as one transaction on-chain.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txnResponse</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([transaction1, transaction2])</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txnResponse)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span></code></pre>","isPage":true,"text":"\nYou can ask the wallet to send a single ERC-20 token transfer:\nconst erc20Interface = new ethers.utils.Interface([\n  &#x27;function transfer(address _to, uint256 _value)&#x27;\n])\n \n// Encode an ERC-20 token transfer to recipient of the specified amount\nconst data = erc20Interface.encodeFunctionData(\n  &#x27;transfer&#x27;, [recipientAddress, amount]\n)\n \nconst transaction = {\n  to: daiContractAddress,\n  data\n}\n \nconst signer = wallet.getSigner()\nconst txnResponse = await signer.sendTransaction(transaction)\nconsole.log(txnResponse)\n \nWith batching functionality, you can send multiple token transfers in a single native transaction:\nconst erc20Interface = new ethers.utils.Interface([\n  &#x27;function transfer(address _to, uint256 _value)&#x27;\n])\n \n// Encode two different ERC-20 token transfers\nconst data1 = erc20Interface.encodeFunctionData(\n  &#x27;transfer&#x27;, [recipient1Address, amount1]\n)\nconst data2 = erc20Interface.encodeFunctionData(\n  &#x27;transfer&#x27;, [recipient2Address, amount2]\n)\n \nconst transaction1 = {\n  to: daiContractAddress,\n  data: data1\n}\n \nconst transaction2 = {\n  to: daiContractAddress,\n  data: data2\n}\n \n// Send a multiple transactions as a single bundle which is executed as one transaction on-chain.\nconst signer = wallet.getSigner()\nconst txnResponse = await signer.sendTransaction([transaction1, transaction2])\nconsole.log(txnResponse)\n ","title":"Sending ERC-20 Tokens","titles":[]},"309":{"href":"/sdk/typescript/guides/send-erc721#sending-erc-721-nft-tokens","html":"</header>\n<p>Sending an ERC-721 NFT is similar to sending an ERC-20 token.\nThe only notable difference is in the contract standard itself:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc721Interface</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function safeTransferFrom(address _from, address _to, uint256 _tokenId)&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Encode the transfer of the NFT tokenId to recipient</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc721Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;safeTransferFrom&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [address, recipientAddress, tokenId]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: erc721TokenAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txnResponse</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(transaction)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txnResponse)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span></code></pre>\n<p>With batching functionality, you can send multiple token transfers in a single native transaction:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc721Interface</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function safeTransferFrom(address _from, address _to, uint256 _tokenId)&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Encode two different ERC-721 token transfers</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> data1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc721Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;safeTransferFrom&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [address, recipient1Address, amount1]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> data2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc721Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;safeTransferFrom&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [address, recipient2Address, amount2]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: erc721ContractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: data1</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: erc721ContractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: data2</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Send a multiple transactions as a single bundle which is executed as one transaction on-chain.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txnResponse</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransactionBatch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([transaction1, transaction2])</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txnResponse)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span></code></pre>","isPage":true,"text":"\nSending an ERC-721 NFT is similar to sending an ERC-20 token.\nThe only notable difference is in the contract standard itself:\nconst erc721Interface = new ethers.utils.Interface([\n  &#x27;function safeTransferFrom(address _from, address _to, uint256 _tokenId)&#x27;\n])\n \n// Encode the transfer of the NFT tokenId to recipient\nconst address = await wallet.getAddress()\nconst data = erc721Interface.encodeFunctionData(\n  &#x27;safeTransferFrom&#x27;, [address, recipientAddress, tokenId]\n)\n \nconst transaction = {\n  to: erc721TokenAddress,\n  data\n}\n \nconst signer = wallet.getSigner()\nconst txnResponse = await signer.sendTransaction(transaction)\nconsole.log(txnResponse)\n \nWith batching functionality, you can send multiple token transfers in a single native transaction:\nconst erc721Interface = new ethers.utils.Interface([\n  &#x27;function safeTransferFrom(address _from, address _to, uint256 _tokenId)&#x27;\n])\n \n// Encode two different ERC-721 token transfers\nconst data1 = erc721Interface.encodeFunctionData(\n  &#x27;safeTransferFrom&#x27;, [address, recipient1Address, amount1]\n)\nconst data2 = erc721Interface.encodeFunctionData(\n  &#x27;safeTransferFrom&#x27;, [address, recipient2Address, amount2]\n)\n \nconst transaction1 = {\n  to: erc721ContractAddress,\n  data: data1\n}\n \nconst transaction2 = {\n  to: erc721ContractAddress,\n  data: data2\n}\n \n// Send a multiple transactions as a single bundle which is executed as one transaction on-chain.\nconst signer = wallet.getSigner()\nconst txnResponse = await signer.sendTransactionBatch([transaction1, transaction2])\nconsole.log(txnResponse)\n ","title":"Sending ERC-721 (NFT) Tokens","titles":[]},"310":{"href":"/sdk/typescript/guides/send-transaction#sending-transactions","html":"</header>\n<p>Signing a transaction will only retrieve the signed payload.\nIf you want the wallet to actually dispatch the transaction to the network as well, that requires only a small modification to the previous example (note the change from <code>signTransactions</code> to <code>sendTransaction</code>):</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: recipientAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  value: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000000000000000000</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txnResponse</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(transaction)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txnResponse)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span></code></pre>","isPage":true,"text":"\nSigning a transaction will only retrieve the signed payload.\nIf you want the wallet to actually dispatch the transaction to the network as well, that requires only a small modification to the previous example (note the change from signTransactions to sendTransaction):\nconst transaction = {\n  to: recipientAddress,\n  value: 1000000000000000000\n}\n \nconst signer = wallet.getSigner()\nconst txnResponse = await signer.sendTransaction(transaction)\nconsole.log(txnResponse)\n ","title":"Sending Transactions","titles":[]},"311":{"href":"/sdk/typescript/guides/session-keys#no-wallet-confirmation-signatures","html":"</header>\n<p>It is possible to build an application where users sign messages without requiring a confirmation in their Sequence wallet every time. This is possible using <em>session keys</em>, or ephemeral keys.</p>\n<header>","isPage":true,"text":"\nIt is possible to build an application where users sign messages without requiring a confirmation in their Sequence wallet every time. This is possible using session keys, or ephemeral keys.\n","title":"No-Wallet-Confirmation Signatures","titles":[]},"312":{"href":"/sdk/typescript/guides/session-keys#session-keys","html":"</header>\n<p>Session keys are ephemeral private keys that can be generated and stored client-side, typically in a user&#x27;s local storage. They provide a convenient and secure way for users to authorize specific actions in a decentralized application without requiring them to confirm each action through their primary wallet.</p>\n<p>By signing a message with their primary wallet (e.g., Sequence Wallet), users can authorize a session key to act on their behalf for a limited time or scope. Applications can then interpret signed messages from the session key as if they were coming directly from the user&#x27;s wallet, streamlining the user experience.</p>\n<p>Session keys are particularly useful for applications that require frequent user interactions, as they help reduce the number of wallet confirmations needed, while still maintaining a secure and verifiable authentication process.</p>\n<header>","isPage":false,"text":"\nSession keys are ephemeral private keys that can be generated and stored client-side, typically in a user&#x27;s local storage. They provide a convenient and secure way for users to authorize specific actions in a decentralized application without requiring them to confirm each action through their primary wallet.\nBy signing a message with their primary wallet (e.g., Sequence Wallet), users can authorize a session key to act on their behalf for a limited time or scope. Applications can then interpret signed messages from the session key as if they were coming directly from the user&#x27;s wallet, streamlining the user experience.\nSession keys are particularly useful for applications that require frequent user interactions, as they help reduce the number of wallet confirmations needed, while still maintaining a secure and verifiable authentication process.\n","title":"Session Keys","titles":[]},"313":{"href":"/sdk/typescript/guides/session-keys#using-session-keys-with-sequence","html":"</header>\n","isPage":false,"text":"\n","title":"Using Session keys with Sequence","titles":[]},"314":{"href":"/sdk/typescript/guides/session-keys#1-initialize-sequence-wallet-and-connect","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Wallet } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/wallet&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { ethers } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;ethers&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> wallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Wallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> userAddress</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span></code></pre>\n","isPage":false,"text":"\nimport { Wallet } from &#x27;@0xsequence/wallet&#x27;\nimport { ethers } from &#x27;ethers&#x27;\n \nconst wallet = new Wallet()\nawait wallet.connect()\n \nconst signer = wallet.getSigner()\nconst userAddress = signer.getAddress()\n","title":"1. Initialize Sequence Wallet and Connect","titles":["Using Session keys with Sequence",null]},"315":{"href":"/sdk/typescript/guides/session-keys#2-generate-a-session-key","html":"\n<p>Create a new ephemeral private key, store it in local storage, and derive the associated address:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> sessionPrivateKey</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">randomBytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">localStorage.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setItem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;sessionPrivateKey&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">hexlify</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(sessionPrivateKey))</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> sessionWallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Wallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(sessionPrivateKey)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> sessionAddress</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sessionWallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span></code></pre>\n","isPage":false,"text":"\nCreate a new ephemeral private key, store it in local storage, and derive the associated address:\nconst sessionPrivateKey = ethers.utils.randomBytes(32)\nlocalStorage.setItem(&#x27;sessionPrivateKey&#x27;, ethers.utils.hexlify(sessionPrivateKey))\nconst sessionWallet = new ethers.Wallet(sessionPrivateKey)\nconst sessionAddress = await sessionWallet.getAddress()\n","title":"2. Generate a Session Key","titles":["Using Session keys with Sequence",null]},"316":{"href":"/sdk/typescript/guides/session-keys#3-sign-authorization-message","html":"\n<p>Sign a message with the user&#x27;s Sequence Wallet to authorize the session key:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> authorizationMessage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> `Authorize this device to play this game.`</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signature</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">signMessage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(authorizationMessage)</span></span></code></pre>\n","isPage":false,"text":"\nSign a message with the user&#x27;s Sequence Wallet to authorize the session key:\nconst authorizationMessage = `Authorize this device to play this game.`\nconst signature = await signer.signMessage(authorizationMessage)\n","title":"3. Sign Authorization Message","titles":["Using Session keys with Sequence",null]},"317":{"href":"/sdk/typescript/guides/session-keys#4-verify-authorization-signature","html":"\n<p>Verify the signature on the server or client side using Sequence utility functions:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> provider</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> chainId</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getChainId</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> isValid</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isValidMessageSignature</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  userAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  authorizationMessage,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  signature,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  chainId</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (isValid) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Session key authorized&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Session key not authorized&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nVerify the signature on the server or client side using Sequence utility functions:\nconst provider = wallet.getProvider()\nconst chainId = await wallet.getChainId()\n \nconst isValid = await wallet.utils.isValidMessageSignature(\n  userAddress,\n  authorizationMessage,\n  signature,\n  chainId\n)\n \nif (isValid) {\n  console.log(&#x27;Session key authorized&#x27;)\n} else {\n  console.log(&#x27;Session key not authorized&#x27;)\n}\n","title":"4. Verify Authorization Signature","titles":["Using Session keys with Sequence",null]},"318":{"href":"/sdk/typescript/guides/session-keys#5-sign-message-with-session-key","html":"\n<p>Use the session key to sign a message client-side without user interaction:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> message</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;Perform action without wallet confirmation&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> sessionSignature</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sessionWallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">signMessage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(message)</span></span></code></pre>\n","isPage":false,"text":"\nUse the session key to sign a message client-side without user interaction:\nconst message = &#x27;Perform action without wallet confirmation&#x27;\nconst sessionSignature = await sessionWallet.signMessage(message)\n","title":"5. Sign Message with Session Key","titles":["Using Session keys with Sequence",null]},"319":{"href":"/sdk/typescript/guides/session-keys#6-verify-session-signature","html":"\n<p>Verify the session signature on the server or client side:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> recoveredSessionAddress</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">verifyMessage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(message, sessionSignature)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (recoveredSessionAddress </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">===</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sessionAddress) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Session signature valid&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Session signature invalid&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p><strong>Note</strong>: You should retrieve the session key stored in local storage upon loading the application and only create a new session key if none can be found.</p>","isPage":false,"text":"\nVerify the session signature on the server or client side:\nconst recoveredSessionAddress = ethers.utils.verifyMessage(message, sessionSignature)\nif (recoveredSessionAddress === sessionAddress) {\n  console.log(&#x27;Session signature valid&#x27;)\n} else {\n  console.log(&#x27;Session signature invalid&#x27;)\n}\nNote: You should retrieve the session key stored in local storage upon loading the application and only create a new session key if none can be found.","title":"6. Verify Session Signature","titles":["Using Session keys with Sequence",null]},"320":{"href":"/sdk/unity/Advanced/clients#clients","html":"</header>\n<p>In the context of SequenceEthereum, a <code>Client</code> is defined by the <a href=\"https://github.com/0xsequence/sequence-unity/blob/master/Assets/SequenceSDK/Ethereum/Provider/IEthClient.cs\"><code>IEthClient</code> interface</a>.</p>\n<p>Creating a client requires a <code>Chain</code>. This will use our highly available and responsive Node Gateway service for your RPC requests; accessed using the API key from the Builder you&#x27;ve provided in your <code>SequenceConfig</code> scriptable object. If you prefer to use your own RPC URL, you can create a <code>SequenceEthClient</code> using a URL string as a parameter instead.</p>\n<p>You can create a client using this snippet:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>IEthClient client = new SequenceEthClient(Chain.Polygon);</span></span></code></pre>\n","isPage":true,"text":"\nIn the context of SequenceEthereum, a Client is defined by the IEthClient interface.\nCreating a client requires a Chain. This will use our highly available and responsive Node Gateway service for your RPC requests; accessed using the API key from the Builder you&#x27;ve provided in your SequenceConfig scriptable object. If you prefer to use your own RPC URL, you can create a SequenceEthClient using a URL string as a parameter instead.\nYou can create a client using this snippet:\nIEthClient client = new SequenceEthClient(Chain.Polygon);\n","title":"Clients","titles":[]},"321":{"href":"/sdk/unity/Advanced/clients#methods","html":"\n<p>As your connection point to Ethereum nodes, there are a number of methods that can be performed by a client, these can be found in the <code>IEthClient</code> interface and are implemented by <code>SequenceEthClient</code>.</p>\n<p>Note: with the exception of BalanceAt (potentially), most users will not need to make use of these methods, but we have included them in our documentation for completeness.</p>\n","isPage":false,"text":"\nAs your connection point to Ethereum nodes, there are a number of methods that can be performed by a client, these can be found in the IEthClient interface and are implemented by SequenceEthClient.\nNote: with the exception of BalanceAt (potentially), most users will not need to make use of these methods, but we have included them in our documentation for completeness.\n","title":"Methods","titles":["Clients"]},"322":{"href":"/sdk/unity/Advanced/clients#balanceat","html":"\n<p>Used to get the gas currency balance of a given wallet at a given blockNumber (in hexadecimal format provided as a string)</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>BigIntegar balance = await client.BalanceAt(wallet.GetAddress()); // By default, if no blockNumber string is provided, check the latest block</span></span>\n<span class=\"line\"><span>BigIntegar balance = await client.BalanceAt(wallet.GetAddress(), blockNumber);</span></span></code></pre>\n<p>Note: there are two special values for blockNumber. &quot;earliest&quot; will get the balance at the earliest block on the chain. &quot;latest&quot; will get the balance at the latest block on the chain and is the default parameter when none is provided. Otherwise, you&#x27;ll want to provide the blockNumber string in hexadecimal format.</p>\n<aside data-callout=\"warning\"><b><u>Unless you <i>really</i> want to get into the weeds with how things work, it is HIGHLY recommended to move on to the next page of the documentation at this point</u></b></aside>\n","isPage":false,"text":"\nUsed to get the gas currency balance of a given wallet at a given blockNumber (in hexadecimal format provided as a string)\nBigIntegar balance = await client.BalanceAt(wallet.GetAddress()); // By default, if no blockNumber string is provided, check the latest block\nBigIntegar balance = await client.BalanceAt(wallet.GetAddress(), blockNumber);\nNote: there are two special values for blockNumber. &quot;earliest&quot; will get the balance at the earliest block on the chain. &quot;latest&quot; will get the balance at the latest block on the chain and is the default parameter when none is provided. Otherwise, you&#x27;ll want to provide the blockNumber string in hexadecimal format.\nUnless you really want to get into the weeds with how things work, it is HIGHLY recommended to move on to the next page of the documentation at this point\n","title":"BalanceAt","titles":["Clients","Methods"]},"323":{"href":"/sdk/unity/Advanced/clients#blockbynumber","html":"\n<p>Used to get the <code>Block</code> with a specific block number.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>Block block = await client.BlockByNumber(blockNumber);</span></span></code></pre>\n<p>Note: as above, blockNumber should be in hexadecimal format or special values &quot;ealiest&quot; and &quot;latest&quot;</p>\n","isPage":false,"text":"\nUsed to get the Block with a specific block number.\nBlock block = await client.BlockByNumber(blockNumber);\nNote: as above, blockNumber should be in hexadecimal format or special values &quot;ealiest&quot; and &quot;latest&quot;\n","title":"BlockByNumber","titles":["Clients","Methods"]},"324":{"href":"/sdk/unity/Advanced/clients#blockbyhash","html":"\n<p>Used to get the <code>Block</code> by a specified block hash (string)</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>Block block = await client.BlockByHash(blockHash);</span></span></code></pre>\n","isPage":false,"text":"\nUsed to get the Block by a specified block hash (string)\nBlock block = await client.BlockByHash(blockHash);\n","title":"BlockByHash","titles":["Clients","Methods"]},"325":{"href":"/sdk/unity/Advanced/clients#blocknumber","html":"\n<p>Used to get the most recent block number in hexadecimal format</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>string blockNumber = await client.BlockNumber();</span></span></code></pre>\n","isPage":false,"text":"\nUsed to get the most recent block number in hexadecimal format\nstring blockNumber = await client.BlockNumber();\n","title":"BlockNumber","titles":["Clients","Methods"]},"326":{"href":"/sdk/unity/Advanced/clients#blockrange","html":"\n<p>Used to get a <code>List&lt;Block&gt;</code> from the blocks in a range specified by blockNumbers</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>List&lt;Block&gt; blockRange = await client.BlockRange(startingBlockNumber, endingBlockNumber);</span></span></code></pre>\n<p>Note: as above, blockNumber should be in hexadecimal format or special values &quot;ealiest&quot; and &quot;latest&quot;</p>\n","isPage":false,"text":"\nUsed to get a List&lt;Block&gt; from the blocks in a range specified by blockNumbers\nList&lt;Block&gt; blockRange = await client.BlockRange(startingBlockNumber, endingBlockNumber);\nNote: as above, blockNumber should be in hexadecimal format or special values &quot;ealiest&quot; and &quot;latest&quot;\n","title":"BlockRange","titles":["Clients","Methods"]},"327":{"href":"/sdk/unity/Advanced/clients#chainid","html":"\n<p>Used to get the chain id in hexadecimal format for the chain the client is connected to</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>string chainId = await client.ChainID();</span></span></code></pre>\n","isPage":false,"text":"\nUsed to get the chain id in hexadecimal format for the chain the client is connected to\nstring chainId = await client.ChainID();\n","title":"ChainID","titles":["Clients","Methods"]},"328":{"href":"/sdk/unity/Advanced/clients#codeat","html":"\n<p>Used to get the bytecode for a smart contract at a given address in hexadecimal format at a specified blockNumber</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>string code = await client.CodeAt(contractAddress, blockNumber);</span></span></code></pre>\n<p>Note: as above, blockNumber should be in hexadecimal format or special values &quot;ealiest&quot; and &quot;latest&quot;</p>\n","isPage":false,"text":"\nUsed to get the bytecode for a smart contract at a given address in hexadecimal format at a specified blockNumber\nstring code = await client.CodeAt(contractAddress, blockNumber);\nNote: as above, blockNumber should be in hexadecimal format or special values &quot;ealiest&quot; and &quot;latest&quot;\n","title":"CodeAt","titles":["Clients","Methods"]},"329":{"href":"/sdk/unity/Advanced/clients#estimategas","html":"\n<p>Given a <code>TransactionCall</code> estimate the amount of gas required for the transaction</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>BigIntegar gas = await client.EstimateGas(transactionCall);</span></span></code></pre>\n","isPage":false,"text":"\nGiven a TransactionCall estimate the amount of gas required for the transaction\nBigIntegar gas = await client.EstimateGas(transactionCall);\n","title":"EstimateGas","titles":["Clients","Methods"]},"330":{"href":"/sdk/unity/Advanced/clients#feehistory","html":"\n<p>Get a <code>FeeHistoryResult</code> for gas fees paid blockCount blocks since newestBlock (blockNumber)</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>FeeHistoryResult feeHistory = await client.FeeHistory(blockCount, newestBlock, new int[] { });</span></span></code></pre>\n<p>Note: as above, blockNumber should be in hexadecimal format or special values &quot;ealiest&quot; and &quot;latest&quot;</p>\n","isPage":false,"text":"\nGet a FeeHistoryResult for gas fees paid blockCount blocks since newestBlock (blockNumber)\nFeeHistoryResult feeHistory = await client.FeeHistory(blockCount, newestBlock, new int[] { });\nNote: as above, blockNumber should be in hexadecimal format or special values &quot;ealiest&quot; and &quot;latest&quot;\n","title":"FeeHistory","titles":["Clients","Methods"]},"331":{"href":"/sdk/unity/Advanced/clients#networkid","html":"\n<p>Used to get the chain id in integer format (as string) for the chain the client is connected to</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>string networkId = await client.NetworkId();</span></span></code></pre>\n","isPage":false,"text":"\nUsed to get the chain id in integer format (as string) for the chain the client is connected to\nstring networkId = await client.NetworkId();\n","title":"NetworkId","titles":["Clients","Methods"]},"332":{"href":"/sdk/unity/Advanced/clients#nonceat","html":"\n<p>Used to get the recommended nonce for a given <code>Address</code> at a given blockNumber (defaults to &quot;latest&quot;)</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>BigInteger nonce = await client.NonceAt(wallet.GetAddress()); // Nonce at latest</span></span>\n<span class=\"line\"><span>BigIntegar nonce = await client.NonceAt(wallet.GetAddress(), blockNumber);</span></span></code></pre>\n<p>Note: as above, blockNumber should be in hexadecimal format or special values &quot;ealiest&quot; and &quot;latest&quot;</p>\n","isPage":false,"text":"\nUsed to get the recommended nonce for a given Address at a given blockNumber (defaults to &quot;latest&quot;)\nBigInteger nonce = await client.NonceAt(wallet.GetAddress()); // Nonce at latest\nBigIntegar nonce = await client.NonceAt(wallet.GetAddress(), blockNumber);\nNote: as above, blockNumber should be in hexadecimal format or special values &quot;ealiest&quot; and &quot;latest&quot;\n","title":"NonceAt","titles":["Clients","Methods"]},"333":{"href":"/sdk/unity/Advanced/clients#sendrawtransaction","html":"\n<p>Given a signed transaction string, submit the transaction to the network and return a transaction hash</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>string transactionHash = await client.SendRawTransaction(signedTransactionString);</span></span></code></pre>\n","isPage":false,"text":"\nGiven a signed transaction string, submit the transaction to the network and return a transaction hash\nstring transactionHash = await client.SendRawTransaction(signedTransactionString);\n","title":"SendRawTransaction","titles":["Clients","Methods"]},"334":{"href":"/sdk/unity/Advanced/clients#suggestgasprice","html":"\n<p>Used to get a suggested gas price</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>BigIntegar gasPrice = await client.SuggestGasPrice();</span></span></code></pre>\n","isPage":false,"text":"\nUsed to get a suggested gas price\nBigIntegar gasPrice = await client.SuggestGasPrice();\n","title":"SuggestGasPrice","titles":["Clients","Methods"]},"335":{"href":"/sdk/unity/Advanced/clients#suggestgastipcap","html":"\n<p>Used to get the max suggested priority fee for gas</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>BigIntegar gasTipCap = await client.SuggestGasTipCap();</span></span></code></pre>\n","isPage":false,"text":"\nUsed to get the max suggested priority fee for gas\nBigIntegar gasTipCap = await client.SuggestGasTipCap();\n","title":"SuggestGasTipCap","titles":["Clients","Methods"]},"336":{"href":"/sdk/unity/Advanced/clients#transactionbyhash","html":"\n<p>Used to get a <code>Transaction</code> by transaction hash</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>Transaction transaction = await client.TransactionByHash(transactionHash);</span></span></code></pre>\n","isPage":false,"text":"\nUsed to get a Transaction by transaction hash\nTransaction transaction = await client.TransactionByHash(transactionHash);\n","title":"TransactionByHash","titles":["Clients","Methods"]},"337":{"href":"/sdk/unity/Advanced/clients#transactioncount","html":"\n<p>Used to get the number of transactions in a block by block hash</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>BigIntegar transactionCount = await client.TransactionCount(blockHash);</span></span></code></pre>\n","isPage":false,"text":"\nUsed to get the number of transactions in a block by block hash\nBigIntegar transactionCount = await client.TransactionCount(blockHash);\n","title":"TransactionCount","titles":["Clients","Methods"]},"338":{"href":"/sdk/unity/Advanced/clients#waitfortransactionreceipt","html":"\n<p>Provide a transaction hash in order to wait for and return the <code>TransactionReceipt</code></p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>TransactionReceipt receipt = await client.WaitForTransactionReceipt(transactionHash);</span></span></code></pre>","isPage":false,"text":"\nProvide a transaction hash in order to wait for and return the TransactionReceipt\nTransactionReceipt receipt = await client.WaitForTransactionReceipt(transactionHash);","title":"WaitForTransactionReceipt","titles":["Clients","Methods"]},"339":{"href":"/sdk/unity/Advanced/contracts#contracts","html":"</header>\n<p>Creating a <code>Contract</code> object for an already deployed contract is rather straightforward.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>Contract contract = new Contract(contractAddress, abi);</span></span></code></pre>\n<p>While it is not strictly required, it is <i>highly</i> recommended to provide the contract ABI as a string when creating a contract object. Failure to do so will make it so that you cannot fully take advantage of our ABI encoding and decoding.\nIf you do chose to go down this route, you will need to provide the entire function signature (function name + parameter types in brackets - e.g. transfer(address,uint256) for the ERC20 transfer method) when calling a function or querying the contract and you will only ever receive a string as a response to queries.</p>\n","isPage":true,"text":"\nCreating a Contract object for an already deployed contract is rather straightforward.\nContract contract = new Contract(contractAddress, abi);\nWhile it is not strictly required, it is highly recommended to provide the contract ABI as a string when creating a contract object. Failure to do so will make it so that you cannot fully take advantage of our ABI encoding and decoding.\nIf you do chose to go down this route, you will need to provide the entire function signature (function name + parameter types in brackets - e.g. transfer(address,uint256) for the ERC20 transfer method) when calling a function or querying the contract and you will only ever receive a string as a response to queries.\n","title":"Contracts","titles":[]},"340":{"href":"/sdk/unity/Advanced/contracts#calling-smart-contract-functions","html":"\n<p>To call a smart contract, you&#x27;ll use the <code>CallFunction</code> method to create a <code>CallContractFunction</code> object which will determine the appropriate gasPrice, gasLimit, nonce, and data to include in a newly assembled <code>EthTransaction</code> when provided with a client and a <code>ContractCall</code> object to the <code>Create</code> async Task</p>\n<p>An example of calling a smart contract would look like:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>Contract erc20Contract = new Contract(contractAddress, contractAbi); // We&#x27;ll use the well-known ERC20 contract as our example case</span></span>\n<span class=\"line\"><span>TransactionReceipt receipt = await erc20Contract.CallFunction(&quot;transfer&quot;, toAddress, amountAsBigInteger).SendTransactionMethodAndWaitForReceipt(wallet, client);</span></span></code></pre>\n<p>Note: if you don&#x27;t want to wait for the receipt, you can use <code>SendTransactionMethod</code> instead.</p>\n<p>Alternatively, if you want to simply create the <code>EthTransaction</code> and send it at a later time, you can use the <code>CallContractFunction</code> object from <code>CallFunction</code> directly.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>Contract erc20Contract = new Contract(contractAddress, contractAbi); // We&#x27;ll use the well-known ERC20 contract as our example case</span></span>\n<span class=\"line\"><span>EthTransaction transaction = await erc20Contract.CallFunction(&quot;transfer&quot;, toAddress, amountAsBigInteger).Create(client, new ContractCall(wallet.GetAddress()));</span></span>\n<span class=\"line\"><span>TransactionReceipt receipt = await wallet.SendTransactionAndWaitForReceipt(client, transaction);</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>// or </span></span>\n<span class=\"line\"><span>CallContractFunction transactionCreator = erc20Contract.CallFunction(&quot;transfer&quot;, toAddress, amountAsBigInteger);</span></span>\n<span class=\"line\"><span>EthTransaction transaction = await transactionCreator.Create(client, new ContractCall(wallet.GetAddress()));</span></span>\n<span class=\"line\"><span>TransactionReceipt receipt = await wallet.SendTransactionAndWaitForReceipt(client, transaction);</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>// or </span></span>\n<span class=\"line\"><span>CallContractFunction transactionCreator = erc20Contract.CallFunction(&quot;transfer&quot;, toAddress, amountAsBigInteger);</span></span>\n<span class=\"line\"><span>TransactionReceipt receipt = await transactionCreator.SendTransactionMethodAndWaitForReceipt(wallet, client);</span></span></code></pre>\n<p>You&#x27;ll notice that the <code>CallFunction</code> method accepts an arbitrary number of arguments. You&#x27;ll want to provide the arguments in the order they are provided in the ABI/function signature.</p>\n","isPage":false,"text":"\nTo call a smart contract, you&#x27;ll use the CallFunction method to create a CallContractFunction object which will determine the appropriate gasPrice, gasLimit, nonce, and data to include in a newly assembled EthTransaction when provided with a client and a ContractCall object to the Create async Task\nAn example of calling a smart contract would look like:\nContract erc20Contract = new Contract(contractAddress, contractAbi); // We&#x27;ll use the well-known ERC20 contract as our example case\nTransactionReceipt receipt = await erc20Contract.CallFunction(&quot;transfer&quot;, toAddress, amountAsBigInteger).SendTransactionMethodAndWaitForReceipt(wallet, client);\nNote: if you don&#x27;t want to wait for the receipt, you can use SendTransactionMethod instead.\nAlternatively, if you want to simply create the EthTransaction and send it at a later time, you can use the CallContractFunction object from CallFunction directly.\nContract erc20Contract = new Contract(contractAddress, contractAbi); // We&#x27;ll use the well-known ERC20 contract as our example case\nEthTransaction transaction = await erc20Contract.CallFunction(&quot;transfer&quot;, toAddress, amountAsBigInteger).Create(client, new ContractCall(wallet.GetAddress()));\nTransactionReceipt receipt = await wallet.SendTransactionAndWaitForReceipt(client, transaction);\n\n// or \nCallContractFunction transactionCreator = erc20Contract.CallFunction(&quot;transfer&quot;, toAddress, amountAsBigInteger);\nEthTransaction transaction = await transactionCreator.Create(client, new ContractCall(wallet.GetAddress()));\nTransactionReceipt receipt = await wallet.SendTransactionAndWaitForReceipt(client, transaction);\n\n// or \nCallContractFunction transactionCreator = erc20Contract.CallFunction(&quot;transfer&quot;, toAddress, amountAsBigInteger);\nTransactionReceipt receipt = await transactionCreator.SendTransactionMethodAndWaitForReceipt(wallet, client);\nYou&#x27;ll notice that the CallFunction method accepts an arbitrary number of arguments. You&#x27;ll want to provide the arguments in the order they are provided in the ABI/function signature.\n","title":"Calling Smart Contract Functions","titles":["Contracts"]},"341":{"href":"/sdk/unity/Advanced/contracts#understanding-data-type-mappings","html":"\n<p>When interacting with smart contracts, it is important to understand how EVM datatypes are mapped to C# datatypes in the SequenceEthereum library.</p>\n<p>bool -&gt; bool</p>\n<p>Integers (int, uint, int256, uint8, ...) -&gt; BigInteger</p>\n<p>address -&gt; Address or string</p>\n<p>string -&gt; string</p>\n<p>Fixed bytes (bytesN for any N value) -&gt; FixedByte</p>\n<p>bytes -&gt; byte[]</p>\n<p>If you were to, for example, provide a string where the ABI expects an Integer, you will receive an exception, even if that string could be converted into an integer.</p>\n","isPage":false,"text":"\nWhen interacting with smart contracts, it is important to understand how EVM datatypes are mapped to C# datatypes in the SequenceEthereum library.\nbool -&gt; bool\nIntegers (int, uint, int256, uint8, ...) -&gt; BigInteger\naddress -&gt; Address or string\nstring -&gt; string\nFixed bytes (bytesN for any N value) -&gt; FixedByte\nbytes -&gt; byte[]\nIf you were to, for example, provide a string where the ABI expects an Integer, you will receive an exception, even if that string could be converted into an integer.\n","title":"Understanding data type mappings","titles":["Contracts"]},"342":{"href":"/sdk/unity/Advanced/contracts#querying-contracts","html":"\n<p>To query a smart contract (read data from it), you&#x27;ll use the <code>SendQuery&lt;T&gt;</code> method to query the contract and return the result as type T (if possible).\nAn example of querying a smart contract would look like:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>Contract erc20Contract = new Contract(contractAddress, contractAbi); // We&#x27;ll use the well-known ERC20 contract as our example case</span></span>\n<span class=\"line\"><span>BigIntegar balance = await erc20Contract.SendQuery&lt;BigIntegar&gt;(client, &quot;balanceOf&quot;, address);</span></span></code></pre>\n<p>Alternatively, if you wish to simply construct the query and send it at a later time, you can use <code>QueryContract&lt;T&gt;</code> to create a delegate.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>Contract erc20Contract = new Contract(contractAddress, contractAbi); // We&#x27;ll use the well-known ERC20 contract as our example case</span></span>\n<span class=\"line\"><span>QueryContractMessageSender&lt;BigIntegar&gt; balanceQuery = erc20Contract.QueryContract&lt;BigIntegar&gt;(&quot;balanceOf&quot;, address);</span></span>\n<span class=\"line\"><span>BigIntegar balance = await balanceQuery(client);</span></span>\n<span class=\"line\"><span>// or</span></span>\n<span class=\"line\"><span>BigIntegar balance = await balanceQuery.SendQuery(client);</span></span></code></pre>\n","isPage":false,"text":"\nTo query a smart contract (read data from it), you&#x27;ll use the SendQuery&lt;T&gt; method to query the contract and return the result as type T (if possible).\nAn example of querying a smart contract would look like:\nContract erc20Contract = new Contract(contractAddress, contractAbi); // We&#x27;ll use the well-known ERC20 contract as our example case\nBigIntegar balance = await erc20Contract.SendQuery&lt;BigIntegar&gt;(client, &quot;balanceOf&quot;, address);\nAlternatively, if you wish to simply construct the query and send it at a later time, you can use QueryContract&lt;T&gt; to create a delegate.\nContract erc20Contract = new Contract(contractAddress, contractAbi); // We&#x27;ll use the well-known ERC20 contract as our example case\nQueryContractMessageSender&lt;BigIntegar&gt; balanceQuery = erc20Contract.QueryContract&lt;BigIntegar&gt;(&quot;balanceOf&quot;, address);\nBigIntegar balance = await balanceQuery(client);\n// or\nBigIntegar balance = await balanceQuery.SendQuery(client);\n","title":"Querying Contracts","titles":["Contracts"]},"343":{"href":"/sdk/unity/Advanced/contracts#deploying-contracts","html":"\n<p>If you want to deploy a contract, you can use the <code>ContractDeployer</code></p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>ContractDeploymentResult deploymentResult = await ContractDeployer.Deploy(client, wallet, contractBytecodeAsString);</span></span>\n<span class=\"line\"><span>string newlyDeployedContractAddress = deploymentResult.Receipt.contractAddress;</span></span></code></pre>","isPage":false,"text":"\nIf you want to deploy a contract, you can use the ContractDeployer\nContractDeploymentResult deploymentResult = await ContractDeployer.Deploy(client, wallet, contractBytecodeAsString);\nstring newlyDeployedContractAddress = deploymentResult.Receipt.contractAddress;","title":"Deploying Contracts","titles":["Contracts"]},"344":{"href":"/sdk/unity/Advanced/introduction#advanced-blockchain-interactions","html":"</header>\n","isPage":true,"text":"\n","title":"Advanced Blockchain Interactions","titles":[]},"345":{"href":"/sdk/unity/Advanced/introduction#introduction","html":"\n<p>For advanced users with experience developing applications on EVM-based blockchains, we&#x27;ve provided our own lightweight, custom-made for Unity, Ethereum library: <a href=\"https://github.com/0xsequence/sequence-unity/tree/master/Assets/SequenceSDK/Ethereum\">SequenceEthereum</a>.\nSequenceEthereum should provide everything you need to build your Unity app on the EVM, without all the extra bells and whistles that the popular <a href=\"https://github.com/Nethereum/Nethereum\">Nethereum</a> library provides.</p>\n<p>While SequenceEthereum is heavily tested, in general, when working with asynchronous methods in the library, you should consider them to be &quot;unsafe&quot;, in that they <i>may</i> throw Exceptions when used improperly.\nIn general, wrapping async calls that can potentially throw Exceptions in try catch blocks is a best practice; particularly in Unity, where <code>Tasks</code> can fail silently when throwing exceptions - making debugging difficult when not wrapping calls in try catch blocks.</p>\n","isPage":false,"text":"\nFor advanced users with experience developing applications on EVM-based blockchains, we&#x27;ve provided our own lightweight, custom-made for Unity, Ethereum library: SequenceEthereum.\nSequenceEthereum should provide everything you need to build your Unity app on the EVM, without all the extra bells and whistles that the popular Nethereum library provides.\nWhile SequenceEthereum is heavily tested, in general, when working with asynchronous methods in the library, you should consider them to be &quot;unsafe&quot;, in that they may throw Exceptions when used improperly.\nIn general, wrapping async calls that can potentially throw Exceptions in try catch blocks is a best practice; particularly in Unity, where Tasks can fail silently when throwing exceptions - making debugging difficult when not wrapping calls in try catch blocks.\n","title":"Introduction","titles":["Advanced Blockchain Interactions"]},"346":{"href":"/sdk/unity/Advanced/introduction#important-components","html":"\n<p>When working with the SequenceEthereum library it can be helpful to understand some of the main &quot;components&quot; and how they logically fit together.</p>\n","isPage":false,"text":"\nWhen working with the SequenceEthereum library it can be helpful to understand some of the main &quot;components&quot; and how they logically fit together.\n","title":"Important Components","titles":["Advanced Blockchain Interactions","Introduction"]},"347":{"href":"/sdk/unity/Advanced/introduction#client","html":"\n<p>Clients handle the connection to blockchain networks, making various RPC requests. Any time you wish to query the blockchain or submit a transaction, you will need a client. As a rule of thumb, if a method requires a client, you should expect that you will be making a web request and will need to work with async tasks and be prepared to catch any exceptions that are thrown.</p>\n","isPage":false,"text":"\nClients handle the connection to blockchain networks, making various RPC requests. Any time you wish to query the blockchain or submit a transaction, you will need a client. As a rule of thumb, if a method requires a client, you should expect that you will be making a web request and will need to work with async tasks and be prepared to catch any exceptions that are thrown.\n","title":"Client","titles":["Advanced Blockchain Interactions","Introduction","Important Components"]},"348":{"href":"/sdk/unity/Advanced/introduction#sequencewalletiwallet","html":"\n<p>A wallet keeps track of its own private/public key pair and address and is responsible for providing its private key to the signer when signing transactions.</p>\n","isPage":false,"text":"\nA wallet keeps track of its own private/public key pair and address and is responsible for providing its private key to the signer when signing transactions.\n","title":"Sequence.Wallet.IWallet","titles":["Advanced Blockchain Interactions","Introduction","Important Components"]},"349":{"href":"/sdk/unity/Advanced/introduction#transaction","html":"\n<p>A transaction, as implemented in <code>EthTransaction</code>, contains all the data and parameters for an EVM transaction. The object is used for initiating its <a href=\"https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/\">RLP encoding</a> (transactions must be signed and RLP encoded when submitted).</p>\n<p>Note that all transactions are encoded with a chain id included to protect against replay attacks, see <a href=\"https://eips.ethereum.org/EIPS/eip-155\">EIP-155</a>.</p>\n","isPage":false,"text":"\nA transaction, as implemented in EthTransaction, contains all the data and parameters for an EVM transaction. The object is used for initiating its RLP encoding (transactions must be signed and RLP encoded when submitted).\nNote that all transactions are encoded with a chain id included to protect against replay attacks, see EIP-155.\n","title":"Transaction","titles":["Advanced Blockchain Interactions","Introduction","Important Components"]},"350":{"href":"/sdk/unity/Advanced/introduction#contract","html":"\n<p>A contract is responsible for creating transactions (for method calls) and messages (for queries) agaisnt it. These transactions are later signed by the wallet and submitted (along with query messages) using a client.</p>","isPage":false,"text":"\nA contract is responsible for creating transactions (for method calls) and messages (for queries) agaisnt it. These transactions are later signed by the wallet and submitted (along with query messages) using a client.","title":"Contract","titles":["Advanced Blockchain Interactions","Introduction","Important Components"]},"351":{"href":"/sdk/unity/Advanced/tokens#tokens","html":"</header>\n<p>Since their use is so ubiquitous, we&#x27;ve provided <code>ERC20</code>, <code>ERC721</code>, and <code>ERC1155</code> wrappers of the <code>Contract</code> class with pre-defined ABIs for your convenience. When interacting with tokens, it is recommended to use these.</p>\n<p>Any of these contract wrappers can be created via a standard constructor requiring only the contract address. For example:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>ERC20 erc20 = new ERC20(contractAddress);</span></span></code></pre>\n<p>You may also provide your own ABI should you need to rewrite our default; however, doing so may require you to modify or rewrite the contract wrappers.</p>\n<p>An example of querying:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>string symbol = await erc20.Symbol(client);</span></span>\n<span class=\"line\"><span>BigIntegar balance = await erc20.BalanceOf(client, address);</span></span></code></pre>\n<p>An example of sending a transaction:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>TransactionReceipt receipt = await erc20.Mint(toAddress, DecimalNormalizer.NormalizeAsBigInteger(1)).SendTransactionMethodAndWaitForReceipt(wallet, client);</span></span></code></pre>\n<p>As a wrapper of <code>Contract</code>, you also have the option to not create the <code>EthTransaction</code> and send later on.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>CallContractFunction transactionCreator = erc20.Transfer(toAddress, DecimalNormalizer.NormalizeAsBigInteger(1));</span></span>\n<span class=\"line\"><span>EthTransaction transaction = await transactionCreator.Create(client, new ContractCall(wallet.GetAddress()));</span></span>\n<span class=\"line\"><span>TransactionReceipt receipt = await wallet.SendTransactionAndWaitForReceipt(client, transaction);</span></span></code></pre>\n<header>","isPage":true,"text":"\nSince their use is so ubiquitous, we&#x27;ve provided ERC20, ERC721, and ERC1155 wrappers of the Contract class with pre-defined ABIs for your convenience. When interacting with tokens, it is recommended to use these.\nAny of these contract wrappers can be created via a standard constructor requiring only the contract address. For example:\nERC20 erc20 = new ERC20(contractAddress);\nYou may also provide your own ABI should you need to rewrite our default; however, doing so may require you to modify or rewrite the contract wrappers.\nAn example of querying:\nstring symbol = await erc20.Symbol(client);\nBigIntegar balance = await erc20.BalanceOf(client, address);\nAn example of sending a transaction:\nTransactionReceipt receipt = await erc20.Mint(toAddress, DecimalNormalizer.NormalizeAsBigInteger(1)).SendTransactionMethodAndWaitForReceipt(wallet, client);\nAs a wrapper of Contract, you also have the option to not create the EthTransaction and send later on.\nCallContractFunction transactionCreator = erc20.Transfer(toAddress, DecimalNormalizer.NormalizeAsBigInteger(1));\nEthTransaction transaction = await transactionCreator.Create(client, new ContractCall(wallet.GetAddress()));\nTransactionReceipt receipt = await wallet.SendTransactionAndWaitForReceipt(client, transaction);\n","title":"Tokens","titles":[]},"352":{"href":"/sdk/unity/Advanced/tokens#bonus-ownable","html":"</header>\n<p>Similar to with tokens, we have also provided an <code>Ownable</code> wrapper for your convenience as well which has a pre-defined ABI for methods implementing the <a href=\"https://docs.openzeppelin.com/contracts/2.x/access-control#ownership-and-ownable\">Ownable</a> interface.\n<code>ERC20</code>, <code>ERC721</code>, and <code>ERC1155</code> all inherit from this, but we encourage you to use <code>Ownable</code> whenever you wish to interact with the Ownable methods on any arbitrary contract for convenience and safety.</p>","isPage":false,"text":"\nSimilar to with tokens, we have also provided an Ownable wrapper for your convenience as well which has a pre-defined ABI for methods implementing the Ownable interface.\nERC20, ERC721, and ERC1155 all inherit from this, but we encourage you to use Ownable whenever you wish to interact with the Ownable methods on any arbitrary contract for convenience and safety.","title":"Bonus: Ownable","titles":[]},"353":{"href":"/sdk/unity/Advanced/transfers#transfers","html":"</header>\n<p>In order to transfer ETH (or the gas currency for your network), it is recommended to use <code>TranferEth.CreateTransaction</code></p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>EthTransaction transferTransaction = await TransferEth.CreateTransaction(client, wallet, recipientAddress, DecimalNormalizer.Normalize(1));</span></span>\n<span class=\"line\"><span>TransactionReceipt receipt = await wallet.SendTransactionAndWaitForReceipt(client, transferTransaction);</span></span></code></pre>\n<p>Behind the scenes, this will create a <code>GasLimitEstimator</code> which will construct the transaction for you - including determining the appropriate gasPrice, gasLimit, and nonce.</p>","isPage":true,"text":"\nIn order to transfer ETH (or the gas currency for your network), it is recommended to use TranferEth.CreateTransaction\nEthTransaction transferTransaction = await TransferEth.CreateTransaction(client, wallet, recipientAddress, DecimalNormalizer.Normalize(1));\nTransactionReceipt receipt = await wallet.SendTransactionAndWaitForReceipt(client, transferTransaction);\nBehind the scenes, this will create a GasLimitEstimator which will construct the transaction for you - including determining the appropriate gasPrice, gasLimit, and nonce.","title":"Transfers","titles":[]},"354":{"href":"/sdk/unity/Advanced/wallets#wallets","html":"</header>\n<p>In the context of SequenceEthereum, a <code>Wallet</code> is defined by the <code>IWallet</code> interface. There are currently 2 implementations of the <code>IWallet</code> interface in this SDK.</p>\n","isPage":true,"text":"\nIn the context of SequenceEthereum, a Wallet is defined by the IWallet interface. There are currently 2 implementations of the IWallet interface in this SDK.\n","title":"Wallets","titles":[]},"355":{"href":"/sdk/unity/Advanced/wallets#1-eoawallet","html":"\n<p><code>EOAWallet</code> is a standard <a href=\"https://ethereum.stackexchange.com/questions/5828/what-is-an-eoa-account\">EOA wallet</a> for EVM chains.</p>\n<p>An EOAWallet is easily created:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>IWallet eoaWallet = new EOAWallet(); // This will generate a cryptographically random private key</span></span>\n<span class=\"line\"><span>IWallet eoaWallet = new EOAWallet(privateKeyString); // Create a wallet using a previously generated private key</span></span></code></pre>\n","isPage":false,"text":"\nEOAWallet is a standard EOA wallet for EVM chains.\nAn EOAWallet is easily created:\nIWallet eoaWallet = new EOAWallet(); // This will generate a cryptographically random private key\nIWallet eoaWallet = new EOAWallet(privateKeyString); // Create a wallet using a previously generated private key\n","title":"1. EOAWallet","titles":["Wallets"]},"356":{"href":"/sdk/unity/Advanced/wallets#2-sequencewallettoeoawalletadapter","html":"\n<p><code>SequenceWalletToEOAWalletAdapter</code> is an adapter that allows you to use a <code>SequenceWallet</code> with the same <code>IWallet</code> interface as an <code>EOAWallet</code> so that it may be used interchangeably with EOA wallets throughout the rest of the SequenceEthereum library.</p>\n<p>A SequenceWalletToEOAWalletAdapter is easily created once you have a SequenceWallet:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>IWallet sequenceAdapter = new SequenceWalletToEOAWalletAdapter(sequenceWallet);</span></span></code></pre>\n","isPage":false,"text":"\nSequenceWalletToEOAWalletAdapter is an adapter that allows you to use a SequenceWallet with the same IWallet interface as an EOAWallet so that it may be used interchangeably with EOA wallets throughout the rest of the SequenceEthereum library.\nA SequenceWalletToEOAWalletAdapter is easily created once you have a SequenceWallet:\nIWallet sequenceAdapter = new SequenceWalletToEOAWalletAdapter(sequenceWallet);\n","title":"2. SequenceWalletToEOAWalletAdapter","titles":["Wallets"]},"357":{"href":"/sdk/unity/Advanced/wallets#methods","html":"\n<p>The <code>IWallet</code> interface provides a number of methods for you. The most important of which are:</p>\n","isPage":false,"text":"\nThe IWallet interface provides a number of methods for you. The most important of which are:\n","title":"Methods","titles":["Wallets"]},"358":{"href":"/sdk/unity/Advanced/wallets#getaddress","html":"\n<p>Returns the <code>Address</code> for the wallet</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>Address address = wallet.GetAddress();</span></span></code></pre>\n","isPage":false,"text":"\nReturns the Address for the wallet\nAddress address = wallet.GetAddress();\n","title":"GetAddress","titles":["Wallets","Methods"]},"359":{"href":"/sdk/unity/Advanced/wallets#sendtransaction","html":"\n<p>Signs the given <code>EthTransaction</code> and submits it via the given client</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>string transactionHash = await wallet.SendTransaction(client, transaction);</span></span></code></pre>\n","isPage":false,"text":"\nSigns the given EthTransaction and submits it via the given client\nstring transactionHash = await wallet.SendTransaction(client, transaction);\n","title":"SendTransaction","titles":["Wallets","Methods"]},"360":{"href":"/sdk/unity/Advanced/wallets#sendtransactionandwaitforreceipt","html":"\n<p>Signs the given <code>EthTransaction</code> and submits it via the given client then waits for the <code>TransactionReceipt</code></p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>TransactionReceipt receipt = await wallet.SendTransactionAndWaitForReceipt(client, transaction);</span></span></code></pre>\n","isPage":false,"text":"\nSigns the given EthTransaction and submits it via the given client then waits for the TransactionReceipt\nTransactionReceipt receipt = await wallet.SendTransactionAndWaitForReceipt(client, transaction);\n","title":"SendTransactionAndWaitForReceipt","titles":["Wallets","Methods"]},"361":{"href":"/sdk/unity/Advanced/wallets#sendtransactionbatch","html":"\n<p>Signs the given <code>EthTransaction[]</code> and submits them via the given client.\nIf wallet is an <code>EOAWallet</code>, the transactions will be submitted sequentially, each of which may pass or fail. If the wallet is a <code>SequenceWalletToEOAWalletAdapter</code>, the transactions will be batched together into a single transaction that is submitted all at once and either passes or fails as a whole.\nSimilarly, if a wallet is an <code>EOAWallet</code> the <code>string[]</code> (transaction hashes) you receive will be equal in length to the <code>EthTransaction[]</code> you submitted. While, if the wallet is a <code>SequenceWalletToEOAWalletAdapter</code>, you will only receive one transaction hash (<code>string[]</code> of length 1)</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>string[] transactionHashes = await wallet.SendTransactionBatch(client, transactions);</span></span></code></pre>\n","isPage":false,"text":"\nSigns the given EthTransaction[] and submits them via the given client.\nIf wallet is an EOAWallet, the transactions will be submitted sequentially, each of which may pass or fail. If the wallet is a SequenceWalletToEOAWalletAdapter, the transactions will be batched together into a single transaction that is submitted all at once and either passes or fails as a whole.\nSimilarly, if a wallet is an EOAWallet the string[] (transaction hashes) you receive will be equal in length to the EthTransaction[] you submitted. While, if the wallet is a SequenceWalletToEOAWalletAdapter, you will only receive one transaction hash (string[] of length 1)\nstring[] transactionHashes = await wallet.SendTransactionBatch(client, transactions);\n","title":"SendTransactionBatch","titles":["Wallets","Methods"]},"362":{"href":"/sdk/unity/Advanced/wallets#sendtransactionbatchandwaitforreceipts","html":"\n<p>Signs the given <code>EthTransaction[]</code> and submits them via the given client then waits for the <code>TransactionReceipt[]</code>.\nIf wallet is an <code>EOAWallet</code>, the transactions will be submitted sequentially, each of which may pass or fail. If the wallet is a <code>SequenceWalletToEOAWalletAdapter</code>, the transactions will be batched together into a single transaction that is submitted all at once and either passes or fails as a whole.\nSimilarly, if a wallet is an <code>EOAWallet</code> the <code>TransactionReceipt[]</code> you receive will be equal in length to the <code>EthTransaction[]</code> you submitted. While, if the wallet is a <code>SequenceWalletToEOAWalletAdapter</code>, you will only receive one transaction receipt (<code>TransactionReceipt[]</code> of length 1)</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>TransactionReceipt[] receipts = await wallet.SendTransactionAndWaitForReceipt(client, transactions);</span></span></code></pre>\n","isPage":false,"text":"\nSigns the given EthTransaction[] and submits them via the given client then waits for the TransactionReceipt[].\nIf wallet is an EOAWallet, the transactions will be submitted sequentially, each of which may pass or fail. If the wallet is a SequenceWalletToEOAWalletAdapter, the transactions will be batched together into a single transaction that is submitted all at once and either passes or fails as a whole.\nSimilarly, if a wallet is an EOAWallet the TransactionReceipt[] you receive will be equal in length to the EthTransaction[] you submitted. While, if the wallet is a SequenceWalletToEOAWalletAdapter, you will only receive one transaction receipt (TransactionReceipt[] of length 1)\nTransactionReceipt[] receipts = await wallet.SendTransactionAndWaitForReceipt(client, transactions);\n","title":"SendTransactionBatchAndWaitForReceipts","titles":["Wallets","Methods"]},"363":{"href":"/sdk/unity/Advanced/wallets#signmessage","html":"\n<p>Given a message and an optional chain id, sign the message using the wallet. Omit the chain id from the signature if not provided</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>string signedMessage = await wallet.SignMessage(message, chainId)</span></span></code></pre>\n<p>Note: the chainId is expected to be in hexadecimal format. If you are working with a <code>Chain</code> object (recommended), you can use the <code>AsString</code> method to get the hexadecimal format of the chain id</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>string signedMessage = await wallet.SignMessage(message, Chain.Polygon.AsString());</span></span></code></pre>","isPage":false,"text":"\nGiven a message and an optional chain id, sign the message using the wallet. Omit the chain id from the signature if not provided\nstring signedMessage = await wallet.SignMessage(message, chainId)\nNote: the chainId is expected to be in hexadecimal format. If you are working with a Chain object (recommended), you can use the AsString method to get the hexadecimal format of the chain id\nstring signedMessage = await wallet.SignMessage(message, Chain.Polygon.AsString());","title":"SignMessage","titles":["Wallets","Methods"]},"364":{"href":"/sdk/unity/authentication/email#email--otp","html":"</header>\n<p>Available on all platforms, email sign in provides the user with a One-Time-Password (OTP) challenge - a 6 digit code emailed to the entered address for the user to enter on the next page.</p>\n<p>First, you&#x27;ll want to <a href=\"/solutions/builder/embedded-wallet/index\">enable email sign in for your project in the builder</a>.</p>\n<p>If you&#x27;re using the built-in <code>LoginPanel</code>, the UI will manage email + OTP sign in for you automatically.</p>\n<aside data-callout=\"tip\"><p>Don&#x27;t forget to subscribe to the <code>SequenceWallet.OnWalletCreated</code> event to receive your newly created wallet!</p></aside>\n","isPage":true,"text":"\nAvailable on all platforms, email sign in provides the user with a One-Time-Password (OTP) challenge - a 6 digit code emailed to the entered address for the user to enter on the next page.\nFirst, you&#x27;ll want to enable email sign in for your project in the builder.\nIf you&#x27;re using the built-in LoginPanel, the UI will manage email + OTP sign in for you automatically.\nDon&#x27;t forget to subscribe to the SequenceWallet.OnWalletCreated event to receive your newly created wallet!\n","title":"Email + OTP","titles":[]},"365":{"href":"/sdk/unity/authentication/email#custom-integrations","html":"\n<p>Otherwise, you&#x27;ll want to call the <code>Login(string email)</code> async Task on <code>SequenceLogin</code> to initiate authentication with the API; this will send the OTP challenge to the specified email.</p>\n<p>Once the user has input their OTP code, you&#x27;ll want to call the <code>Login(string email, string code)</code> async Task on <code>SequenceLogin</code> to finish authenticating the user.</p>\n<p>Relevant events include:</p>\n<ul>\n<li>\n<p><code>OnMFAEmailSent</code> - this event includes a string specifying the email where the OTP was sent</p>\n</li>\n<li>\n<p><code>OnMFAEmailFailedToSend</code> - this event includes two strings: the email where the OTP was requested and the error message</p>\n</li>\n<li>\n<p><code>OnLoginFailed</code> - this event includes: the error message string, the <code>LoginMethod</code> that was used, and the email string associated with the login attempt</p>\n</li>\n</ul>","isPage":false,"text":"\nOtherwise, you&#x27;ll want to call the Login(string email) async Task on SequenceLogin to initiate authentication with the API; this will send the OTP challenge to the specified email.\nOnce the user has input their OTP code, you&#x27;ll want to call the Login(string email, string code) async Task on SequenceLogin to finish authenticating the user.\nRelevant events include:\n\n\nOnMFAEmailSent - this event includes a string specifying the email where the OTP was sent\n\n\nOnMFAEmailFailedToSend - this event includes two strings: the email where the OTP was requested and the error message\n\n\nOnLoginFailed - this event includes: the error message string, the LoginMethod that was used, and the email string associated with the login attempt\n\n","title":"Custom Integrations","titles":["Email + OTP"]},"366":{"href":"/sdk/unity/authentication/federated-accounts#federated-accounts","html":"</header>\n<p>By default, the WaaS API only allows one account per email. If a user attempts to login using a different method but the same email as before, they will receive an <code>EmailAlreadyInUse</code> error.</p>\n<p>For example: if the user created their account using Google Sign In and then attempts to sign in with Email + OTP using the same method, they will receive this error.</p>\n<p>By default (if using the default <code>LoginPanel</code>), the SDK will automatically open the <code>FederatedAuthPopupPanel</code> prefab located at <code>SequenceFrontend &gt; Prefabs &gt; FederatedAuthPopupPanel</code>. This prefab can be customized to your linking or replaced in the <code>LoginPanel</code> prefab. This panel will explain to the user that duplicate login methods are not allowed and prompt them to return to the login screen and sign in with their associated login method (or a different email altogether).</p>\n<aside data-callout=\"info\"><p>If <code>EnableMultipleAccountsPerEmail</code> is enabled in <code>SequenceConfig</code> the <code>FederatedAuthPopupPanel</code> will give the user the option to create another account associated with their email.</p></aside>\n<p>Once the user has logged into their account; the SDK will automatically make a <code>FederateAccount</code> request (see <code>SequenceLogin</code>). This will associate the failed login method with that email as well so that the user may sign in with either in the future. Using our example above, the user would now be able to sign into their account using Google Sign In or Email + OTP.</p>\n","isPage":true,"text":"\nBy default, the WaaS API only allows one account per email. If a user attempts to login using a different method but the same email as before, they will receive an EmailAlreadyInUse error.\nFor example: if the user created their account using Google Sign In and then attempts to sign in with Email + OTP using the same method, they will receive this error.\nBy default (if using the default LoginPanel), the SDK will automatically open the FederatedAuthPopupPanel prefab located at SequenceFrontend &gt; Prefabs &gt; FederatedAuthPopupPanel. This prefab can be customized to your linking or replaced in the LoginPanel prefab. This panel will explain to the user that duplicate login methods are not allowed and prompt them to return to the login screen and sign in with their associated login method (or a different email altogether).\nIf EnableMultipleAccountsPerEmail is enabled in SequenceConfig the FederatedAuthPopupPanel will give the user the option to create another account associated with their email.\nOnce the user has logged into their account; the SDK will automatically make a FederateAccount request (see SequenceLogin). This will associate the failed login method with that email as well so that the user may sign in with either in the future. Using our example above, the user would now be able to sign into their account using Google Sign In or Email + OTP.\n","title":"Federated Accounts","titles":[]},"367":{"href":"/sdk/unity/authentication/federated-accounts#manually-federating-accounts","html":"\n<p>You may want to add a button to your app allowing the user to associate an additional login method with their email (especially if you are using Guest Login). You&#x27;ll want get a reference to <code>SequenceLogin</code> and then call the appropriate <code>FederateAccount</code> method for the login method.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>SequenceLogin login = SequenceLogin.GetInstance();</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>// PlayFab</span></span>\n<span class=\"line\"><span>login.FederateAccountPlayFab(titleId, sessionTicket, email, walletAddress);</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>// OIDC (Social)</span></span>\n<span class=\"line\"><span>login.FederateAccountSocial(idToken, loginMethod, walletAddress);</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>// Guest</span></span>\n<span class=\"line\"><span>login.FederateAccountGuest(walletAddress);</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>// Email</span></span>\n<span class=\"line\"><span>login.Login(email);</span></span>\n<span class=\"line\"><span>// Later ... Once you&#x27;ve received the OTP code from the user</span></span>\n<span class=\"line\"><span>login.FederateAccountEmail(email, code, walletAddress); </span></span></code></pre>\n<p>where walletAddress is the address of the <code>SequenceWallet</code> you retrieved after authenticating the user.</p>","isPage":false,"text":"\nYou may want to add a button to your app allowing the user to associate an additional login method with their email (especially if you are using Guest Login). You&#x27;ll want get a reference to SequenceLogin and then call the appropriate FederateAccount method for the login method.\nSequenceLogin login = SequenceLogin.GetInstance();\n\n// PlayFab\nlogin.FederateAccountPlayFab(titleId, sessionTicket, email, walletAddress);\n\n// OIDC (Social)\nlogin.FederateAccountSocial(idToken, loginMethod, walletAddress);\n\n// Guest\nlogin.FederateAccountGuest(walletAddress);\n\n// Email\nlogin.Login(email);\n// Later ... Once you&#x27;ve received the OTP code from the user\nlogin.FederateAccountEmail(email, code, walletAddress); \nwhere walletAddress is the address of the SequenceWallet you retrieved after authenticating the user.","title":"Manually Federating Accounts","titles":["Federated Accounts"]},"368":{"href":"/sdk/unity/authentication/guest#guest","html":"</header>\n<p>For when you want to quickly get your users into your game to start playing, you can use our guest login.</p>\n<p>Simply call <code>GuestLogin</code> on a <code>SequenceLogin</code> instance.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>SequenceLogin login = SequenceLogin.GetInstance();</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>login.GuestLogin();</span></span></code></pre>\n<aside data-callout=\"tip\"><p>Don&#x27;t forget to subscribe to the <code>SequenceWallet.OnWalletCreated</code> event to receive your newly created wallet!</p></aside>","isPage":true,"text":"\nFor when you want to quickly get your users into your game to start playing, you can use our guest login.\nSimply call GuestLogin on a SequenceLogin instance.\nSequenceLogin login = SequenceLogin.GetInstance();\n\nlogin.GuestLogin();\nDon&#x27;t forget to subscribe to the SequenceWallet.OnWalletCreated event to receive your newly created wallet!","title":"Guest","titles":[]},"369":{"href":"/sdk/unity/authentication/intro#authentication---introduction","html":"</header>\n<p>As a WaaS SDK, authentication is extremely important. Authentication works by establishing a session signing wallet through association with an <a href=\"https://auth0.com/docs/secure/tokens/id-tokens/id-token-structure#sample-id-token\">OIDC idToken</a>. For more on how our Embedded Wallet works, please <a href=\"/solutions/wallets/embedded-wallet/overview\">see Embedded Wallet docs</a>.</p>\n<p>To implement authentication, we recommend using our <code>LoginPanel</code> prefab. Locate this prefab under <code>SequenceExamples &gt; Prefabs</code> and drag it under a <a href=\"https://docs.unity3d.com/2020.1/Documentation/Manual/UICanvas.html\">Canvas</a> in your scene.\nWe recommend having the <code>Canvas Scaler</code> component attached to your <code>Canvas</code> use the &quot;Scale with Screen Size&quot; UI Scale Mode. This will make it so that the LoginPanel (and any other UI elements under this Canvas) are scaled automatically when switching between build targets.</p>\n<p>Note: The <code>LoginPanel</code> is hidden by default. You can open it with the <code>Open</code> method and no arguments. To help with this, the <code>LoginPanel</code> GameObject is not disabled, so feel free to use <a href=\"https://docs.unity3d.com/ScriptReference/Component.GetComponentInChildren.html\">GetComponentInChildren</a>, <a href=\"https://docs.unity3d.com/ScriptReference/Object.FindObjectOfType.html\">FindObjectOfType</a>, or similar to obtain a reference to the <code>LoginPanel</code> MonoBehaviour.</p>\n<p>This will provide you easy access to two authentication methods:</p>\n<ol>\n<li>\n<p><a href=\"/sdk/unity/authentication/email\">Email + OTP Sign In</a></p>\n</li>\n<li>\n<p><a href=\"/sdk/unity/authentication/oidc\">OIDC-based Social Sign In</a></p>\n</li>\n</ol>\n<p>The SDK also provides support for:</p>\n<ol start=\"3\">\n<li>\n<p><a href=\"/sdk/unity/authentication/playfab\">PlayFab Sign In</a></p>\n</li>\n<li>\n<p><a href=\"/sdk/unity/authentication/guest\">Guest Sign In</a></p>\n</li>\n</ol>\n","isPage":true,"text":"\nAs a WaaS SDK, authentication is extremely important. Authentication works by establishing a session signing wallet through association with an OIDC idToken. For more on how our Embedded Wallet works, please see Embedded Wallet docs.\nTo implement authentication, we recommend using our LoginPanel prefab. Locate this prefab under SequenceExamples &gt; Prefabs and drag it under a Canvas in your scene.\nWe recommend having the Canvas Scaler component attached to your Canvas use the &quot;Scale with Screen Size&quot; UI Scale Mode. This will make it so that the LoginPanel (and any other UI elements under this Canvas) are scaled automatically when switching between build targets.\nNote: The LoginPanel is hidden by default. You can open it with the Open method and no arguments. To help with this, the LoginPanel GameObject is not disabled, so feel free to use GetComponentInChildren, FindObjectOfType, or similar to obtain a reference to the LoginPanel MonoBehaviour.\nThis will provide you easy access to two authentication methods:\n\n\nEmail + OTP Sign In\n\n\nOIDC-based Social Sign In\n\n\nThe SDK also provides support for:\n\n\nPlayFab Sign In\n\n\nGuest Sign In\n\n\n","title":"Authentication - Introduction","titles":[]},"370":{"href":"/sdk/unity/authentication/intro#retrieving-the-sequencewallet","html":"\n<p>Once you&#x27;ve obtained credentials from one of the supported authentication methods (please see their respective documentation), you&#x27;ll want to catch a reference to your newly created <code>SequenceWallet</code>.</p>\n<p>Please subscribe to the <code>SequenceWallet.OnWalletCreated</code> event. This can be done with the following code snippet:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>SequenceWallet.OnWalletCreated += OnWalletCreatedHandler;</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>public void OnWalletCreatedHandler(SequenceWallet wallet) {</span></span>\n<span class=\"line\"><span>  // Do something</span></span>\n<span class=\"line\"><span>}</span></span></code></pre>\n<p>where <code>OnWalletCreatedHandler</code> is a function accepting a <code>SequenceWallet</code> as it&#x27;s only parameter. If you&#x27;re unfamiliar with working with events in Unity, check out this great <a href=\"https://www.reddit.com/r/gamedev/comments/u3hz2v/how_to_use_events_a_supersimple_unity_example/\">Reddit post</a>!</p>","isPage":false,"text":"\nOnce you&#x27;ve obtained credentials from one of the supported authentication methods (please see their respective documentation), you&#x27;ll want to catch a reference to your newly created SequenceWallet.\nPlease subscribe to the SequenceWallet.OnWalletCreated event. This can be done with the following code snippet:\nSequenceWallet.OnWalletCreated += OnWalletCreatedHandler;\n\npublic void OnWalletCreatedHandler(SequenceWallet wallet) {\n  // Do something\n}\nwhere OnWalletCreatedHandler is a function accepting a SequenceWallet as it&#x27;s only parameter. If you&#x27;re unfamiliar with working with events in Unity, check out this great Reddit post!","title":"Retrieving the SequenceWallet","titles":["Authentication - Introduction"]},"371":{"href":"/sdk/unity/authentication/oidc#oidc---social-sign-in","html":"</header>\n<p>Our SDK supports Social Sign In using <a href=\"https://openid.net/developers/how-connect-works/\">OIDC</a> with the <a href=\"https://auth0.com/docs/authenticate/login/oidc-conformant-authentication/oidc-adoption-implicit-flow\">implicit flow</a>.</p>\n<p>Currently supported OIDC providers include:</p>\n<ul>\n<li>Google -&gt; <a href=\"/solutions/builder/embedded-wallet/google-configuration\">Builder Setup</a></li>\n<li>Apple -&gt; [Builder Setup] (/solutions/builder/embedded-wallet/apple-configuration)</li>\n</ul>\n<aside data-callout=\"warning\"><p>Stop! Have you configured your OIDC providers in the Builder using the instructions linked above?</p><p>Have you added your client id(s) to the <code>SequenceConfig</code> scriptable object in your Resources folder?</p></aside>\n<p>Once the user successfully signs in, an idToken is returned via deep link to the application.\nIn order to enable deep linking, we must register a custom URL scheme for our application. There are some platform specific requirements to set this up.</p>\n","isPage":true,"text":"\nOur SDK supports Social Sign In using OIDC with the implicit flow.\nCurrently supported OIDC providers include:\n\nGoogle -&gt; Builder Setup\nApple -&gt; [Builder Setup] (/solutions/builder/embedded-wallet/apple-configuration)\n\nStop! Have you configured your OIDC providers in the Builder using the instructions linked above?Have you added your client id(s) to the SequenceConfig scriptable object in your Resources folder?\nOnce the user successfully signs in, an idToken is returned via deep link to the application.\nIn order to enable deep linking, we must register a custom URL scheme for our application. There are some platform specific requirements to set this up.\n","title":"OIDC - Social Sign In","titles":[]},"372":{"href":"/sdk/unity/authentication/oidc#editor","html":"\n<p>For social sign in to work in the editor, you will need to deploy a simple server on your local machine. We provide a sample implementation <a href=\"https://gist.github.com/BellringerQuinn/d012cd29eb9e756fe3555d4d03b001b2\">here</a>.</p>\n<p>To deploy this sample server, please perform the following.</p>\n<ol>\n<li>Download and install Go: <a href=\"https://go.dev/dl/\">https://go.dev/dl/</a></li>\n<li>Open a terminal/command prompt and verify your installation by typing</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>go version</span></span></code></pre>\n<ol start=\"3\">\n<li>Create a directory for your go project and a main.go file</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>mkdir myUnityServer</span></span>\n<span class=\"line\"><span>cd myUnityServer</span></span>\n<span class=\"line\"><span>touch main.go</span></span></code></pre>\n<ol start=\"4\">\n<li>Copy + paste the <a href=\"https://gist.github.com/BellringerQuinn/d012cd29eb9e756fe3555d4d03b001b2\">gist</a> into the main.go</li>\n<li>Initialize the project by creating a go module</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>go mod init myUnityServer</span></span></code></pre>\n<ol start=\"6\">\n<li>Run the server</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>go run main.go</span></span></code></pre>\n<ol start=\"7\">\n<li>You should see <code>Server listening on port 8080</code> printed to your terminal/command prompt</li>\n</ol>\n<p>If you choose to deploy the server to somewhere else (a different port, a public server, etc.), you&#x27;ll want to change the <code>OpenIdAuthenticator.RedirectUrl</code> in your code before initiating the sign in process</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>OpenIdAuthenticator.InjectRedirectUrl(&quot;the url for your deployed server&quot;);</span></span></code></pre>\n<p>Note: you&#x27;ll want to use a web client for your social sign in provider with <code>http://localhost:8080/</code> (or your server url) whitelisted as a redirect url under <code>Standalone Platforms</code> in <code>SequenceConfig</code></p>\n","isPage":false,"text":"\nFor social sign in to work in the editor, you will need to deploy a simple server on your local machine. We provide a sample implementation here.\nTo deploy this sample server, please perform the following.\n\nDownload and install Go: https://go.dev/dl/\nOpen a terminal/command prompt and verify your installation by typing\n\ngo version\n\nCreate a directory for your go project and a main.go file\n\nmkdir myUnityServer\ncd myUnityServer\ntouch main.go\n\nCopy + paste the gist into the main.go\nInitialize the project by creating a go module\n\ngo mod init myUnityServer\n\nRun the server\n\ngo run main.go\n\nYou should see Server listening on port 8080 printed to your terminal/command prompt\n\nIf you choose to deploy the server to somewhere else (a different port, a public server, etc.), you&#x27;ll want to change the OpenIdAuthenticator.RedirectUrl in your code before initiating the sign in process\nOpenIdAuthenticator.InjectRedirectUrl(&quot;the url for your deployed server&quot;);\nNote: you&#x27;ll want to use a web client for your social sign in provider with http://localhost:8080/ (or your server url) whitelisted as a redirect url under Standalone Platforms in SequenceConfig\n","title":"Editor","titles":["OIDC - Social Sign In",null]},"373":{"href":"/sdk/unity/authentication/oidc#ios","html":"\n","isPage":false,"text":"\n","title":"iOS","titles":["OIDC - Social Sign In",null]},"374":{"href":"/sdk/unity/authentication/oidc#sign-in-with-apple","html":"\n<p>This SDK supports native Sign in with Apple via the popular <a href=\"https://github.com/lupidan/apple-signin-unity\"><code>apple-signin-unity</code> package</a>. This <a href=\"https://developer.apple.com/documentation/xcode/configuring-sign-in-with-apple#Add-the-Sign-in-with-Apple-capability-to-your-app\">requires the <code>Sign in with Apple</code> capability in XCode</a> in order to function. Provided you have <a href=\"https://docs.sequence.xyz/sdk/unity/installation#package-manager---recommended\">imported the <code>Setup</code> scripts via Package Manager &gt; Samples</a> and/or have <code>SignInWithApplePostprocessor.cs</code> under an <code>Editor</code> subfolder, this capability will be added to your XCode builds automatically.</p>\n<p>Please be aware that this capability is not supported by <code>Personal Teams</code>.</p>\n","isPage":false,"text":"\nThis SDK supports native Sign in with Apple via the popular apple-signin-unity package. This requires the Sign in with Apple capability in XCode in order to function. Provided you have imported the Setup scripts via Package Manager &gt; Samples and/or have SignInWithApplePostprocessor.cs under an Editor subfolder, this capability will be added to your XCode builds automatically.\nPlease be aware that this capability is not supported by Personal Teams.\n","title":"Sign in with Apple","titles":["OIDC - Social Sign In",null,"iOS"]},"375":{"href":"/sdk/unity/authentication/oidc#other-social-platforms","html":"\n<p>All other social platforms are supported by default, just be sure to add your client IDs in <code>SequenceConfig</code>.</p>\n","isPage":false,"text":"\nAll other social platforms are supported by default, just be sure to add your client IDs in SequenceConfig.\n","title":"Other Social Platforms","titles":["OIDC - Social Sign In",null,"iOS"]},"376":{"href":"/sdk/unity/authentication/oidc#macos","html":"\n<ol>\n<li>Open the Windows/Mac/Linux Player Settings window (menu: Edit &gt; Project Settings &gt; Player Settings, then select Windows/Mac/Linux).</li>\n<li>Select <code>Other Settings</code>, then scroll down to <code>Mac Configuration</code>.</li>\n<li>Expand the <code>Supported URL schemes</code> section, and add 1 to the size.</li>\n<li>In the new <code>Element N</code> field, enter the URL scheme you&#x27;ve configured in <code>SequenceConfig</code>.</li>\n</ol>\n<p><img src=\"/img/unity/unity-url-scheme-mac.png\" alt=\"Mac URL Scheme\"/></p>\n","isPage":false,"text":"\n\nOpen the Windows/Mac/Linux Player Settings window (menu: Edit &gt; Project Settings &gt; Player Settings, then select Windows/Mac/Linux).\nSelect Other Settings, then scroll down to Mac Configuration.\nExpand the Supported URL schemes section, and add 1 to the size.\nIn the new Element N field, enter the URL scheme you&#x27;ve configured in SequenceConfig.\n\n\n","title":"MacOS","titles":["OIDC - Social Sign In",null]},"377":{"href":"/sdk/unity/authentication/oidc#pc","html":"\n<p>No additional steps required.</p>\n<aside data-callout=\"tip\"><p>When configuring your social sign in web client credentials with Google (for example) for desktop platforms (and Android), you&#x27;ll want to whitelist <a href=\"https://api.sequence.app/oauth/callback\">https://api.sequence.app/oauth/callback</a> as &quot;Authorized redirect URIs&quot;</p></aside>\n","isPage":false,"text":"\nNo additional steps required.\nWhen configuring your social sign in web client credentials with Google (for example) for desktop platforms (and Android), you&#x27;ll want to whitelist https://api.sequence.app/oauth/callback as &quot;Authorized redirect URIs&quot;\n","title":"PC","titles":["OIDC - Social Sign In",null]},"378":{"href":"/sdk/unity/authentication/oidc#android","html":"\n<ol>\n<li>In the Project window, browse to <code>Assets &gt; Plugins &gt; Android</code>.</li>\n</ol>\n<p>a) Note: in Unity versions 2021.2 and up this path doesn&#x27;t exist by default. Please navigate to <code>Edit &gt; Project Settings &gt; Player</code> and under the Android Publishing Settings, enable <code>Custom Main Manifest</code> in the Build section. See <a href=\"https://docs.unity3d.com/Manual/deep-linking-android.html\">https://docs.unity3d.com/Manual/deep-linking-android.html</a> for more info.</p>\n<ol start=\"2\">\n<li>If it doesn&#x27;t already exist, create a new file and name it <code>AndroidManifest.xml</code>.</li>\n<li>Paste the following XML into the file, or, if you already have one, add the new keys from this XML to it.</li>\n<li>Make sure to replace &#x27;sdk-powered-by-sequence&#x27; with the Url Scheme you set in <code>SequenceConfig</code></li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">   &lt;?</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">xml</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> version</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;1.0&quot;</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> encoding</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;utf-8&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">?&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">   &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">manifest</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">     xmlns:android</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">     xmlns:tools</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;http://schemas.android.com/tools&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">   &gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">     &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">application</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">       &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">activity</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">         android:name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;com.unity3d.player.UnityPlayerActivity&quot;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">         android:theme</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;@style/UnityThemeSelector&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">       &gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">         &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">intent-filter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">           &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">action</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> android:name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;android.intent.action.MAIN&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">           &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">category</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> android:name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;android.intent.category.LAUNCHER&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">         &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">intent-filter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">         &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">intent-filter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">           &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">action</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> android:name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;android.intent.action.VIEW&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">           &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">category</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> android:name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;android.intent.category.DEFAULT&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">           &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">category</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> android:name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;android.intent.category.BROWSABLE&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">           &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">data</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> android:scheme</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;sdk-powered-by-sequence&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">/&gt; </span><span style=\"color:#6A737D;--shiki-dark:#768390\">&lt;!-- substitute &#x27;sdk-powered-by-sequence&#x27; with the Url Scheme you set in `SequenceConfig` --&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">         &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">intent-filter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">       &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">activity</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">     &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">application</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">   &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">manifest</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span></code></pre>\n<p>b) Note: Unity 2022 versions prior to <code>2022.3.7f1</code> and 2023 versions prior to <code>2023.1.7f1</code>, <code>2023.2.0b3</code>, or <code>2023.3.0a1</code> contain a bug with Android deep-linking. Please use this XML instead.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;?</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">xml</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> version</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;1.0&quot;</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> encoding</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;utf-8&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">?&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">manifest</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">        xmlns:android</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">        xmlns:tools</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;http://schemas.android.com/tools&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">application</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">activity</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">                android:name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;com.unity3d.player.UnityPlayerActivity&quot;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">                android:theme</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;@style/UnityThemeSelector&quot;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">                android:exported</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;true&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">intent-filter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">action</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> android:name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;android.intent.action.MAIN&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">category</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> android:name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;android.intent.category.LAUNCHER&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">intent-filter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">meta-data</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> android:name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;unityplayer.UnityActivity&quot;</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> android:value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;true&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">intent-filter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">action</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> android:name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;android.intent.action.VIEW&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">category</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> android:name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;android.intent.category.DEFAULT&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">category</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> android:name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;android.intent.category.BROWSABLE&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">data</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> android:scheme</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;sdk-powered-by-sequence&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">/&gt; </span><span style=\"color:#6A737D;--shiki-dark:#768390\">&lt;!-- substitute &#x27;sdk-powered-by-sequence&#x27; with the Url Scheme you set in `SequenceConfig` --&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">intent-filter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">activity</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">application</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">manifest</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span></code></pre>\n<p>i.e. add <code>&lt;meta-data android:name=&quot;unityplayer.UnityActivity&quot; android:value=&quot;true&quot; /&gt;</code> after your first <code>intent-filter</code>. Please see <a href=\"https://forum.unity.com/threads/deep-linking-in-unity-2022-the-app-is-restarted.1447300/\">https://forum.unity.com/threads/deep-linking-in-unity-2022-the-app-is-restarted.1447300/</a> for more info.</p>\n","isPage":false,"text":"\n\nIn the Project window, browse to Assets &gt; Plugins &gt; Android.\n\na) Note: in Unity versions 2021.2 and up this path doesn&#x27;t exist by default. Please navigate to Edit &gt; Project Settings &gt; Player and under the Android Publishing Settings, enable Custom Main Manifest in the Build section. See https://docs.unity3d.com/Manual/deep-linking-android.html for more info.\n\nIf it doesn&#x27;t already exist, create a new file and name it AndroidManifest.xml.\nPaste the following XML into the file, or, if you already have one, add the new keys from this XML to it.\nMake sure to replace &#x27;sdk-powered-by-sequence&#x27; with the Url Scheme you set in SequenceConfig\n\n   &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n   &lt;manifest\n     xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n     xmlns:tools=&quot;http://schemas.android.com/tools&quot;\n   &gt;\n     &lt;application&gt;\n       &lt;activity\n         android:name=&quot;com.unity3d.player.UnityPlayerActivity&quot;\n         android:theme=&quot;@style/UnityThemeSelector&quot;\n       &gt;\n         &lt;intent-filter&gt;\n           &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;\n           &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;\n         &lt;/intent-filter&gt;\n         &lt;intent-filter&gt;\n           &lt;action android:name=&quot;android.intent.action.VIEW&quot; /&gt;\n           &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;\n           &lt;category android:name=&quot;android.intent.category.BROWSABLE&quot; /&gt;\n           &lt;data android:scheme=&quot;sdk-powered-by-sequence&quot;/&gt; &lt;!-- substitute &#x27;sdk-powered-by-sequence&#x27; with the Url Scheme you set in `SequenceConfig` --&gt;\n         &lt;/intent-filter&gt;\n       &lt;/activity&gt;\n     &lt;/application&gt;\n   &lt;/manifest&gt;\nb) Note: Unity 2022 versions prior to 2022.3.7f1 and 2023 versions prior to 2023.1.7f1, 2023.2.0b3, or 2023.3.0a1 contain a bug with Android deep-linking. Please use this XML instead.\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;manifest\n        xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n        xmlns:tools=&quot;http://schemas.android.com/tools&quot;\n&gt;\n    &lt;application&gt;\n        &lt;activity\n                android:name=&quot;com.unity3d.player.UnityPlayerActivity&quot;\n                android:theme=&quot;@style/UnityThemeSelector&quot;\n                android:exported=&quot;true&quot;&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;\n                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;\n            &lt;/intent-filter&gt;\n            &lt;meta-data android:name=&quot;unityplayer.UnityActivity&quot; android:value=&quot;true&quot; /&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=&quot;android.intent.action.VIEW&quot; /&gt;\n                &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;\n                &lt;category android:name=&quot;android.intent.category.BROWSABLE&quot; /&gt;\n                &lt;data android:scheme=&quot;sdk-powered-by-sequence&quot;/&gt; &lt;!-- substitute &#x27;sdk-powered-by-sequence&#x27; with the Url Scheme you set in `SequenceConfig` --&gt;\n            &lt;/intent-filter&gt;\n        &lt;/activity&gt;\n    &lt;/application&gt;\n&lt;/manifest&gt;\ni.e. add &lt;meta-data android:name=&quot;unityplayer.UnityActivity&quot; android:value=&quot;true&quot; /&gt; after your first intent-filter. Please see https://forum.unity.com/threads/deep-linking-in-unity-2022-the-app-is-restarted.1447300/ for more info.\n","title":"Android","titles":["OIDC - Social Sign In",null]},"379":{"href":"/sdk/unity/authentication/oidc#web","html":"\n<p>Social sign in on Web platforms uses React via the <a href=\"https://docs.unity3d.com/Manual/webgl-templates.html\">WebGLTemplate</a> found under <code>WebGLTemplates/SequenceReact</code>. This has been validated on WebGL and WebGPU. To learn how to enable WebGPU in Unity, please see <a href=\"https://forum.unity.com/threads/early-access-to-the-new-webgpu-backend-in-unity-2023-3.1516621/\">this forum post</a>.</p>\n<p>Please note that Google is the only OIDC provider currently supported on Web platforms by our default <code>SequenceReact</code> WebGLTemplate; however, you are welcome to expand upon it to add support for the other OIDC providers supported by our API.</p>\n","isPage":false,"text":"\nSocial sign in on Web platforms uses React via the WebGLTemplate found under WebGLTemplates/SequenceReact. This has been validated on WebGL and WebGPU. To learn how to enable WebGPU in Unity, please see this forum post.\nPlease note that Google is the only OIDC provider currently supported on Web platforms by our default SequenceReact WebGLTemplate; however, you are welcome to expand upon it to add support for the other OIDC providers supported by our API.\n","title":"Web","titles":["OIDC - Social Sign In",null]},"380":{"href":"/sdk/unity/authentication/oidc#one-time-setup","html":"\n<p>Drag this <code>WebGLTemplates</code> folder under <code>Assets</code> (or just drag the <code>SequenceReact</code> template into your existing <code>WebGLTemplates</code> folder is you already have one) such that you have <code>Assets/WebGLTemplates/SequenceReact</code>.</p>\n<aside data-callout=\"warning\"><p>It is very important that your <code>WebGLTemplates</code> are at <code>Assets/WebGLTemplates</code>. Much like the <code>Plugins</code> folder, if they aren&#x27;t in this exact location, Unity will not pick them up!</p></aside>\n<p>Once you&#x27;ve added the <code>SequenceReact</code> template, you&#x27;ll want to restart the editor so that Unity picks up your newly added template.</p>\n<p>From here, you can select the template under <code>Project Settings &gt; Player Settings &gt; Resolution and Presentation</code>.</p>\n","isPage":false,"text":"\nDrag this WebGLTemplates folder under Assets (or just drag the SequenceReact template into your existing WebGLTemplates folder is you already have one) such that you have Assets/WebGLTemplates/SequenceReact.\nIt is very important that your WebGLTemplates are at Assets/WebGLTemplates. Much like the Plugins folder, if they aren&#x27;t in this exact location, Unity will not pick them up!\nOnce you&#x27;ve added the SequenceReact template, you&#x27;ll want to restart the editor so that Unity picks up your newly added template.\nFrom here, you can select the template under Project Settings &gt; Player Settings &gt; Resolution and Presentation.\n","title":"One-time setup","titles":["OIDC - Social Sign In",null,"Web"]},"381":{"href":"/sdk/unity/authentication/oidc#building","html":"\n<p>After the one time setup, when you build your Unity project on Web platforms it will be built as part of a React project.</p>\n<ol>\n<li>Open up a command line at the root of your new build</li>\n<li><a href=\"https://pnpm.io/installation\">Install pnpm</a> if you don&#x27;t already have it</li>\n<li><code>pnpm install</code> to install dependancies</li>\n<li><code>pnpm dev</code> to run the project on your localhost (defaulting to port 4444 - configurable in <code>SequenceReact/package.json</code>)</li>\n<li>Open <a href=\"http://localhost:4444\">http://localhost:4444</a></li>\n</ol>\n<aside data-callout=\"tip\"><p>When configuring your social sign in credentials with Google (for example), you&#x27;ll want to whitelist <a href=\"http://localhost:4444\">http://localhost:4444</a> and your game&#x27;s eventual hosted URL as &quot;Authorized Javascript origins&quot;</p></aside>\n<aside data-callout=\"tip\"><p>Don&#x27;t forget to subscribe to the <code>SequenceWallet.OnWalletCreated</code> event to receive your newly created wallet!</p></aside>","isPage":false,"text":"\nAfter the one time setup, when you build your Unity project on Web platforms it will be built as part of a React project.\n\nOpen up a command line at the root of your new build\nInstall pnpm if you don&#x27;t already have it\npnpm install to install dependancies\npnpm dev to run the project on your localhost (defaulting to port 4444 - configurable in SequenceReact/package.json)\nOpen http://localhost:4444\n\nWhen configuring your social sign in credentials with Google (for example), you&#x27;ll want to whitelist http://localhost:4444 and your game&#x27;s eventual hosted URL as &quot;Authorized Javascript origins&quot;\nDon&#x27;t forget to subscribe to the SequenceWallet.OnWalletCreated event to receive your newly created wallet!","title":"Building","titles":["OIDC - Social Sign In",null,"Web"]},"382":{"href":"/sdk/unity/authentication/playfab#playfab","html":"</header>\n<p>Our SDK/API supports signing in using the popular <a href=\"https://playfab.com/\">PlayFab</a> service provided by Microsoft Azure.</p>\n<p>However, since the <a href=\"https://github.com/PlayFab/UnitySDK\">PlayFab SDK for Unity</a> can currently only be imported manually via a <code>.unitypackage</code> file, we&#x27;ve opted not to include it directly in our SDK as doing so may create dependancy conflicts in your project. Similarly, we haven&#x27;t provided any integration code within our SDK.</p>\n<p>Luckily, the PlayFab SDK is easily integrated into your project. Please see their <a href=\"https://github.com/PlayFab/UnitySDK\">readme for installation and integration instructions</a>.</p>\n<p>Once you&#x27;ve authenticated your user via PlayFab, you should have received a <code>SessionTicket</code> from the <code>LoginResult</code> object.</p>\n<p>From here, simply call <code>PlayFabLogin</code> on a <code>SequenceLogin</code> object</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>public void OnPlayFabLoginSuccess(LoginResult result) {</span></span>\n<span class=\"line\"><span>    SequenceLogin login = SequenceLogin.GetInstance();</span></span>\n<span class=\"line\"><span>    login.PlayFabLogin(PlayFabSettings.staticSettings.TitleId, result.SessionTicket, email);</span></span>\n<span class=\"line\"><span>}</span></span></code></pre>\n<p>where <code>email</code> is the email string used to login to PlayFab (or <code>&quot;&quot;</code> if using PlayFab Guest Login).</p>\n<aside data-callout=\"tip\"><p>Don&#x27;t forget to subscribe to the <code>SequenceWallet.OnWalletCreated</code> event to receive your newly created wallet!</p></aside>","isPage":true,"text":"\nOur SDK/API supports signing in using the popular PlayFab service provided by Microsoft Azure.\nHowever, since the PlayFab SDK for Unity can currently only be imported manually via a .unitypackage file, we&#x27;ve opted not to include it directly in our SDK as doing so may create dependancy conflicts in your project. Similarly, we haven&#x27;t provided any integration code within our SDK.\nLuckily, the PlayFab SDK is easily integrated into your project. Please see their readme for installation and integration instructions.\nOnce you&#x27;ve authenticated your user via PlayFab, you should have received a SessionTicket from the LoginResult object.\nFrom here, simply call PlayFabLogin on a SequenceLogin object\npublic void OnPlayFabLoginSuccess(LoginResult result) {\n    SequenceLogin login = SequenceLogin.GetInstance();\n    login.PlayFabLogin(PlayFabSettings.staticSettings.TitleId, result.SessionTicket, email);\n}\nwhere email is the email string used to login to PlayFab (or &quot;&quot; if using PlayFab Guest Login).\nDon&#x27;t forget to subscribe to the SequenceWallet.OnWalletCreated event to receive your newly created wallet!","title":"PlayFab","titles":[]},"383":{"href":"/solutions/builder/embedded-wallet#embedded-wallet-configuration","html":"</header>\n<p>You can configure a <a href=\"/solutions/wallets/embedded-wallet/overview\">Sequence Embedded Wallet</a> in Builder and integrate your own OAuth accounts to enable easy onboarding to your games. Configuration page in Builder <a href=\"https://sequence.build/project/default/wallet/embedded-wallet\">is available here</a>.</p>\n<p>The following sections will explain the various ways to configure using an Embedded Wallet in Builder:</p>\n<ul>\n<li><a href=\"/solutions/builder/embedded-wallet#login-providers\">Login Providers</a>: Web2 based authentication providers</li>\n<li><a href=\"/solutions/builder/embedded-wallet#allowed-origins\">Allowed Origins</a>: Specify allowed URL origins to call your Embedded Wallet instance from to prevent configuration key misuse</li>\n<li><a href=\"/solutions/builder/embedded-wallet#recovery-wallet\">Recovery Wallet</a>: In the event of a wallet ownership turnover for a compromised wallet, specify a recovery wallet to obtain ownership of embedded wallet instance post Trust recovery process</li>\n<li><a href=\"/solutions/builder/embedded-wallet#initial-configuration-password\">Initial Configuration Password</a>: Create a password to secure your Embedded Wallet project instance in Builder</li>\n<li><a href=\"/solutions/builder/embedded-wallet#configuration-changes\">Configuration Changes</a>: Update configuration details at anypoint with password protection</li>\n<li><a href=\"/solutions/builder/embedded-wallet#parent-wallet\">Parent Wallet</a>: A 2/2 signer delegation of non-custodial security</li>\n<li><a href=\"/solutions/builder/embedded-wallet#sdk-integrations\">SDK Integrations</a>: Sequence SDK products that allow developers to implement an Embedded Wallet across platforms</li>\n</ul>\n","isPage":true,"text":"\nYou can configure a Sequence Embedded Wallet in Builder and integrate your own OAuth accounts to enable easy onboarding to your games. Configuration page in Builder is available here.\nThe following sections will explain the various ways to configure using an Embedded Wallet in Builder:\n\nLogin Providers: Web2 based authentication providers\nAllowed Origins: Specify allowed URL origins to call your Embedded Wallet instance from to prevent configuration key misuse\nRecovery Wallet: In the event of a wallet ownership turnover for a compromised wallet, specify a recovery wallet to obtain ownership of embedded wallet instance post Trust recovery process\nInitial Configuration Password: Create a password to secure your Embedded Wallet project instance in Builder\nConfiguration Changes: Update configuration details at anypoint with password protection\nParent Wallet: A 2/2 signer delegation of non-custodial security\nSDK Integrations: Sequence SDK products that allow developers to implement an Embedded Wallet across platforms\n\n","title":"Embedded Wallet Configuration","titles":[]},"384":{"href":"/solutions/builder/embedded-wallet#login-providers","html":"\n<p>Sequence Embedded Wallet supports the following login providers:</p>\n","isPage":false,"text":"\nSequence Embedded Wallet supports the following login providers:\n","title":"Login Providers","titles":["Embedded Wallet Configuration"]},"385":{"href":"/solutions/builder/embedded-wallet#google-auth","html":"\n<p>If you would like to support Google Auth, you need to make sure that a project is configured at your <a href=\"https://console.cloud.google.com/\">Google Cloud Console</a> along with the proper OAuth 2.0 client ID. You can follow <a href=\"/solutions/builder/embedded-wallet/google-configuration\">our guide</a> on how to set it up. After configuring the proper origins and redirect URIs for your project, copy the Client ID and paste it into the Google Client ID field after adding a Google login provider.</p>\n","isPage":false,"text":"\nIf you would like to support Google Auth, you need to make sure that a project is configured at your Google Cloud Console along with the proper OAuth 2.0 client ID. You can follow our guide on how to set it up. After configuring the proper origins and redirect URIs for your project, copy the Client ID and paste it into the Google Client ID field after adding a Google login provider.\n","title":"Google Auth","titles":["Embedded Wallet Configuration","Login Providers"]},"386":{"href":"/solutions/builder/embedded-wallet#apple-auth","html":"\n<p>If you would like to offer Apple Auth, you need to make sure that an application is configured at your <a href=\"https://developer.apple.com/account\">Apple Developer Console</a> account. More information on how to configure Sign in with Apple <a href=\"/solutions/builder/embedded-wallet/apple-configuration\">can be found here</a>. Once you have all requirements completed, share the unique identifier for the Services ID you created as part of your onboarding package after adding an Apple login provider.</p>\n","isPage":false,"text":"\nIf you would like to offer Apple Auth, you need to make sure that an application is configured at your Apple Developer Console account. More information on how to configure Sign in with Apple can be found here. Once you have all requirements completed, share the unique identifier for the Services ID you created as part of your onboarding package after adding an Apple login provider.\n","title":"Apple Auth","titles":["Embedded Wallet Configuration","Login Providers"]},"387":{"href":"/solutions/builder/embedded-wallet#allowed-origins","html":"\n<p>This additional security measure will prevent unauthorized usage of your WaaS configuration outside of domains you whitelisted. Add any development and production URLs under Allowed Origins. By default all subpaths under theses hosts will be allowed.</p>\n<p>You must define allowed origins with a valid scheme (i.e. <code>https</code>).</p>\n","isPage":false,"text":"\nThis additional security measure will prevent unauthorized usage of your WaaS configuration outside of domains you whitelisted. Add any development and production URLs under Allowed Origins. By default all subpaths under theses hosts will be allowed.\nYou must define allowed origins with a valid scheme (i.e. https).\n","title":"Allowed Origins","titles":["Embedded Wallet Configuration"]},"388":{"href":"/solutions/builder/embedded-wallet#recovery-wallet","html":"\n<p>WaaS requires the public address for a recovery wallet that you control. This recovery wallet will be used for recovering user wallets in a disaster scenario where a wallet has been compromised, so it must be controlled by you and must be kept safe at all times.</p>\n<p>We recommend that:</p>\n<ul>\n<li>You use <a href=\"https://safe.global/\">Gnosis Safe</a> for setting up the wallet</li>\n<li>You ensure you have at least 2, ideally 3+ signers configured and required for every transaction</li>\n<li>Every signer is protected by a hardware wallet</li>\n</ul>\n<p>Once the recovery wallet is setup properly, provide the public address for it. Recovery wallet cannot be modified once your configuration is saved.</p>\n","isPage":false,"text":"\nWaaS requires the public address for a recovery wallet that you control. This recovery wallet will be used for recovering user wallets in a disaster scenario where a wallet has been compromised, so it must be controlled by you and must be kept safe at all times.\nWe recommend that:\n\nYou use Gnosis Safe for setting up the wallet\nYou ensure you have at least 2, ideally 3+ signers configured and required for every transaction\nEvery signer is protected by a hardware wallet\n\nOnce the recovery wallet is setup properly, provide the public address for it. Recovery wallet cannot be modified once your configuration is saved.\n","title":"Recovery Wallet","titles":["Embedded Wallet Configuration"]},"389":{"href":"/solutions/builder/embedded-wallet#initial-configuration-password","html":"\n<p>Once you have all information prepared, go ahead and create your Embedded Wallet configuration. During initial setup, Builder will prompt you to assign a password to the Embedded Wallet. This password will be required for all subsequent modifications to your Embedded Wallet configuration, so it must be stored safely.</p>\n","isPage":false,"text":"\nOnce you have all information prepared, go ahead and create your Embedded Wallet configuration. During initial setup, Builder will prompt you to assign a password to the Embedded Wallet. This password will be required for all subsequent modifications to your Embedded Wallet configuration, so it must be stored safely.\n","title":"Initial Configuration Password","titles":["Embedded Wallet Configuration"]},"390":{"href":"/solutions/builder/embedded-wallet#configuration-changes","html":"\n<p>To make modifications to your Embedded Wallet configuration, navigate to the Embedded Wallet section again and make the necessary changes. Then click &quot;Save Configuration&quot; and enter your recovery wallet password to deploy the changes.</p>\n","isPage":false,"text":"\nTo make modifications to your Embedded Wallet configuration, navigate to the Embedded Wallet section again and make the necessary changes. Then click &quot;Save Configuration&quot; and enter your recovery wallet password to deploy the changes.\n","title":"Configuration Changes","titles":["Embedded Wallet Configuration"]},"391":{"href":"/solutions/builder/embedded-wallet#parent-wallet","html":"\n<p>Every embedded wallet parent wallet is a 2/2 signer where the two signers are:</p>\n<ul>\n<li>Guard - fully controlled by Sequence</li>\n<li>Authenticator - jointly controlled by Sequence and Quantstamp</li>\n</ul>\n<p>And, every child wallet is a 1/1 signer where the signer is the parent wallet of the specific project. So inherently, the custodial security of the 1/1 child wallet inherits the security of the 2/2 parent wallet, as no transactions or signatures can be created without both keys from the parent wallet.</p>\n","isPage":false,"text":"\nEvery embedded wallet parent wallet is a 2/2 signer where the two signers are:\n\nGuard - fully controlled by Sequence\nAuthenticator - jointly controlled by Sequence and Quantstamp\n\nAnd, every child wallet is a 1/1 signer where the signer is the parent wallet of the specific project. So inherently, the custodial security of the 1/1 child wallet inherits the security of the 2/2 parent wallet, as no transactions or signatures can be created without both keys from the parent wallet.\n","title":"Parent Wallet","titles":["Embedded Wallet Configuration"]},"392":{"href":"/solutions/builder/embedded-wallet#why-deploying-a-parent-wallet-will-future-proof-integrations","html":"\n<p>Parent Wallet for an Embedded Wallet configuration must be deployed on-chain to prevent issues with message signing and increased gas cost during transactions. These Parent Wallets can be deployed from <a href=\"https://sequence.build\">Sequence Builder</a> when accessing your Embedded Wallet configuration.</p>\n<p>The possible states that an Embedded Wallet can be in and their behaviour:</p>\n<table><thead><tr><th>Scenario</th><th>Prerequisite</th><th><code>signMessage</code> Behaviour</th></tr></thead><tbody><tr><td>None deployed</td><td>Default state</td><td>signMessage returns an invalid signature</td></tr><tr><td>Only parent deployed</td><td>Manually deployed from Builder OR upon first ever transaction from any wallet</td><td>signMessage returns a valid 6492 signature (very low verification support; use Sequence to validate)</td></tr><tr><td>Both parent and child deployed</td><td>Upon first ever transaction from that specific wallet</td><td>signMessage returns a valid 1271 signature (moderate verification support; still recommended to use Sequence to validate)</td></tr></tbody></table>\n","isPage":false,"text":"\nParent Wallet for an Embedded Wallet configuration must be deployed on-chain to prevent issues with message signing and increased gas cost during transactions. These Parent Wallets can be deployed from Sequence Builder when accessing your Embedded Wallet configuration.\nThe possible states that an Embedded Wallet can be in and their behaviour:\nScenarioPrerequisitesignMessage BehaviourNone deployedDefault statesignMessage returns an invalid signatureOnly parent deployedManually deployed from Builder OR upon first ever transaction from any walletsignMessage returns a valid 6492 signature (very low verification support; use Sequence to validate)Both parent and child deployedUpon first ever transaction from that specific walletsignMessage returns a valid 1271 signature (moderate verification support; still recommended to use Sequence to validate)\n","title":"Why deploying a Parent Wallet will future proof integrations","titles":["Embedded Wallet Configuration","Parent Wallet"]},"393":{"href":"/solutions/builder/embedded-wallet#sdk-integrations","html":"\n<p>Now that you have your Embedded Wallet configuration up, go ahead and follow our guides on how to integrate with the SDKs:</p>\n<ul>\n<li><a href=\"/solutions/wallets/embedded-wallet/overview\">TypeScript SDK</a></li>\n<li><a href=\"/sdk/unity/overview\">Unity SDK</a></li>\n<li><a href=\"/sdk/unreal/overview\">Unreal SDK</a></li>\n</ul>","isPage":false,"text":"\nNow that you have your Embedded Wallet configuration up, go ahead and follow our guides on how to integrate with the SDKs:\n\nTypeScript SDK\nUnity SDK\nUnreal SDK\n","title":"SDK Integrations","titles":["Embedded Wallet Configuration"]},"394":{"href":"/solutions/collectibles/metadata/manage-metadata-builder#how-to-manage-item-metadata-in-sequence-builder","html":"</header>\n","isPage":true,"text":"\n","title":"How to Manage Item Metadata in Sequence Builder","titles":[]},"395":{"href":"/solutions/collectibles/metadata/manage-metadata-builder#introduction","html":"\n<p>Following this guide, you can easily manage token metadata for your contract items in Sequence Builder, with a little help from <a href=\"https://www.pinata.cloud/\">Pinata</a> for IPFS hosting.</p>\n","isPage":false,"text":"\nFollowing this guide, you can easily manage token metadata for your contract items in Sequence Builder, with a little help from Pinata for IPFS hosting.\n","title":"Introduction","titles":["How to Manage Item Metadata in Sequence Builder"]},"396":{"href":"/solutions/collectibles/metadata/manage-metadata-builder#step-1-prepare-your-token-images-and-metadata","html":"\n<p>First things first, gather all your token images. For each token, you&#x27;ll need a metadata file named <code>id.json</code> (like <code>1.json</code>, <code>2.json</code>, etc.). These files should look something like this at a minimum:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Token Name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;description&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Token Description&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;image&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ipfs://&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>As you can guess, you can build from these basics. You could have your unique item attributes embedded in this token and generated on the fly.</p>\n","isPage":false,"text":"\nFirst things first, gather all your token images. For each token, you&#x27;ll need a metadata file named id.json (like 1.json, 2.json, etc.). These files should look something like this at a minimum:\n{\n    &quot;name&quot;: &quot;Token Name&quot;,\n    &quot;description&quot;: &quot;Token Description&quot;,\n    &quot;image&quot;: &quot;ipfs://&quot;\n}\nAs you can guess, you can build from these basics. You could have your unique item attributes embedded in this token and generated on the fly.\n","title":"Step 1: Prepare Your Token Images and Metadata","titles":["How to Manage Item Metadata in Sequence Builder"]},"397":{"href":"/solutions/collectibles/metadata/manage-metadata-builder#step-2-set-up-on-pinatacloud","html":"\n<p>Head over to <a href=\"https://www.pinata.cloud/\">Pinata.cloud</a> and create an account. Upload each of your token images as separate files. Next, update the metadata JSON files with the <code>ipfs</code> address for each token. To do this, simply copy the CID (Content Identifier) for each file from Pinata and paste it after <code>ipfs://</code> in your JSON files. It should look like this:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Token Name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;description&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Token Description&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;image&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ipfs://QmdJzQExj2wnNY7pNNn4KauzckjH4vA5xhoxmmis919Ev3&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p><img src=\"/img/guides/manage-contract-metadata-builder/1.jpeg\" alt=\"Configure Pinata\"/></p>\n","isPage":false,"text":"\nHead over to Pinata.cloud and create an account. Upload each of your token images as separate files. Next, update the metadata JSON files with the ipfs address for each token. To do this, simply copy the CID (Content Identifier) for each file from Pinata and paste it after ipfs:// in your JSON files. It should look like this:\n{\n    &quot;name&quot;: &quot;Token Name&quot;,\n    &quot;description&quot;: &quot;Token Description&quot;,\n    &quot;image&quot;: &quot;ipfs://QmdJzQExj2wnNY7pNNn4KauzckjH4vA5xhoxmmis919Ev3&quot;\n}\n\n","title":"Step 2: Set Up on Pinata.cloud","titles":["How to Manage Item Metadata in Sequence Builder"]},"398":{"href":"/solutions/collectibles/metadata/manage-metadata-builder#step-3-upload-your-metadata-files","html":"\n<p>Now, gather all your JSON metadata files into a single folder on your computer. Use Pinata&#x27;s &#x27;Upload &gt; Folder&#x27; feature to upload this folder. Then, copy the CID for the entire folder.</p>\n<p><img src=\"/img/guides/manage-contract-metadata-builder/2.jpeg\" alt=\"Upload Metadata\"/></p>\n","isPage":false,"text":"\nNow, gather all your JSON metadata files into a single folder on your computer. Use Pinata&#x27;s &#x27;Upload &gt; Folder&#x27; feature to upload this folder. Then, copy the CID for the entire folder.\n\n","title":"Step 3: Upload Your Metadata Files","titles":["How to Manage Item Metadata in Sequence Builder"]},"399":{"href":"/solutions/collectibles/metadata/manage-metadata-builder#step-4-get-the-folder-url","html":"\n<p>Click on name of the folder you created on Pinata. This will open a new tab showing all your uploaded JSON files. Copy the URL of this folder.</p>\n<p><img src=\"/img/guides/manage-contract-metadata-builder/3.jpeg\" alt=\"Get Folder URL from Pinata\"/></p>\n","isPage":false,"text":"\nClick on name of the folder you created on Pinata. This will open a new tab showing all your uploaded JSON files. Copy the URL of this folder.\n\n","title":"Step 4: Get the Folder URL","titles":["How to Manage Item Metadata in Sequence Builder"]},"400":{"href":"/solutions/collectibles/metadata/manage-metadata-builder#step-5-set-up-on-sequence-builder","html":"\n<p>Navigate to <a href=\"https://sequence.build/\">Sequence Builder</a>, set up your account, and create your project on the network of your choice. In the Contracts section, click on &quot;Deploy New Contract&quot;.</p>\n<p><img src=\"/img/guides/manage-contract-metadata-builder/4.jpeg\" alt=\"Configure Contract on Builder\"/></p>\n","isPage":false,"text":"\nNavigate to Sequence Builder, set up your account, and create your project on the network of your choice. In the Contracts section, click on &quot;Deploy New Contract&quot;.\n\n","title":"Step 5: Set Up on Sequence Builder","titles":["How to Manage Item Metadata in Sequence Builder"]},"401":{"href":"/solutions/collectibles/metadata/manage-metadata-builder#step-6-deploy-your-contract","html":"\n<p>Select &quot;Web3 Game Item Collection (ERC-1155)&quot; and name your contract. Sequence Builder will automatically deploy your contract on-chain.</p>\n<p><img src=\"/img/guides/manage-contract-metadata-builder/5.jpeg\" alt=\"Deploy Contract\"/></p>\n","isPage":false,"text":"\nSelect &quot;Web3 Game Item Collection (ERC-1155)&quot; and name your contract. Sequence Builder will automatically deploy your contract on-chain.\n\n","title":"Step 6: Deploy Your Contract","titles":["How to Manage Item Metadata in Sequence Builder"]},"402":{"href":"/solutions/collectibles/metadata/manage-metadata-builder#step-7-move-to-contract-details","html":"\n<p>Once you sign the transaction, your contract is ready! Click on it to view the details screen.</p>\n<p><img src=\"/img/guides/manage-contract-metadata-builder/6.jpeg\" alt=\"Contract Details\"/></p>\n","isPage":false,"text":"\nOnce you sign the transaction, your contract is ready! Click on it to view the details screen.\n\n","title":"Step 7: Move to Contract Details","titles":["How to Manage Item Metadata in Sequence Builder"]},"403":{"href":"/solutions/collectibles/metadata/manage-metadata-builder#step-8-update-contract-attributes","html":"\n<p>Navigate to the “Write Contract” section. This is where you can modify attributes of your freshly deployed ERC-1155 contract. Two methods are what you should focus on for now:</p>\n<ul>\n<li><code>setBaseMetadataURI</code> allows the creator to set the base metadata URL for this contract. You want this to point to the JSON files you’ve created, depending on NFT ID.</li>\n<li><code>mint</code> mints one of your tokens and sends it to an address of your choosing.</li>\n</ul>\n","isPage":false,"text":"\nNavigate to the “Write Contract” section. This is where you can modify attributes of your freshly deployed ERC-1155 contract. Two methods are what you should focus on for now:\n\nsetBaseMetadataURI allows the creator to set the base metadata URL for this contract. You want this to point to the JSON files you’ve created, depending on NFT ID.\nmint mints one of your tokens and sends it to an address of your choosing.\n\n","title":"Step 8: Update Contract Attributes","titles":["How to Manage Item Metadata in Sequence Builder"]},"404":{"href":"/solutions/collectibles/metadata/manage-metadata-builder#step-9-set-the-base-metadata-uri","html":"\n<p>Scroll to <code>setBaseMetadataURI</code>, expand it, and under <code>tokenBaseURI</code> paste the URL for the JSON folder preview you got from Pinata earlier. It should look something like this:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>https://azure-wooden-lemur-911.mypinata.cloud/ipfs/QmW5gvYGWb98GsN8VjTRWu4pLn6jryEXNxZKNWpPhVwtDm/</span></span></code></pre>\n<p>Click “Write” and you will be prompted to sign again. This will modify the contract on-chain to set the metadata base. Essentially any token ID you provide will be appended to this URL, along with the <code>.json</code> suffix. So if you mint token ID 123, it will look for <code>tokenBaseURI + 123.json</code>.</p>\n<p><img src=\"/img/guides/manage-contract-metadata-builder/7.jpeg\" alt=\"Base Metadata Setup\"/></p>\n","isPage":false,"text":"\nScroll to setBaseMetadataURI, expand it, and under tokenBaseURI paste the URL for the JSON folder preview you got from Pinata earlier. It should look something like this:\nhttps://azure-wooden-lemur-911.mypinata.cloud/ipfs/QmW5gvYGWb98GsN8VjTRWu4pLn6jryEXNxZKNWpPhVwtDm/\nClick “Write” and you will be prompted to sign again. This will modify the contract on-chain to set the metadata base. Essentially any token ID you provide will be appended to this URL, along with the .json suffix. So if you mint token ID 123, it will look for tokenBaseURI + 123.json.\n\n","title":"Step 9: Set the Base Metadata URI","titles":["How to Manage Item Metadata in Sequence Builder"]},"405":{"href":"/solutions/collectibles/metadata/manage-metadata-builder#step-10-minting-time","html":"\n<p>Finally, it&#x27;s time to mint! Scroll up to <code>mint</code>, expand it, and fill in the details:</p>\n<ul>\n<li><code>to (address)</code>: This is the address that the token will be sent to. Use your Sequence wallet address or any other valid address.</li>\n<li><code>tokenId (uint256)</code>: This is your token ID. As long as you have a <code>tokenId.json</code> file already uploaded to pinata.cloud under the folder, it will work.</li>\n<li><code>amount (uint256)</code>: The number of tokens to mint (usually 1).</li>\n<li><code>data (bytes)</code>: Enter <code>0x00</code> for this simple process.</li>\n</ul>\n<p><img src=\"/img/guides/manage-contract-metadata-builder/8.jpeg\" alt=\"Mint test\"/></p>\n","isPage":false,"text":"\nFinally, it&#x27;s time to mint! Scroll up to mint, expand it, and fill in the details:\n\nto (address): This is the address that the token will be sent to. Use your Sequence wallet address or any other valid address.\ntokenId (uint256): This is your token ID. As long as you have a tokenId.json file already uploaded to pinata.cloud under the folder, it will work.\namount (uint256): The number of tokens to mint (usually 1).\ndata (bytes): Enter 0x00 for this simple process.\n\n\n","title":"Step 10: Minting Time","titles":["How to Manage Item Metadata in Sequence Builder"]},"406":{"href":"/solutions/collectibles/metadata/manage-metadata-builder#step-11-finalize-and-admire","html":"\n<p>Click &quot;Write&quot; and sign the transaction. Congratulations, you&#x27;ve just minted a token! Head over to the &quot;Tokens&quot; section to see your minted tokens with their names and images.</p>\n<p><img src=\"/img/guides/manage-contract-metadata-builder/9.jpeg\" alt=\"Finalize Minting\"/></p>\n","isPage":false,"text":"\nClick &quot;Write&quot; and sign the transaction. Congratulations, you&#x27;ve just minted a token! Head over to the &quot;Tokens&quot; section to see your minted tokens with their names and images.\n\n","title":"Step 11: Finalize and Admire","titles":["How to Manage Item Metadata in Sequence Builder"]},"407":{"href":"/solutions/collectibles/metadata/manage-metadata-builder#step-12-updating-metadata","html":"\n<p>If you make mistakes with the token metadata, you can always update it and then call the Sequence Metadata refresh endpoint to reload the specific tokens:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>curl -X GET &quot;https://metadata.sequence.app/tokens/mumbai/0xb392c99d9f8e3e0b248e5c283818be5bf5cecca7/1/refresh&quot;</span></span></code></pre>\n<p>This is in the format: <code>https://metadata.sequence.app/tokens/&lt;chain-name&gt;/&lt;contract-address&gt;/&lt;token-id&gt;/refresh</code></p>\n<p>Now that you are ready to mint, you might want to read about <a href=\"/guides/mint-collectibles-serverless\">how you can launch your own serverless endpoint for securely minting tokens</a>.</p>","isPage":false,"text":"\nIf you make mistakes with the token metadata, you can always update it and then call the Sequence Metadata refresh endpoint to reload the specific tokens:\ncurl -X GET &quot;https://metadata.sequence.app/tokens/mumbai/0xb392c99d9f8e3e0b248e5c283818be5bf5cecca7/1/refresh&quot;\nThis is in the format: https://metadata.sequence.app/tokens/&lt;chain-name&gt;/&lt;contract-address&gt;/&lt;token-id&gt;/refresh\nNow that you are ready to mint, you might want to read about how you can launch your own serverless endpoint for securely minting tokens.","title":"Step 12: Updating Metadata","titles":["How to Manage Item Metadata in Sequence Builder"]},"408":{"href":"/solutions/marketplaces/orderbook/quickstart#quickstart","html":"</header>\n","isPage":true,"text":"\n","title":"Quickstart","titles":[]},"409":{"href":"/solutions/marketplaces/orderbook/quickstart#try-a-demo","html":"\n<aside data-callout=\"info\"><p>Check out our <a href=\"https://template-aviator-custom-marketplace.pages.dev/\">demo</a> to see a custom marketplace in action.</p></aside>\n","isPage":false,"text":"\nCheck out our demo to see a custom marketplace in action.\n","title":"Try a Demo","titles":["Quickstart"]},"410":{"href":"/solutions/marketplaces/orderbook/quickstart#template","html":"\n<aside data-callout=\"info\"><p>Get started quickly with a <a href=\"https://github.com/0xsequence-demos/demo-aviator-custom-marketplace\">template</a> leveraging our Marketplace API to use as a starting point for your own.</p></aside>\n","isPage":false,"text":"\nGet started quickly with a template leveraging our Marketplace API to use as a starting point for your own.\n","title":"Template","titles":["Quickstart"]},"411":{"href":"/solutions/marketplaces/orderbook/quickstart#example-api-call","html":"\n<p>Pulling top orders for a specific collection:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">curl</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --request</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> POST</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">--url </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">https://marketplace-api.sequence.app/arbitrum-sepolia/rpc/Marketplace/GetTopOrders</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">--header </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Content-Type: application/json&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">--data </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;collectionAddress&quot;: &quot;0x1693ffc74edbb50d6138517fe5cd64fd1c917709&quot;,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;currencyAddresses&quot;: [</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;0xa9c88358862211870db6f18bc9b3f6e4f8b3eae7&quot;</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    ],</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;orderbookContractAddress&quot;: &quot;0xB537a160472183f2150d42EB1c3DD6684A55f74c&quot;,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;tokenIDs&quot;: [&quot;0&quot;,&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;],</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;isListing&quot;: true,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;priceSort&quot;: &quot;DESC&quot;</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}&#x27;</span></span></code></pre>\n<p>For more resources on leveraging the Sequence Market Protocol, check out the <a href=\"/api/marketplace/examples/orderbook-transactions\">in-depth documentation</a>.</p>\n","isPage":false,"text":"\nPulling top orders for a specific collection:\ncurl --request POST \\\n--url https://marketplace-api.sequence.app/arbitrum-sepolia/rpc/Marketplace/GetTopOrders \\\n--header &#x27;Content-Type: application/json&#x27; \\\n--data &#x27;{\n    &quot;collectionAddress&quot;: &quot;0x1693ffc74edbb50d6138517fe5cd64fd1c917709&quot;,\n    &quot;currencyAddresses&quot;: [\n        &quot;0xa9c88358862211870db6f18bc9b3f6e4f8b3eae7&quot;\n    ],\n    &quot;orderbookContractAddress&quot;: &quot;0xB537a160472183f2150d42EB1c3DD6684A55f74c&quot;,\n    &quot;tokenIDs&quot;: [&quot;0&quot;,&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;],\n    &quot;isListing&quot;: true,\n    &quot;priceSort&quot;: &quot;DESC&quot;\n}&#x27;\nFor more resources on leveraging the Sequence Market Protocol, check out the in-depth documentation.\n","title":"Example API Call","titles":["Quickstart"]},"412":{"href":"/solutions/marketplaces/orderbook/quickstart#walkthrough","html":"\n<p>Lastly, take a look at our <a href=\"/guides/custom-marketplace\">end to end guide</a> to get you off the ground running with your own marketplace &amp; learn about the infrastructure that powers Sequence. This guide leverages several components of the sequence stack such as our Marketplace APIs and Indexer - all the components needed for accelerating development time &amp; building a scalable in-game or browser based marketplace.</p>","isPage":false,"text":"\nLastly, take a look at our end to end guide to get you off the ground running with your own marketplace &amp; learn about the infrastructure that powers Sequence. This guide leverages several components of the sequence stack such as our Marketplace APIs and Indexer - all the components needed for accelerating development time &amp; building a scalable in-game or browser based marketplace.","title":"Walkthrough","titles":["Quickstart"]},"413":{"href":"/solutions/payments/onramps/fiat-on-ramps#fiat-on-ramps","html":"</header>\n<p>Sequence Wallet allows users to purchase cryptocurrencies directly with their credit card and debit card via on-ramp providers. Currently Sequence supports 6 on-ramp providers;</p>\n<ul>\n<li><a href=\"https://www.moonpay.com/\">Moonpay</a></li>\n<li><a href=\"https://ramp.network/\">Ramp</a></li>\n<li><a href=\"https://transak.com/\">Transak</a></li>\n<li><a href=\"https://paytrie.com/\">PayTrie</a></li>\n</ul>\n<p>Only providers that support the region the users are in will be displayed.</p>\n<p><img src=\"/img/fiat-providers.png\" alt=\"Sequence on-demand sign in\"/></p>\n<p>As a developer integrating the Sequence Wallet, you can choose which payment provider can be visible to users. You can also specify which token will be available to purchase via the on-ramp providers.</p>\n<p>To learn more on how to configure the on-ramp options, see <a href=\"/solutions/wallets/universal-wallet/examples/connect-wallet#wallet-login-and-connect-options\">Sequence Connect Options</a>.</p>\n","isPage":true,"text":"\nSequence Wallet allows users to purchase cryptocurrencies directly with their credit card and debit card via on-ramp providers. Currently Sequence supports 6 on-ramp providers;\n\nMoonpay\nRamp\nTransak\nPayTrie\n\nOnly providers that support the region the users are in will be displayed.\n\nAs a developer integrating the Sequence Wallet, you can choose which payment provider can be visible to users. You can also specify which token will be available to purchase via the on-ramp providers.\nTo learn more on how to configure the on-ramp options, see Sequence Connect Options.\n","title":"Fiat On-ramps","titles":[]},"414":{"href":"/solutions/payments/onramps/fiat-on-ramps#on-ramp-integrations-with-sequence-kit","html":"\n<p>The <a href=\"/solutions/wallets/sequence-kit/overview\">Sequence Kit SDK</a> offers the support for using <a href=\"https://transak.com/\">Transak</a> to on-ramp users with a fiat credit or debit card using a simplified react hook component.</p>\n<p>More on this can be found <a href=\"/solutions/wallets/sequence-kit/on-ramp\">here</a></p>","isPage":false,"text":"\nThe Sequence Kit SDK offers the support for using Transak to on-ramp users with a fiat credit or debit card using a simplified react hook component.\nMore on this can be found here","title":"On-ramp Integrations with Sequence Kit","titles":["Fiat On-ramps"]},"415":{"href":"/solutions/technical-references/internals/contract-audits#contract-audits","html":"</header>\n<p>Sequence wallet contracts underwent multiple independent audits by Consensys Diligence, <a href=\"https://quantstamp.com/\">Quantstamp</a>, and Zellic.</p>\n<p><strong>Note</strong>: Sequence Wallet was formerly known as &quot;Arcadeum Wallet&quot;. Any references of &quot;Arcadeum&quot; in these reports are synonymous with &quot;Sequence&quot;.</p>\n","isPage":true,"text":"\nSequence wallet contracts underwent multiple independent audits by Consensys Diligence, Quantstamp, and Zellic.\nNote: Sequence Wallet was formerly known as &quot;Arcadeum Wallet&quot;. Any references of &quot;Arcadeum&quot; in these reports are synonymous with &quot;Sequence&quot;.\n","title":"Contract Audits","titles":[]},"416":{"href":"/solutions/technical-references/internals/contract-audits#quantstamp","html":"\n<ul>\n<li><a href=\"https://github.com/0xsequence/wallet-contracts/blob/38e0719690eee3c4d7d8fa2ceff4ea22b0409f38/audits/sequence_quantstamp_audit_feb_2021.pdf\">February 24, 2021</a></li>\n<li><a href=\"https://github.com/0xsequence/wallet-contracts/blob/38e0719690eee3c4d7d8fa2ceff4ea22b0409f38/audits/Quantstamp_Arcadeum_Report_Final.pdf\">July 2, 2020</a></li>\n</ul>\n","isPage":false,"text":"\n\nFebruary 24, 2021\nJuly 2, 2020\n\n","title":"Quantstamp","titles":["Contract Audits"]},"417":{"href":"/solutions/technical-references/internals/contract-audits#consensys-diligence","html":"\n<ul>\n<li><a href=\"https://github.com/0xsequence/wallet-contracts/blob/145b79ab83557062281e0685ca44a8081f05a13d/audits/v2/consensys-horizon-sequence-wallet-audit-2023-02.pdf\">February 2023</a></li>\n<li><a href=\"https://github.com/0xsequence/wallet-contracts/blob/38e0719690eee3c4d7d8fa2ceff4ea22b0409f38/audits/Consensys_Diligence.md\">May 2020</a></li>\n</ul>\n","isPage":false,"text":"\n\nFebruary 2023\nMay 2020\n\n","title":"Consensys Diligence","titles":["Contract Audits"]},"418":{"href":"/solutions/technical-references/internals/contract-audits#zellic","html":"\n<ul>\n<li><a href=\"https://github.com/0xsequence/wallet-contracts/blob/145b79ab83557062281e0685ca44a8081f05a13d/audits/v2/Sequence%20Wallet%20-%20Zellic%20Audit%20Report.pdf\">March 2023</a></li>\n</ul>","isPage":false,"text":"\n\nMarch 2023\n","title":"Zellic","titles":["Contract Audits"]},"419":{"href":"/solutions/technical-references/internals/wallet-context#wallet-context","html":"</header>\n<p>The Sequence Wallet stack utilises a different &quot;context&quot; for each version of the wallet.\nThis context is a set of addresses that are used to interact with the wallet.\nhe context is used to deploy the wallet, interact with the wallet, and to interact with the wallet&#x27;s modules.</p>\n<p>For more information on the wallet context, see the specific version of the wallet you are using:</p>\n<ul>\n<li><a href=\"/solutions/technical-references/internals/v1/wallet-context\">v1 Wallet Context</a></li>\n<li><a href=\"/solutions/technical-references/internals/v2/wallet-context\">v2 Wallet Context</a></li>\n</ul>","isPage":true,"text":"\nThe Sequence Wallet stack utilises a different &quot;context&quot; for each version of the wallet.\nThis context is a set of addresses that are used to interact with the wallet.\nhe context is used to deploy the wallet, interact with the wallet, and to interact with the wallet&#x27;s modules.\nFor more information on the wallet context, see the specific version of the wallet you are using:\n\nv1 Wallet Context\nv2 Wallet Context\n","title":"Wallet Context","titles":[]},"420":{"href":"/solutions/technical-references/wallet-contracts/why#why-smart-contracts-wallets","html":"</header>\n<p>Ethereum wallets may take two different forms, Externally owned accounts (EOAs) or Smart Contract Wallets.\nThe Sequence wallet is implemented as a smart contract, which allows the system to provide additional security and functionality.</p>\n","isPage":true,"text":"\nEthereum wallets may take two different forms, Externally owned accounts (EOAs) or Smart Contract Wallets.\nThe Sequence wallet is implemented as a smart contract, which allows the system to provide additional security and functionality.\n","title":"Why smart contracts wallets?","titles":[]},"421":{"href":"/solutions/technical-references/wallet-contracts/why#externally-owned-accounts","html":"\n<p>Externally owned accounts are the most primitive form of wallet on Ethereum; EOAs are accounts composed of a single ECDSA key pair.</p>\n","isPage":false,"text":"\nExternally owned accounts are the most primitive form of wallet on Ethereum; EOAs are accounts composed of a single ECDSA key pair.\n","title":"Externally owned accounts","titles":["Why smart contracts wallets?"]},"422":{"href":"/solutions/technical-references/wallet-contracts/why#pros","html":"\n<ul>\n<li>Simple to implement</li>\n<li>Cheap to use (in some scenarios)</li>\n<li>Easy to backup</li>\n</ul>\n","isPage":false,"text":"\n\nSimple to implement\nCheap to use (in some scenarios)\nEasy to backup\n\n","title":"Pros","titles":["Why smart contracts wallets?","Externally owned accounts"]},"423":{"href":"/solutions/technical-references/wallet-contracts/why#popular-examples","html":"\n<ul>\n<li><a href=\"https://metamask.io/\">MetaMask</a></li>\n<li><a href=\"https://rainbow.me/\">Rainbow</a></li>\n<li><a href=\"https://www.myetherwallet.com/\">MyEtherWallet</a></li>\n<li><a href=\"https://trustwallet.com/\">Trust</a></li>\n</ul>\n","isPage":false,"text":"\n\nMetaMask\nRainbow\nMyEtherWallet\nTrust\n\n","title":"Popular examples","titles":["Why smart contracts wallets?","Externally owned accounts"]},"424":{"href":"/solutions/technical-references/wallet-contracts/why#smart-contract-wallets","html":"\n<p>Smart contract wallets are wallets that are implemented as smart contracts; it allows the wallets to implement arbitrary logic within the bounds of what&#x27;s supported by the underlying virtual machine.\nBecause of this, these contracts can implement functionality that&#x27;s not available for EOAs, and can also be upgraded if they are prepared to do so.</p>\n","isPage":false,"text":"\nSmart contract wallets are wallets that are implemented as smart contracts; it allows the wallets to implement arbitrary logic within the bounds of what&#x27;s supported by the underlying virtual machine.\nBecause of this, these contracts can implement functionality that&#x27;s not available for EOAs, and can also be upgraded if they are prepared to do so.\n","title":"Smart contract wallets","titles":["Why smart contracts wallets?"]},"425":{"href":"/solutions/technical-references/wallet-contracts/why#pros-1","html":"\n<ul>\n<li>Multiple keys</li>\n<li>Key rotation</li>\n<li>Pay fees using ERC20 tokens (e.g. USDC)</li>\n<li>Upgradeability</li>\n<li>Social recovery support</li>\n<li>Meta-transactions</li>\n<li>More flexible design space</li>\n</ul>\n","isPage":false,"text":"\n\nMultiple keys\nKey rotation\nPay fees using ERC20 tokens (e.g. USDC)\nUpgradeability\nSocial recovery support\nMeta-transactions\nMore flexible design space\n\n","title":"Pros","titles":["Why smart contracts wallets?","Smart contract wallets"]},"426":{"href":"/solutions/technical-references/wallet-contracts/why#examples","html":"\n<ul>\n<li><a href=\"https://sequence.app/\">Sequence</a></li>\n<li><a href=\"https://safe.global/\">Gnosis Safe</a></li>\n<li><a href=\"https://www.argent.xyz/\">Argent</a></li>\n</ul>\n","isPage":false,"text":"\n\nSequence\nGnosis Safe\nArgent\n\n","title":"Examples","titles":["Why smart contracts wallets?"]},"427":{"href":"/solutions/technical-references/wallet-contracts/why#deployment-fees-per-aa-account-abstraction-smart-account","html":"\n<p>In order for smart contract wallets to be deployed on-chain, a fee is involved which varies across AA providers.</p>\n<p>From a list of providers found <a href=\"https://github.com/ScreamingHawk/aa-benchmarks\">here</a>, Sequence ranks as the lowest total fee to deploy an account.</p>\n<table><thead><tr><th>Smart Account Provider</th><th>Execution gas</th><th>Execution fee (ETH)</th><th>L1 gas</th><th>L1 fee (ETH)</th><th>Total fee (ETH)</th><th>Total fee (USD)</th></tr></thead><tbody><tr><td>Sequence</td><td>82039</td><td>0.000005006</td><td>2744</td><td>0.000000013</td><td>0.000005020</td><td>$0.0148</td></tr></tbody></table>\n<p>As a comparison, the following is a list of the various fees across the ecosystem ranked in comparison to Sequence.</p>\n<table><thead><tr><th>Smart Account Provider</th><th>Relative to Sequence (% more fee required)</th></tr></thead><tbody><tr><td>Light Account v2</td><td>42.9</td></tr><tr><td>Kernel v2.1</td><td>49.8</td></tr><tr><td>Simple Account</td><td>52.9</td></tr><tr><td>Light Account</td><td>55.7</td></tr><tr><td>Coinbase Smart Wallet</td><td>56.9</td></tr><tr><td>Biconomy  v2</td><td>58.4</td></tr><tr><td>Safe</td><td>71.6</td></tr><tr><td>Modular Account</td><td>88.7</td></tr></tbody></table>","isPage":false,"text":"\nIn order for smart contract wallets to be deployed on-chain, a fee is involved which varies across AA providers.\nFrom a list of providers found here, Sequence ranks as the lowest total fee to deploy an account.\nSmart Account ProviderExecution gasExecution fee (ETH)L1 gasL1 fee (ETH)Total fee (ETH)Total fee (USD)Sequence820390.00000500627440.0000000130.000005020$0.0148\nAs a comparison, the following is a list of the various fees across the ecosystem ranked in comparison to Sequence.\nSmart Account ProviderRelative to Sequence (% more fee required)Light Account v242.9Kernel v2.149.8Simple Account52.9Light Account55.7Coinbase Smart Wallet56.9Biconomy  v258.4Safe71.6Modular Account88.7","title":"Deployment fees per AA (Account Abstraction) Smart Account","titles":["Why smart contracts wallets?"]},"428":{"href":"/solutions/wallets/embedded-wallet/migration#migration-guide-moving-to-sequence-embedded-wallets","html":"</header>\n","isPage":true,"text":"\n","title":"Migration Guide: Moving to Sequence Embedded Wallets","titles":[]},"429":{"href":"/solutions/wallets/embedded-wallet/migration#overview","html":"\n<p>This document provides guidance for users migrating from other providers (such as Thirdweb, Venly, etc.) to Sequence&#x27;s Embedded Wallets. The primary recommended approach is a Just-In-Time (JIT) migration pattern, which occurs when users log in for the first time after the migration.</p>\n","isPage":false,"text":"\nThis document provides guidance for users migrating from other providers (such as Thirdweb, Venly, etc.) to Sequence&#x27;s Embedded Wallets. The primary recommended approach is a Just-In-Time (JIT) migration pattern, which occurs when users log in for the first time after the migration.\n","title":"Overview","titles":["Migration Guide: Moving to Sequence Embedded Wallets"]},"430":{"href":"/solutions/wallets/embedded-wallet/migration#just-in-time-migration-process","html":"\n<p>The JIT migration process is designed to smoothly transition users from their existing wallet provider to Sequence Embedded Wallets with minimal disruption to their experience. This process occurs automatically when a user logs in for the first time after the migration has been implemented where the process looks like the following:</p>\n<ol>\n<li>\n<strong>User Authentication</strong>\n<ul>\n<li>When a user attempts to log in, user authenticates with their desired social provider or email using the Sequence Embedded Wallets SDK.</li>\n<li>Once the user is authenticated, the authenticated user data such as email address, username, or other unique user identifier along with the sequence wallet address is passed to your backend.</li>\n</ul>\n</li>\n<li>\n<strong>Database Lookup and Update</strong>\n<ul>\n<li>Update your user database with a &#x27;sequenceWallet&#x27; column.</li>\n<li>The database is queried with the unique user identifier to retrieve the corresponding user&#x27;s record.</li>\n<li>The system checks if a &#x27;sequenceWallet&#x27; already exists for this user. If so, no actoin is taken.</li>\n<li>If no Sequence wallet address is found:\na. The passed sequence wallet is inserted in the &#x27;sequenceWallet&#x27; column.</li>\n<li>If a user doesn&#x27;t exist in the database, insert the passed information as a net-new user.</li>\n</ul>\n</li>\n<li>\n<strong>Asset Migration</strong>\n<ul>\n<li>After the user is successfully logged in, the system checks if asset migration has already occurred.</li>\n<li>If not, a prompt is displayed to the user, explaining the need to migrate their assets from their old wallet to the new Sequence Embedded Wallet.</li>\n<li>The user logs in to the previous provider as a one-time event, and migrates the desired assets to their new sequence wallet.</li>\n<li>We suggest using Sequence&#x27;s Indexer to query the relevant assets to display these along with amounts to the user for ease of migration.</li>\n</ul>\n</li>\n</ol>\n<p>Please get in touch with any questions if your migration is more complex and we are happy to help.</p>","isPage":false,"text":"\nThe JIT migration process is designed to smoothly transition users from their existing wallet provider to Sequence Embedded Wallets with minimal disruption to their experience. This process occurs automatically when a user logs in for the first time after the migration has been implemented where the process looks like the following:\n\n\nUser Authentication\n\nWhen a user attempts to log in, user authenticates with their desired social provider or email using the Sequence Embedded Wallets SDK.\nOnce the user is authenticated, the authenticated user data such as email address, username, or other unique user identifier along with the sequence wallet address is passed to your backend.\n\n\n\nDatabase Lookup and Update\n\nUpdate your user database with a &#x27;sequenceWallet&#x27; column.\nThe database is queried with the unique user identifier to retrieve the corresponding user&#x27;s record.\nThe system checks if a &#x27;sequenceWallet&#x27; already exists for this user. If so, no actoin is taken.\nIf no Sequence wallet address is found:\na. The passed sequence wallet is inserted in the &#x27;sequenceWallet&#x27; column.\nIf a user doesn&#x27;t exist in the database, insert the passed information as a net-new user.\n\n\n\nAsset Migration\n\nAfter the user is successfully logged in, the system checks if asset migration has already occurred.\nIf not, a prompt is displayed to the user, explaining the need to migrate their assets from their old wallet to the new Sequence Embedded Wallet.\nThe user logs in to the previous provider as a one-time event, and migrates the desired assets to their new sequence wallet.\nWe suggest using Sequence&#x27;s Indexer to query the relevant assets to display these along with amounts to the user for ease of migration.\n\n\n\nPlease get in touch with any questions if your migration is more complex and we are happy to help.","title":"Just-In-Time Migration Process","titles":["Migration Guide: Moving to Sequence Embedded Wallets"]},"431":{"href":"/solutions/wallets/link-wallets/overview#wallet-linking-overview","html":"</header>\n<p>Wallet Linking enables the ability for a developer to create a verifiable association between two wallets from a single user. Generally, this is a link between an embedded wallet for a game or application and an external wallet, such as Metamask. This solves a number of issues for games such as:</p>\n<ul>\n<li>Validating a user holds an NFT, but doesn&#x27;t want to move their valuable asset around for token-gating or reward distributions.</li>\n<li>Easy migration for flow of funds or liquidity from an external wallet to the embedded wallet for a game.</li>\n<li>Verifiying a number of ERC20 tokens a user holds to provide governance rights.</li>\n</ul>\n<p>Using Sequence SDKs, the embedded wallet session can be instantiated from nearly any platform such as Mobile, Web, PC or Console so users can enjoy a seamless game experience. However, when desired, a verifiable URL is generated for the user to direct them to a browser session to link their external wallets.</p>\n","isPage":true,"text":"\nWallet Linking enables the ability for a developer to create a verifiable association between two wallets from a single user. Generally, this is a link between an embedded wallet for a game or application and an external wallet, such as Metamask. This solves a number of issues for games such as:\n\nValidating a user holds an NFT, but doesn&#x27;t want to move their valuable asset around for token-gating or reward distributions.\nEasy migration for flow of funds or liquidity from an external wallet to the embedded wallet for a game.\nVerifiying a number of ERC20 tokens a user holds to provide governance rights.\n\nUsing Sequence SDKs, the embedded wallet session can be instantiated from nearly any platform such as Mobile, Web, PC or Console so users can enjoy a seamless game experience. However, when desired, a verifiable URL is generated for the user to direct them to a browser session to link their external wallets.\n","title":"Wallet Linking Overview","titles":[]},"432":{"href":"/solutions/wallets/link-wallets/overview#try-a-demo","html":"\n<aside data-callout=\"info\"><p>Try out how wallet linking works <a href=\"https://demo-waas-wallet-link-initiator.pages.dev/\">here</a> by authenticating with your social login using an Embedded Wallet</p></aside>\n<p>Dive into the implementation for your own game or application, by following our <a href=\"/solutions/wallets/link-wallets/integration-guide\">integration guide</a>.</p>","isPage":false,"text":"\nTry out how wallet linking works here by authenticating with your social login using an Embedded Wallet\nDive into the implementation for your own game or application, by following our integration guide.","title":"Try a Demo","titles":["Wallet Linking Overview"]},"433":{"href":"/solutions/wallets/sequence-kit/checkout#checkout-overview","html":"</header>\n<p>The checkout modal enables developers to easily facilitate cryptocurrency payments.</p>\n<div class=\"text--center\"><img src=\"/img/kit/checkout-modal.png\" alt=\"make it easier for users to checkout with a collectible in your dap with the Kit checkout modal\"/></div>\n<header>","isPage":true,"text":"\nThe checkout modal enables developers to easily facilitate cryptocurrency payments.\n\n","title":"Checkout Overview","titles":[]},"434":{"href":"/solutions/wallets/sequence-kit/checkout#integration","html":"</header>\n<p>To integrate the checkout feature, follow these steps:</p>\n<div data-vocs-steps=\"true\"><div data-depth=\"2\">","isPage":false,"text":"\nTo integrate the checkout feature, follow these steps:\n","title":"Integration","titles":[]},"435":{"href":"/solutions/wallets/sequence-kit/checkout#1-install-the-kit-checkout-module","html":"<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> @0xsequence/kit-checkout</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># or</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">pnpm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> @0xsequence/kit-checkout</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># or</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">yarn</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> add</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> @0xsequence/kit-checkout</span></span></code></pre></div><div data-depth=\"2\">","isPage":false,"text":"npm install @0xsequence/kit-checkout\n# or\npnpm install @0xsequence/kit-checkout\n# or\nyarn add @0xsequence/kit-checkout","title":"1. Install the kit-checkout Module:","titles":["Integration"]},"436":{"href":"/solutions/wallets/sequence-kit/checkout#2-place-the-kitcheckoutprovider-below-the-sequence-kit-core-provider-in-your-app","html":"<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { KitCheckoutProvider } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/kit-checkout&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> App</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">WagmiConfig</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> config</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">config</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">QueryClientProvider</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> client</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">queryClient</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">KitProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">KitCheckoutProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">Page</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          &lt;/</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">KitCheckoutProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        &lt;/</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">KitProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;/</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">QueryClientProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;/</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">WagmiConfig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre></div><div data-depth=\"2\">","isPage":false,"text":"import { KitCheckoutProvider } from &#x27;@0xsequence/kit-checkout&#x27;\n \n \nconst App = () =&gt; {\n  return (\n    &lt;WagmiConfig config={config}&gt;\n      &lt;QueryClientProvider client={queryClient}&gt; \n        &lt;KitProvider&gt;\n          &lt;KitCheckoutProvider&gt;\n            &lt;Page /&gt;\n          &lt;/KitCheckoutProvider&gt;\n        &lt;/KitProvider&gt;\n      &lt;/QueryClientProvider&gt;\n    &lt;/WagmiConfig&gt;\n  )\n}","title":"2. Place the KitCheckoutProvider below the Sequence Kit Core Provider in your App:","titles":["Integration"]},"437":{"href":"/solutions/wallets/sequence-kit/checkout#3-opening-the-checkout-modal","html":"<p>Use the <code>useCheckoutModal</code> hook to open the checkout modal and pass a settings object:</p><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { useCheckoutModal } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/kit-checkout&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> MyComponent</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">triggerCheckout</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> useCheckoutModal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> onClick</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> checkoutSettings</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">      triggerCheckout</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(checkoutSettings)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">button</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> onClick</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">onClick</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;checkout&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">button</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span></code></pre></div><div data-depth=\"2\">","isPage":false,"text":"Use the useCheckoutModal hook to open the checkout modal and pass a settings object:  import { useCheckoutModal } from &#x27;@0xsequence/kit-checkout&#x27;\n \n \n  const MyComponent = () =&gt; {\n    const { triggerCheckout } = useCheckoutModal()\n  \n    const onClick = () =&gt; {\n      const checkoutSettings = {...}\n      triggerCheckout(checkoutSettings)\n    }\n \n    return (\n      &lt;button onClick={onClick}&gt;checkout&lt;/button&gt;\n    )\n  }","title":"3. Opening the Checkout modal","titles":["Integration"]},"438":{"href":"/solutions/wallets/sequence-kit/checkout#4-configuring-the-checkout-modal","html":"<p>Configure the checkout modal using the <code>checkoutSettings</code> object:</p><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> checkoutSettings</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  cryptoCheckout: {</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">},</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  orderSummaryItems: {</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>","isPage":false,"text":"Configure the checkout modal using the checkoutSettings object:const checkoutSettings = {\n  cryptoCheckout: {...},\n  orderSummaryItems: {...}\n}","title":"4. Configuring the Checkout modal","titles":["Integration"]},"439":{"href":"/solutions/wallets/sequence-kit/checkout#crypto-checkout-configuration-cryptocheckout","html":"<p>The <code>cryptoCheckout</code> field specifies settings for checking out with cryptocurrency, e.g., interacting with a minting contract or marketplace contract.</p><p>Example configuration:</p><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cons checkoutConfig </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // ...</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  cryptoCheckout: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    chainId: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">137</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    triggerTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;triggered transaction&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    coinQuantity: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      contractAddress: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      amountRequiredRaw: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;10000000000&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>","isPage":false,"text":"The cryptoCheckout field specifies settings for checking out with cryptocurrency, e.g., interacting with a minting contract or marketplace contract.Example configuration:cons checkoutConfig = {\n  // ...\n  cryptoCheckout: {\n    chainId: 137,\n    triggerTransaction: async () =&gt; { console.log(&#x27;triggered transaction&#x27;) },\n    coinQuantity: {\n      contractAddress: &#x27;0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174&#x27;,\n      amountRequiredRaw: &#x27;10000000000&#x27;\n    },\n  },\n}","title":"Crypto Checkout Configuration (cryptoCheckout)","titles":["Integration","4. Configuring the Checkout modal"]},"440":{"href":"/solutions/wallets/sequence-kit/checkout#order-summary-configuration-ordersummaryitems","html":"<p>The <code>orderSummaryItems</code> field specifies the list of collectibles shown in the order summary.</p><p>Example configuration:</p><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">    orderSummaryItems</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        contractAddress: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x631998e91476da5b870d741192fc5cbc55f5a52e&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        tokenId: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;66597&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        quantityRaw: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;100&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ]</span></span></code></pre></div></div>","isPage":false,"text":"The orderSummaryItems field specifies the list of collectibles shown in the order summary.Example configuration:    orderSummaryItems: [\n      {\n        contractAddress: &#x27;0x631998e91476da5b870d741192fc5cbc55f5a52e&#x27;,\n        tokenId: &#x27;66597&#x27;,\n        quantityRaw: &#x27;100&#x27;\n      },\n    ]","title":"Order Summary Configuration (orderSummaryItems)","titles":["Integration","4. Configuring the Checkout modal"]},"441":{"href":"/solutions/wallets/sequence-kit/configuration#configuration-options","html":"</header>\n<p>Developers can customize the Sequence Kit experience by passing configuration options to the <code>KitProvider</code> wrapper.</p>\n<p>Here&#x27;s how you can configure the kit using these options:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> kitConfig</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tdefaultTheme: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;light&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tposition: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;top-left&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">\t\t...</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">KitProvider</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> config</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">kitConfig</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">App</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">KitProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span></code></pre>\n<header>","isPage":true,"text":"\nDevelopers can customize the Sequence Kit experience by passing configuration options to the KitProvider wrapper.\nHere&#x27;s how you can configure the kit using these options:\n \n  const kitConfig =  {\n\t\tdefaultTheme: &#x27;light&#x27;,\n\t\tposition: &#x27;top-left&#x27;,\n\t\t...\n\t}\n \n  &lt;KitProvider config={kitConfig}&gt;\n    &lt;App /&gt;\n  &lt;KitProvider&gt;\n \n","title":"Configuration Options","titles":[]},"442":{"href":"/solutions/wallets/sequence-kit/configuration#available-options","html":"</header>\n","isPage":false,"text":"\n","title":"Available Options","titles":[]},"443":{"href":"/solutions/wallets/sequence-kit/configuration#defaulttheme","html":"\n<table><thead><tr><th>Type</th><th>Default</th></tr></thead><tbody><tr><td>string or object</td><td>dark</td></tr></tbody></table>\n<p>The defaultTheme determines the color palette used for styling the modal. Possible values include:</p>\n<ul>\n<li>&#x27;light&#x27;</li>\n<li>&#x27;dark&#x27;</li>\n<li>object</li>\n</ul>\n<p>Specific colors can be overwritten by passing a theme override object. The <a href=\"https://sequence.build/\">Sequence Builder</a> provides a useful playground for toying with the colors in Sequence Kit.</p>\n","isPage":false,"text":"\nTypeDefaultstring or objectdark\nThe defaultTheme determines the color palette used for styling the modal. Possible values include:\n\n&#x27;light&#x27;\n&#x27;dark&#x27;\nobject\n\nSpecific colors can be overwritten by passing a theme override object. The Sequence Builder provides a useful playground for toying with the colors in Sequence Kit.\n","title":"defaultTheme","titles":["Available Options"]},"444":{"href":"/solutions/wallets/sequence-kit/configuration#position","html":"\n<table><thead><tr><th>Type</th><th>Default</th></tr></thead><tbody><tr><td>string</td><td>center</td></tr></tbody></table>\n<p>The position parameter determines the location of the various modals on the screen. Possible values include:</p>\n<ul>\n<li>center</li>\n<li>middle-right</li>\n<li>middle-left</li>\n<li>top-center</li>\n<li>top-right</li>\n<li>top-left</li>\n<li>bottom-center</li>\n<li>bottom-right</li>\n<li>bottom-left</li>\n</ul>\n","isPage":false,"text":"\nTypeDefaultstringcenter\nThe position parameter determines the location of the various modals on the screen. Possible values include:\n\ncenter\nmiddle-right\nmiddle-left\ntop-center\ntop-right\ntop-left\nbottom-center\nbottom-right\nbottom-left\n\n","title":"position","titles":["Available Options"]},"445":{"href":"/solutions/wallets/sequence-kit/configuration#sign-in-modal-configuration-signin","html":"\n<p>The <code>signIn</code> object is used to configure the sign in modal.</p>\n","isPage":false,"text":"\nThe signIn object is used to configure the sign in modal.\n","title":"Sign In Modal Configuration (signIn)","titles":["Available Options"]},"446":{"href":"/solutions/wallets/sequence-kit/configuration#signinlogourl","html":"\n<div><img src=\"/img/kit/dark-mode-logo.png\" alt=\"Enable a dark theme to Sequence Kit\"/></div>\n<table><thead><tr><th>Type</th><th>Default</th></tr></thead><tbody><tr><td>string</td><td>undefined</td></tr></tbody></table>\n<p>URL of the logo to be shown in the sign in modal.</p>\n","isPage":false,"text":"\n\nTypeDefaultstringundefined\nURL of the logo to be shown in the sign in modal.\n","title":"signIn.logoUrl","titles":["Available Options","Sign In Modal Configuration (signIn)"]},"447":{"href":"/solutions/wallets/sequence-kit/configuration#signinprojectname","html":"\n<div><img src=\"/img/kit/project-name.png\" alt=\"Add a project name to Sequence Kit\"/></div>\n<table><thead><tr><th>Type</th><th>Default</th></tr></thead><tbody><tr><td>string</td><td>undefined</td></tr></tbody></table>\n<p>Name of the project to be shown in the sign in modal.</p>\n","isPage":false,"text":"\n\nTypeDefaultstringundefined\nName of the project to be shown in the sign in modal.\n","title":"signIn.projectName","titles":["Available Options","Sign In Modal Configuration (signIn)"]},"448":{"href":"/solutions/wallets/sequence-kit/configuration#signinshowemailinput","html":"\n<div><img src=\"/img/kit/email-input.png\" alt=\"Enable email input with Sequence Kit\"/></div>\n<table><thead><tr><th>Type</th><th>Default</th></tr></thead><tbody><tr><td>boolean</td><td>true</td></tr></tbody></table>\n<p>Determines whether the inline email input will be shown in the sign in modal.</p>\n","isPage":false,"text":"\n\nTypeDefaultbooleantrue\nDetermines whether the inline email input will be shown in the sign in modal.\n","title":"signIn.showEmailInput","titles":["Available Options","Sign In Modal Configuration (signIn)"]},"449":{"href":"/solutions/wallets/sequence-kit/configuration#signinsocialauthoptions","html":"\n<div><img src=\"/img/kit/mini-auth-options.png\" alt=\"Choose between a list of login providers for Sequence Kit\"/></div>\n<table><thead><tr><th>Type</th><th>Default</th></tr></thead><tbody><tr><td>string[]</td><td>[&#x27;google&#x27;, &#x27;facebook&#x27;, &#x27;twitch&#x27;, &#x27;apple&#x27;]</td></tr></tbody></table>\n<p>Determines which authentication options will be shown as social options in the sign in modal.\nThe wallets will be displayed in the order they are passed in the array. The values correspond to the connector&#x27;s id and a corresponding connector must be passed down to wagmi.</p>\n<p>For a full list of official connectors, see the <a href=\"https://github.com/0xsequence/kit/tree/master/packages/connectors\">connectors</a> page.</p>\n","isPage":false,"text":"\n\nTypeDefaultstring[][&#x27;google&#x27;, &#x27;facebook&#x27;, &#x27;twitch&#x27;, &#x27;apple&#x27;]\nDetermines which authentication options will be shown as social options in the sign in modal.\nThe wallets will be displayed in the order they are passed in the array. The values correspond to the connector&#x27;s id and a corresponding connector must be passed down to wagmi.\nFor a full list of official connectors, see the connectors page.\n","title":"signIn.socialAuthOptions","titles":["Available Options","Sign In Modal Configuration (signIn)"]},"450":{"href":"/solutions/wallets/sequence-kit/configuration#signinwalletauthoptions","html":"\n<div><img src=\"/img/kit/auth-options.png\" alt=\"Enable from a list of wallet providers for users to login to Sequence Kit\"/></div>\n<table><thead><tr><th>Type</th><th>Default</th></tr></thead><tbody><tr><td>string[]</td><td>[&#x27;sequence&#x27;, &#x27;metamask&#x27;, &#x27;wallet-connect&#x27;, &#x27;coinbase-wallet&#x27;]</td></tr></tbody></table>\n<p>Determines which authentication options will be shown in the modal as web3 wallet options.\nThe wallets will be displayed in the order they are passed in the array. The values correspond to the connector&#x27;s id and a corresponding connector must be passed down to wagmi.</p>\n<p>For a full list of official connectors, see the <a href=\"https://github.com/0xsequence/kit/tree/master/packages/connectors\">connectors</a> page.</p>\n","isPage":false,"text":"\n\nTypeDefaultstring[][&#x27;sequence&#x27;, &#x27;metamask&#x27;, &#x27;wallet-connect&#x27;, &#x27;coinbase-wallet&#x27;]\nDetermines which authentication options will be shown in the modal as web3 wallet options.\nThe wallets will be displayed in the order they are passed in the array. The values correspond to the connector&#x27;s id and a corresponding connector must be passed down to wagmi.\nFor a full list of official connectors, see the connectors page.\n","title":"signIn.walletAuthOptions","titles":["Available Options","Sign In Modal Configuration (signIn)"]},"451":{"href":"/solutions/wallets/sequence-kit/configuration#displayedassets","html":"\n<table><thead><tr><th>Type</th><th>Default</th></tr></thead><tbody><tr><td>[{ contractAddress: string, chainId: number }, ...]</td><td>undefined</td></tr></tbody></table>\n<p>If provided, this will determine which assets are to be displayed in the in-game wallet modal main view.\nBy passing a list of displayed assets, only assets from the provided list will be displayed in the main view.\nIn the case that no assets are provided, all owned assets can be displayed in the main view.</p>\n<header>","isPage":false,"text":"\nTypeDefault[{ contractAddress: string, chainId: number }, ...]undefined\nIf provided, this will determine which assets are to be displayed in the in-game wallet modal main view.\nBy passing a list of displayed assets, only assets from the provided list will be displayed in the main view.\nIn the case that no assets are provided, all owned assets can be displayed in the main view.\n","title":"displayedAssets","titles":["Available Options"]},"452":{"href":"/solutions/wallets/sequence-kit/configuration#create-universal-default-connectors","html":"</header>\n<p>While we generally recommed using Embedded Wallets with SequenceKit, as an alternative, you can also use leverage our Universal Wallet configuration. When creating a wagmi <code>connectors</code> variable, import the <code>getDefaultConnectors</code> function from the <code>@0xsequence/kit</code> package, and include a Wallet Connect ID obtained from <a href=\"https://cloud.walletconnect.com/app\">here</a>, a default chain ID, app name, and the <code>projectAccessKey</code>, then <a href=\"/solutions/wallets/sequence-kit/getting-started#create-wagmi-config\">continue with the integration from the quickstart</a>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"config.ts\" data-lang=\"typescript\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { getDefaultConnectors } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/kit&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">export</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> projectAccessKey</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;&lt;access-key&gt;&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> connectors</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getDefaultConnectors</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  walletConnectProjectId: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;wallet-connect-id&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  defaultChainId: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  appName: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;demo app&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  projectAccessKey</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">export</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> config</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createConfig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  transports,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  connectors,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  chains</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>","isPage":false,"text":"\nWhile we generally recommed using Embedded Wallets with SequenceKit, as an alternative, you can also use leverage our Universal Wallet configuration. When creating a wagmi connectors variable, import the getDefaultConnectors function from the @0xsequence/kit package, and include a Wallet Connect ID obtained from here, a default chain ID, app name, and the projectAccessKey, then continue with the integration from the quickstart.\nimport { getDefaultConnectors } from &#x27;@0xsequence/kit&#x27;\n...\nexport const projectAccessKey = &#x27;&lt;access-key&gt;&#x27;\n \nconst connectors = getDefaultConnectors({\n  walletConnectProjectId: &#x27;wallet-connect-id&#x27;,\n  defaultChainId: 1,\n  appName: &#x27;demo app&#x27;,\n  projectAccessKey\n})\n \nexport const config = createConfig({\n  transports,\n  connectors,\n  chains\n})","title":"Create Universal Default Connectors","titles":[]},"453":{"href":"/solutions/wallets/sequence-kit/custom-connectors#custom-connectors-in-sequence-kit","html":"</header>\n<p>Sequence Kit provides official connectors via the <a href=\"https://github.com/0xsequence/kit/tree/master/packages/connectors\">@0xsequence/kit-connectors</a> package. However, you can also integrate custom connectors with Sequence Kit to support additional wallets. This guide will walk you through creating and using custom connectors.</p>\n","isPage":true,"text":"\nSequence Kit provides official connectors via the @0xsequence/kit-connectors package. However, you can also integrate custom connectors with Sequence Kit to support additional wallets. This guide will walk you through creating and using custom connectors.\n","title":"Custom Connectors in Sequence Kit","titles":[]},"454":{"href":"/solutions/wallets/sequence-kit/custom-connectors#creating-a-custom-connector","html":"\n<p>To create a custom connector, you can use an existing connector as a basis. For example, the <a href=\"https://github.com/0xsequence/kit/blob/master/packages/connectors/src/connectors/metamask/metamask.ts\">Metamask Connector</a> is a good starting point. Here&#x27;s an example of how to create a custom connector:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">export</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> const</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> myCustomConnector</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">options</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> MyCustomConnectorOptions</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  id: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;my-custom-connector&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  name: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;My Custom Connector&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  logoDark: MyCustomLogoDark,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  logoLight: MyCustomLogoLight,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  createConnector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> connector</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> myCustomConnector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(options);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> connector;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">});</span></span></code></pre>\n<p>Make sure to provide a unique <code>id</code> for your connector to avoid conflicts with other connectors. You can also customize fields such as <code>name</code>, <code>logoDark</code>, and <code>logoLight</code> to control how the connector appears in Sequence Kit.</p>\n<p>The <code>createConnector</code> function should return an initialized connector. Sequence Kit connectors are wrappers of Wagmi connectors, so you can use an official Wagmi connector if available, or create your own if needed.</p>\n<p>For more details on creating custom connectors, refer to <a href=\"https://wagmi.sh/examples/custom-connector\">Wagmi&#x27;s guide on Custom Connectors</a>.</p>\n<header>","isPage":false,"text":"\nTo create a custom connector, you can use an existing connector as a basis. For example, the Metamask Connector is a good starting point. Here&#x27;s an example of how to create a custom connector:\nexport const myCustomConnector = (options: MyCustomConnectorOptions) =&gt; ({\n  id: &#x27;my-custom-connector&#x27;,\n  name: &#x27;My Custom Connector&#x27;,\n  logoDark: MyCustomLogoDark,\n  logoLight: MyCustomLogoLight,\n  createConnector: () =&gt; {\n    const connector = myCustomConnector(options);\n    return connector;\n  },\n});\nMake sure to provide a unique id for your connector to avoid conflicts with other connectors. You can also customize fields such as name, logoDark, and logoLight to control how the connector appears in Sequence Kit.\nThe createConnector function should return an initialized connector. Sequence Kit connectors are wrappers of Wagmi connectors, so you can use an official Wagmi connector if available, or create your own if needed.\nFor more details on creating custom connectors, refer to Wagmi&#x27;s guide on Custom Connectors.\n","title":"Creating a Custom Connector","titles":["Custom Connectors in Sequence Kit"]},"455":{"href":"/solutions/wallets/sequence-kit/custom-connectors#using-custom-connectors","html":"</header>\n<p>When using custom connectors, you can&#x27;t rely on the <code>getDefaultConnectors</code> utility function. Instead, you need to pass custom configurations to Sequence Kit.</p>\n<p>First, create a list of connectors, including your custom connector, and provide it to the Wagmi configuration:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { getKitConnectWallets } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/kit&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> connectors</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getKitConnectWallets</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  google</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    defaultNetwork: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">137</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    connect: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      app: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;my-app&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      projectAccessKey: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;&lt;access-key&gt;&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }),</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // ... other connectors</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  myCustomConnector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ appName: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;my-app&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> config</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createConfig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  transports,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  connectors,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  chains</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n<p>Next, use your custom connector by specifying its <code>id</code> in either the <code>socialAuthOptions</code> or <code>walletAuthOptions</code> field of the Sequence Kit configuration:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> kitConfig</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  signIn: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    socialAuthOptions: [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;google&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;facebook&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    walletAuthOptions: [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;metamask&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;my-custom-connector&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">WagmiConfig</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> config</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">wagmiConfig</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">QueryClientProvider</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> client</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">queryClient</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">KitProvider</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> config</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">kitConfig</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">App</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;/</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">KitProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;/</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">QueryClientProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  &lt;/</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">WagmiConfig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<header>","isPage":false,"text":"\nWhen using custom connectors, you can&#x27;t rely on the getDefaultConnectors utility function. Instead, you need to pass custom configurations to Sequence Kit.\nFirst, create a list of connectors, including your custom connector, and provide it to the Wagmi configuration:\nimport { getKitConnectWallets } from &#x27;@0xsequence/kit&#x27;;\n \nconst connectors = getKitConnectWallets([\n  google({\n    defaultNetwork: 137,\n    connect: {\n      app: &#x27;my-app&#x27;,\n      projectAccessKey: &#x27;&lt;access-key&gt;&#x27;\n    }\n  }),\n  // ... other connectors\n  myCustomConnector({ appName: &#x27;my-app&#x27; }),\n]);\n \nconst config = createConfig({\n  transports,\n  connectors,\n  chains\n})\nNext, use your custom connector by specifying its id in either the socialAuthOptions or walletAuthOptions field of the Sequence Kit configuration:\nconst kitConfig = {\n  signIn: {\n    socialAuthOptions: [&#x27;google&#x27;, &#x27;facebook&#x27;],\n    walletAuthOptions: [&#x27;metamask&#x27;, &#x27;my-custom-connector&#x27;],\n  }\n};\n \nreturn (\n  &lt;WagmiConfig config={wagmiConfig}&gt;\n    &lt;QueryClientProvider client={queryClient}&gt;\n      &lt;KitProvider config={kitConfig}&gt;\n        &lt;App /&gt;\n      &lt;/KitProvider&gt;\n    &lt;/QueryClientProvider&gt;\n  &lt;/WagmiConfig&gt;\n);\n","title":"Using Custom Connectors","titles":[]},"456":{"href":"/solutions/wallets/sequence-kit/custom-connectors#share-your-custom-connectors","html":"</header>\n<p>Feel free to contribute your custom connectors by creating a <a href=\"https://github.com/0xsequence/kit/pulls\">pull request</a>. This way, others can benefit from your work and enjoy seamless integration with Sequence Kit.</p>\n<p>Share the love ❤️ by expanding the ecosystem of custom connectors!</p>","isPage":false,"text":"\nFeel free to contribute your custom connectors by creating a pull request. This way, others can benefit from your work and enjoy seamless integration with Sequence Kit.\nShare the love ❤️ by expanding the ecosystem of custom connectors!","title":"Share Your Custom Connectors","titles":[]},"457":{"href":"/solutions/wallets/sequence-kit/on-ramp#on-ramp-overview","html":"</header>\n<p>The checkout on-ramp modal enables developers to easily facilitate on-ramp via fiat currency into a cryptocurrency. With this integration, one can use a credit card to purchase tokens across many different networks.</p>\n<div class=\"text--center\"><img src=\"/img/kit/kit-on-ramp.png\" alt=\"Enable the on-ramp modal in Sequence Kit to onboard users using fiat currencies with a credit or debit card\"/></div>\n","isPage":true,"text":"\nThe checkout on-ramp modal enables developers to easily facilitate on-ramp via fiat currency into a cryptocurrency. With this integration, one can use a credit card to purchase tokens across many different networks.\n\n","title":"On-ramp Overview","titles":[]},"458":{"href":"/solutions/wallets/sequence-kit/on-ramp#integration","html":"\n<p>To integrate the on-ramp feature, follow these steps:</p>\n<div data-vocs-steps=\"true\"><div data-depth=\"3\">","isPage":false,"text":"\nTo integrate the on-ramp feature, follow these steps:\n","title":"Integration","titles":["On-ramp Overview"]},"459":{"href":"/solutions/wallets/sequence-kit/on-ramp#1-install-the-kit-checkout-module","html":"<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> @0xsequence/kit-checkout</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># or</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">pnpm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> @0xsequence/kit-checkout</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># or</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">yarn</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> add</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> @0xsequence/kit-checkout</span></span></code></pre></div><div data-depth=\"3\">","isPage":false,"text":"npm install @0xsequence/kit-checkout\n# or\npnpm install @0xsequence/kit-checkout\n# or\nyarn add @0xsequence/kit-checkout","title":"1. Install the kit-checkout Module:","titles":["On-ramp Overview","Integration"]},"460":{"href":"/solutions/wallets/sequence-kit/on-ramp#2-place-the-kitcheckoutprovider-below-the-sequence-kit-core-provider-in-your-app","html":"<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { KitCheckoutProvider } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/kit-checkout&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> App</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">WagmiConfig</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> config</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">config</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">QueryClientProvider</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> client</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">queryClient</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">KitProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">KitCheckoutProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">Page</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          &lt;/</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">KitCheckoutProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        &lt;/</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">KitProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;/</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">QueryClientProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;/</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">WagmiConfig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre></div><div data-depth=\"3\">","isPage":false,"text":"import { KitCheckoutProvider } from &#x27;@0xsequence/kit-checkout&#x27;\n \n \nconst App = () =&gt; {\n  return (\n    &lt;WagmiConfig config={config}&gt;\n      &lt;QueryClientProvider client={queryClient}&gt; \n        &lt;KitProvider&gt;\n          &lt;KitCheckoutProvider&gt;\n            &lt;Page /&gt;\n          &lt;/KitCheckoutProvider&gt;\n        &lt;/KitProvider&gt;\n      &lt;/QueryClientProvider&gt;\n    &lt;/WagmiConfig&gt;\n  )\n}","title":"2. Place the KitCheckoutProvider Below the Sequence Kit Core Provider in your App:","titles":["On-ramp Overview","Integration"]},"461":{"href":"/solutions/wallets/sequence-kit/on-ramp#3-adding-funds-with-a-credit-card","html":"<p>Call the <code>triggerAddFunds</code> function to cause a modal to appear</p><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { useAddFundsModal } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/kit-checkout&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> MyComponent</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">triggerAddFunds</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">toggleAddFunds</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> useAddFundsModal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> onClick</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">      toggleAddFunds</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        walletAddress: recipientAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">button</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> onClick</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">onClick</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;Add Funds&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">button</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span></code></pre></div></div>","isPage":false,"text":"Call the triggerAddFunds function to cause a modal to appear  import { useAddFundsModal } from &#x27;@0xsequence/kit-checkout&#x27;\n \n  const MyComponent = () =&gt; {\n    const { triggerAddFunds: toggleAddFunds } = useAddFundsModal()\n \n    const onClick = () =&gt; {\n      toggleAddFunds({\n        walletAddress: recipientAddress,\n      })\n    }\n \n    return (\n      &lt;button onClick={onClick}&gt;Add Funds&lt;/button&gt;\n    )\n  }","title":"3. Adding Funds with a Credit Card","titles":["On-ramp Overview","Integration"]},"462":{"href":"/solutions/wallets/sequence-kit/overview#sequence-kit-sdk","html":"</header>\n<p>Sequence Kit is the ultimate toolkit for effortlessly integrating web3 wallets into your applications, providing your users with a smooth and secure onboarding experience. With our robust tools built on the popular <a href=\"https://wagmi.sh/\">wagmi</a> library, unlock a realm of possibilities in the world of web3.</p>\n","isPage":true,"text":"\nSequence Kit is the ultimate toolkit for effortlessly integrating web3 wallets into your applications, providing your users with a smooth and secure onboarding experience. With our robust tools built on the popular wagmi library, unlock a realm of possibilities in the world of web3.\n","title":"Sequence Kit SDK","titles":[]},"463":{"href":"/solutions/wallets/sequence-kit/overview#key-features","html":"\n<ul>\n<li>\n<p><strong>Universal Connections</strong>: Seamlessly connect via popular social logins such as Facebook, Google, Discord, and more! Your users will enjoy a smooth, secure onboarding process.</p>\n</li>\n<li>\n<p><strong>Embedded Wallets</strong>: Leverage our non-custodial embedded wallet within Sequence Kit to put web3 in the background such as optional popups / modals so users can focus on the experience.</p>\n</li>\n<li>\n<p><strong>External Wallet Integration</strong>: Effortlessly integrate with leading web3 wallets like WalletConnect and MetaMask. Unleash the power of blockchain with just a few clicks!</p>\n</li>\n<li>\n<p><strong>Web3 Inventory</strong>: Provide your users with a web3-enabled inventory, enabling them to manage their coins and collectibles all within your own application.</p>\n</li>\n<li>\n<p><strong>NFT Checkout</strong>: Enable users to purchase collectibles within Sequence Kit using a credit card or crypto.</p>\n</li>\n<li>\n<p><strong>Customizability</strong>: Brand Sequence Kit with your own logo, color scheme and configure it with your social providers and wallets you want to service.</p>\n</li>\n</ul>\n<p>Explore the potential of Sequence Kit by trying out our <a href=\"https://0xsequence.github.io/kit\">demo</a>!</p>\n","isPage":false,"text":"\n\n\nUniversal Connections: Seamlessly connect via popular social logins such as Facebook, Google, Discord, and more! Your users will enjoy a smooth, secure onboarding process.\n\n\nEmbedded Wallets: Leverage our non-custodial embedded wallet within Sequence Kit to put web3 in the background such as optional popups / modals so users can focus on the experience.\n\n\nExternal Wallet Integration: Effortlessly integrate with leading web3 wallets like WalletConnect and MetaMask. Unleash the power of blockchain with just a few clicks!\n\n\nWeb3 Inventory: Provide your users with a web3-enabled inventory, enabling them to manage their coins and collectibles all within your own application.\n\n\nNFT Checkout: Enable users to purchase collectibles within Sequence Kit using a credit card or crypto.\n\n\nCustomizability: Brand Sequence Kit with your own logo, color scheme and configure it with your social providers and wallets you want to service.\n\n\nExplore the potential of Sequence Kit by trying out our demo!\n","title":"Key Features","titles":["Sequence Kit SDK"]},"464":{"href":"/solutions/wallets/sequence-kit/overview#next-steps","html":"\n<p>Ready to integrate Sequence Kit into your application? Check out our <a href=\"/solutions/wallets/sequence-kit/getting-started\">Quickstart guide</a>. If you&#x27;re already familiar with Sequence Kit dive into the available <a href=\"/solutions/wallets/sequence-kit/configuration\">configuration options</a> or take a look at the <a href=\"/solutions/wallets/sequence-kit/checkout\">checkout</a>.</p>","isPage":false,"text":"\nReady to integrate Sequence Kit into your application? Check out our Quickstart guide. If you&#x27;re already familiar with Sequence Kit dive into the available configuration options or take a look at the checkout.","title":"Next Steps","titles":["Sequence Kit SDK"]},"465":{"href":"/solutions/wallets/universal-wallet/fiat-on-ramps#fiat-on-ramps","html":"</header>\n<p>Sequence Wallet allows users to purchase cryptocurrencies directly with their credit card and debit card via on-ramp providers. Currently Sequence supports 6 on-ramp providers;</p>\n<ul>\n<li><a href=\"https://www.moonpay.com/\">Moonpay</a></li>\n<li><a href=\"https://ramp.network/\">Ramp</a></li>\n<li><a href=\"https://www.transak.com/\">Transak</a></li>\n<li><a href=\"https://paytrie.com/\">PayTrie</a></li>\n</ul>\n<p>Only providers that support the region the users are in will be displayed.</p>\n<p><img src=\"/img/fiat-providers.png\" alt=\"Sequence on-demand sign in\"/></p>\n<p>As a developer integrating the Sequence Wallet, you can choose which payment provider can be visible to users. You can also specify which token will be available to purchase via the on-ramp providers.</p>\n<p>To learn more on how to configure the on-ramp options, see <a href=\"/solutions/wallets/universal-wallet/examples/connect-wallet#wallet-login-and-connect-options\">Sequence Connect Options</a>.</p>\n","isPage":true,"text":"\nSequence Wallet allows users to purchase cryptocurrencies directly with their credit card and debit card via on-ramp providers. Currently Sequence supports 6 on-ramp providers;\n\nMoonpay\nRamp\nTransak\nPayTrie\n\nOnly providers that support the region the users are in will be displayed.\n\nAs a developer integrating the Sequence Wallet, you can choose which payment provider can be visible to users. You can also specify which token will be available to purchase via the on-ramp providers.\nTo learn more on how to configure the on-ramp options, see Sequence Connect Options.\n","title":"Fiat On-ramps","titles":[]},"466":{"href":"/solutions/wallets/universal-wallet/fiat-on-ramps#on-ramp-integrations-with-sequence-kit","html":"\n<p>The <a href=\"/solutions/wallets/sequence-kit/overview\">Sequence Kit SDK</a> offers the support for using <a href=\"https://transak.com/\">Transak</a> to on-ramp users with a fiat credit or debit card using a simplified react hook component.</p>\n<p>More on this can be found <a href=\"/solutions/wallets/sequence-kit/on-ramp\">here</a></p>","isPage":false,"text":"\nThe Sequence Kit SDK offers the support for using Transak to on-ramp users with a fiat credit or debit card using a simplified react hook component.\nMore on this can be found here","title":"On-ramp Integrations with Sequence Kit","titles":["Fiat On-ramps"]},"467":{"href":"/solutions/wallets/universal-wallet/key-management#key-management","html":"</header>\n<p>Each Sequence wallet can be controlled by multiple private keys, acting like a multisignature wallet. Users can either create a Sequence wallet using one of the supported social login options or create a wallet with a private key stored only on that device.</p>\n<p>The improved security compared to traditional blockchain wallet comes from the fact that multiple independent keys need to be compromised for a malicious actor to take control of a user’s wallet, instead of a single key. The philosophy is that the more independent private-keys the user adds to their wallet, the more secure their wallet becomes, even if each individual key is only moderately secure on their own.</p>\n","isPage":true,"text":"\nEach Sequence wallet can be controlled by multiple private keys, acting like a multisignature wallet. Users can either create a Sequence wallet using one of the supported social login options or create a wallet with a private key stored only on that device.\nThe improved security compared to traditional blockchain wallet comes from the fact that multiple independent keys need to be compromised for a malicious actor to take control of a user’s wallet, instead of a single key. The philosophy is that the more independent private-keys the user adds to their wallet, the more secure their wallet becomes, even if each individual key is only moderately secure on their own.\n","title":"Key Management","titles":[]},"468":{"href":"/solutions/wallets/universal-wallet/key-management#social-login-wallets","html":"\n<p>Sequence Wallet created with social logins are currently secured using three private keys: Session keys, a Guard key and a Torus key. The Session key and Torus key are both generated for the first time when a user creates their Sequence Wallet via social login or email authentication.\nAt least two of the three keys are needed to unlock an account. This means that if one of the three keys is lost or compromised, a user can use the two remaining keys to replace the lost/compromised key. For example, if a user lost their device containing their Session Key, they can unlock their Sequence Wallet account by email or social login for the Torus key combined with the Guard key. Once done, another session key is auto-generated and the user is back in their account with all 3 keys accessible again.</p>\n","isPage":false,"text":"\nSequence Wallet created with social logins are currently secured using three private keys: Session keys, a Guard key and a Torus key. The Session key and Torus key are both generated for the first time when a user creates their Sequence Wallet via social login or email authentication.\nAt least two of the three keys are needed to unlock an account. This means that if one of the three keys is lost or compromised, a user can use the two remaining keys to replace the lost/compromised key. For example, if a user lost their device containing their Session Key, they can unlock their Sequence Wallet account by email or social login for the Torus key combined with the Guard key. Once done, another session key is auto-generated and the user is back in their account with all 3 keys accessible again.\n","title":"Social Login Wallets","titles":["Key Management"]},"469":{"href":"/solutions/wallets/universal-wallet/key-management#session-keys","html":"\n<p>Session keys are stored in the browser&#x27;s <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\">IndexedDB</a>.\nUsers should be prudent in safeguarding their devices from unauthorized access since an attacker with access to their IndexedDB effectively has control of their session key.</p>\n","isPage":false,"text":"\nSession keys are stored in the browser&#x27;s IndexedDB.\nUsers should be prudent in safeguarding their devices from unauthorized access since an attacker with access to their IndexedDB effectively has control of their session key.\n","title":"Session Keys","titles":["Key Management","Social Login Wallets"]},"470":{"href":"/solutions/wallets/universal-wallet/key-management#guard-key","html":"\n<p>A Guard key is a key owned by Horizon. This key allows Horizon to help users that lost their Session key and can require additional information from the user in case of suspicious activity, if the user wants this additional protection. This key would be compromised if a malicious actor took control over Horizon servers hosting the Guard key.</p>\n","isPage":false,"text":"\nA Guard key is a key owned by Horizon. This key allows Horizon to help users that lost their Session key and can require additional information from the user in case of suspicious activity, if the user wants this additional protection. This key would be compromised if a malicious actor took control over Horizon servers hosting the Guard key.\n","title":"Guard Key","titles":["Key Management","Social Login Wallets"]},"471":{"href":"/solutions/wallets/universal-wallet/key-management#torus-key","html":"\n<p>A Torus key is a key generated by the <a href=\"https://tor.us/\">Torus network</a>, and is generated using a user’s email or social login credentials such as Google or AppleID. Torus uses threshold cryptography to ensure that only the user can access their private key, making these keys non-custodial. A Torus key would be compromised if a malicious actor had control over the social account or email a user used to generate their Torus key. All Torus keys could be compromised if the Torus network itself was compromised.</p>\n<aside data-callout=\"info\"><strong data-callout-title=\"true\">DEFAULTS + CUSTOMIZATION</strong><p>While this is the default setup for new Sequence Wallets, we intend to add the ability for users to add, remove and replace the keys controlling their wallet such that users can choose their preference in terms of security and user experience tradeoff. Even the Guard key will be able to be removed. Security tips and recommendations will be added to ensure users are well informed of the risks and how to protect themselves against them.</p></aside>","isPage":false,"text":"\nA Torus key is a key generated by the Torus network, and is generated using a user’s email or social login credentials such as Google or AppleID. Torus uses threshold cryptography to ensure that only the user can access their private key, making these keys non-custodial. A Torus key would be compromised if a malicious actor had control over the social account or email a user used to generate their Torus key. All Torus keys could be compromised if the Torus network itself was compromised.\nDEFAULTS + CUSTOMIZATIONWhile this is the default setup for new Sequence Wallets, we intend to add the ability for users to add, remove and replace the keys controlling their wallet such that users can choose their preference in terms of security and user experience tradeoff. Even the Guard key will be able to be removed. Security tips and recommendations will be added to ensure users are well informed of the risks and how to protect themselves against them.","title":"Torus Key","titles":["Key Management","Social Login Wallets"]},"472":{"href":"/solutions/wallets/universal-wallet/overview#wallet","html":"</header>\n<p>Sequence Universal Wallet gives you a friendly, non-custodial wallet for your users with multi-chain support and seamless integration with a focus on web2.5 or web3 users.</p>\n<p>Most wallets for Ethereum have a single private key that has full control over a wallet, i.e. an Externally Owned Account (EOAs).\nHowever, a Sequence wallet is a Smart Contract that is deployed on the blockchain and which can be controlled by multiple private keys.\nThese keys are meant to be controlled by the wallet owner and provide added security since more than one of these keys would need to be\ncompromised for the wallet to be compromised.</p>\n<p>Check out how to integrate our Universal Wallet via our <a href=\"/solutions/builder/wallet-sdks\">Sequence Builder Console</a> or continue with our <a href=\"/solutions/wallets/universal-wallet/quickstart\">Quickstart</a> guide to integrate with Sequence Universal Wallet via our SDK package.</p>","isPage":true,"text":"\nSequence Universal Wallet gives you a friendly, non-custodial wallet for your users with multi-chain support and seamless integration with a focus on web2.5 or web3 users.\nMost wallets for Ethereum have a single private key that has full control over a wallet, i.e. an Externally Owned Account (EOAs).\nHowever, a Sequence wallet is a Smart Contract that is deployed on the blockchain and which can be controlled by multiple private keys.\nThese keys are meant to be controlled by the wallet owner and provide added security since more than one of these keys would need to be\ncompromised for the wallet to be compromised.\nCheck out how to integrate our Universal Wallet via our Sequence Builder Console or continue with our Quickstart guide to integrate with Sequence Universal Wallet via our SDK package.","title":"Wallet","titles":[]},"473":{"href":"/solutions/wallets/universal-wallet/platforms#platforms","html":"</header>\n","isPage":true,"text":"\n","title":"Platforms","titles":[]},"474":{"href":"/solutions/wallets/universal-wallet/platforms#web-wallet","html":"\n<p>Sequence works beautifully on all modern Web Browsers! Try it at <a href=\"https://sequence.app\">https://sequence.app</a> from any computer, phone or tablet.</p>\n<p>See <a href=\"/solutions/wallets/universal-wallet/quickstart.mdx\">Build With Sequence</a> to get started.</p>\n","isPage":false,"text":"\nSequence works beautifully on all modern Web Browsers! Try it at https://sequence.app from any computer, phone or tablet.\nSee Build With Sequence to get started.\n","title":"Web Wallet","titles":["Platforms"]},"475":{"href":"/solutions/wallets/universal-wallet/platforms#mobile-wallet","html":"\n<p>Sequence works beautifully on your Mobile Web Browser! Try it at <a href=\"https://sequence.app\">https://sequence.app</a> from any phone or tablet.</p>\n<p>This means dapps which integrate the Sequence Wallet will automatically support users on all mobile devices,\nwhile using standard Ethereum web3 dapp-to-wallet communication. See <a href=\"/solutions/wallets/universal-wallet/quickstart.mdx\">Build With Sequence</a> to get started.</p>\n","isPage":false,"text":"\nSequence works beautifully on your Mobile Web Browser! Try it at https://sequence.app from any phone or tablet.\nThis means dapps which integrate the Sequence Wallet will automatically support users on all mobile devices,\nwhile using standard Ethereum web3 dapp-to-wallet communication. See Build With Sequence to get started.\n","title":"Mobile Wallet","titles":["Platforms"]},"476":{"href":"/solutions/wallets/universal-wallet/platforms#browser-extension-wallet","html":"\n<p>Sequence Chrome Extension: <a href=\"https://chrome.google.com/webstore/detail/sequence-wallet/ocmccklecaalljlflmclidjeclpcpdim?hl=en\">Install</a></p>\n<p><img src=\"/img/build/seq-chrome-store.png\" alt=\"Sequence Chrome Extension\"/></p>\n<p><img src=\"/img/build/seq-chrome-ext-uniswap.png\" alt=\"Sequence Chrome Extension\"/></p>","isPage":false,"text":"\nSequence Chrome Extension: Install\n\n","title":"Browser Extension Wallet","titles":["Platforms"]},"477":{"href":"/solutions/wallets/universal-wallet/quickstart#quickstart","html":"</header>\n","isPage":true,"text":"\n","title":"Quickstart","titles":[]},"478":{"href":"/solutions/wallets/universal-wallet/quickstart#try-a-demo","html":"\n<aside data-callout=\"info\"><p>Try out the Universal Wallet leveraging Sequence Kit at our <a href=\"https://0xsequence.github.io/kit/\">demo</a></p></aside>\n","isPage":false,"text":"\nTry out the Universal Wallet leveraging Sequence Kit at our demo\n","title":"Try a Demo","titles":["Quickstart"]},"479":{"href":"/solutions/wallets/universal-wallet/quickstart#template","html":"\n<aside data-callout=\"info\"><p>Get started quickly with a <a href=\"https://github.com/0xsequence/kit/tree/master/examples/react\">template</a> using Sequence Kit</p></aside>\n","isPage":false,"text":"\nGet started quickly with a template using Sequence Kit\n","title":"Template","titles":["Quickstart"]},"480":{"href":"/solutions/wallets/universal-wallet/quickstart#install","html":"\n<p>The sequence.js SDK is composed of several sub-packages combined into a single meta-package called <code>0xsequence</code>.\nTo add the SDK to your project, add a dependency on 0xsequence to your package.json:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 0xsequence</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ethers</span></span></code></pre>\n<p>or</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">pnpm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 0xsequence</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ethers</span></span></code></pre>\n<p>or</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">yarn</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> add</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 0xsequence</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ethers</span></span></code></pre>\n<p>If you know that your project only requires specific sub-packages, you can also depend on those directly with\n<code>npm add @0xsequence/&lt;sub-package name&gt;</code>.</p>\n<p>Your package.json should look something like this (actual version may vary):</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;my-dapp&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#B31D28;--shiki-dark:#FF938A;font-style:italic;--shiki-dark-font-style:italic\">  ...</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;dependencies&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;0xsequence&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;^1.0.0&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;ethers&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#B31D28;--shiki-dark:#FF938A;font-style:italic;--shiki-dark-font-style:italic\">^</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5.7</span><span style=\"color:#B31D28;--shiki-dark:#FF938A;font-style:italic;--shiki-dark-font-style:italic\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    ...</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  }</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}</span></span></code></pre>\n","isPage":false,"text":"\nThe sequence.js SDK is composed of several sub-packages combined into a single meta-package called 0xsequence.\nTo add the SDK to your project, add a dependency on 0xsequence to your package.json:\nnpm install 0xsequence ethers\nor\npnpm install 0xsequence ethers\nor\nyarn add 0xsequence ethers\nIf you know that your project only requires specific sub-packages, you can also depend on those directly with\nnpm add @0xsequence/&lt;sub-package name&gt;.\nYour package.json should look something like this (actual version may vary):\n{\n  &quot;name&quot;: &quot;my-dapp&quot;,\n  ...\n  &quot;dependencies&quot;: {\n    &quot;0xsequence&quot;: &quot;^1.0.0&quot;,\n    &quot;ethers&quot;: ^5.7.0&quot;\n    ...\n  }\n}\n","title":"Install","titles":["Quickstart"]},"481":{"href":"/solutions/wallets/universal-wallet/quickstart#cdn-distribution-as-native-js","html":"\n<p>Optionally, <code>0xsequence</code> can be installed as a JS script source (UMD distribution) via:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">script</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> src</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://cdn.ethers.io/lib/ethers-5.7.umd.min.js&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">script</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">script</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> src</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://unpkg.com/0xsequence@latest/dist/0xsequence.umd.min.js&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">script</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span></code></pre>","isPage":false,"text":"\nOptionally, 0xsequence can be installed as a JS script source (UMD distribution) via:\n&lt;script src=&quot;https://cdn.ethers.io/lib/ethers-5.7.umd.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://unpkg.com/0xsequence@latest/dist/0xsequence.umd.min.js&quot;&gt;&lt;/script&gt;","title":"CDN distribution as native JS","titles":["Quickstart","Install",null]},"482":{"href":"/solutions/wallets/universal-wallet/sequence-kit#sequence-kit-seamlessly-integrate-web3-wallets-into-your-applications","html":"</header>\n<p>Sequence Kit 🧰 is the ultimate toolkit for effortlessly integrating web3 wallets into your applications, providing your users with a smooth and secure onboarding experience. With our robust tools built on the popular <a href=\"https://wagmi.sh/\">wagmi</a> library, unlock a realm of possibilities in the world of web3.</p>\n","isPage":true,"text":"\nSequence Kit 🧰 is the ultimate toolkit for effortlessly integrating web3 wallets into your applications, providing your users with a smooth and secure onboarding experience. With our robust tools built on the popular wagmi library, unlock a realm of possibilities in the world of web3.\n","title":"Sequence Kit: Seamlessly Integrate Web3 Wallets into Your Applications","titles":[]},"483":{"href":"/solutions/wallets/universal-wallet/sequence-kit#key-features","html":"\n<ul>\n<li>\n<p><strong>Universal Connections</strong>: Seamlessly connect via popular social logins such as Facebook, Google, Discord, and more! Your users will enjoy a smooth, secure onboarding process. 🔐🪪</p>\n</li>\n<li>\n<p><strong>Web3 Wallet Integration</strong>: Effortlessly integrate with leading web3 wallets like WalletConnect and MetaMask. Unleash the power of blockchain with just a few clicks! 🦊 ⛓️</p>\n</li>\n<li>\n<p><strong>Embedded Wallet Experience</strong>: Provide your users with a comprehensive in-game wallet, enabling them to manage their coins and collectibles all within your own application. 👛 🖼️ 🪙</p>\n</li>\n</ul>\n<p>Explore the potential of Sequence Kit by trying out our <a href=\"https://0xsequence.github.io/kit\">demo</a>!</p>\n<header>","isPage":false,"text":"\n\n\nUniversal Connections: Seamlessly connect via popular social logins such as Facebook, Google, Discord, and more! Your users will enjoy a smooth, secure onboarding process. 🔐🪪\n\n\nWeb3 Wallet Integration: Effortlessly integrate with leading web3 wallets like WalletConnect and MetaMask. Unleash the power of blockchain with just a few clicks! 🦊 ⛓️\n\n\nEmbedded Wallet Experience: Provide your users with a comprehensive in-game wallet, enabling them to manage their coins and collectibles all within your own application. 👛 🖼️ 🪙\n\n\nExplore the potential of Sequence Kit by trying out our demo!\n","title":"Key Features","titles":["Sequence Kit: Seamlessly Integrate Web3 Wallets into Your Applications"]},"484":{"href":"/solutions/wallets/universal-wallet/sequence-kit#next-steps","html":"</header>\n","isPage":false,"text":"\n","title":"Next Steps","titles":[]},"485":{"href":"/solutions/wallets/universal-wallet/sequence-kit#x27;re already familiar with Sequence Kit dive into the available <a href=","html":"\n<hr/>\n<h2 id=\"slug-overviewtitle-sequence-kit-documentation\">slug: overview\ntitle: Sequence Kit Documentation<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#slug-overviewtitle-sequence-kit-documentation\"><div data-autolink-icon=\"true\"></div></a></h2>\n<header>","isPage":false,"text":"\n\nslug: overview\ntitle: Sequence Kit Documentation\n","title":"Ready to integrate Sequence Kit into your application? Check out our","titles":["Next Steps"]},"486":{"href":"/solutions/wallets/universal-wallet/sequence-kit#sequence-kit-seamlessly-integrate-web3-wallets-into-your-applications-1","html":"</header>\n<p>Sequence Kit 🧰 is the ultimate toolkit for effortlessly integrating web3 wallets into your applications, providing your users with a smooth and secure onboarding experience. With our robust tools built on the popular <a href=\"https://wagmi.sh/\">wagmi</a> library, unlock a realm of possibilities in the world of web3.</p>\n","isPage":false,"text":"\nSequence Kit 🧰 is the ultimate toolkit for effortlessly integrating web3 wallets into your applications, providing your users with a smooth and secure onboarding experience. With our robust tools built on the popular wagmi library, unlock a realm of possibilities in the world of web3.\n","title":"Sequence Kit: Seamlessly Integrate Web3 Wallets into Your Applications","titles":[]},"487":{"href":"/solutions/wallets/universal-wallet/sequence-kit#key-features-1","html":"\n<ul>\n<li>\n<p><strong>Universal Connections</strong>: Seamlessly connect via popular social logins such as Facebook, Google, Discord, and more! Your users will enjoy a smooth, secure onboarding process. 🔐🪪</p>\n</li>\n<li>\n<p><strong>Web3 Wallet Integration</strong>: Effortlessly integrate with leading web3 wallets like WalletConnect and MetaMask. Unleash the power of blockchain with just a few clicks! 🦊 ⛓️</p>\n</li>\n<li>\n<p><strong>Embedded Wallet Experience</strong>: Provide your users with a comprehensive in-game wallet, enabling them to manage their coins and collectibles all within your own application. 👛 🖼️ 🪙</p>\n</li>\n</ul>\n<p>Explore the potential of Sequence Kit by trying out our <a href=\"https://0xsequence.github.io/kit\">demo</a>!</p>\n<header>","isPage":false,"text":"\n\n\nUniversal Connections: Seamlessly connect via popular social logins such as Facebook, Google, Discord, and more! Your users will enjoy a smooth, secure onboarding process. 🔐🪪\n\n\nWeb3 Wallet Integration: Effortlessly integrate with leading web3 wallets like WalletConnect and MetaMask. Unleash the power of blockchain with just a few clicks! 🦊 ⛓️\n\n\nEmbedded Wallet Experience: Provide your users with a comprehensive in-game wallet, enabling them to manage their coins and collectibles all within your own application. 👛 🖼️ 🪙\n\n\nExplore the potential of Sequence Kit by trying out our demo!\n","title":"Key Features","titles":["Sequence Kit: Seamlessly Integrate Web3 Wallets into Your Applications"]},"488":{"href":"/solutions/wallets/universal-wallet/sequence-kit#next-steps-1","html":"</header>\n<p>Ready to integrate Sequence Kit into your application? Check out our <a href=\"/solutions/wallets/sequence-kit/getting-started\">Getting Started guide</a>. If you&#x27;re already familiar with Sequence Kit dive into the available <a href=\"/solutions/wallets/sequence-kit/configuration\">configuration options</a> or take a look at the <a href=\"/solutions/wallets/sequence-kit/checkout\">checkout</a>.</p>","isPage":false,"text":"\nReady to integrate Sequence Kit into your application? Check out our Getting Started guide. If you&#x27;re already familiar with Sequence Kit dive into the available configuration options or take a look at the checkout.","title":"Next Steps","titles":[]},"489":{"href":"/solutions/technical-references/internals/v1/guest-module#guest-module","html":"</header>\n<p>The Guest Module is an implementation of the Sequence wallet that does not support signatures, nonces or replay protection.\nExecuting transactions using this wallet is not an authenticated process, and can be done by any address.</p>\n<p>This contract is completely public with no security, designed to execute pre-signed transactions and use Sequence tools without using the wallets.</p>\n","isPage":true,"text":"\nThe Guest Module is an implementation of the Sequence wallet that does not support signatures, nonces or replay protection.\nExecuting transactions using this wallet is not an authenticated process, and can be done by any address.\nThis contract is completely public with no security, designed to execute pre-signed transactions and use Sequence tools without using the wallets.\n","title":"Guest Module","titles":[]},"490":{"href":"/solutions/technical-references/internals/v1/guest-module#on-demand-deployment","html":"\n<p>When a user interacts with their wallet on-chain for the first time, the transaction will include the deployment of the wallet contract.</p>\n<p>This is done by batching the requested transaction with the wallet deployment transaction.\nThe batched transactions are processed by the Guest Module.</p>","isPage":false,"text":"\nWhen a user interacts with their wallet on-chain for the first time, the transaction will include the deployment of the wallet contract.\nThis is done by batching the requested transaction with the wallet deployment transaction.\nThe batched transactions are processed by the Guest Module.","title":"On Demand deployment","titles":["Guest Module"]},"491":{"href":"/solutions/technical-references/internals/v1/main-module-upgradeable#main-module-upgradeable--configuration-migration","html":"</header>\n<p>The Main Module Upgradeable is the main contract that holds the logic for the wallet.\nIt is upgradeable, meaning that the logic can be changed without changing the address of the wallet.</p>\n<p>When the wallet is deployed, the <code>MainModule</code> is used as the initial code implementation.\nThis module uses the counterfactual address of the wallet to validate the <code>imageHash</code> of the wallet configuration.\nWhen the wallet configuration is updated, the <code>MainModule</code> will automatically replace the wallet code implementation with <code>MainModuleUpgradeable</code>, while handling the storage initialization.</p>","isPage":true,"text":"\nThe Main Module Upgradeable is the main contract that holds the logic for the wallet.\nIt is upgradeable, meaning that the logic can be changed without changing the address of the wallet.\nWhen the wallet is deployed, the MainModule is used as the initial code implementation.\nThis module uses the counterfactual address of the wallet to validate the imageHash of the wallet configuration.\nWhen the wallet configuration is updated, the MainModule will automatically replace the wallet code implementation with MainModuleUpgradeable, while handling the storage initialization.","title":"Main Module Upgradeable &amp; configuration migration","titles":[]},"492":{"href":"/solutions/technical-references/internals/v1/modules-and-updates#modules--wallet-update","html":"</header>\n<p>Sequence modules are the underlying program implementation of the wallets; wallets can change modules at runtime.</p>\n<p>The <code>MainModule</code> is the initial module of every Sequence wallet; it differs from the other modules because it doesn&#x27;t store the set of signers on contract storage; it uses the <a href=\"solutions/technical-references/wallet-contracts/03-wallet-factory#deploy\">salt</a> provided to the Factory contract.</p>\n","isPage":true,"text":"\nSequence modules are the underlying program implementation of the wallets; wallets can change modules at runtime.\nThe MainModule is the initial module of every Sequence wallet; it differs from the other modules because it doesn&#x27;t store the set of signers on contract storage; it uses the salt provided to the Factory contract.\n","title":"Modules &amp; wallet update","titles":[]},"493":{"href":"/solutions/technical-references/internals/v1/modules-and-updates#wallet-implementation","html":"\n<p>Sequence modules can be assigned to wallets either by the factory or by updating it after the initial deployment. Only one module can be assigned to a wallet at a time.</p>\n","isPage":false,"text":"\nSequence modules can be assigned to wallets either by the factory or by updating it after the initial deployment. Only one module can be assigned to a wallet at a time.\n","title":"Wallet implementation","titles":["Modules &amp; wallet update"]},"494":{"href":"/solutions/technical-references/internals/v1/modules-and-updates#_updateconfiguration","html":"\n<p>The <code>updateImplementation</code> allows to update the underlying implementation of the wallet proxy. This implementation contains all the core code that defines the wallet&#x27;s behaviour.</p>\n<aside data-callout=\"warning\"><strong data-callout-title=\"true\">Dangerous operation</strong><p>Calling <code>updateImplementation</code> with an invalid implementation will result in the corruption of the wallet.</p><p>Corrupt wallets may lead to the loss of funds.</p></aside>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> updateImplementation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _implementation</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> override</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> onlySelf</span></span></code></pre>\n","isPage":false,"text":"\nThe updateImplementation allows to update the underlying implementation of the wallet proxy. This implementation contains all the core code that defines the wallet&#x27;s behaviour.\nDangerous operationCalling updateImplementation with an invalid implementation will result in the corruption of the wallet.Corrupt wallets may lead to the loss of funds.\nfunction updateImplementation(\n  address _implementation\n) external override onlySelf\n","title":"_updateConfiguration","titles":["Modules &amp; wallet update","Wallet implementation"]},"495":{"href":"/solutions/technical-references/internals/v1/modules-and-updates#parameters","html":"\n<table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>_implementation</td><td>address</td><td>Address of the new wallet implementation.</td></tr></tbody></table>\n<p>This method has the <code>onlySelf</code> modifier, which means that it can only be called by the wallet itself using a self-referencing transaction. Calls to this method coming from other addresses, even if these addresses are signers of the wallet, will be rejected.</p>\n","isPage":false,"text":"\nNameTypeDescription_implementationaddressAddress of the new wallet implementation.\nThis method has the onlySelf modifier, which means that it can only be called by the wallet itself using a self-referencing transaction. Calls to this method coming from other addresses, even if these addresses are signers of the wallet, will be rejected.\n","title":"Parameters:","titles":["Modules &amp; wallet update","Wallet implementation","_updateConfiguration"]},"496":{"href":"/solutions/technical-references/internals/v1/modules-and-updates#reading-current-implementation","html":"\n<p>The wallet implementation is stored on the contract storage slot defined by the address of the wallet itself. Given that every wallet has a unique address, the implementation slot varies from wallet to wallet.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;ethers&quot;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;0x596af90cecdbf9a768886e771178fd5561dd27ab&quot;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> provider</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.providers.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">JsonRpcProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;http://localhost:8545&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Read storage slot address(address)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> slot</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> provider.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getStorageAt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address, ethers.utils.defaultAbiCoder.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;address&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">], [address]))</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Decode bytes32 as address value</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> implementation</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.defaultAbiCoder.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">decode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;address&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">], slot)[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(implementation)</span></span></code></pre>\n","isPage":false,"text":"\nThe wallet implementation is stored on the contract storage slot defined by the address of the wallet itself. Given that every wallet has a unique address, the implementation slot varies from wallet to wallet.\nimport &quot;ethers&quot;\n \nconst address = &quot;0x596af90cecdbf9a768886e771178fd5561dd27ab&quot;\nconst provider = new ethers.providers.JsonRpcProvider(&quot;http://localhost:8545&quot;)\n \n// Read storage slot address(address)\nconst slot = await provider.getStorageAt(address, ethers.utils.defaultAbiCoder.encode([&#x27;address&#x27;], [address]))\n \n// Decode bytes32 as address value\nconst implementation = ethers.utils.defaultAbiCoder.decode([&#x27;address&#x27;], slot)[0]\n \nconsole.log(implementation)\n","title":"Reading current implementation","titles":["Modules &amp; wallet update","Wallet implementation"]},"497":{"href":"/solutions/technical-references/internals/v1/modules-and-updates#wallet-configuration-validation","html":"\n<aside data-callout=\"info\"><strong data-callout-title=\"true\">Fixed configuration</strong><p>Signer&#x27;s configuration on wallets using <code>MainModule</code> can&#x27;t be changed. The only way to change the set of signers or threshold is by updating the module of the wallet.</p></aside>\n<p>All sequence modules must implement the <code>ModuleAuth</code> interface, this interface allows the rest of the module to validate signatures for the wallet. In the case of <code>MainModule</code> this interface is implemented as a counter-factual validation of hash passed to the factory during the contract wallet creation.</p>\n","isPage":false,"text":"\nFixed configurationSigner&#x27;s configuration on wallets using MainModule can&#x27;t be changed. The only way to change the set of signers or threshold is by updating the module of the wallet.\nAll sequence modules must implement the ModuleAuth interface, this interface allows the rest of the module to validate signatures for the wallet. In the case of MainModule this interface is implemented as a counter-factual validation of hash passed to the factory during the contract wallet creation.\n","title":"Wallet configuration validation","titles":["Modules &amp; wallet update"]},"498":{"href":"/solutions/technical-references/internals/v1/modules-and-updates#_isvalidimage","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> _isValidImage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _imageHash</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> override</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> view</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _isValid)</span></span></code></pre>\n<p>Validates if the provided <code>imageHash</code> corresponds to the one configured in the wallet. This function is called internally to validate transaction and message signatures.</p>\n<p>The <code>imageHash</code> is a hash of the wallet configuration, which contains the wallet&#x27;s threshold, signers and weights.</p>\n","isPage":false,"text":"\n  function _isValidImage(\n    bytes32 _imageHash\n  ) internal override view returns (bool _isValid)\nValidates if the provided imageHash corresponds to the one configured in the wallet. This function is called internally to validate transaction and message signatures.\nThe imageHash is a hash of the wallet configuration, which contains the wallet&#x27;s threshold, signers and weights.\n","title":"_isValidImage","titles":["Modules &amp; wallet update","Wallet configuration validation"]},"499":{"href":"/solutions/technical-references/internals/v1/modules-and-updates#parameters-1","html":"\n<table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>_imageHash</td><td>bytes32</td><td>Hash of wallet configuration to be validated.</td></tr></tbody></table>\n","isPage":false,"text":"\nNameTypeDescription_imageHashbytes32Hash of wallet configuration to be validated.\n","title":"Parameters:","titles":["Modules &amp; wallet update","Wallet configuration validation","_isValidImage"]},"500":{"href":"/solutions/technical-references/internals/v1/modules-and-updates#return-values","html":"\n<table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>_isValid</td><td>bool</td><td>True if the given <code>imageHash</code> corresponds to the current wallet configuration.</td></tr></tbody></table>\n","isPage":false,"text":"\nNameTypeDescription_isValidboolTrue if the given imageHash corresponds to the current wallet configuration.\n","title":"Return Values:","titles":["Modules &amp; wallet update","Wallet configuration validation","_isValidImage"]},"501":{"href":"/solutions/technical-references/internals/v1/modules-and-updates#mainmoduleupgradeable","html":"\n<p><code>MainModuleUpgradable</code> is a module that mimics the behaviour of the <code>MainModule</code> but allows the wallet configuration to be updated.</p>\n","isPage":false,"text":"\nMainModuleUpgradable is a module that mimics the behaviour of the MainModule but allows the wallet configuration to be updated.\n","title":"MainModuleUpgradeable","titles":["Modules &amp; wallet update"]},"502":{"href":"/solutions/technical-references/internals/v1/modules-and-updates#updateimagehash","html":"\n<p>Updates the wallet <code>imageHash</code>, this is the hash that defines the wallet configuration (signers, weights, threshold).</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> updateImageHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _imageHash</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> override</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> onlySelf</span></span></code></pre>\n","isPage":false,"text":"\nUpdates the wallet imageHash, this is the hash that defines the wallet configuration (signers, weights, threshold).\n  function updateImageHash(\n    bytes32 _imageHash\n  ) external override onlySelf\n","title":"updateImageHash","titles":["Modules &amp; wallet update","MainModuleUpgradeable"]},"503":{"href":"/solutions/technical-references/internals/v1/modules-and-updates#parameters-2","html":"\n<table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>_imageHash</td><td>bytes32</td><td>Hash of the new configuration for the wallet.</td></tr></tbody></table>\n<div><p>Unsanitized input</p><p>The <code>imageHash</code> is not validated, it is the responsibility of the caller to ensure that the hash is correct. Reasons for incorrect hashes include:</p><ul>\n<li>The combined weight of the signers is below the threshold.</li>\n<li>The signers are not valid addresses.</li>\n<li>The signers are smart contract wallets without proper support for EIP-1271.</li>\n<li>The <code>imageHash</code> doesn&#x27;t correspond to any wallet configuration (may be a random string).</li>\n<li>The <code>imageHash</code> corresponds to an unknown wallet configuration.</li>\n</ul><p>In any of this cases the wallet will be <strong>rendered unusable</strong>.</p></div>\n<p>This method has the <code>onlySelf</code> modifier, which means that it can only be called by the wallet itself using a self-referencing transaction. Calls to this method coming from other addresses, even if these addresses are signers of the wallet, will be rejected.</p>\n","isPage":false,"text":"\nNameTypeDescription_imageHashbytes32Hash of the new configuration for the wallet.\nUnsanitized inputThe imageHash is not validated, it is the responsibility of the caller to ensure that the hash is correct. Reasons for incorrect hashes include:\nThe combined weight of the signers is below the threshold.\nThe signers are not valid addresses.\nThe signers are smart contract wallets without proper support for EIP-1271.\nThe imageHash doesn&#x27;t correspond to any wallet configuration (may be a random string).\nThe imageHash corresponds to an unknown wallet configuration.\nIn any of this cases the wallet will be rendered unusable.\nThis method has the onlySelf modifier, which means that it can only be called by the wallet itself using a self-referencing transaction. Calls to this method coming from other addresses, even if these addresses are signers of the wallet, will be rejected.\n","title":"Parameters:","titles":["Modules &amp; wallet update","MainModuleUpgradeable","updateImageHash"]},"504":{"href":"/solutions/technical-references/internals/v1/modules-and-updates#first-configuration-update","html":"\n<p>When Sequence wallets are created, the factory contract doesn&#x27;t call an <code>initialize</code> function. The configuration is instead defined by the <code>salt</code> provided to the factory, the <code>MainModule</code> then checks the counterfactual validity of all signatures against the wallet address.</p>\n<p>This means there is no direct way to update the configuration of a wallet while still using the <code>MainModule</code>. Given that the first configuration update needs to also change the wallet implementation to the <code>MainModuleUpgradable</code>, the <code>MainModule</code> is updated to the <code>MainModuleUpgradable</code> and the <code>updateImageHash</code> method is called to update the wallet configuration.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transactions</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    delegateCall: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    revertOnError: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    to: wallet,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    data: walletInterface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      walletInterface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getFunction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;updateImplementation&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.context.mainModuleUpgradable]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    value: ethers.constants.Zero,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    gasLimit: ethers.constants.Zero,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    delegateCall: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    revertOnError: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    to: wallet,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    data: mainModuleInterface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      mainModuleInterface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getFunction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;updateImageHash&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), [newImageHash]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    value: ethers.constants.Zero,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    gasLimit: ethers.constants.Zero,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span></code></pre>\n","isPage":false,"text":"\nWhen Sequence wallets are created, the factory contract doesn&#x27;t call an initialize function. The configuration is instead defined by the salt provided to the factory, the MainModule then checks the counterfactual validity of all signatures against the wallet address.\nThis means there is no direct way to update the configuration of a wallet while still using the MainModule. Given that the first configuration update needs to also change the wallet implementation to the MainModuleUpgradable, the MainModule is updated to the MainModuleUpgradable and the updateImageHash method is called to update the wallet configuration.\nconst transactions = [\n  {\n    delegateCall: false,\n    revertOnError: true,\n    to: wallet,\n    data: walletInterface.encodeFunctionData(\n      walletInterface.getFunction(&#x27;updateImplementation&#x27;), [this.context.mainModuleUpgradable]\n    ),\n    value: ethers.constants.Zero,\n    gasLimit: ethers.constants.Zero,\n  },\n  {\n    delegateCall: false,\n    revertOnError: true,\n    to: wallet,\n    data: mainModuleInterface.encodeFunctionData(\n      mainModuleInterface.getFunction(&#x27;updateImageHash&#x27;), [newImageHash]\n    ),\n    value: ethers.constants.Zero,\n    gasLimit: ethers.constants.Zero,\n  }\n]\n","title":"First configuration update","titles":["Modules &amp; wallet update"]},"505":{"href":"/solutions/technical-references/internals/v1/modules-and-updates#delegatecall-false","html":"\n<p><code>delegateCall</code> is used to extend the wallet functionality beyond what&#x27;s allowed by the module. In this case the called methods are defined on the modules themselves, so there is no need to use <code>delegateCall</code>.</p>\n","isPage":false,"text":"\ndelegateCall is used to extend the wallet functionality beyond what&#x27;s allowed by the module. In this case the called methods are defined on the modules themselves, so there is no need to use delegateCall.\n","title":"delegateCall: false","titles":["Modules &amp; wallet update","First configuration update","updateImageHash"]},"506":{"href":"/solutions/technical-references/internals/v1/modules-and-updates#revertonerror-true","html":"\n<p><code>revertOnError</code> is used to revert the whole transaction bundle if a transaction flagged by it fails. In this case the operation should be atomic given that a partial wallet configuration update <strong>will</strong> render the wallet unusable.</p>\n","isPage":false,"text":"\nrevertOnError is used to revert the whole transaction bundle if a transaction flagged by it fails. In this case the operation should be atomic given that a partial wallet configuration update will render the wallet unusable.\n","title":"revertOnError: true","titles":["Modules &amp; wallet update","First configuration update","updateImageHash"]},"507":{"href":"/solutions/technical-references/internals/v1/modules-and-updates#to-wallet","html":"\n<p>The methods being called are defined on the wallet itself, but need to be called externally, so the <code>to</code> address is the wallet itself.</p>\n","isPage":false,"text":"\nThe methods being called are defined on the wallet itself, but need to be called externally, so the to address is the wallet itself.\n","title":"to: wallet","titles":["Modules &amp; wallet update","First configuration update","updateImageHash"]},"508":{"href":"/solutions/technical-references/internals/v1/modules-and-updates#value-ethersconstantszero","html":"\n<p>The <code>value</code> of the transaction is always zero, since the transaction is a self-referencing transaction and doesn&#x27;t require transferring funds.</p>\n","isPage":false,"text":"\nThe value of the transaction is always zero, since the transaction is a self-referencing transaction and doesn&#x27;t require transferring funds.\n","title":"value: ethers.constants.Zero","titles":["Modules &amp; wallet update","First configuration update","updateImageHash"]},"509":{"href":"/solutions/technical-references/internals/v1/modules-and-updates#gaslimit-ethersconstantszero","html":"\n<p>The <code>gasLimit</code> of the transaction is always zero, since it represents an unlimited amount of gas.</p>\n<aside data-callout=\"warning\"><strong data-callout-title=\"true\">Dangerous operation</strong><p>When the wallet is first updated to the <code>MainModuleUpgradable</code> it doesn&#x27;t have a valid <code>imageHash</code> yet. It&#x27;s imperative that the <code>imageHash</code> is updated before the transaction bundle finishes executing.\nIf the <code>imageHash</code> is not updated before the transaction bundle finishes executing, the wallet will be rendered unusable.</p><p>For this reason the following considerations should be taken when updating the wallet for the first time:</p><ul>\n<li>All transactions should be marked <code>revertOnError = true</code>.</li>\n<li><code>updateImplementation</code> and <code>updateImageHash</code> should both be declared on the same transaction bundle.</li>\n<li>The <code>gasLimit</code> of both transactions should be set to unlimited (<code>0</code>).</li>\n</ul></aside>\n","isPage":false,"text":"\nThe gasLimit of the transaction is always zero, since it represents an unlimited amount of gas.\nDangerous operationWhen the wallet is first updated to the MainModuleUpgradable it doesn&#x27;t have a valid imageHash yet. It&#x27;s imperative that the imageHash is updated before the transaction bundle finishes executing.\nIf the imageHash is not updated before the transaction bundle finishes executing, the wallet will be rendered unusable.For this reason the following considerations should be taken when updating the wallet for the first time:\nAll transactions should be marked revertOnError = true.\nupdateImplementation and updateImageHash should both be declared on the same transaction bundle.\nThe gasLimit of both transactions should be set to unlimited (0).\n\n","title":"gasLimit: ethers.constants.Zero","titles":["Modules &amp; wallet update","First configuration update","updateImageHash"]},"510":{"href":"/solutions/technical-references/internals/v1/modules-and-updates#subsequent-configuration-updates","html":"\n<p>Once the wallet is updated to the <code>MainModuleUpgradable</code> it can be updated by calling the <code>updateImageHash</code> method, without any additional transaction.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transactions</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    delegateCall: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    revertOnError: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    to: wallet,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    data: mainModuleInterface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      mainModuleInterface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getFunction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;updateImageHash&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), [newImageHash]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    value: ethers.constants.Zero,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    gasLimit: ethers.constants.Zero,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span></code></pre>\n","isPage":false,"text":"\nOnce the wallet is updated to the MainModuleUpgradable it can be updated by calling the updateImageHash method, without any additional transaction.\nconst transactions = [\n  {\n    delegateCall: false,\n    revertOnError: true,\n    to: wallet,\n    data: mainModuleInterface.encodeFunctionData(\n      mainModuleInterface.getFunction(&#x27;updateImageHash&#x27;), [newImageHash]\n    ),\n    value: ethers.constants.Zero,\n    gasLimit: ethers.constants.Zero,\n  }\n]\n","title":"Subsequent configuration updates","titles":["Modules &amp; wallet update","First configuration update"]},"511":{"href":"/solutions/technical-references/internals/v1/modules-and-updates#retrieving-the-current-configuration","html":"\n<p>If the wallet is updated to the <code>MainModuleUpgradable</code> it can be queried for the current configuration by calling the <code>getImageHash</code> method.</p>\n<p>This method should return the wallet&#x27;s current configuration hash, which can be compared to a list of known wallet configurations to find the correct one.</p>\n","isPage":false,"text":"\nIf the wallet is updated to the MainModuleUpgradable it can be queried for the current configuration by calling the getImageHash method.\nThis method should return the wallet&#x27;s current configuration hash, which can be compared to a list of known wallet configurations to find the correct one.\n","title":"Retrieving the current configuration","titles":["Modules &amp; wallet update","First configuration update"]},"512":{"href":"/solutions/technical-references/internals/v1/modules-and-updates#retrieving-the-wallet-configuration","html":"\n<p>The <code>imageHash</code> method returns <code>bytes32(0)</code> if the wallet is not yet updated to the <code>MainModuleUpgradable</code>.\nIn this case the wallet is in a counter-factual state and the <code>imageHash</code> can&#x27;t be directly queried.</p>\n<p>This is also the case for non-deployed wallets.</p>\n<p>To find the <code>imageHash</code> of a non-deployed or non-updated wallet, a candidate known <code>imageHash</code> needs to be compared against the wallet address.</p>\n<p>See <a href=\"/solutions/technical-references/internals/v1/wallet-configuration\">Compute wallet address</a>.</p>","isPage":false,"text":"\nThe imageHash method returns bytes32(0) if the wallet is not yet updated to the MainModuleUpgradable.\nIn this case the wallet is in a counter-factual state and the imageHash can&#x27;t be directly queried.\nThis is also the case for non-deployed wallets.\nTo find the imageHash of a non-deployed or non-updated wallet, a candidate known imageHash needs to be compared against the wallet address.\nSee Compute wallet address.","title":"Retrieving the wallet configuration","titles":["Modules &amp; wallet update","First configuration update","Retrieving the current configuration"]},"513":{"href":"/solutions/technical-references/internals/v1/signature-encoding#signature-encoding","html":"</header>\n<p>Sequence Wallets support <a href=\"https://eips.ethereum.org/EIPS/eip-1271\">ERC-1271 Standard Contract Signature Verification</a> to allow signing of transactions and messages.</p>\n","isPage":true,"text":"\nSequence Wallets support ERC-1271 Standard Contract Signature Verification to allow signing of transactions and messages.\n","title":"Signature Encoding","titles":[]},"514":{"href":"/solutions/technical-references/internals/v1/signature-encoding#erc-191-ethereum-signed-data","html":"\n<p>Messages encoded with as <a href=\"https://eips.ethereum.org/EIPS/eip-191\">ERC-191 Ethereum Signed Data</a> are able to be created and signed as follows.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Wallet } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/wallet&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Construct your Sequence Wallet (out of scope for this section)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> wallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Wallet</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> message</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;Hello, World!&quot;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> prefixedMessage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\x19</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">Ethereum Signed Message:</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\n</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> +</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(message) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> message</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signature</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">signMessage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(prefixedMessage)</span></span></code></pre>\n<p>The above will iterate through local, signing the message. If the threshold is reached, the signature is returned.\nOtherwise the library will iterate through the remote signers as well.\nThe resulting signatures are joined and encoded as a hex string.</p>\n","isPage":false,"text":"\nMessages encoded with as ERC-191 Ethereum Signed Data are able to be created and signed as follows.\nimport { Wallet } from &#x27;@0xsequence/wallet&#x27;\n \n// Construct your Sequence Wallet (out of scope for this section)\nconst wallet: Wallet\n \nconst message = &quot;Hello, World!&quot;\n \nconst prefixedMessage = &quot;\\x19Ethereum Signed Message:\\n&quot; + len(message) + message\nconst signature = await wallet.signMessage(prefixedMessage)\nThe above will iterate through local, signing the message. If the threshold is reached, the signature is returned.\nOtherwise the library will iterate through the remote signers as well.\nThe resulting signatures are joined and encoded as a hex string.\n","title":"ERC-191 Ethereum Signed Data","titles":["Signature Encoding"]},"515":{"href":"/solutions/technical-references/internals/v1/signature-encoding#erc-712-structured-data-signatures","html":"\n<p><a href=\"https://eips.ethereum.org/EIPS/eip-712\">ERC-712 Structured Data</a> can also be signed in a similar fashion.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Wallet } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/wallet&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { encodeTypedDataDigest } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/utils&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Construct your Sequence Wallet (out of scope for this section)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> wallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Wallet</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Encode the typed data</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> chainId</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> typedData</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\ttypes: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tPerson: [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t{ name: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;name&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, type: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;string&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t{ name: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;wallet&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, type: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;address&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t{ name: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;count&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, type: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;uint8&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t},</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tprimaryType: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Person&#x27;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> as</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tdomain: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tname: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Ether Mail&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tversion: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;1&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tchainId: chainId,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tverifyingContract: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t},</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tmessage: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tname: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Bob&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\twallet: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tcount: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">4</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> hashedData</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> encodeTypedDataDigest</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(typedData)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signature</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">signMessage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(hashedData)</span></span></code></pre>\n<p>The above will iterate through local, signing the message. If the threshold is reached, the signature is returned.\nOtherwise the library will iterate through the remote signers as well.\nThe resulting signatures are joined and encoded as a hex string.</p>\n","isPage":false,"text":"\nERC-712 Structured Data can also be signed in a similar fashion.\nimport { Wallet } from &#x27;@0xsequence/wallet&#x27;\nimport { encodeTypedDataDigest } from &#x27;@0xsequence/utils&#x27;\n \n// Construct your Sequence Wallet (out of scope for this section)\nconst wallet: Wallet\n \n// Encode the typed data\nconst chainId = 1\nconst typedData = {\n\ttypes: {\n\t\tPerson: [\n\t\t\t{ name: &#x27;name&#x27;, type: &#x27;string&#x27; },\n\t\t\t{ name: &#x27;wallet&#x27;, type: &#x27;address&#x27; },\n\t\t\t{ name: &#x27;count&#x27;, type: &#x27;uint8&#x27; }\n\t\t]\n\t},\n\tprimaryType: &#x27;Person&#x27; as const,\n\tdomain: {\n\t\tname: &#x27;Ether Mail&#x27;,\n\t\tversion: &#x27;1&#x27;,\n\t\tchainId: chainId,\n\t\tverifyingContract: &#x27;0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC&#x27;\n\t},\n\tmessage: {\n\t\tname: &#x27;Bob&#x27;,\n\t\twallet: &#x27;0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB&#x27;,\n\t\tcount: 4\n\t}\n} \nconst hashedData = encodeTypedDataDigest(typedData)\n \nconst signature = await wallet.signMessage(hashedData)\nThe above will iterate through local, signing the message. If the threshold is reached, the signature is returned.\nOtherwise the library will iterate through the remote signers as well.\nThe resulting signatures are joined and encoded as a hex string.\n","title":"ERC-712 Structured Data Signatures","titles":["Signature Encoding"]},"516":{"href":"/solutions/technical-references/internals/v1/signature-encoding#verification","html":"\n<p>The signature can be verified by calling the <code>isValidSignature</code> method on the wallet.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>  /**</span></span>\n<span class=\"line\"><span>   * @notice Verifies whether the provided signature is valid with respect to the provided hash</span></span>\n<span class=\"line\"><span>   * @dev MUST return the correct magic value if the signature provided is valid for the provided hash</span></span>\n<span class=\"line\"><span>   *   &gt; The bytes4 magic value to return when signature is valid is 0x1626ba7e : bytes4(keccak256(&quot;isValidSignature(bytes32,bytes)&quot;))</span></span>\n<span class=\"line\"><span>   * @param _hash       keccak256 hash that was signed</span></span>\n<span class=\"line\"><span>   * @param _signatures Signature byte array associated with _data.</span></span>\n<span class=\"line\"><span>   *                    Encoded as abi.encode(Signature[], Configs)</span></span>\n<span class=\"line\"><span>   * @return magicValue Magic value 0x1626ba7e if the signature is valid and 0x0 otherwise</span></span>\n<span class=\"line\"><span>   */</span></span>\n<span class=\"line\"><span>  function isValidSignature(</span></span>\n<span class=\"line\"><span>    bytes32 _hash,</span></span>\n<span class=\"line\"><span>    bytes calldata _signatures</span></span>\n<span class=\"line\"><span>  ) public override virtual view returns (bytes4) {</span></span>\n<span class=\"line\"><span>    // Validate signatures</span></span>\n<span class=\"line\"><span>    (bool isValid,) = _signatureValidation(_hash, _signatures);</span></span>\n<span class=\"line\"><span>    if (isValid) {</span></span>\n<span class=\"line\"><span>      return SELECTOR_ERC1271_BYTES32_BYTES;</span></span>\n<span class=\"line\"><span>    }</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>    return bytes4(0);</span></span>\n<span class=\"line\"><span>  }</span></span></code></pre>\n<p>This will iterate through the combined signatures and validate that the resulting signature breaches the wallet&#x27;s threshold.</p>","isPage":false,"text":"\nThe signature can be verified by calling the isValidSignature method on the wallet.\n  /**\n   * @notice Verifies whether the provided signature is valid with respect to the provided hash\n   * @dev MUST return the correct magic value if the signature provided is valid for the provided hash\n   *   &gt; The bytes4 magic value to return when signature is valid is 0x1626ba7e : bytes4(keccak256(&quot;isValidSignature(bytes32,bytes)&quot;))\n   * @param _hash       keccak256 hash that was signed\n   * @param _signatures Signature byte array associated with _data.\n   *                    Encoded as abi.encode(Signature[], Configs)\n   * @return magicValue Magic value 0x1626ba7e if the signature is valid and 0x0 otherwise\n   */\n  function isValidSignature(\n    bytes32 _hash,\n    bytes calldata _signatures\n  ) public override virtual view returns (bytes4) {\n    // Validate signatures\n    (bool isValid,) = _signatureValidation(_hash, _signatures);\n    if (isValid) {\n      return SELECTOR_ERC1271_BYTES32_BYTES;\n    }\n\n    return bytes4(0);\n  }\nThis will iterate through the combined signatures and validate that the resulting signature breaches the wallet&#x27;s threshold.","title":"Verification","titles":["Signature Encoding"]},"517":{"href":"/solutions/technical-references/internals/v1/wallet-configuration#wallet-configuration","html":"</header>\n<p>Every Sequence wallet has a configuration defined by a threshold and a list of signers with their corresponding weights.</p>\n","isPage":true,"text":"\nEvery Sequence wallet has a configuration defined by a threshold and a list of signers with their corresponding weights.\n","title":"Wallet Configuration","titles":[]},"518":{"href":"/solutions/technical-references/internals/v1/wallet-configuration#configuration-layout","html":"\n<table><thead><tr><th>Name</th><th>Type</th><th>Range</th><th>Description</th></tr></thead><tbody><tr><td>Threshold</td><td><code>uint16</code></td><td>1 - 65535</td><td>Required combined total &quot;weight&quot; of signers for a signature to be considered valid.</td></tr><tr><td>Signers</td><td><code>signer[]</code></td><td>unlimited - bounded by gas</td><td>List of signers that with their corresponding &quot;weight&quot;s.</td></tr></tbody></table>\n","isPage":false,"text":"\nNameTypeRangeDescriptionThresholduint161 - 65535Required combined total &quot;weight&quot; of signers for a signature to be considered valid.Signerssigner[]unlimited - bounded by gasList of signers that with their corresponding &quot;weight&quot;s.\n","title":"Configuration layout","titles":["Wallet Configuration"]},"519":{"href":"/solutions/technical-references/internals/v1/wallet-configuration#signer-layout","html":"\n<table><thead><tr><th>Name</th><th>Type</th><th>Range</th><th>Description</th></tr></thead><tbody><tr><td>&quot;weight&quot;</td><td><code>uint8</code></td><td>0 - 255</td><td>&quot;weight&quot; of every signature of the signer.</td></tr><tr><td>&quot;address&quot;</td><td><code>&quot;address&quot;</code></td><td>--</td><td>&quot;address&quot; of the signer, it may be an EOA or another smart contract wallet with EIP-1271 support.</td></tr></tbody></table>\n","isPage":false,"text":"\nNameTypeRangeDescription&quot;weight&quot;uint80 - 255&quot;weight&quot; of every signature of the signer.&quot;address&quot;&quot;address&quot;--&quot;address&quot; of the signer, it may be an EOA or another smart contract wallet with EIP-1271 support.\n","title":"Signer layout","titles":["Wallet Configuration","Configuration layout"]},"520":{"href":"/solutions/technical-references/internals/v1/wallet-configuration#example","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;threshold&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;signers&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;address&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x4fbf69aa2a75f9942a768dc8da7804ec965f7bea&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;weight&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;address&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x596af90cecdbf9a768886e771178fd5561dd27ab&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;weight&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">3</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;address&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x6192e0fdcd868b3de01c7fbc0ad98baebd7330c1&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;weight&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;address&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0xec9a7204a43d3f4a82c84fde92d25bfc9110981e&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;weight&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>This example has a threshold of 5 and 4 signers.</p>\n","isPage":false,"text":"\n{\n  &quot;threshold&quot;: 5,\n  &quot;signers&quot;: [\n    {\n      &quot;address&quot;: &quot;0x4fbf69aa2a75f9942a768dc8da7804ec965f7bea&quot;,\n      &quot;weight&quot;: 2\n    },\n    {\n      &quot;address&quot;: &quot;0x596af90cecdbf9a768886e771178fd5561dd27ab&quot;,\n      &quot;weight&quot;: 3\n    },\n    {\n      &quot;address&quot;: &quot;0x6192e0fdcd868b3de01c7fbc0ad98baebd7330c1&quot;,\n      &quot;weight&quot;: 2\n    },\n    {\n      &quot;address&quot;: &quot;0xec9a7204a43d3f4a82c84fde92d25bfc9110981e&quot;,\n      &quot;weight&quot;: 1\n    }\n  ]\n}\nThis example has a threshold of 5 and 4 signers.\n","title":"Example","titles":["Wallet Configuration","Configuration layout","Signer layout"]},"521":{"href":"/solutions/technical-references/internals/v1/wallet-configuration#the-valid-combinations-of-signers-are","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>- 0x4fbf69aa2a75f9942a768dc8da7804ec965f7bea &amp; 0x596af90cecdbf9a768886e771178fd5561dd27ab - combined weight of 2 + 3 = 5</span></span>\n<span class=\"line\"><span>- 0x6192e0fdcd868b3de01c7fbc0ad98baebd7330c1 &amp; 0x596af90cecdbf9a768886e771178fd5561dd27ab - combined weight of 2 + 3 = 5</span></span>\n<span class=\"line\"><span>- 0x4fbf69aa2a75f9942a768dc8da7804ec965f7bea, 0x6192e0fdcd868b3de01c7fbc0ad98baebd7330c1 &amp; 0xec9a7204a43d3f4a82c84fde92d25bfc9110981e - combined weight of 2 + 2 + 1 = 5</span></span></code></pre>\n<p>Any combination of signers with a combined weight under the threshold is considered invalid; any additional signers above the threshold are ignored.</p>\n","isPage":false,"text":"\n- 0x4fbf69aa2a75f9942a768dc8da7804ec965f7bea &amp; 0x596af90cecdbf9a768886e771178fd5561dd27ab - combined weight of 2 + 3 = 5\n- 0x6192e0fdcd868b3de01c7fbc0ad98baebd7330c1 &amp; 0x596af90cecdbf9a768886e771178fd5561dd27ab - combined weight of 2 + 3 = 5\n- 0x4fbf69aa2a75f9942a768dc8da7804ec965f7bea, 0x6192e0fdcd868b3de01c7fbc0ad98baebd7330c1 &amp; 0xec9a7204a43d3f4a82c84fde92d25bfc9110981e - combined weight of 2 + 2 + 1 = 5\nAny combination of signers with a combined weight under the threshold is considered invalid; any additional signers above the threshold are ignored.\n","title":"The valid combinations of signers are:","titles":["Wallet Configuration","Configuration layout","Signer layout"]},"522":{"href":"/solutions/technical-references/internals/v1/wallet-configuration#configuration-hash---imagehash","html":"\n<p>The configuration is never stored directly on the contract, but instead is hashed and checked against every time a signature is validated. This allows the wallet contracts to reduce the usage of storage and therefore the gas cost.</p>\n<p>Wallets that never have been updated don&#x27;t store the <code>imageHash</code> directly, instead the <code>imageHash</code> is used as the <code>salt</code> during the contract creation, and signatures are validated against the address of the wallet.</p>\n","isPage":false,"text":"\nThe configuration is never stored directly on the contract, but instead is hashed and checked against every time a signature is validated. This allows the wallet contracts to reduce the usage of storage and therefore the gas cost.\nWallets that never have been updated don&#x27;t store the imageHash directly, instead the imageHash is used as the salt during the contract creation, and signatures are validated against the address of the wallet.\n","title":"Configuration hash - ImageHash","titles":["Wallet Configuration","Configuration layout"]},"523":{"href":"/solutions/technical-references/internals/v1/wallet-configuration#compute-image-hash","html":"\n<div class=\"code-group\"><div data-title=\"solidity\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"solidity\" data-lang=\"solidity\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">( </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> weight_1, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer_1,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">( </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> weight_2, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer_2,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">( </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> weight_3, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer_3,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">( </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> threshold )) )) )) )) </span></span></code></pre></div><div data-title=\"TypeScript\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"TypeScript\" data-lang=\"js\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> tmp </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">solidityPack</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;uint256&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">], [configuration.threshold])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> of</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> configuration.signers) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    tmp </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      ethers.utils.defaultAbiCoder.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;bytes32&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;uint8&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;address&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        [tmp, signer.weight, signer.address]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> imageHash</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> tmp</span></span></code></pre></div></div>\n","isPage":false,"text":"\n  keccak256(abi.encode( uint8 weight_1, address signer_1,\n  keccak256(abi.encode( uint8 weight_2, address signer_2,\n  keccak256(abi.encode( uint8 weight_3, address signer_3,\n  keccak256(abi.encode( uint256 threshold )) )) )) ))   let tmp = ethers.utils.solidityPack([&#x27;uint256&#x27;], [configuration.threshold])\n \n  for (const signer of configuration.signers) {\n    tmp = ethers.utils.keccak256(\n      ethers.utils.defaultAbiCoder.encode(\n        [&#x27;bytes32&#x27;, &#x27;uint8&#x27;, &#x27;address&#x27;],\n        [tmp, signer.weight, signer.address]\n      )\n    )\n  }\n \n  const imageHash = tmp\n","title":"Compute image hash","titles":["Wallet Configuration","Configuration layout","Configuration hash - ImageHash"]},"524":{"href":"/solutions/technical-references/internals/v1/wallet-configuration#initial-wallet-configuration","html":"\n<p>The initial wallet configuration determines the address of the wallet, subsequent updates don&#x27;t change the address.</p>\n<p>The wallet address can be computed using the <code>imageHash</code>, the <code>factory</code> and <code>mainModule</code> of the wallet.</p>\n","isPage":false,"text":"\nThe initial wallet configuration determines the address of the wallet, subsequent updates don&#x27;t change the address.\nThe wallet address can be computed using the imageHash, the factory and mainModule of the wallet.\n","title":"Initial wallet configuration","titles":["Wallet Configuration"]},"525":{"href":"/solutions/technical-references/internals/v1/wallet-configuration#compute-wallet-address","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// The code of the wallet proxy contract</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> WalletProxyBytecode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x603a600e3d39601a805130553df3363d3d373d3d3d363d30545af43d82803e903d91601857fd5bf3&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// These values are defined by the wallet context</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// they must be known in order to validate the counter-factual wallet imageHash</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> factory</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;0xf9D09D634Fb818b05149329C1dcCFAeA53639d96&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> mainModule</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;0xd01F11855bCcb95f88D7A48492F66410d4637313&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Append the `mainModule` to the `WalletProxyBytecode`</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// this completed the creation code of the proxy contract</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// used for computing the wallet address as defined by the CREATE2 opcode</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> codeHash</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">solidityPack</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;bytes&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;bytes32&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[WalletContractBytecode, ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">hexZeroPad</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(mainModule, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Compute the wallet address</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> hash</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">solidityPack</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;bytes1&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;address&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;bytes32&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;bytes32&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0xff&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, factory, salt, codeHash]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">hexDataSlice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(hash, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">12</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span></code></pre>","isPage":false,"text":"\n// The code of the wallet proxy contract\nconst WalletProxyBytecode =\n&quot;0x603a600e3d39601a805130553df3363d3d373d3d3d363d30545af43d82803e903d91601857fd5bf3&quot;;\n \n// These values are defined by the wallet context\n// they must be known in order to validate the counter-factual wallet imageHash\nconst factory = &quot;0xf9D09D634Fb818b05149329C1dcCFAeA53639d96&quot;;\nconst mainModule = &quot;0xd01F11855bCcb95f88D7A48492F66410d4637313&quot;;\n \n// Append the `mainModule` to the `WalletProxyBytecode`\n// this completed the creation code of the proxy contract\n// used for computing the wallet address as defined by the CREATE2 opcode\nconst codeHash = ethers.utils.keccak256(\nethers.utils.solidityPack(\n[&quot;bytes&quot;, &quot;bytes32&quot;],\n[WalletContractBytecode, ethers.utils.hexZeroPad(mainModule, 32)]\n)\n);\n \n// Compute the wallet address\nconst hash = ethers.utils.keccak256(\nethers.utils.solidityPack(\n[&quot;bytes1&quot;, &quot;address&quot;, &quot;bytes32&quot;, &quot;bytes32&quot;],\n[&quot;0xff&quot;, factory, salt, codeHash]\n)\n);\n \nconst address = ethers.utils.getAddress(ethers.utils.hexDataSlice(hash, 12));","title":"Compute wallet address","titles":["Wallet Configuration","Initial wallet configuration","Configuration hash - ImageHash"]},"526":{"href":"/solutions/technical-references/internals/v1/wallet-context#wallet-context-v1","html":"</header>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">export</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> sequenceContextV1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> WalletContext</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  factory: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0xf9D09D634Fb818b05149329C1dcCFAeA53639d96&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  mainModule: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0xd01F11855bCcb95f88D7A48492F66410d4637313&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  mainModuleUpgradable: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x7EFE6cE415956c5f80C6530cC6cc81b4808F6118&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  guestModule: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x02390F3E6E5FD1C6786CB78FD3027C117a9955A7&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  sequenceUtils: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0xd130B43062D875a4B7aF3f8fc036Bc6e9D3E1B3E&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  libs: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    requireFreshSigner: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0xE6B9B21C077F382333220a072e4c44280b873907&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>","isPage":true,"text":"\nexport const sequenceContextV1: WalletContext = {\n  factory: &#x27;0xf9D09D634Fb818b05149329C1dcCFAeA53639d96&#x27;,\n  mainModule: &#x27;0xd01F11855bCcb95f88D7A48492F66410d4637313&#x27;,\n  mainModuleUpgradable: &#x27;0x7EFE6cE415956c5f80C6530cC6cc81b4808F6118&#x27;,\n  guestModule: &#x27;0x02390F3E6E5FD1C6786CB78FD3027C117a9955A7&#x27;,\n  sequenceUtils: &#x27;0xd130B43062D875a4B7aF3f8fc036Bc6e9D3E1B3E&#x27;,\n  libs: {\n    requireFreshSigner: &#x27;0xE6B9B21C077F382333220a072e4c44280b873907&#x27;\n  }\n}","title":"Wallet Context V1","titles":[]},"527":{"href":"/solutions/technical-references/internals/v2/configuration#wallet-configuration","html":"</header>\n<p>In the context of Sequence Wallets, the &quot;Wallet Configuration&quot; is a set of parameters that defines the behavior of the wallet, primarily used to define the access control of the wallet, meaning who can sign transactions and how many signatures are needed.</p>\n","isPage":true,"text":"\nIn the context of Sequence Wallets, the &quot;Wallet Configuration&quot; is a set of parameters that defines the behavior of the wallet, primarily used to define the access control of the wallet, meaning who can sign transactions and how many signatures are needed.\n","title":"Wallet Configuration","titles":[]},"528":{"href":"/solutions/technical-references/internals/v2/configuration#top-level-properties","html":"\n<p>Sequence v2 configurations contain the following 3 properties:</p>\n<ul>\n<li><code>threshold</code> - The required &quot;weight sum&quot; needed for a signature to be considered valid.</li>\n<li><code>checkpoint</code> - Used as a salt and ordering mechanism for wallet updates.</li>\n<li><code>tree</code> - Determines the signers and their weights for the wallet.</li>\n</ul>\n","isPage":false,"text":"\nSequence v2 configurations contain the following 3 properties:\n\nthreshold - The required &quot;weight sum&quot; needed for a signature to be considered valid.\ncheckpoint - Used as a salt and ordering mechanism for wallet updates.\ntree - Determines the signers and their weights for the wallet.\n\n","title":"Top level properties","titles":["Wallet Configuration"]},"529":{"href":"/solutions/technical-references/internals/v2/configuration#threshold","html":"\n<p>The <code>threshold</code> is a <code>uint16</code>; it can have any value between 0 and 65535. Signatures are only considered valid or invalid if the sum of the weights of the signers that signed the transaction is greater or equal to the threshold.</p>\n","isPage":false,"text":"\nThe threshold is a uint16; it can have any value between 0 and 65535. Signatures are only considered valid or invalid if the sum of the weights of the signers that signed the transaction is greater or equal to the threshold.\n","title":"Threshold","titles":["Wallet Configuration","Top level properties"]},"530":{"href":"/solutions/technical-references/internals/v2/configuration#checkpoint","html":"\n<p>The <code>checkpoint</code> is a <code>uint32</code>. During wallet creation, a semi-random value can be provided to generate independent wallets with the same initial configuration. Then, during normal operation, the <code>checkpoint</code> is used by Light State Sync to ensure that wallet updates are applied in the correct order.</p>\n","isPage":false,"text":"\nThe checkpoint is a uint32. During wallet creation, a semi-random value can be provided to generate independent wallets with the same initial configuration. Then, during normal operation, the checkpoint is used by Light State Sync to ensure that wallet updates are applied in the correct order.\n","title":"Checkpoint","titles":["Wallet Configuration","Top level properties"]},"531":{"href":"/solutions/technical-references/internals/v2/configuration#tree","html":"\n<p>The <code>tree</code> is an unbalanced binary Merkle tree, where each leaf may contain a signer, a static signature, or a subtree. The tree can represent any combination of signers and weights and can be used to create complex multi-signature wallets.</p>\n<p>The possible leaf types are:</p>\n","isPage":false,"text":"\nThe tree is an unbalanced binary Merkle tree, where each leaf may contain a signer, a static signature, or a subtree. The tree can represent any combination of signers and weights and can be used to create complex multi-signature wallets.\nThe possible leaf types are:\n","title":"Tree","titles":["Wallet Configuration","Top level properties"]},"532":{"href":"/solutions/technical-references/internals/v2/configuration#signer","html":"\n<p>Signers are represented by a signer <code>address</code> and a <code>uint8</code> weight. The weight is how much the signer contributes to the threshold.\nThe address can belong to either an <code>ERC1271</code> compliant contract or an <code>EOA</code> wallet.</p>\n<p>The leaf hash is calculated as follows:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(weight) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 160</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint160</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(addr)))</span></span></code></pre>\n","isPage":false,"text":"\nSigners are represented by a signer address and a uint8 weight. The weight is how much the signer contributes to the threshold.\nThe address can belong to either an ERC1271 compliant contract or an EOA wallet.\nThe leaf hash is calculated as follows:\nbytes32(uint256(weight) &lt;&lt; 160 | uint256(uint160(addr)))\n","title":"Signer","titles":["Wallet Configuration","Top level properties","Tree"]},"533":{"href":"/solutions/technical-references/internals/v2/configuration#subdigest","html":"\n<p>This represents a static subdigest for which any signature is valid. If a signature for this subdigest is provided, the total weight of the signature is automatically set to <code>Infinity</code>.</p>\n<p>Notice static subdigests that exist within nested trees will have their &quot;Infinity&quot; weight reduced to the weight of the nested tree.</p>\n<p>The leaf hash is calculated as follows:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodePacked</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Sequence static digest:\\n&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, subdigest));</span></span></code></pre>\n","isPage":false,"text":"\nThis represents a static subdigest for which any signature is valid. If a signature for this subdigest is provided, the total weight of the signature is automatically set to Infinity.\nNotice static subdigests that exist within nested trees will have their &quot;Infinity&quot; weight reduced to the weight of the nested tree.\nThe leaf hash is calculated as follows:\nkeccak256(abi.encodePacked(&#x27;Sequence static digest:\\n&#x27;, subdigest));\n","title":"Subdigest","titles":["Wallet Configuration","Top level properties","Tree"]},"534":{"href":"/solutions/technical-references/internals/v2/configuration#subtree-nested-configuration","html":"\n<p>This represents a whole new wallet configuration, this &quot;nested configuration&quot; has its own:</p>\n<ul>\n<li>External <code>weight</code> (<code>uint8</code>)</li>\n<li>Internal <code>threshold</code> (<code>uint16</code>)</li>\n<li>Internal <code>tree</code></li>\n</ul>\n<p>The way it works is that if a signature reaches the <code>internal threshold</code> within the subtree it is considered valid, and the <code>external weight</code> is added to the parent tree. Any number of nested configurations can be created, and it is possible to create multiple nesting levels.</p>\n<p>This pattern can be used, among other things, to express the following scenarios:</p>\n<ul>\n<li>Non-linear weight distribution, A and B signers can provide 1 weight each, but together they can provide 3 weight.</li>\n<li>Limited total weight contribution, A, B, and C signers can provide 1 weight each, but together they can only provide 2 weight.</li>\n<li>&quot;Department configurations&quot;, N departments are required to sign, and each department has its own inner configuration.</li>\n</ul>\n<p>The leaf hash is calculated as follows:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodePacked</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;Sequence nested config:\\n&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  imageHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tree),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  threshold,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  weight</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">))</span></span></code></pre>\n<aside data-callout=\"warning\"><p>The wallet contracts have no way of validating the correctness of the configuration, the responsibility of ensuring the configuration is correct is on the SDKs interacting with the contracts.</p><p>Things like <code>threshold == 0</code> or <code>threshold &gt; total weight</code> will result in fully unauthenticated wallets or inaccessible wallets respectively.</p></aside>\n","isPage":false,"text":"\nThis represents a whole new wallet configuration, this &quot;nested configuration&quot; has its own:\n\nExternal weight (uint8)\nInternal threshold (uint16)\nInternal tree\n\nThe way it works is that if a signature reaches the internal threshold within the subtree it is considered valid, and the external weight is added to the parent tree. Any number of nested configurations can be created, and it is possible to create multiple nesting levels.\nThis pattern can be used, among other things, to express the following scenarios:\n\nNon-linear weight distribution, A and B signers can provide 1 weight each, but together they can provide 3 weight.\nLimited total weight contribution, A, B, and C signers can provide 1 weight each, but together they can only provide 2 weight.\n&quot;Department configurations&quot;, N departments are required to sign, and each department has its own inner configuration.\n\nThe leaf hash is calculated as follows:\nkeccak256(abi.encodePacked(\n  &#x27;Sequence nested config:\\n&#x27;,\n  imageHash(tree),\n  threshold,\n  weight\n))\nThe wallet contracts have no way of validating the correctness of the configuration, the responsibility of ensuring the configuration is correct is on the SDKs interacting with the contracts.Things like threshold == 0 or threshold &gt; total weight will result in fully unauthenticated wallets or inaccessible wallets respectively.\n","title":"Subtree (nested configuration)","titles":["Wallet Configuration","Top level properties","Tree"]},"535":{"href":"/solutions/technical-references/internals/v2/configuration#imagehash","html":"\n<p>The <code>configuration</code> is never stored as a whole; instead, the Merkle tree is hashed into a single <code>bytes32</code> value, this is internally called the <code>imageHash</code> of the configuration.</p>\n<p>The <code>imageHash</code> is calculated as follows:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">imageHash </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    hashTree</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tree),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    threshold</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  )),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  checkpoint</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">))</span></span></code></pre>\n<p>The <code>hashTree</code> function is a recursive function that hashes the tree into a single <code>bytes32</code> value, pseudo code for the <code>hashTree</code> function is as follows:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">export</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> hashTree</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Leaf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isSignerLeaf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">solidityPack</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;uint96&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;address&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      [node.weight, node.address]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isSubdigestLeaf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">solidityKeccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;string&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;bytes32&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Sequence static digest:</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\n</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, node.subdigest]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isNestedLeaf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nested</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> hashTree</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node.tree)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">solidityKeccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;string&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;bytes32&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;uint256&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;uint256&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Sequence nested config:</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\n</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, nested, node.threshold, node.weight]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">solidityKeccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;bytes32&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;bytes32&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    [</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">hashTree</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node.left), </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">hashTree</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node.right)]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nThe configuration is never stored as a whole; instead, the Merkle tree is hashed into a single bytes32 value, this is internally called the imageHash of the configuration.\nThe imageHash is calculated as follows:\nimageHash := keccak256(abi.encode(\n  keccak256(abi.encode(\n    hashTree(tree),\n    threshold\n  )),\n  checkpoint\n))\nThe hashTree function is a recursive function that hashes the tree into a single bytes32 value, pseudo code for the hashTree function is as follows:\nexport function hashTree(node: Node | Leaf): string {\n  if (isSignerLeaf(node)) {\n    return ethers.utils.solidityPack(\n      [&#x27;uint96&#x27;, &#x27;address&#x27;],\n      [node.weight, node.address]\n    )\n  }\n \n  if (isSubdigestLeaf(node)) {\n    return ethers.utils.solidityKeccak256(\n      [&#x27;string&#x27;, &#x27;bytes32&#x27;],\n      [&#x27;Sequence static digest:\\n&#x27;, node.subdigest]\n    )\n  }\n \n  if (isNestedLeaf(node)) {\n    const nested = hashTree(node.tree)\n    return ethers.utils.solidityKeccak256(\n      [&#x27;string&#x27;, &#x27;bytes32&#x27;, &#x27;uint256&#x27;, &#x27;uint256&#x27;],\n      [&#x27;Sequence nested config:\\n&#x27;, nested, node.threshold, node.weight]\n    )\n  }\n \n  return ethers.utils.solidityKeccak256(\n    [&#x27;bytes32&#x27;, &#x27;bytes32&#x27;],\n    [hashTree(node.left), hashTree(node.right)]\n  )\n}\n","title":"ImageHash","titles":["Wallet Configuration"]},"536":{"href":"/solutions/technical-references/internals/v2/configuration#initial-configuration","html":"\n<p>All Sequence Wallets have an &quot;initial configuration&quot;, implemented by using the <code>imageHash</code> of the initial configuration as the SALT during the <code>CREATE2</code> deployment of the wallet.</p>\n<p>Wallets are deployed by calling the <code>deploy</code> function of the <code>Factory</code> contract, which takes the following parameters:</p>\n<ul>\n<li><code>mainModule</code>: The address of the initial code implementation of the wallet.</li>\n<li><code>salt</code>: The <code>imageHash</code> of the initial configuration.</li>\n</ul>\n<aside data-callout=\"info\"><p>The <code>MainModule</code> should always be used as the initial code implementation of the wallet. The <code>MainModule</code> validates the <code>imageHash</code> (during signature validation) by re-computing the counterfactual address of the wallet, hence it does not require any storage initialization.</p><p>If the <code>imageHash</code> is ever changed, <code>MainModule</code> will automatically replace the wallet code implementation with <code>MainModuleUpgradeable</code>, while handling the storage initialization.</p></aside>","isPage":false,"text":"\nAll Sequence Wallets have an &quot;initial configuration&quot;, implemented by using the imageHash of the initial configuration as the SALT during the CREATE2 deployment of the wallet.\nWallets are deployed by calling the deploy function of the Factory contract, which takes the following parameters:\n\nmainModule: The address of the initial code implementation of the wallet.\nsalt: The imageHash of the initial configuration.\n\nThe MainModule should always be used as the initial code implementation of the wallet. The MainModule validates the imageHash (during signature validation) by re-computing the counterfactual address of the wallet, hence it does not require any storage initialization.If the imageHash is ever changed, MainModule will automatically replace the wallet code implementation with MainModuleUpgradeable, while handling the storage initialization.","title":"Initial Configuration","titles":["Wallet Configuration"]},"537":{"href":"/solutions/technical-references/internals/v2/wallet-context#wallet-context-v2","html":"</header>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">export</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> sequenceContextV2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> WalletContext</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  factory: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0xFaA5c0b14d1bED5C888Ca655B9a8A5911F78eF4A&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  mainModule: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0xfBf8f1A5E00034762D928f46d438B947f5d4065d&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  mainModuleUpgradable: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x4222dcA3974E39A8b41c411FeDDE9b09Ae14b911&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  guestModule: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0xfea230Ee243f88BC698dD8f1aE93F8301B6cdfaE&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  sequenceUtils: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0xdbbFa3cB3B087B64F4ef5E3D20Dda2488AA244e6&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>","isPage":true,"text":"\nexport const sequenceContextV2: WalletContext = {\n  factory: &#x27;0xFaA5c0b14d1bED5C888Ca655B9a8A5911F78eF4A&#x27;,\n  mainModule: &#x27;0xfBf8f1A5E00034762D928f46d438B947f5d4065d&#x27;,\n  mainModuleUpgradable: &#x27;0x4222dcA3974E39A8b41c411FeDDE9b09Ae14b911&#x27;,\n  guestModule: &#x27;0xfea230Ee243f88BC698dD8f1aE93F8301B6cdfaE&#x27;,\n  sequenceUtils: &#x27;0xdbbFa3cB3B087B64F4ef5E3D20Dda2488AA244e6&#x27;\n}","title":"Wallet Context v2","titles":[]},"538":{"href":"/solutions/wallets/embedded-wallet/architecture/action-payloads#action-payloads","html":"</header>\n<p>Each write operation in Sequence Embedded Wallet uses a payload. Payloads are JSON objects. They hold all data about the intent of the action and the user&#x27;s signature.</p>\n<p>The Embedded Wallet SDK generates Payloads. To complete the action, send them to the Embedded Wallet API.</p>\n<p>The Embedded Wallet API key authenticates all calls to the Embedded Wallet API. This includes calls to the <code>/sendPayload</code> endpoint. The Embedded Wallet API key is a secret. Keep it safe and never share it or store it in a client-side application.\n:::</p>\n","isPage":true,"text":"\nEach write operation in Sequence Embedded Wallet uses a payload. Payloads are JSON objects. They hold all data about the intent of the action and the user&#x27;s signature.\nThe Embedded Wallet SDK generates Payloads. To complete the action, send them to the Embedded Wallet API.\nThe Embedded Wallet API key authenticates all calls to the Embedded Wallet API. This includes calls to the /sendPayload endpoint. The Embedded Wallet API key is a secret. Keep it safe and never share it or store it in a client-side application.\n:::\n","title":"Action payloads","titles":[]},"539":{"href":"/solutions/wallets/embedded-wallet/architecture/action-payloads#payload-structure","html":"\n<p>You don&#x27;t need to manually change the payload contents to integrate Embedded Wallet. But they have strict definitions. Use them if you need to.</p>\n<p>The payload structure is as follows:</p>\n<table><thead><tr><th>Name</th><th>Type</th><th>Description</th><th>Optional</th></tr></thead><tbody><tr><td>version</td><td>string</td><td>The version of the SDK that generated the payload</td><td>No</td></tr><tr><td>* packet</td><td>object</td><td>Contents, defined by each payload type</td><td>No</td></tr><tr><td>signatures</td><td>signature[]</td><td>Payload signatures by existing sessions</td><td>Yes</td></tr><tr><td>packet.code</td><td>string</td><td>Identifier of the payload type</td><td>No</td></tr><tr><td>packet.issued</td><td>number</td><td>Timestamp of when the payload was issued, in seconds</td><td>No</td></tr><tr><td>packet.expires</td><td>number</td><td>Timestamp of when the payload will expire, in seconds</td><td>No</td></tr></tbody></table>\n<p>* packet must be organized such that its fields (in JSON structure) appear alphabetically by name.</p>\n<blockquote>\n<p>The wallet is optional when openning a new session</p>\n</blockquote>\n","isPage":false,"text":"\nYou don&#x27;t need to manually change the payload contents to integrate Embedded Wallet. But they have strict definitions. Use them if you need to.\nThe payload structure is as follows:\nNameTypeDescriptionOptionalversionstringThe version of the SDK that generated the payloadNo* packetobjectContents, defined by each payload typeNosignaturessignature[]Payload signatures by existing sessionsYespacket.codestringIdentifier of the payload typeNopacket.issuednumberTimestamp of when the payload was issued, in secondsNopacket.expiresnumberTimestamp of when the payload will expire, in secondsNo\n* packet must be organized such that its fields (in JSON structure) appear alphabetically by name.\n\nThe wallet is optional when openning a new session\n\n","title":"Payload structure","titles":["Action payloads"]},"540":{"href":"/solutions/wallets/embedded-wallet/architecture/action-payloads#signature-type","html":"\n<table><thead><tr><th>Name</th><th>Type</th><th>Description</th><th>Optional</th></tr></thead><tbody><tr><td>session</td><td>string</td><td>Identifier of the signing session</td><td>No</td></tr><tr><td>* signature</td><td>string</td><td>Signature of the session for the given payload</td><td>No</td></tr></tbody></table>\n<p>* signature should be an EIP-191 signature. See <a href=\"https://eips.ethereum.org/EIPS/eip-191\">https://eips.ethereum.org/EIPS/eip-191</a></p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;version&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;1.0.0&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;packet&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;code&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;signMessage&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;expires&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1600086400</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;issued&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1600000000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;message&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Join game: #284892&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;network&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;137&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;wallet&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0xBc5F07A5852fdF3DBd57A76835109220D0ADd8E8&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;signatures&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;session&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0xCF67BCbD9D5DFD373b03f4fc8143e1c6744B5696&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;signature&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x4b0fc0c7d42566958d60f92115ab95167c837c891e2f4fa62a75bfed30d86af7291051fe5c88985269286548a42bed5b70bb16588e48998206a2e7a547f527d101&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nNameTypeDescriptionOptionalsessionstringIdentifier of the signing sessionNo* signaturestringSignature of the session for the given payloadNo\n* signature should be an EIP-191 signature. See https://eips.ethereum.org/EIPS/eip-191\n{\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;packet&quot;: {\n    &quot;code&quot;: &quot;signMessage&quot;,\n    &quot;expires&quot;: 1600086400,\n    &quot;issued&quot;: 1600000000,\n    &quot;message&quot;: &quot;Join game: #284892&quot;,\n    &quot;network&quot;: &quot;137&quot;,\n    &quot;wallet&quot;: &quot;0xBc5F07A5852fdF3DBd57A76835109220D0ADd8E8&quot;\n  },\n  &quot;signatures&quot;: [{\n    &quot;session&quot;: &quot;0xCF67BCbD9D5DFD373b03f4fc8143e1c6744B5696&quot;,\n    &quot;signature&quot;: &quot;0x4b0fc0c7d42566958d60f92115ab95167c837c891e2f4fa62a75bfed30d86af7291051fe5c88985269286548a42bed5b70bb16588e48998206a2e7a547f527d101&quot;\n  }]\n}\n","title":"signature type","titles":["Action payloads","Payload structure",null]},"541":{"href":"/solutions/wallets/embedded-wallet/architecture/action-payloads#open-session-payload","html":"\n<p>Opening a new client-side session on the Embedded Wallet SDK generates this payload. It holds the &quot;proof&quot; that authenticates the user and the session data to link to it.</p>\n<p>Either <code>idToken</code>, <code>email</code> or a valid signature <em>MUST</em> be present. If <code>email</code> is given, the Embedded Wallet will email the user on their first transaction with this session. The email asks them to confirm it.</p>\n<p>The <code>wallet</code> parameter is optional <em>ONLY</em> for this payload. If given, it ensures that the opened session matches the requested wallet.</p>\n<table><thead><tr><th>Name</th><th>Type</th><th>Description</th><th>Optional</th></tr></thead><tbody><tr><td>code</td><td>string</td><td>The &quot;code&quot; of the payload (<code>openSession</code>).</td><td>No</td></tr><tr><td>session</td><td>string</td><td>The unique identifier for the session</td><td>No</td></tr><tr><td>proof</td><td>object</td><td>Contains authentication details like JWT and email</td><td>No</td></tr><tr><td>proof.idToken</td><td>string</td><td>OAuth2 id token</td><td>Yes</td></tr><tr><td>proof.email</td><td>string</td><td>User&#x27;s email address</td><td>Yes</td></tr></tbody></table>\n<p>Notice that either <code>idToken</code>, <code>email</code> or a valid signature <em>MUST</em> be present. If <code>email</code> is provided, the Embedded Wallet will send an email on the user&#x27;s first transaction with this session, asking them to confirm it.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;version&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;1.0.0&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;packet&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;code&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;openSession&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;expires&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1600086400</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;issued&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1600000000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;proof&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;idToken&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJodHRwOi8vbXktZG9tYWluLmF1dGgwLmNvbSIsInN1YiI6ImF1dGgwfDEyMzQ1NiIsImF1ZCI6IjEyMzRhYmNkZWYiLCJleHAiOjEzMTEyODE5NzAsImlhdCI6MTMxMTI4MDk3MCwibmFtZSI6IkphbmUgRG9lIiwiZ2l2ZW5fbmFtZSI6IkphbmUiLCJmYW1pbHlfbmFtZSI6IkRvZSJ9.bql-jxlG9B_bielkqOnjTY9Di9FillFb6IMQINXoYsw&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;email&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;user@email.com&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;session&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0xCF67BCbD9D5DFD373b03f4fc8143e1c6744B5696&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nOpening a new client-side session on the Embedded Wallet SDK generates this payload. It holds the &quot;proof&quot; that authenticates the user and the session data to link to it.\nEither idToken, email or a valid signature MUST be present. If email is given, the Embedded Wallet will email the user on their first transaction with this session. The email asks them to confirm it.\nThe wallet parameter is optional ONLY for this payload. If given, it ensures that the opened session matches the requested wallet.\nNameTypeDescriptionOptionalcodestringThe &quot;code&quot; of the payload (openSession).NosessionstringThe unique identifier for the sessionNoproofobjectContains authentication details like JWT and emailNoproof.idTokenstringOAuth2 id tokenYesproof.emailstringUser&#x27;s email addressYes\nNotice that either idToken, email or a valid signature MUST be present. If email is provided, the Embedded Wallet will send an email on the user&#x27;s first transaction with this session, asking them to confirm it.\n{\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;packet&quot;: {\n    &quot;code&quot;: &quot;openSession&quot;,\n    &quot;expires&quot;: 1600086400,\n    &quot;issued&quot;: 1600000000,\n    &quot;proof&quot;: {\n      &quot;idToken&quot;: &quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJodHRwOi8vbXktZG9tYWluLmF1dGgwLmNvbSIsInN1YiI6ImF1dGgwfDEyMzQ1NiIsImF1ZCI6IjEyMzRhYmNkZWYiLCJleHAiOjEzMTEyODE5NzAsImlhdCI6MTMxMTI4MDk3MCwibmFtZSI6IkphbmUgRG9lIiwiZ2l2ZW5fbmFtZSI6IkphbmUiLCJmYW1pbHlfbmFtZSI6IkRvZSJ9.bql-jxlG9B_bielkqOnjTY9Di9FillFb6IMQINXoYsw&quot;,\n      &quot;email&quot;: &quot;user@email.com&quot;\n    },\n    &quot;session&quot;: &quot;0xCF67BCbD9D5DFD373b03f4fc8143e1c6744B5696&quot;\n  }\n}\n","title":"Open session payload","titles":["Action payloads","Payload structure"]},"542":{"href":"/solutions/wallets/embedded-wallet/architecture/action-payloads#sign-message-payload","html":"\n<p>This payload is generated when <code>signMessage</code> is called on the SDK.</p>\n<table><thead><tr><th>Name</th><th>Type</th><th>Description</th><th>Optional</th></tr></thead><tbody><tr><td>code</td><td>string</td><td>The &quot;code&quot; of the payload (<code>signMessage</code>).</td><td>No</td></tr><tr><td>wallet</td><td>string</td><td>Address of the wallet.</td><td>No</td></tr><tr><td>network</td><td>string</td><td>Network on which to send the transactions.</td><td>No</td></tr><tr><td>message</td><td>string</td><td>Message to be signed.</td><td>No</td></tr></tbody></table>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;version&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;1.0.0&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;packet&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;code&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;signMessage&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;expires&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1600086400</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;issued&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1600000000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;message&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Join game: #284892&quot;</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;network&quot;</span><span style=\"color:#B31D28;--shiki-dark:#FF938A;font-style:italic;--shiki-dark-font-style:italic\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;1&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;wallet&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0xBc5F07A5852fdF3DBd57A76835109220D0ADd8E8&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;signatures&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;session&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0xCF67BCbD9D5DFD373b03f4fc8143e1c6744B5696&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;signature&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x4f9555c73908b6a5b61e0a744cb4e00fce7b20743d5799e4cb1774081bc6b2ec192c740e50f1adec84605636e09c9cdf4d2f6629f9ce64d8d0f3ae10305ef90400&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nThis payload is generated when signMessage is called on the SDK.\nNameTypeDescriptionOptionalcodestringThe &quot;code&quot; of the payload (signMessage).NowalletstringAddress of the wallet.NonetworkstringNetwork on which to send the transactions.NomessagestringMessage to be signed.No\n{\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;packet&quot;: {\n    &quot;code&quot;: &quot;signMessage&quot;,\n    &quot;expires&quot;: 1600086400,\n    &quot;issued&quot;: 1600000000,\n    &quot;message&quot;: &quot;Join game: #284892&quot;\n    &quot;network&quot;: &quot;1&quot;,\n    &quot;wallet&quot;: &quot;0xBc5F07A5852fdF3DBd57A76835109220D0ADd8E8&quot;,\n  },\n  &quot;signatures&quot;: [{\n    &quot;session&quot;: &quot;0xCF67BCbD9D5DFD373b03f4fc8143e1c6744B5696&quot;,\n    &quot;signature&quot;: &quot;0x4f9555c73908b6a5b61e0a744cb4e00fce7b20743d5799e4cb1774081bc6b2ec192c740e50f1adec84605636e09c9cdf4d2f6629f9ce64d8d0f3ae10305ef90400&quot;\n  }]\n}\n","title":"Sign message payload","titles":["Action payloads","Payload structure"]},"543":{"href":"/solutions/wallets/embedded-wallet/architecture/action-payloads#send-transaction-payload","html":"\n<p>This payload is generated when <code>sendTransaction</code> is called on the SDK.</p>\n<table><thead><tr><th>Name</th><th>Type</th><th>Description</th><th>Optional</th></tr></thead><tbody><tr><td>code</td><td>string</td><td>The &quot;code&quot; of the payload (<code>sendTransaction</code>).</td><td>No</td></tr><tr><td>identifier</td><td>string</td><td>Unique identifier for the transaction</td><td>No</td></tr><tr><td>wallet</td><td>string</td><td>Address of the wallet.</td><td>No</td></tr><tr><td>network</td><td>string</td><td>Network on which to send the transactions.</td><td>No</td></tr><tr><td>transactions</td><td>(transaction | erc20send | erc721send | erc1155send | delayedEncode)[]</td><td>Array of transaction objects.</td><td>No</td></tr></tbody></table>\n","isPage":false,"text":"\nThis payload is generated when sendTransaction is called on the SDK.\nNameTypeDescriptionOptionalcodestringThe &quot;code&quot; of the payload (sendTransaction).NoidentifierstringUnique identifier for the transactionNowalletstringAddress of the wallet.NonetworkstringNetwork on which to send the transactions.Notransactions(transaction | erc20send | erc721send | erc1155send | delayedEncode)[]Array of transaction objects.No\n","title":"Send transaction payload","titles":["Action payloads","Payload structure"]},"544":{"href":"/solutions/wallets/embedded-wallet/architecture/action-payloads#raw-transaction","html":"\n<table><thead><tr><th>Name</th><th>Type</th><th>Description</th><th>Optional</th></tr></thead><tbody><tr><td>type</td><td>string</td><td>Transaction type, should be &quot;transaction&quot;</td><td>No</td></tr><tr><td>to</td><td>string</td><td>The recipient Ethereum address</td><td>No</td></tr><tr><td>value</td><td>string</td><td>The value to be transferred</td><td>Yes</td></tr><tr><td>data</td><td>string</td><td>Additional data for the transaction</td><td>Yes</td></tr></tbody></table>\n<p>Notice that transactions with <code>to === wallet</code> are strictly forbidden, and will get rejected.</p>\n","isPage":false,"text":"\nNameTypeDescriptionOptionaltypestringTransaction type, should be &quot;transaction&quot;NotostringThe recipient Ethereum addressNovaluestringThe value to be transferredYesdatastringAdditional data for the transactionYes\nNotice that transactions with to === wallet are strictly forbidden, and will get rejected.\n","title":"Raw transaction","titles":["Action payloads","Payload structure","Send transaction payload"]},"545":{"href":"/solutions/wallets/embedded-wallet/architecture/action-payloads#senderc20","html":"\n<table><thead><tr><th>Name</th><th>Type</th><th>Description</th><th>Optional</th></tr></thead><tbody><tr><td>type</td><td>string</td><td>Transaction type, should be &quot;erc20send&quot;</td><td>No</td></tr><tr><td>token</td><td>string</td><td>The ERC20 token contract address</td><td>No</td></tr><tr><td>to</td><td>string</td><td>The recipient Ethereum address</td><td>No</td></tr><tr><td>value</td><td>string</td><td>Amount of tokens to send</td><td>No</td></tr></tbody></table>\n","isPage":false,"text":"\nNameTypeDescriptionOptionaltypestringTransaction type, should be &quot;erc20send&quot;NotokenstringThe ERC20 token contract addressNotostringThe recipient Ethereum addressNovaluestringAmount of tokens to sendNo\n","title":"sendERC20","titles":["Action payloads","Payload structure","Send transaction payload"]},"546":{"href":"/solutions/wallets/embedded-wallet/architecture/action-payloads#senderc721","html":"\n<table><thead><tr><th>Name</th><th>Type</th><th>Description</th><th>Optional</th></tr></thead><tbody><tr><td>type</td><td>string</td><td>Transaction type, should be &quot;erc721send&quot;</td><td>No</td></tr><tr><td>token</td><td>string</td><td>The ERC721 token contract address</td><td>No</td></tr><tr><td>to</td><td>string</td><td>The recipient Ethereum address</td><td>No</td></tr><tr><td>id</td><td>string</td><td>Token ID to send</td><td>No</td></tr><tr><td>safe</td><td>bool</td><td>Whether to use the safeTransferFrom function</td><td>Yes</td></tr><tr><td>data</td><td>string</td><td>Additional data for the transaction</td><td>Yes</td></tr></tbody></table>\n<p>Notice that <code>data</code> can only be used if <code>safe === true</code>.</p>\n","isPage":false,"text":"\nNameTypeDescriptionOptionaltypestringTransaction type, should be &quot;erc721send&quot;NotokenstringThe ERC721 token contract addressNotostringThe recipient Ethereum addressNoidstringToken ID to sendNosafeboolWhether to use the safeTransferFrom functionYesdatastringAdditional data for the transactionYes\nNotice that data can only be used if safe === true.\n","title":"sendERC721","titles":["Action payloads","Payload structure","Send transaction payload"]},"547":{"href":"/solutions/wallets/embedded-wallet/architecture/action-payloads#senderc1155","html":"\n<table><thead><tr><th>Name</th><th>Type</th><th>Description</th><th>Optional</th></tr></thead><tbody><tr><td>type</td><td>string</td><td>Transaction type, should be &quot;erc1155send&quot;</td><td>No</td></tr><tr><td>token</td><td>string</td><td>The ERC1155 token contract address</td><td>No</td></tr><tr><td>to</td><td>string</td><td>The recipient Ethereum address</td><td>No</td></tr><tr><td>vals</td><td>object[]</td><td>Array of objects with id and amount</td><td>No</td></tr><tr><td>vals[].id</td><td>string</td><td>The ID of the token</td><td>No</td></tr><tr><td>vals[].amount</td><td>string</td><td>Amount of tokens with this ID to send</td><td>No</td></tr><tr><td>data</td><td>string</td><td>Additional data for the transaction</td><td>Yes</td></tr></tbody></table>\n","isPage":false,"text":"\nNameTypeDescriptionOptionaltypestringTransaction type, should be &quot;erc1155send&quot;NotokenstringThe ERC1155 token contract addressNotostringThe recipient Ethereum addressNovalsobject[]Array of objects with id and amountNovals[].idstringThe ID of the tokenNovals[].amountstringAmount of tokens with this ID to sendNodatastringAdditional data for the transactionYes\n","title":"sendERC1155","titles":["Action payloads","Payload structure","Send transaction payload"]},"548":{"href":"/solutions/wallets/embedded-wallet/architecture/action-payloads#delayedencode","html":"\n<p>Delayed encode transactions have their payload data not encoded on the client, it instead is left to be encoded by the Embedded Wallet API. This reduces the burden on the client, and makes it easier to integrate in environments with limited libraries.</p>\n<table><thead><tr><th>Type</th><th>Field</th><th>Data Type</th><th>Description</th></tr></thead><tbody><tr><td>DelayedEncodeData</td><td>abi</td><td>string</td><td>The ABI (Application Binary Interface) for the contract.</td></tr><tr><td></td><td>func</td><td>string</td><td>The function to call within the smart contract.</td></tr><tr><td></td><td>args</td><td>(string | DelayedEncodeData)[] | { [key: string]: (string | DelayedEncodeData) }</td><td>The arguments to pass to the function. Can be an array or an object.</td></tr><tr><td>DelayedEncodeSubpacket</td><td>type</td><td>&#x27;delayedEncode&#x27;</td><td>The type of the subpacket, in this case, it&#x27;s <code>&#x27;delayedEncode&#x27;</code>.</td></tr><tr><td></td><td>to</td><td>string</td><td>The address to which the transaction is sent.</td></tr><tr><td></td><td>value</td><td>string</td><td>The value being sent in the transaction, usually in Ether for Ethereum.</td></tr><tr><td></td><td>data</td><td>DelayedEncodeData</td><td>The data payload, containing the ABI, function to call, and arguments.</td></tr></tbody></table>\n<p>Hope this helps!</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;version&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;1.0.0&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;packet&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;code&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;sendTransaction&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;expires&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1600086400</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;identifier&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;tx-id1-1600000000&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;issued&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1600000000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;network&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;137&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;transactions&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x3251ba32&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;to&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x479F6a5b0C1728947318714963a583C56A78366A&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;type&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;transaction&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;value&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;39381&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;to&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x7b1Bd3474D789e18e2E329E2c53F819B6E687b4A&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;token&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;type&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;erc20send&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;value&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;1000&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x112233&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;id&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;7&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;safe&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;to&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x17fFA2d95b58228e1ECb0C6Ac25A6EfD20BA08E4&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;token&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0xF87E31492Faf9A91B02Ee0dEAAd50d51d56D5d4d&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;type&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;erc721send&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x223344&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;to&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x91E8aC543C5fEDf9F3Ef8b9dA1500dB84305681F&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;token&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x631998e91476da5b870d741192fc5cbc55f5a52e&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;type&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;erc1155send&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;vals&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;amount&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;5&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;id&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;2&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }, {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;amount&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;1&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;id&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;500&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">\t\t\t\t&quot;data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">\t\t\t\t\t&quot;abi&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;[{</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">inputs</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">:[{</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">internalType</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">:</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">bytes32</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">,</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">name</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">:</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">_orderId</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">,</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">type</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">:</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">bytes32</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">},{</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">internalType</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">:</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">uint256</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">,</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">name</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">:</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">_maxCost</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">,</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">type</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">:</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">uint256</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">},{</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">internalType</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">:</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">address</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">,</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">name</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">:</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">_fees</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">,</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">type</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">:</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">address</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">},{</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">internalType</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">:</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">bytes</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">,</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">name</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">:</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">_data</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">,</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">type</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">:</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">bytes</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}],</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">name</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">:</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">fillOrKillOrder</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">,</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">outputs</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">:[],</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">stateMutability</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">:</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">view</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">,</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">type</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">:</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">function</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">},{</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">inputs</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">:[],</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">name</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">:</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">otherMethods</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">,</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">outputs</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">:[],</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">stateMutability</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">:</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">nonpayable</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">,</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">type</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">:</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">function</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}]&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">\t\t\t\t\t&quot;args&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t\t\t\t\t&quot;0x6bd55a2877890bd58871eefe886770a7734077a74981910a75d7b1f044b5bf28&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t\t\t\t\t&quot;1000000000000000000&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t\t\t\t\t&quot;[</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">0x095aE61E8207C7856eA273235D6BAdb69d815F5e</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">, </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">0xC9D9B33231d24dd8cC53fDD64F7ABdd156f2a7E2</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">]&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t\t\t\t{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">\t\t\t\t\t\t\t&quot;abi&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;notExpired(uint256,string)&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">\t\t\t\t\t\t\t&quot;args&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t\t\t\t\t\t\t&quot;1600000000&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t\t\t\t\t\t\t&quot;Nov 1st, 2020&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t\t\t\t\t],</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">\t\t\t\t\t\t\t&quot;func&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;notExpired&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t\t\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t\t\t],</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">\t\t\t\t\t&quot;func&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;fillOrKillOrder&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t\t},</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;to&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x140d72763D1ce39Ad4E2e73EC6e8FC53E5b73B64&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">\t\t\t\t&quot;type&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;delayedEncode&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;value&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ],</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;wallet&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0xBc5F07A5852fdF3DBd57A76835109220D0ADd8E8&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;signatures&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;session&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0xCF67BCbD9D5DFD373b03f4fc8143e1c6744B5696&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;signature&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x4f9555c73908b6a5b61e0a744cb4e00fce7b20743d5799e4cb1774081bc6b2ec192c740e50f1adec84605636e09c9cdf4d2f6629f9ce64d8d0f3ae10305ef90400&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nDelayed encode transactions have their payload data not encoded on the client, it instead is left to be encoded by the Embedded Wallet API. This reduces the burden on the client, and makes it easier to integrate in environments with limited libraries.\nTypeFieldData TypeDescriptionDelayedEncodeDataabistringThe ABI (Application Binary Interface) for the contract.funcstringThe function to call within the smart contract.args(string | DelayedEncodeData)[] | { [key: string]: (string | DelayedEncodeData) }The arguments to pass to the function. Can be an array or an object.DelayedEncodeSubpackettype&#x27;delayedEncode&#x27;The type of the subpacket, in this case, it&#x27;s &#x27;delayedEncode&#x27;.tostringThe address to which the transaction is sent.valuestringThe value being sent in the transaction, usually in Ether for Ethereum.dataDelayedEncodeDataThe data payload, containing the ABI, function to call, and arguments.\nHope this helps!\n{\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;packet&quot;: {\n    &quot;code&quot;: &quot;sendTransaction&quot;,\n    &quot;expires&quot;: 1600086400,\n    &quot;identifier&quot;: &quot;tx-id1-1600000000&quot;,\n    &quot;issued&quot;: 1600000000,\n    &quot;network&quot;: &quot;137&quot;,\n    &quot;transactions&quot;: [\n      {\n        &quot;data&quot;: &quot;0x3251ba32&quot;,\n        &quot;to&quot;: &quot;0x479F6a5b0C1728947318714963a583C56A78366A&quot;,\n        &quot;type&quot;: &quot;transaction&quot;,\n        &quot;value&quot;: &quot;39381&quot;\n      },\n      {\n        &quot;to&quot;: &quot;0x7b1Bd3474D789e18e2E329E2c53F819B6E687b4A&quot;,\n        &quot;token&quot;: &quot;0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48&quot;,\n        &quot;type&quot;: &quot;erc20send&quot;,\n        &quot;value&quot;: &quot;1000&quot;\n      },\n      {\n        &quot;data&quot;: &quot;0x112233&quot;,\n        &quot;id&quot;: &quot;7&quot;,\n        &quot;safe&quot;: true,\n        &quot;to&quot;: &quot;0x17fFA2d95b58228e1ECb0C6Ac25A6EfD20BA08E4&quot;,\n        &quot;token&quot;: &quot;0xF87E31492Faf9A91B02Ee0dEAAd50d51d56D5d4d&quot;,\n        &quot;type&quot;: &quot;erc721send&quot;\n      },\n      {\n        &quot;data&quot;: &quot;0x223344&quot;,\n        &quot;to&quot;: &quot;0x91E8aC543C5fEDf9F3Ef8b9dA1500dB84305681F&quot;,\n        &quot;token&quot;: &quot;0x631998e91476da5b870d741192fc5cbc55f5a52e&quot;,\n        &quot;type&quot;: &quot;erc1155send&quot;,\n        &quot;vals&quot;: [{\n          &quot;amount&quot;: &quot;5&quot;,\n          &quot;id&quot;: &quot;2&quot;\n        }, {\n          &quot;amount&quot;: &quot;1&quot;,\n          &quot;id&quot;: &quot;500&quot;\n        }]\n      },\n\t\t\t{\n\t\t\t\t&quot;data&quot;: {\n\t\t\t\t\t&quot;abi&quot;: &quot;[{\\&quot;inputs\\&quot;:[{\\&quot;internalType\\&quot;:\\&quot;bytes32\\&quot;,\\&quot;name\\&quot;:\\&quot;_orderId\\&quot;,\\&quot;type\\&quot;:\\&quot;bytes32\\&quot;},{\\&quot;internalType\\&quot;:\\&quot;uint256\\&quot;,\\&quot;name\\&quot;:\\&quot;_maxCost\\&quot;,\\&quot;type\\&quot;:\\&quot;uint256\\&quot;},{\\&quot;internalType\\&quot;:\\&quot;address\\&quot;,\\&quot;name\\&quot;:\\&quot;_fees\\&quot;,\\&quot;type\\&quot;:\\&quot;address\\&quot;},{\\&quot;internalType\\&quot;:\\&quot;bytes\\&quot;,\\&quot;name\\&quot;:\\&quot;_data\\&quot;,\\&quot;type\\&quot;:\\&quot;bytes\\&quot;}],\\&quot;name\\&quot;:\\&quot;fillOrKillOrder\\&quot;,\\&quot;outputs\\&quot;:[],\\&quot;stateMutability\\&quot;:\\&quot;view\\&quot;,\\&quot;type\\&quot;:\\&quot;function\\&quot;},{\\&quot;inputs\\&quot;:[],\\&quot;name\\&quot;:\\&quot;otherMethods\\&quot;,\\&quot;outputs\\&quot;:[],\\&quot;stateMutability\\&quot;:\\&quot;nonpayable\\&quot;,\\&quot;type\\&quot;:\\&quot;function\\&quot;}]&quot;,\n\t\t\t\t\t&quot;args&quot;: [\n\t\t\t\t\t\t&quot;0x6bd55a2877890bd58871eefe886770a7734077a74981910a75d7b1f044b5bf28&quot;,\n\t\t\t\t\t\t&quot;1000000000000000000&quot;,\n\t\t\t\t\t\t&quot;[\\&quot;0x095aE61E8207C7856eA273235D6BAdb69d815F5e\\&quot;, \\&quot;0xC9D9B33231d24dd8cC53fDD64F7ABdd156f2a7E2\\&quot;]&quot;,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t&quot;abi&quot;: &quot;notExpired(uint256,string)&quot;,\n\t\t\t\t\t\t\t&quot;args&quot;: [\n\t\t\t\t\t\t\t\t&quot;1600000000&quot;,\n\t\t\t\t\t\t\t\t&quot;Nov 1st, 2020&quot;\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t&quot;func&quot;: &quot;notExpired&quot;\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t&quot;func&quot;: &quot;fillOrKillOrder&quot;\n\t\t\t\t},\n        &quot;to&quot;: &quot;0x140d72763D1ce39Ad4E2e73EC6e8FC53E5b73B64&quot;,\n\t\t\t\t&quot;type&quot;: &quot;delayedEncode&quot;,\n        &quot;value&quot;: &quot;0&quot;\n\t\t\t}\n    ],\n    &quot;wallet&quot;: &quot;0xBc5F07A5852fdF3DBd57A76835109220D0ADd8E8&quot;\n  },\n  &quot;signatures&quot;: [{\n    &quot;session&quot;: &quot;0xCF67BCbD9D5DFD373b03f4fc8143e1c6744B5696&quot;,\n    &quot;signature&quot;: &quot;0x4f9555c73908b6a5b61e0a744cb4e00fce7b20743d5799e4cb1774081bc6b2ec192c740e50f1adec84605636e09c9cdf4d2f6629f9ce64d8d0f3ae10305ef90400&quot;\n  }]\n}\n","title":"delayedEncode","titles":["Action payloads","Payload structure","Send transaction payload"]},"549":{"href":"/solutions/wallets/embedded-wallet/architecture/action-payloads#close-session-payload","html":"\n<p>This payload is generated when the client requests clossing a given session. Notice that the client <em>MAY</em> close the current session, or some other session.</p>\n<table><thead><tr><th>Name</th><th>Type</th><th>Description</th><th>Optional</th></tr></thead><tbody><tr><td>code</td><td>string</td><td>The &quot;code&quot; of the payload (<code>closeSession</code>).</td><td>No</td></tr><tr><td>wallet</td><td>string</td><td>Address of the wallet.</td><td>No</td></tr><tr><td>session</td><td>string</td><td>Identifier for the session to be closed</td><td>No</td></tr></tbody></table>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;version&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;1.0.0&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;packet&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;code&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;closeSession&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;expires&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1600086400</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;issued&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1600000000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;session&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0xCF67BCbD9D5DFD373b03f4fc8143e1c6744B5696&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;wallet&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0xBc5F07A5852fdF3DBd57A76835109220D0ADd8E8&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;signatures&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;session&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0xCF67BCbD9D5DFD373b03f4fc8143e1c6744B5696&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;signature&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x4f9555c73908b6a5b61e0a744cb4e00fce7b20743d5799e4cb1774081bc6b2ec192c740e50f1adec84605636e09c9cdf4d2f6629f9ce64d8d0f3ae10305ef90400&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>","isPage":false,"text":"\nThis payload is generated when the client requests clossing a given session. Notice that the client MAY close the current session, or some other session.\nNameTypeDescriptionOptionalcodestringThe &quot;code&quot; of the payload (closeSession).NowalletstringAddress of the wallet.NosessionstringIdentifier for the session to be closedNo\n{\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;packet&quot;: {\n    &quot;code&quot;: &quot;closeSession&quot;,\n    &quot;expires&quot;: 1600086400,\n    &quot;issued&quot;: 1600000000,\n    &quot;session&quot;: &quot;0xCF67BCbD9D5DFD373b03f4fc8143e1c6744B5696&quot;,\n    &quot;wallet&quot;: &quot;0xBc5F07A5852fdF3DBd57A76835109220D0ADd8E8&quot;\n  },\n  &quot;signatures&quot;: [{\n    &quot;session&quot;: &quot;0xCF67BCbD9D5DFD373b03f4fc8143e1c6744B5696&quot;,\n    &quot;signature&quot;: &quot;0x4f9555c73908b6a5b61e0a744cb4e00fce7b20743d5799e4cb1774081bc6b2ec192c740e50f1adec84605636e09c9cdf4d2f6629f9ce64d8d0f3ae10305ef90400&quot;\n  }]\n}","title":"Close session payload","titles":["Action payloads","Payload structure"]},"550":{"href":"/solutions/wallets/embedded-wallet/architecture/enclave-verification#enclave-verification","html":"</header>\n<p>The WaaS enclave&#x27;s security relies on code integrity verification.</p>\n<p>You have two verification options for a running enclave based on your risk tolerance and technical resources.</p>\n","isPage":true,"text":"\nThe WaaS enclave&#x27;s security relies on code integrity verification.\nYou have two verification options for a running enclave based on your risk tolerance and technical resources.\n","title":"Enclave verification","titles":[]},"551":{"href":"/solutions/wallets/embedded-wallet/architecture/enclave-verification#simple-verification-method","html":"\n","isPage":false,"text":"\n","title":"Simple Verification Method","titles":["Enclave verification"]},"552":{"href":"/solutions/wallets/embedded-wallet/architecture/enclave-verification#requirements","html":"\n<p>The verification process works only on Linux or macOS systems. You must have updated versions of these tools installed and set up locally:</p>\n<ul>\n<li><a href=\"https://www.docker.com/\">Docker</a></li>\n<li>git</li>\n<li>make</li>\n</ul>\n","isPage":false,"text":"\nThe verification process works only on Linux or macOS systems. You must have updated versions of these tools installed and set up locally:\n\nDocker\ngit\nmake\n\n","title":"Requirements","titles":["Enclave verification","Simple Verification Method"]},"553":{"href":"/solutions/wallets/embedded-wallet/architecture/enclave-verification#determine-the-pcr0","html":"\n<p>Visit this page in your browser or through curl: <a href=\"https://waas.sequence.app/status\">https://waas.sequence.app/status</a>.</p>\n<p>Take note of <code>ver</code> and <code>pcr0</code> values for later use.</p>\n<p>Sample output may appear like:</p>\n<p>Remember that the checksum can vary between runs, as it verifies the <strong>file&#x27;s</strong> integrity. Conversely, the PCR0 for the same <strong>code</strong> remains constant, as demonstrated in the example above.</p>\n<p>Sample output might look like:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>{</span></span>\n<span class=\"line\"><span>  &quot;healthOK&quot;: true,</span></span>\n<span class=\"line\"><span>  &quot;startTime&quot;: &quot;2024-04-08T17:06:20.177514099Z&quot;,</span></span>\n<span class=\"line\"><span>  &quot;uptime&quot;: 167168,</span></span>\n<span class=\"line\"><span>  &quot;ver&quot;: &quot;v1.1.1&quot;,</span></span>\n<span class=\"line\"><span>  &quot;pcr0&quot;: &quot;77541a3d09cdf2728417c1537d190be0998cc84f8aec95a4f1e823c91a007d97f276c2453be7f653fd73fb862b42fcee&quot;</span></span>\n<span class=\"line\"><span>}</span></span></code></pre>\n","isPage":false,"text":"\nVisit this page in your browser or through curl: https://waas.sequence.app/status.\nTake note of ver and pcr0 values for later use.\nSample output may appear like:\nRemember that the checksum can vary between runs, as it verifies the file&#x27;s integrity. Conversely, the PCR0 for the same code remains constant, as demonstrated in the example above.\nSample output might look like:\n{\n  &quot;healthOK&quot;: true,\n  &quot;startTime&quot;: &quot;2024-04-08T17:06:20.177514099Z&quot;,\n  &quot;uptime&quot;: 167168,\n  &quot;ver&quot;: &quot;v1.1.1&quot;,\n  &quot;pcr0&quot;: &quot;77541a3d09cdf2728417c1537d190be0998cc84f8aec95a4f1e823c91a007d97f276c2453be7f653fd73fb862b42fcee&quot;\n}\n","title":"Determine the PCR0","titles":["Enclave verification","Simple Verification Method"]},"554":{"href":"/solutions/wallets/embedded-wallet/architecture/enclave-verification#build-the-enclave-file","html":"\n<ol>\n<li>Clone the repository locally, substituting <code>v1.1.1</code> with the value of <code>ver</code> from the previous step:</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>git clone -b v1.1.1 https://github.com/0xsequence/waas-authenticator.git</span></span>\n<span class=\"line\"><span>cd waas-authenticator</span></span></code></pre>\n<ol start=\"2\">\n<li>Run the following command, again substituting the version as before:</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>make VERSION=v1.1.1 eif</span></span></code></pre>\n<ol start=\"3\">\n<li>Compare the output of the command with the previously noted PCR0 value, for example:</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>Output written into /out/waas-auth.v1.1.1.eif</span></span>\n<span class=\"line\"><span>BootMeasurement: Sha384 { ... }: {&quot;HashAlgorithm&quot;: &quot;Sha384 { ... }&quot;, &quot;PCR0&quot;: &quot;77541a3d09cdf2728417c1537d190be0998cc84f8aec95a4f1e823c91a007d97f276c2453be7f653fd73fb862b42fcee&quot;, &quot;PCR1&quot;: &quot;b7ada9ee8a3fa0a2c74c23ddd04a58f0b095d0465327b2d8461b9b81bcbc7236563ff0326c8614fe9205669636955199&quot;, &quot;PCR2&quot;: &quot;365294f408bcc5913b44110544bb611255d05666f89fd182900330bc117744fa563c2afcf74808b719ac7a29492099c6&quot;}</span></span>\n<span class=\"line\"><span>SHA256 checksum:</span></span>\n<span class=\"line\"><span>3843b48b32b98fa311cbcd1604c0c6931f03c75075212e8bb4c06d02a3d53509  waas-auth.v1.1.1.eif</span></span></code></pre>\n<p>Please note that the checksum might differ between runs as it&#x27;s only used to verify the integrity of the <strong>file</strong>. However, the PCR0 for the same <strong>code</strong> will always be the same, as can be seen in the example above.</p>\n","isPage":false,"text":"\n\nClone the repository locally, substituting v1.1.1 with the value of ver from the previous step:\n\ngit clone -b v1.1.1 https://github.com/0xsequence/waas-authenticator.git\ncd waas-authenticator\n\nRun the following command, again substituting the version as before:\n\nmake VERSION=v1.1.1 eif\n\nCompare the output of the command with the previously noted PCR0 value, for example:\n\nOutput written into /out/waas-auth.v1.1.1.eif\nBootMeasurement: Sha384 { ... }: {&quot;HashAlgorithm&quot;: &quot;Sha384 { ... }&quot;, &quot;PCR0&quot;: &quot;77541a3d09cdf2728417c1537d190be0998cc84f8aec95a4f1e823c91a007d97f276c2453be7f653fd73fb862b42fcee&quot;, &quot;PCR1&quot;: &quot;b7ada9ee8a3fa0a2c74c23ddd04a58f0b095d0465327b2d8461b9b81bcbc7236563ff0326c8614fe9205669636955199&quot;, &quot;PCR2&quot;: &quot;365294f408bcc5913b44110544bb611255d05666f89fd182900330bc117744fa563c2afcf74808b719ac7a29492099c6&quot;}\nSHA256 checksum:\n3843b48b32b98fa311cbcd1604c0c6931f03c75075212e8bb4c06d02a3d53509  waas-auth.v1.1.1.eif\nPlease note that the checksum might differ between runs as it&#x27;s only used to verify the integrity of the file. However, the PCR0 for the same code will always be the same, as can be seen in the example above.\n","title":"Build the enclave file","titles":["Enclave verification","Simple Verification Method"]},"555":{"href":"/solutions/wallets/embedded-wallet/architecture/enclave-verification#complex-verification-method","html":"\n<p>The simple method allows us to compare the PCR0 of the created enclave file with the &quot;live&quot; enclave. This is not foolproof. A mere comparison of two values provides no real evidence. The enclave could have been tampered with, and what we see could be an illusion. Indeed, the PCR0 values for each release are available to the public (<a href=\"https://github.com/0xsequence/waas-authenticator/releases\">https://github.com/0xsequence/waas-authenticator/releases</a>).</p>\n<p>Here, <em>cryptographic attestation</em> becomes necessary. We have not published tools for validation yet, but you can perform it using this AWS guide (<a href=\"https://docs.aws.amazon.com/enclaves/latest/user/verify-root.html\">https://docs.aws.amazon.com/enclaves/latest/user/verify-root.html</a>).</p>\n<p>Every enclave request returns the attestation document. It comes in a Base64-encoded format in the <code>X-Attestation-Document</code> response header. A request may also include a <code>X-Attestation-Nonce</code> header. It contains a value that will be signed and included in the attestation document.</p>\n<p>For example, you can get the attestation document by running:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>curl -si https://waas.sequence.app/health -H X-Attestation-Nonce:0123456789abcdef | grep x-attestation-document</span></span></code></pre>","isPage":false,"text":"\nThe simple method allows us to compare the PCR0 of the created enclave file with the &quot;live&quot; enclave. This is not foolproof. A mere comparison of two values provides no real evidence. The enclave could have been tampered with, and what we see could be an illusion. Indeed, the PCR0 values for each release are available to the public (https://github.com/0xsequence/waas-authenticator/releases).\nHere, cryptographic attestation becomes necessary. We have not published tools for validation yet, but you can perform it using this AWS guide (https://docs.aws.amazon.com/enclaves/latest/user/verify-root.html).\nEvery enclave request returns the attestation document. It comes in a Base64-encoded format in the X-Attestation-Document response header. A request may also include a X-Attestation-Nonce header. It contains a value that will be signed and included in the attestation document.\nFor example, you can get the attestation document by running:\ncurl -si https://waas.sequence.app/health -H X-Attestation-Nonce:0123456789abcdef | grep x-attestation-document","title":"Complex Verification Method","titles":["Enclave verification"]},"556":{"href":"/solutions/wallets/embedded-wallet/architecture/intents#intents","html":"</header>\n<p>&quot;Intents&quot; are actions that you can use to interact with your account, sessions, and wallet. This document breaks down how they work internally. Don&#x27;t worry about the complexities - SDKs take care of all that.</p>\n<p>Think of an intent as a JSON object. It represents the action you want to take and is signed with your session key. For instance, if you want to sign a message, you would send an intent to the WaaS API.</p>\n","isPage":true,"text":"\n&quot;Intents&quot; are actions that you can use to interact with your account, sessions, and wallet. This document breaks down how they work internally. Don&#x27;t worry about the complexities - SDKs take care of all that.\nThink of an intent as a JSON object. It represents the action you want to take and is signed with your session key. For instance, if you want to sign a message, you would send an intent to the WaaS API.\n","title":"Intents","titles":[]},"557":{"href":"/solutions/wallets/embedded-wallet/architecture/intents#what-are-they","html":"\n<p>At a high level an intent is simply a JSON object specifying the action the user intents to perform and signed using their session key. For example, to sign a message, the client would send the following intent to the WaaS API:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>{</span></span>\n<span class=\"line\"><span>    &quot;version&quot;: &quot;0.0.0&quot;,</span></span>\n<span class=\"line\"><span>    &quot;issuedAt&quot;: 1712775116,</span></span>\n<span class=\"line\"><span>    &quot;expiresAt&quot;: 1712775416,</span></span>\n<span class=\"line\"><span>    &quot;name&quot;: &quot;signMessage&quot;,</span></span>\n<span class=\"line\"><span>    &quot;data&quot;: {</span></span>\n<span class=\"line\"><span>      &quot;wallet&quot;: &quot;0x7B7D7BA79542584f9AeF539F6696c070a4e1Ced6&quot;,</span></span>\n<span class=\"line\"><span>      &quot;network&quot;: &quot;1&quot;,</span></span>\n<span class=\"line\"><span>      &quot;message&quot;: &quot;0x48656c6c6f2c20686176652061206e69636520646179&quot;</span></span>\n<span class=\"line\"><span>    },</span></span>\n<span class=\"line\"><span>    &quot;signatures&quot;: [</span></span>\n<span class=\"line\"><span>      {</span></span>\n<span class=\"line\"><span>        &quot;sessionId&quot;: &quot;0x01047de46debeeb83e1270b80ae65996ea64ad2c033e330cfffe9b725bf078423140124dce0cfe0cab9a61b385ca74fe77cd5e8a7147bfd87052f334cfbadc45c79a&quot;,</span></span>\n<span class=\"line\"><span>        &quot;signature&quot;: &quot;0x28ec6ddcdbc0987a99dde19792ff0c9be69ad2be873fb9351353171b74d2df3380f0ffcae2b8cb37a0659e374859420500b4399a2aab0209ee7919aaea575ac7&quot;</span></span>\n<span class=\"line\"><span>      }</span></span>\n<span class=\"line\"><span>    ]</span></span>\n<span class=\"line\"><span>}</span></span></code></pre>\n<p>Let&#x27;s break down the structure of an intent.</p>\n<ul>\n<li><strong>Signatures:</strong> Usually, a single signature represents your session. A session is a key pair created locally; the public key is part of the <code>sessionId</code> and the private key stays on your device. Make sure to store your session key, which provides access to your wallet, securely, ideally in a secure on-device enclave. Before you can use the session, you need to register it with the WaaS API.</li>\n<li>The signature is an EIP-191 of the intent&#x27;s canonical representation. This means it’s a JSON of alphabetically ordered keys, with no whitespace, excluding the <code>signatures</code> field.</li>\n<li><strong>Name and Data:</strong> The name and data will change with each intent. The name identifies the type of intent and the data associated with it.</li>\n<li><strong>Timestamps:</strong> The API checks the unix timestamps to determine the validity period of the intent and to prevent old intents from being reused in the future.</li>\n</ul>","isPage":false,"text":"\nAt a high level an intent is simply a JSON object specifying the action the user intents to perform and signed using their session key. For example, to sign a message, the client would send the following intent to the WaaS API:\n{\n    &quot;version&quot;: &quot;0.0.0&quot;,\n    &quot;issuedAt&quot;: 1712775116,\n    &quot;expiresAt&quot;: 1712775416,\n    &quot;name&quot;: &quot;signMessage&quot;,\n    &quot;data&quot;: {\n      &quot;wallet&quot;: &quot;0x7B7D7BA79542584f9AeF539F6696c070a4e1Ced6&quot;,\n      &quot;network&quot;: &quot;1&quot;,\n      &quot;message&quot;: &quot;0x48656c6c6f2c20686176652061206e69636520646179&quot;\n    },\n    &quot;signatures&quot;: [\n      {\n        &quot;sessionId&quot;: &quot;0x01047de46debeeb83e1270b80ae65996ea64ad2c033e330cfffe9b725bf078423140124dce0cfe0cab9a61b385ca74fe77cd5e8a7147bfd87052f334cfbadc45c79a&quot;,\n        &quot;signature&quot;: &quot;0x28ec6ddcdbc0987a99dde19792ff0c9be69ad2be873fb9351353171b74d2df3380f0ffcae2b8cb37a0659e374859420500b4399a2aab0209ee7919aaea575ac7&quot;\n      }\n    ]\n}\nLet&#x27;s break down the structure of an intent.\n\nSignatures: Usually, a single signature represents your session. A session is a key pair created locally; the public key is part of the sessionId and the private key stays on your device. Make sure to store your session key, which provides access to your wallet, securely, ideally in a secure on-device enclave. Before you can use the session, you need to register it with the WaaS API.\nThe signature is an EIP-191 of the intent&#x27;s canonical representation. This means it’s a JSON of alphabetically ordered keys, with no whitespace, excluding the signatures field.\nName and Data: The name and data will change with each intent. The name identifies the type of intent and the data associated with it.\nTimestamps: The API checks the unix timestamps to determine the validity period of the intent and to prevent old intents from being reused in the future.\n","title":"What are they?","titles":["Intents"]},"558":{"href":"/solutions/wallets/embedded-wallet/architecture/overview#overview","html":"</header>\n","isPage":true,"text":"\n","title":"Overview","titles":[]},"559":{"href":"/solutions/wallets/embedded-wallet/architecture/overview#embedded-wallet-architecture","html":"\n<p>Sequence Embedded Wallets are native smart contract multisig wallets. The configuration of the multisig is 2/2, where both parties are required to sign in order to submit a transaction.</p>\n<p>Unlike the more traditional MPC architecture where the keys are first created together and then separated, Sequence WaaS keys are always kept separate and never have to be combined to sign.</p>\n<p>On top of this core security layer, Sequence WaaS architecture offers additional protections:</p>\n<ul>\n<li><strong>Sequence Auth:</strong> Running in an encrypted AWS Nitro Enclave, Sequence Auth acts as the first signer and it&#x27;s locked into the latest publicly audited version by Quantstamp. Sequence doesn&#x27;t have the ability to access the enclave or push updates to it without Quantstamp&#x27;s approval.</li>\n<li><strong>Sequence Guard:</strong> Running independently from Sequence Auth, Guard is capable of reviewing both the user&#x27;s identity and intent before signing transactions.</li>\n<li><strong>OpenID Connect Compatibility:</strong> Sequence WaaS leverages established OpenID Connect providers such as Google, Apple and any other provider that follows the same protocol. Unlike any other solution on the market, WaaS also allows developers to leverage their own OIDC identifiers with these services.</li>\n</ul>\n","isPage":false,"text":"\nSequence Embedded Wallets are native smart contract multisig wallets. The configuration of the multisig is 2/2, where both parties are required to sign in order to submit a transaction.\nUnlike the more traditional MPC architecture where the keys are first created together and then separated, Sequence WaaS keys are always kept separate and never have to be combined to sign.\nOn top of this core security layer, Sequence WaaS architecture offers additional protections:\n\nSequence Auth: Running in an encrypted AWS Nitro Enclave, Sequence Auth acts as the first signer and it&#x27;s locked into the latest publicly audited version by Quantstamp. Sequence doesn&#x27;t have the ability to access the enclave or push updates to it without Quantstamp&#x27;s approval.\nSequence Guard: Running independently from Sequence Auth, Guard is capable of reviewing both the user&#x27;s identity and intent before signing transactions.\nOpenID Connect Compatibility: Sequence WaaS leverages established OpenID Connect providers such as Google, Apple and any other provider that follows the same protocol. Unlike any other solution on the market, WaaS also allows developers to leverage their own OIDC identifiers with these services.\n\n","title":"Embedded Wallet Architecture","titles":["Overview"]},"560":{"href":"/solutions/wallets/embedded-wallet/architecture/overview#sequence-auth","html":"\n<p>Sequence Auth is an API service that runs on the <a href=\"https://aws.amazon.com/ec2/nitro/nitro-enclaves/\">AWS Nitro Enclaves</a> platform and provides an authentication signer which contributes to the 2/2 multisig configuration per user wallet. Sequence Auth provides a simple way to add account creation, login, session management, and wallet support to your app, enabling applications to provide traditional web experiences (i.e. social login, email login, etc.) while providing access to crypto wallets to interact with smart contracts.</p>\n","isPage":false,"text":"\nSequence Auth is an API service that runs on the AWS Nitro Enclaves platform and provides an authentication signer which contributes to the 2/2 multisig configuration per user wallet. Sequence Auth provides a simple way to add account creation, login, session management, and wallet support to your app, enabling applications to provide traditional web experiences (i.e. social login, email login, etc.) while providing access to crypto wallets to interact with smart contracts.\n","title":"Sequence Auth","titles":["Overview"]},"561":{"href":"/solutions/wallets/embedded-wallet/architecture/overview#waas-configuration-key","html":"\n<p>For every new instance, a WaaS Configuration Key is used to authenticate an App or Game Client. This provides access to the blockchain through the WaaS SDK via the generated intents sent to Sequence Auth. Within a configuration key multiple Login Provider client ID&#x27;s can be registered, which each individually determine the wallet addresses generated per Provider. This means, if a client ID for a Login Provider (e.g. Google or Apple) is shared across instances, users using the same Login Provider with authentication credentials will yield the same address.</p>\n","isPage":false,"text":"\nFor every new instance, a WaaS Configuration Key is used to authenticate an App or Game Client. This provides access to the blockchain through the WaaS SDK via the generated intents sent to Sequence Auth. Within a configuration key multiple Login Provider client ID&#x27;s can be registered, which each individually determine the wallet addresses generated per Provider. This means, if a client ID for a Login Provider (e.g. Google or Apple) is shared across instances, users using the same Login Provider with authentication credentials will yield the same address.\n","title":"WaaS Configuration Key","titles":["Overview","Sequence Auth"]},"562":{"href":"/solutions/wallets/embedded-wallet/architecture/overview#wallet-private-keys","html":"\n<p>Wallet private keys are stored encrypted using a split responsibility strategy between Sequence and Quantstamp:</p>\n<ol>\n<li>Sequence is able to access only the encrypted blobs stored in the database with no means of decryption.</li>\n<li>Quantstamp owns and operates the <a href=\"https://aws.amazon.com/kms/\">KMS</a> (AWS hardware security module) used to encrypt the wallet key data. They have no way to export the key material and no access to the encrypted data itself.</li>\n</ol>\n","isPage":false,"text":"\nWallet private keys are stored encrypted using a split responsibility strategy between Sequence and Quantstamp:\n\nSequence is able to access only the encrypted blobs stored in the database with no means of decryption.\nQuantstamp owns and operates the KMS (AWS hardware security module) used to encrypt the wallet key data. They have no way to export the key material and no access to the encrypted data itself.\n\n","title":"Wallet Private Keys","titles":["Overview","Sequence Auth"]},"563":{"href":"/solutions/wallets/embedded-wallet/architecture/overview#waas-enclave","html":"\n<p>The WaaS Enclave is the only entity able to use the encrypted wallet data. Its security is guaranteed by:</p>\n<ol>\n<li>The AWS Nitro hypervisor generates and signs a cryptographic attestation based on the actually running enclave code. The document includes a PCR0 (a hash of the enclave code) signed by the Amazon Public Key Infrastructure.</li>\n<li>The KMS operated by the Trusted Third Party specifies a policy that only allows access to the cryptographic operations if the attestation is valid and the PCR0 hash of the enclave matches the expected value. This means that any - even the smallest - change to the enclave will result in a different attestation and PCR0 hash, effectively invalidating it.</li>\n<li>The enclave code is open source and anyone may audit it and verify that the service uses the exact audited version of the source code. <a href=\"/solutions/wallets/embedded-wallet/architecture/enclave-verification\">Learn more about verification</a>.</li>\n</ol>\n<p>Sequence Auth source code is <a href=\"https://github.com/0xsequence/waas-authenticator\">publicly available and independently audited</a>, and the safeguards described above ensure it cannot be tampered with by any party.</p>\n","isPage":false,"text":"\nThe WaaS Enclave is the only entity able to use the encrypted wallet data. Its security is guaranteed by:\n\nThe AWS Nitro hypervisor generates and signs a cryptographic attestation based on the actually running enclave code. The document includes a PCR0 (a hash of the enclave code) signed by the Amazon Public Key Infrastructure.\nThe KMS operated by the Trusted Third Party specifies a policy that only allows access to the cryptographic operations if the attestation is valid and the PCR0 hash of the enclave matches the expected value. This means that any - even the smallest - change to the enclave will result in a different attestation and PCR0 hash, effectively invalidating it.\nThe enclave code is open source and anyone may audit it and verify that the service uses the exact audited version of the source code. Learn more about verification.\n\nSequence Auth source code is publicly available and independently audited, and the safeguards described above ensure it cannot be tampered with by any party.\n","title":"Waas Enclave","titles":["Overview","Sequence Auth"]},"564":{"href":"/solutions/wallets/embedded-wallet/architecture/overview#sequence-guard","html":"\n<p>Sequence Guard is a service hosted by Sequence and is the other key of the wallets which contributes to the 2/2 configuration per wallet. It&#x27;s meant to be another line of defense, verifying not only user&#x27;s <em>identity</em> but also their <em>intent</em>. It achieves this in two different ways:</p>\n<p>1 - Limits and allowlists: you can (from the development dashboard) configure what kind of actions are allowed, this means that the guard will only sign transactions within these constraints. For example, you can define that only NFT contract X can be called, and the guard will enforce that no other transactions can take place.</p>\n<p>2 - Authenticating the user: the Sequence Guard will authenticate the user <strong>independently of Sequence Auth</strong>, it performs this action either by using a 3rd party OAuth 2.0 id token (from Meta, Google, X, etc.) or by directly communicating with the user via email/phone number with an OTP code. The direct communication is not always required and, when it does happen, it&#x27;s seamless and branded with your project details.</p>\n","isPage":false,"text":"\nSequence Guard is a service hosted by Sequence and is the other key of the wallets which contributes to the 2/2 configuration per wallet. It&#x27;s meant to be another line of defense, verifying not only user&#x27;s identity but also their intent. It achieves this in two different ways:\n1 - Limits and allowlists: you can (from the development dashboard) configure what kind of actions are allowed, this means that the guard will only sign transactions within these constraints. For example, you can define that only NFT contract X can be called, and the guard will enforce that no other transactions can take place.\n2 - Authenticating the user: the Sequence Guard will authenticate the user independently of Sequence Auth, it performs this action either by using a 3rd party OAuth 2.0 id token (from Meta, Google, X, etc.) or by directly communicating with the user via email/phone number with an OTP code. The direct communication is not always required and, when it does happen, it&#x27;s seamless and branded with your project details.\n","title":"Sequence Guard","titles":["Overview"]},"565":{"href":"/solutions/wallets/embedded-wallet/architecture/overview#threat-model","html":"\n<p>With these safeguards in place wallets are <strong>safe</strong> against the following scenarios:</p>\n<ol>\n<li>\n<p>Sequence.app backend is compromised, or guard keys are leaked: in this scenario, the user&#x27;s identity must still be verified by Sequence Auth.</p>\n</li>\n<li>\n<p>Sequence Auth is compromised: in this scenario the Sequence Guard protects the wallets, because it independently authenticates the user, an attacker in this scenario wouldn&#x27;t be able to access any wallets.</p>\n</li>\n</ol>\n<p>The model also provides partial protection against the scenario:</p>\n<ol start=\"3\">\n<li>Partner frontend is compromised, or MITM on the partner side: If an attacker were to be able to vulnerate the frontend of the partner, it could gain access to wallets at the time of login, but it cannot gain access to wallets of users who are currently inactive. This means that recovery from such a scenario is possible, with limited damage.</li>\n</ol>\n","isPage":false,"text":"\nWith these safeguards in place wallets are safe against the following scenarios:\n\n\nSequence.app backend is compromised, or guard keys are leaked: in this scenario, the user&#x27;s identity must still be verified by Sequence Auth.\n\n\nSequence Auth is compromised: in this scenario the Sequence Guard protects the wallets, because it independently authenticates the user, an attacker in this scenario wouldn&#x27;t be able to access any wallets.\n\n\nThe model also provides partial protection against the scenario:\n\nPartner frontend is compromised, or MITM on the partner side: If an attacker were to be able to vulnerate the frontend of the partner, it could gain access to wallets at the time of login, but it cannot gain access to wallets of users who are currently inactive. This means that recovery from such a scenario is possible, with limited damage.\n\n","title":"Threat model","titles":["Overview","Sequence Guard"]},"566":{"href":"/solutions/wallets/embedded-wallet/architecture/overview#simplified-data-flow","html":"\n<p>Below we illustrate the data flow of a common use case such as signing a transaction via embedded wallets.</p>\n<p><img src=\"/img/diagrams/waas/waas-flow.png\" alt=\"data-flow-architecture\"/></p>\n<aside data-callout=\"note\"><p>Simplified layout describing the lifecycle of a transaction on the WaaS system.\nBlue: Software provided by the partner\nOrange: Software provided by Sequence but run and managed by the partner\nYellow: Software provided and run by Sequence in a secure AWS Nitro Enclave\nGreen: Software provided and run by Sequence</p></aside>\n","isPage":false,"text":"\nBelow we illustrate the data flow of a common use case such as signing a transaction via embedded wallets.\n\nSimplified layout describing the lifecycle of a transaction on the WaaS system.\nBlue: Software provided by the partner\nOrange: Software provided by Sequence but run and managed by the partner\nYellow: Software provided and run by Sequence in a secure AWS Nitro Enclave\nGreen: Software provided and run by Sequence\n","title":"Simplified Data Flow","titles":["Overview"]},"567":{"href":"/solutions/wallets/embedded-wallet/architecture/overview#1-generation-of-the-intent","html":"\n<p>The user interacts with the client to &quot;do something&quot; that requires an action on behalf of the wallet (i.e. send some USDC or call a contract method).</p>\n<p>The client asks the <code>WaaS SDK</code> to generate an intent for such an action; this intent is signed with the session keys of the client. This session key is a generated key that is only valid while that OAuth session is valid. Every intent sent to the WaaS backend is first signed by this session key to validate that there is an active, authenticated session on the user side.</p>\n","isPage":false,"text":"\nThe user interacts with the client to &quot;do something&quot; that requires an action on behalf of the wallet (i.e. send some USDC or call a contract method).\nThe client asks the WaaS SDK to generate an intent for such an action; this intent is signed with the session keys of the client. This session key is a generated key that is only valid while that OAuth session is valid. Every intent sent to the WaaS backend is first signed by this session key to validate that there is an active, authenticated session on the user side.\n","title":"1. Generation of the Intent","titles":["Overview","Simplified Data Flow","Threat model"]},"568":{"href":"/solutions/wallets/embedded-wallet/architecture/overview#2-sdk-forwards-intent-to-sequence-auth","html":"\n<p>The intent and its corresponding signature are sent to the Sequence Auth service running on an AWS Nitro Enclave.\nSequence Auth asks WaaS API to build a transaction for the given intent and then validates that the transaction does not deviate from the original intent. On successful validation, Sequence Auth signs the transaction and forwards the transaction, intent, and signature to the WaaS API.</p>\n","isPage":false,"text":"\nThe intent and its corresponding signature are sent to the Sequence Auth service running on an AWS Nitro Enclave.\nSequence Auth asks WaaS API to build a transaction for the given intent and then validates that the transaction does not deviate from the original intent. On successful validation, Sequence Auth signs the transaction and forwards the transaction, intent, and signature to the WaaS API.\n","title":"2. SDK Forwards Intent to Sequence Auth","titles":["Overview","Simplified Data Flow","Threat model"]},"569":{"href":"/solutions/wallets/embedded-wallet/architecture/overview#4-waas-api-collects-signature-from-sequence-guard","html":"\n<p>WaaS API receives a &quot;half-signed&quot; transaction request, alongside an intent that has been signed by the client. It needs to collect one more signature before being able to relay the transaction, so it calls Sequence Guard.</p>\n","isPage":false,"text":"\nWaaS API receives a &quot;half-signed&quot; transaction request, alongside an intent that has been signed by the client. It needs to collect one more signature before being able to relay the transaction, so it calls Sequence Guard.\n","title":"4. WaaS API Collects Signature from Sequence Guard","titles":["Overview","Simplified Data Flow","Threat model"]},"570":{"href":"/solutions/wallets/embedded-wallet/architecture/overview#5-sequence-guard-authenticates-the-user","html":"\n<p>Sequence Guard receives a signature request for a given wallet. It verifies that the intent exists, corresponds to the transaction, and has been signed by a valid session. If everything is correct, it signs the transaction.</p>\n","isPage":false,"text":"\nSequence Guard receives a signature request for a given wallet. It verifies that the intent exists, corresponds to the transaction, and has been signed by a valid session. If everything is correct, it signs the transaction.\n","title":"5. Sequence Guard Authenticates the User","titles":["Overview","Simplified Data Flow","Threat model"]},"571":{"href":"/solutions/wallets/embedded-wallet/architecture/overview#6-relay-and-transaction-receipt","html":"\n<p>WaaS API relays the transaction and waits for the receipt. The resulting <code>txHash</code> is piped back to the client.</p>","isPage":false,"text":"\nWaaS API relays the transaction and waits for the receipt. The resulting txHash is piped back to the client.","title":"6. Relay and Transaction Receipt","titles":["Overview","Simplified Data Flow","Threat model"]},"572":{"href":"/solutions/wallets/embedded-wallet/architecture/response-payloads#response-payloads","html":"</header>\n<p>When interacting with the Sequence Embedded Wallet API, each intent payload will trigger a corresponding response payload. This could be either a successful response or a prompt for a different action.</p>\n","isPage":true,"text":"\nWhen interacting with the Sequence Embedded Wallet API, each intent payload will trigger a corresponding response payload. This could be either a successful response or a prompt for a different action.\n","title":"Response Payloads","titles":[]},"573":{"href":"/solutions/wallets/embedded-wallet/architecture/response-payloads#general-response-structure","html":"\n<p>Regardless of the specific response type, all responses have a standard structure with the following fields:</p>\n<table><thead><tr><th>Name</th><th>Type</th><th>Description</th><th>Optional</th></tr></thead><tbody><tr><td>code</td><td>string</td><td>Identifies the type of response</td><td>No</td></tr><tr><td>data</td><td>object</td><td>Holds content defined by response type</td><td>No</td></tr></tbody></table>\n","isPage":false,"text":"\nRegardless of the specific response type, all responses have a standard structure with the following fields:\nNameTypeDescriptionOptionalcodestringIdentifies the type of responseNodataobjectHolds content defined by response typeNo\n","title":"General Response Structure","titles":["Response Payloads"]},"574":{"href":"/solutions/wallets/embedded-wallet/architecture/response-payloads#types-of-responses","html":"\n","isPage":false,"text":"\n","title":"Types of Responses","titles":["Response Payloads"]},"575":{"href":"/solutions/wallets/embedded-wallet/architecture/response-payloads#transaction-receipt-response","html":"\n<p>Triggered upon successful execution of a <a href=\"/solutions/wallets/embedded-wallet/architecture/action-payloads#send-transaction-payload\">send transaction intent</a>. The code for this response is <code>transactionReceipt</code>.</p>\n<p>The <code>data</code> field contains:</p>\n<table><thead><tr><th>Name</th><th>Type</th><th>Description</th><th>Optional</th></tr></thead><tbody><tr><td>txHash</td><td>string</td><td>Transaction hash of the Ethereum transaction</td><td>No</td></tr><tr><td>metaTxHash</td><td>string</td><td>Hash of the meta transaction</td><td>No</td></tr><tr><td>request</td><td><a href=\"https://docs.sequence.xyz/solutions/wallets/embedded-wallet/architecture/action-payloads#send-transaction-payload\">SendTransactionPayload</a></td><td>The original request packet of the transaction</td><td>No</td></tr><tr><td>receipt</td><td>MetaTxnReceipt</td><td>Receipt of the meta transaction</td><td>No</td></tr><tr><td>nativeReceipt</td><td>any</td><td>Native receipt of the Ethereum transaction</td><td>Yes</td></tr><tr><td>simulations</td><td>SimulateResult[]</td><td>Array of simulation results</td><td>Yes</td></tr></tbody></table>\n<p><code>MetaTxnReceipt</code>:</p>\n<table><thead><tr><th>Name</th><th>Type</th><th>Description</th><th>Optional</th></tr></thead><tbody><tr><td>id</td><td>string</td><td>Unique identifier for the receipt</td><td>No</td></tr><tr><td>status</td><td>string</td><td>Status of the transaction</td><td>No</td></tr><tr><td>revertReason</td><td>string | null</td><td>Reason for transaction revert, if any</td><td>Yes</td></tr><tr><td>index</td><td>number</td><td>Index number of the receipt</td><td>No</td></tr><tr><td>logs</td><td>MetaTxnReceiptLog[]</td><td>Array of logs for the meta transaction</td><td>No</td></tr><tr><td>receipts</td><td>MetaTxnReceipt[]</td><td>Array of meta transaction receipts</td><td>No</td></tr><tr><td>txnReceipt</td><td>string</td><td>String representation of the transaction</td><td>No</td></tr></tbody></table>\n<p><code>MetaTxnReceiptLog</code>:</p>\n<table><thead><tr><th>Name</th><th>Type</th><th>Description</th><th>Optional</th></tr></thead><tbody><tr><td>address</td><td>string</td><td>The address that generated the log</td><td>No</td></tr><tr><td>topics</td><td>string[]</td><td>List of topics associated with the log</td><td>No</td></tr><tr><td>data</td><td>string</td><td>Data sent with the log</td><td>No</td></tr><tr><td>blockNumber</td><td>number</td><td>The block number where this log was emitted</td><td>No</td></tr><tr><td>transactionHash</td><td>string</td><td>Hash of the transaction that generated the log</td><td>No</td></tr><tr><td>transactionIndex</td><td>number</td><td>Index of the transaction in the block</td><td>No</td></tr><tr><td>blockHash</td><td>string</td><td>Hash of the block containing the log</td><td>No</td></tr><tr><td>logIndex</td><td>number</td><td>Index of the log in the block</td><td>No</td></tr><tr><td>removed</td><td>boolean</td><td>Whether the log was removed due to a chain reorganization</td><td>No</td></tr></tbody></table>\n<p><code>SimulateResult</code>:</p>\n<table><thead><tr><th>Name</th><th>Type</th><th>Description</th><th>Optional</th></tr></thead><tbody><tr><td>executed</td><td>boolean</td><td>Whether the simulation was executed</td><td>No</td></tr><tr><td>succeeded</td><td>boolean</td><td>Whether the simulation succeeded</td><td>No</td></tr><tr><td>result</td><td>string | null</td><td>The result of the simulation</td><td>Yes</td></tr><tr><td>reason</td><td>string | null</td><td>Reason for failure, if simulation failed</td><td>Yes</td></tr><tr><td>gasUsed</td><td>number</td><td>Amount of gas used in the simulation</td><td>No</td></tr><tr><td>gasLimit</td><td>number</td><td>Gas limit for the simulation</td><td>No</td></tr></tbody></table>\n","isPage":false,"text":"\nTriggered upon successful execution of a send transaction intent. The code for this response is transactionReceipt.\nThe data field contains:\nNameTypeDescriptionOptionaltxHashstringTransaction hash of the Ethereum transactionNometaTxHashstringHash of the meta transactionNorequestSendTransactionPayloadThe original request packet of the transactionNoreceiptMetaTxnReceiptReceipt of the meta transactionNonativeReceiptanyNative receipt of the Ethereum transactionYessimulationsSimulateResult[]Array of simulation resultsYes\nMetaTxnReceipt:\nNameTypeDescriptionOptionalidstringUnique identifier for the receiptNostatusstringStatus of the transactionNorevertReasonstring | nullReason for transaction revert, if anyYesindexnumberIndex number of the receiptNologsMetaTxnReceiptLog[]Array of logs for the meta transactionNoreceiptsMetaTxnReceipt[]Array of meta transaction receiptsNotxnReceiptstringString representation of the transactionNo\nMetaTxnReceiptLog:\nNameTypeDescriptionOptionaladdressstringThe address that generated the logNotopicsstring[]List of topics associated with the logNodatastringData sent with the logNoblockNumbernumberThe block number where this log was emittedNotransactionHashstringHash of the transaction that generated the logNotransactionIndexnumberIndex of the transaction in the blockNoblockHashstringHash of the block containing the logNologIndexnumberIndex of the log in the blockNoremovedbooleanWhether the log was removed due to a chain reorganizationNo\nSimulateResult:\nNameTypeDescriptionOptionalexecutedbooleanWhether the simulation was executedNosucceededbooleanWhether the simulation succeededNoresultstring | nullThe result of the simulationYesreasonstring | nullReason for failure, if simulation failedYesgasUsednumberAmount of gas used in the simulationNogasLimitnumberGas limit for the simulationNo\n","title":"Transaction Receipt Response","titles":["Response Payloads","Types of Responses"]},"576":{"href":"/solutions/wallets/embedded-wallet/architecture/response-payloads#example","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;code&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;transactionReceipt&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;txHash&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0xf2e9f728abd65089f25efda5852e605ced377f4e2c89dbf143b124623ed09b2c&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;metaTxHash&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;acc36ed4ef40db74137266e48d863083a5c7e85e2735d69adafcb5b362b6cfc0&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;nativeReceipt&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;blockHash&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x49be8c81414fae655f1f4615f5b437ca5160bdd4e4d8ce06275338ec6fe2e20b&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;blockNumber&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x2f63834&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;contractAddress&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x0000000000000000000000000000000000000000&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;cumulativeGasUsed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0xdb374&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;gasUsed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x14a00&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;logs&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;address&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x4d4ee1b8583e31fe789eaf2e1b6e011c220c10b6&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;blockHash&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x49be8c81414fae655f1f4615f5b437ca5160bdd4e4d8ce06275338ec6fe2e20b&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;blockNumber&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x2f63834&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x0000000000000000000000001119e72b4af230becebd933d0e07f0eec51d8c2a0000000000000000000000000000000000000000000000000000000000000001&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;logIndex&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x14&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;removed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;topics&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;0x1f180c27086c7a39ea2a7b25239d1ab92348f07ca7bb59d1438fcf527568f881&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          ],</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;transactionHash&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0xf2e9f728abd65089f25efda5852e605ced377f4e2c89dbf143b124623ed09b2c&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;transactionIndex&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x5&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;address&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x4d4ee1b8583e31fe789eaf2e1b6e011c220c10b6&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;blockHash&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x49be8c81414fae655f1f4615f5b437ca5160bdd4e4d8ce06275338ec6fe2e20b&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;blockNumber&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x2f63834&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;logIndex&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x15&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;removed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;topics&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;0x5c4eeb02dabf8976016ab414d617f9a162936dcace3cdef8c69ef6e262ad5ae7&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;0xacc36ed4ef40db74137266e48d863083a5c7e85e2735d69adafcb5b362b6cfc0&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          ],</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;transactionHash&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0xf2e9f728abd65089f25efda5852e605ced377f4e2c89dbf143b124623ed09b2c&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;transactionIndex&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x5&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;address&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x0000000000000000000000000000000000001010&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;blockHash&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x49be8c81414fae655f1f4615f5b437ca5160bdd4e4d8ce06275338ec6fe2e20b&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;blockNumber&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x2f63834&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x000000000000000000000000000000000000000000000000001284e7c67266000000000000000000000000000000000000000000000000014c0fa753f2298415000000000000000000000000000000000000000000001386f7e2c243dcc978070000000000000000000000000000000000000000000000014bfd226c2bb71e15000000000000000000000000000000000000000000001386f7f5472ba33bde07&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;logIndex&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x16&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;removed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;topics&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;0x0000000000000000000000000000000000000000000000000000000000001010&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;0x00000000000000000000000000e91788bcb998379027d36e6407a9187d7f313c&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;0x000000000000000000000000959c65b72147faf3450d8b50a0de57e72ffc5e0d&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          ],</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;transactionHash&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0xf2e9f728abd65089f25efda5852e605ced377f4e2c89dbf143b124623ed09b2c&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;transactionIndex&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x5&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      ],</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;logsBloom&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x00000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000008800000002000000000001004000000000000000000000000000000000800000000000000000000100000000400000000200400000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000002000000000000000000000000000000004000008000000000000001000000000000000000000000000000100000020000000000000000000000002000000020020002020040000000000000000040100000&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;root&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;status&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x1&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;transactionHash&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0xf2e9f728abd65089f25efda5852e605ced377f4e2c89dbf143b124623ed09b2c&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;transactionIndex&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x5&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;receipt&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;id&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;acc36ed4ef40db74137266e48d863083a5c7e85e2735d69adafcb5b362b6cfc0&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;index&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;logs&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;address&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x4d4EE1b8583e31fe789eAF2e1b6e011C220c10B6&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x0000000000000000000000001119e72b4af230becebd933d0e07f0eec51d8c2a0000000000000000000000000000000000000000000000000000000000000001&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;topics&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;0x1f180c27086c7a39ea2a7b25239d1ab92348f07ca7bb59d1438fcf527568f881&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          ]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;address&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x4d4EE1b8583e31fe789eAF2e1b6e011C220c10B6&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;topics&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;0x5c4eeb02dabf8976016ab414d617f9a162936dcace3cdef8c69ef6e262ad5ae7&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;0xacc36ed4ef40db74137266e48d863083a5c7e85e2735d69adafcb5b362b6cfc0&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          ]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      ],</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;receipts&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;id&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;acc36ed4ef40db74137266e48d863083a5c7e85e2735d69adafcb5b362b6cfc0&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;index&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;logs&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">null</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;receipts&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">null</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;revertReason&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">null</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;status&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;SUCCEEDED&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;txnReceipt&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      ],</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;revertReason&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">null</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;status&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;SUCCEEDED&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;request&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;code&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;sendTransaction&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;expires&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1699440762</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;identifier&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ts-sdk-1699440462686-0x153824576D03629b264683B430bBF9AcEA1d0975&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;issued&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1699440462</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;network&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;137&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;transactions&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;to&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x4d4EE1b8583e31fe789eAF2e1b6e011C220c10B6&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;type&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;transaction&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;value&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x00&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      ],</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;wallet&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x4d4EE1b8583e31fe789eAF2e1b6e011C220c10B6&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;simulations&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;executed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;gasLimit&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1147</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;gasUsed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">860</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;reason&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">null</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;result&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;succeeded&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\n{\n  &quot;code&quot;: &quot;transactionReceipt&quot;,\n  &quot;data&quot;: {\n    &quot;txHash&quot;: &quot;0xf2e9f728abd65089f25efda5852e605ced377f4e2c89dbf143b124623ed09b2c&quot;,\n    &quot;metaTxHash&quot;: &quot;acc36ed4ef40db74137266e48d863083a5c7e85e2735d69adafcb5b362b6cfc0&quot;,\n    &quot;nativeReceipt&quot;: {\n      &quot;blockHash&quot;: &quot;0x49be8c81414fae655f1f4615f5b437ca5160bdd4e4d8ce06275338ec6fe2e20b&quot;,\n      &quot;blockNumber&quot;: &quot;0x2f63834&quot;,\n      &quot;contractAddress&quot;: &quot;0x0000000000000000000000000000000000000000&quot;,\n      &quot;cumulativeGasUsed&quot;: &quot;0xdb374&quot;,\n      &quot;gasUsed&quot;: &quot;0x14a00&quot;,\n      &quot;logs&quot;: [\n        {\n          &quot;address&quot;: &quot;0x4d4ee1b8583e31fe789eaf2e1b6e011c220c10b6&quot;,\n          &quot;blockHash&quot;: &quot;0x49be8c81414fae655f1f4615f5b437ca5160bdd4e4d8ce06275338ec6fe2e20b&quot;,\n          &quot;blockNumber&quot;: &quot;0x2f63834&quot;,\n          &quot;data&quot;: &quot;0x0000000000000000000000001119e72b4af230becebd933d0e07f0eec51d8c2a0000000000000000000000000000000000000000000000000000000000000001&quot;,\n          &quot;logIndex&quot;: &quot;0x14&quot;,\n          &quot;removed&quot;: false,\n          &quot;topics&quot;: [\n            &quot;0x1f180c27086c7a39ea2a7b25239d1ab92348f07ca7bb59d1438fcf527568f881&quot;\n          ],\n          &quot;transactionHash&quot;: &quot;0xf2e9f728abd65089f25efda5852e605ced377f4e2c89dbf143b124623ed09b2c&quot;,\n          &quot;transactionIndex&quot;: &quot;0x5&quot;\n        },\n        {\n          &quot;address&quot;: &quot;0x4d4ee1b8583e31fe789eaf2e1b6e011c220c10b6&quot;,\n          &quot;blockHash&quot;: &quot;0x49be8c81414fae655f1f4615f5b437ca5160bdd4e4d8ce06275338ec6fe2e20b&quot;,\n          &quot;blockNumber&quot;: &quot;0x2f63834&quot;,\n          &quot;data&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,\n          &quot;logIndex&quot;: &quot;0x15&quot;,\n          &quot;removed&quot;: false,\n          &quot;topics&quot;: [\n            &quot;0x5c4eeb02dabf8976016ab414d617f9a162936dcace3cdef8c69ef6e262ad5ae7&quot;,\n            &quot;0xacc36ed4ef40db74137266e48d863083a5c7e85e2735d69adafcb5b362b6cfc0&quot;\n          ],\n          &quot;transactionHash&quot;: &quot;0xf2e9f728abd65089f25efda5852e605ced377f4e2c89dbf143b124623ed09b2c&quot;,\n          &quot;transactionIndex&quot;: &quot;0x5&quot;\n        },\n        {\n          &quot;address&quot;: &quot;0x0000000000000000000000000000000000001010&quot;,\n          &quot;blockHash&quot;: &quot;0x49be8c81414fae655f1f4615f5b437ca5160bdd4e4d8ce06275338ec6fe2e20b&quot;,\n          &quot;blockNumber&quot;: &quot;0x2f63834&quot;,\n          &quot;data&quot;: &quot;0x000000000000000000000000000000000000000000000000001284e7c67266000000000000000000000000000000000000000000000000014c0fa753f2298415000000000000000000000000000000000000000000001386f7e2c243dcc978070000000000000000000000000000000000000000000000014bfd226c2bb71e15000000000000000000000000000000000000000000001386f7f5472ba33bde07&quot;,\n          &quot;logIndex&quot;: &quot;0x16&quot;,\n          &quot;removed&quot;: false,\n          &quot;topics&quot;: [\n            &quot;0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63&quot;,\n            &quot;0x0000000000000000000000000000000000000000000000000000000000001010&quot;,\n            &quot;0x00000000000000000000000000e91788bcb998379027d36e6407a9187d7f313c&quot;,\n            &quot;0x000000000000000000000000959c65b72147faf3450d8b50a0de57e72ffc5e0d&quot;\n          ],\n          &quot;transactionHash&quot;: &quot;0xf2e9f728abd65089f25efda5852e605ced377f4e2c89dbf143b124623ed09b2c&quot;,\n          &quot;transactionIndex&quot;: &quot;0x5&quot;\n        }\n      ],\n      &quot;logsBloom&quot;: &quot;0xquot;,\n      &quot;root&quot;: &quot;0x&quot;,\n      &quot;status&quot;: &quot;0x1&quot;,\n      &quot;transactionHash&quot;: &quot;0xf2e9f728abd65089f25efda5852e605ced377f4e2c89dbf143b124623ed09b2c&quot;,\n      &quot;transactionIndex&quot;: &quot;0x5&quot;\n    },\n    &quot;receipt&quot;: {\n      &quot;id&quot;: &quot;acc36ed4ef40db74137266e48d863083a5c7e85e2735d69adafcb5b362b6cfc0&quot;,\n      &quot;index&quot;: 0,\n      &quot;logs&quot;: [\n        {\n          &quot;address&quot;: &quot;0x4d4EE1b8583e31fe789eAF2e1b6e011C220c10B6&quot;,\n          &quot;data&quot;: &quot;0x0000000000000000000000001119e72b4af230becebd933d0e07f0eec51d8c2a0000000000000000000000000000000000000000000000000000000000000001&quot;,\n          &quot;topics&quot;: [\n            &quot;0x1f180c27086c7a39ea2a7b25239d1ab92348f07ca7bb59d1438fcf527568f881&quot;\n          ]\n        },\n        {\n          &quot;address&quot;: &quot;0x4d4EE1b8583e31fe789eAF2e1b6e011C220c10B6&quot;,\n          &quot;data&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,\n          &quot;topics&quot;: [\n            &quot;0x5c4eeb02dabf8976016ab414d617f9a162936dcace3cdef8c69ef6e262ad5ae7&quot;,\n            &quot;0xacc36ed4ef40db74137266e48d863083a5c7e85e2735d69adafcb5b362b6cfc0&quot;\n          ]\n        }\n      ],\n      &quot;receipts&quot;: [\n        {\n          &quot;id&quot;: &quot;acc36ed4ef40db74137266e48d863083a5c7e85e2735d69adafcb5b362b6cfc0&quot;,\n          &quot;index&quot;: 0,\n          &quot;logs&quot;: null,\n          &quot;receipts&quot;: null,\n          &quot;revertReason&quot;: null,\n          &quot;status&quot;: &quot;SUCCEEDED&quot;,\n          &quot;txnReceipt&quot;: &quot;&quot;\n        }\n      ],\n      &quot;revertReason&quot;: null,\n      &quot;status&quot;: &quot;SUCCEEDED&quot;\n    },\n    &quot;request&quot;: {\n      &quot;code&quot;: &quot;sendTransaction&quot;,\n      &quot;expires&quot;: 1699440762,\n      &quot;identifier&quot;: &quot;ts-sdk-1699440462686-0x153824576D03629b264683B430bBF9AcEA1d0975&quot;,\n      &quot;issued&quot;: 1699440462,\n      &quot;network&quot;: &quot;137&quot;,\n      &quot;transactions&quot;: [\n        {\n          &quot;data&quot;: &quot;0x&quot;,\n          &quot;to&quot;: &quot;0x4d4EE1b8583e31fe789eAF2e1b6e011C220c10B6&quot;,\n          &quot;type&quot;: &quot;transaction&quot;,\n          &quot;value&quot;: &quot;0x00&quot;\n        }\n      ],\n      &quot;wallet&quot;: &quot;0x4d4EE1b8583e31fe789eAF2e1b6e011C220c10B6&quot;\n    },\n    &quot;simulations&quot;: [\n      {\n        &quot;executed&quot;: true,\n        &quot;gasLimit&quot;: 1147,\n        &quot;gasUsed&quot;: 860,\n        &quot;reason&quot;: null,\n        &quot;result&quot;: &quot;0x&quot;,\n        &quot;succeeded&quot;: true\n      }\n    ]\n  }\n}\n","title":"Example","titles":["Response Payloads","Types of Responses","Transaction Receipt Response"]},"577":{"href":"/solutions/wallets/embedded-wallet/architecture/response-payloads#how-to-detect","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { payloads } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/waas&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> res</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ...</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // response from the Embedded Wallet API</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (payloads.responses.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isSentTransactionResponse</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(res)) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // It&#x27;s a transaction receipt</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nimport { payloads } from &#x27;@0xsequence/waas&#x27;;\n \nconst res = ... // response from the Embedded Wallet API\n \nif (payloads.responses.isSentTransactionResponse(res)) {\n  // It&#x27;s a transaction receipt\n}\n","title":"How to Detect","titles":["Response Payloads","Types of Responses","Transaction Receipt Response"]},"578":{"href":"/solutions/wallets/embedded-wallet/architecture/response-payloads#failed-transaction-response","html":"\n<p>Triggered upon failed to execute a <a href=\"/solutions/wallets/embedded-wallet/architecture/action-payloads#send-transaction-payload\">send transaction intent</a>. The code for this response is <code>transactionFailed</code>.</p>\n<p>The <code>data</code> field contains:</p>\n<table><thead><tr><th>Field</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>error</td><td>string</td><td>The error message describing why the transaction failed.</td></tr><tr><td>request</td><td><a href=\"https://docs.sequence.xyz//solutions/embedded-wallet/architecture/response-payloads/#send-transaction-payload\">SendTransactionPayload</a></td><td>The packet of transactions that were attempted.</td></tr><tr><td>simulations</td><td>SimulateResult[]</td><td>Results from the transaction simulation attempts.</td></tr></tbody></table>\n<p><code>SimulateResult</code>:</p>\n<table><thead><tr><th>Name</th><th>Type</th><th>Description</th><th>Optional</th></tr></thead><tbody><tr><td>executed</td><td>boolean</td><td>Whether the simulation was executed</td><td>No</td></tr><tr><td>succeeded</td><td>boolean</td><td>Whether the simulation succeeded</td><td>No</td></tr><tr><td>result</td><td>string | null</td><td>The result of the simulation</td><td>Yes</td></tr><tr><td>reason</td><td>string | null</td><td>Reason for failure, if simulation failed</td><td>Yes</td></tr><tr><td>gasUsed</td><td>number</td><td>Amount of gas used in the simulation</td><td>No</td></tr><tr><td>gasLimit</td><td>number</td><td>Gas limit for the simulation</td><td>No</td></tr></tbody></table>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;code&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;transactionFailed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;error&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;This is an error message&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;request&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;code&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;sendTransaction&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;expires&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1699443005</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;identifier&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ts-sdk-1699442705965-0x153824576D03629b264683B430bBF9AcEA1d0975&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;issued&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1699442705</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;network&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;137&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;transactions&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;to&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x839eE023B21f4Ffe2294025DE0AC30Ba7278D6Fd&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;type&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;transaction&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;value&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x00&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      ],</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;wallet&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x4d4EE1b8583e31fe789eAF2e1b6e011C220c10B6&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;simulations&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;executed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;gasLimit&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">7908</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;gasUsed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5931</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;reason&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;This is an error message&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;result&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">null</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;succeeded&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nTriggered upon failed to execute a send transaction intent. The code for this response is transactionFailed.\nThe data field contains:\nFieldTypeDescriptionerrorstringThe error message describing why the transaction failed.requestSendTransactionPayloadThe packet of transactions that were attempted.simulationsSimulateResult[]Results from the transaction simulation attempts.\nSimulateResult:\nNameTypeDescriptionOptionalexecutedbooleanWhether the simulation was executedNosucceededbooleanWhether the simulation succeededNoresultstring | nullThe result of the simulationYesreasonstring | nullReason for failure, if simulation failedYesgasUsednumberAmount of gas used in the simulationNogasLimitnumberGas limit for the simulationNo\n{\n  &quot;code&quot;: &quot;transactionFailed&quot;,\n  &quot;data&quot;: {\n    &quot;error&quot;: &quot;This is an error message&quot;,\n    &quot;request&quot;: {\n      &quot;code&quot;: &quot;sendTransaction&quot;,\n      &quot;expires&quot;: 1699443005,\n      &quot;identifier&quot;: &quot;ts-sdk-1699442705965-0x153824576D03629b264683B430bBF9AcEA1d0975&quot;,\n      &quot;issued&quot;: 1699442705,\n      &quot;network&quot;: &quot;137&quot;,\n      &quot;transactions&quot;: [\n        {\n          &quot;data&quot;: &quot;0x&quot;,\n          &quot;to&quot;: &quot;0x839eE023B21f4Ffe2294025DE0AC30Ba7278D6Fd&quot;,\n          &quot;type&quot;: &quot;transaction&quot;,\n          &quot;value&quot;: &quot;0x00&quot;\n        }\n      ],\n      &quot;wallet&quot;: &quot;0x4d4EE1b8583e31fe789eAF2e1b6e011C220c10B6&quot;\n    },\n    &quot;simulations&quot;: [\n      {\n        &quot;executed&quot;: true,\n        &quot;gasLimit&quot;: 7908,\n        &quot;gasUsed&quot;: 5931,\n        &quot;reason&quot;: &quot;This is an error message&quot;,\n        &quot;result&quot;: null,\n        &quot;succeeded&quot;: false\n      }\n    ]\n  }\n}\n","title":"Failed Transaction Response","titles":["Response Payloads","Types of Responses"]},"579":{"href":"/solutions/wallets/embedded-wallet/architecture/response-payloads#how-to-detect-1","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { payloads } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/waas&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> res</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ...</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // response from the Embedded Wallet API</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (payloads.responses.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isFailedTransactionResponse</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(res)) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // It&#x27;s a failed transaction</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nimport { payloads } from &#x27;@0xsequence/waas&#x27;;\n \nconst res = ... // response from the Embedded Wallet API\n \nif (payloads.responses.isFailedTransactionResponse(res)) {\n  // It&#x27;s a failed transaction\n}\n","title":"How to Detect","titles":["Response Payloads","Types of Responses","Failed Transaction Response"]},"580":{"href":"/solutions/wallets/embedded-wallet/architecture/response-payloads#signed-message-response","html":"\n<p>Triggered after a successful <a href=\"/solutions/wallets/embedded-wallet/architecture/action-payloads#sign-message-payload\">sign message intent</a>. The code is <code>signedMessage</code>.</p>\n<p>The <code>data</code> field contains:</p>\n<table><thead><tr><th>Name</th><th>Type</th><th>Description</th><th>Optional</th></tr></thead><tbody><tr><td>message</td><td>string</td><td>The signed message</td><td>No</td></tr><tr><td>signature</td><td>string</td><td>The signature</td><td>No</td></tr></tbody></table>\n","isPage":false,"text":"\nTriggered after a successful sign message intent. The code is signedMessage.\nThe data field contains:\nNameTypeDescriptionOptionalmessagestringThe signed messageNosignaturestringThe signatureNo\n","title":"Signed Message Response","titles":["Response Payloads","Types of Responses"]},"581":{"href":"/solutions/wallets/embedded-wallet/architecture/response-payloads#example-1","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;code&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;signedMessage&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;message&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Hello World&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;signature&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\n{\n  &quot;code&quot;: &quot;signedMessage&quot;,\n  &quot;data&quot;: {\n    &quot;message&quot;: &quot;Hello World&quot;,\n    &quot;signature&quot;: &quot;0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef&quot;\n  }\n}\n","title":"Example","titles":["Response Payloads","Types of Responses","Signed Message Response"]},"582":{"href":"/solutions/wallets/embedded-wallet/architecture/response-payloads#how-to-detect-2","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { payloads } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/waas&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> res</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ...</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // response from the Embedded Wallet API</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (payloads.responses.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isSignedMessageResponse</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(res)) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // It&#x27;s a signed message</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nimport { payloads } from &#x27;@0xsequence/waas&#x27;;\n \nconst res = ... // response from the Embedded Wallet API\n \nif (payloads.responses.isSignedMessageResponse(res)) {\n  // It&#x27;s a signed message\n}\n","title":"How to Detect","titles":["Response Payloads","Types of Responses","Signed Message Response"]},"583":{"href":"/solutions/wallets/embedded-wallet/architecture/response-payloads#session-opened-response","html":"\n<p>Occurs after successfully executing an <a href=\"/solutions/wallets/embedded-wallet/architecture/action-payloads#open-session-payload\">open session intent</a>. The code is <code>sessionOpened</code>.</p>\n<p>The <code>data</code> field contains:</p>\n<table><thead><tr><th>Name</th><th>Type</th><th>Description</th><th>Optional</th></tr></thead><tbody><tr><td>sessionId</td><td>string</td><td>Session ID (resembling an address)</td><td>No</td></tr><tr><td>wallet</td><td>string</td><td>The Sequence wallet address</td><td>No</td></tr></tbody></table>\n","isPage":false,"text":"\nOccurs after successfully executing an open session intent. The code is sessionOpened.\nThe data field contains:\nNameTypeDescriptionOptionalsessionIdstringSession ID (resembling an address)NowalletstringThe Sequence wallet addressNo\n","title":"Session Opened Response","titles":["Response Payloads","Types of Responses"]},"584":{"href":"/solutions/wallets/embedded-wallet/architecture/response-payloads#example-2","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;code&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;sessionOpened&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;sessionId&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0xBdeAfd3ee0550a73f615D2BaEA2E3D6d48FC857D&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;wallet&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x44c2Ea42Fb006a613a7b41D142576eD6B5055902&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\n{\n  &quot;code&quot;: &quot;sessionOpened&quot;,\n  &quot;data&quot;: {\n    &quot;sessionId&quot;: &quot;0xBdeAfd3ee0550a73f615D2BaEA2E3D6d48FC857D&quot;,\n    &quot;wallet&quot;: &quot;0x44c2Ea42Fb006a613a7b41D142576eD6B5055902&quot;\n  }\n}\n","title":"Example","titles":["Response Payloads","Types of Responses","Session Opened Response"]},"585":{"href":"/solutions/wallets/embedded-wallet/architecture/response-payloads#how-to-detect-3","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { payloads } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/waas&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> res</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ...</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // response from the Embedded Wallet API</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (payloads.responses.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isOpenSessionResponse</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(res)) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // It&#x27;s a session opened</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nimport { payloads } from &#x27;@0xsequence/waas&#x27;;\n \nconst res = ... // response from the Embedded Wallet API\n \nif (payloads.responses.isOpenSessionResponse(res)) {\n  // It&#x27;s a session opened\n}\n","title":"How to Detect","titles":["Response Payloads","Types of Responses","Session Opened Response"]},"586":{"href":"/solutions/wallets/embedded-wallet/architecture/response-payloads#validation-required-response","html":"\n<p>Some actions may necessitate additional validation. In such cases, the response code is <code>validationRequired</code>.</p>\n<p>The <code>data</code> field contains:</p>\n<table><thead><tr><th>Name</th><th>Type</th><th>Description</th><th>Optional</th></tr></thead><tbody><tr><td>sessionId</td><td>string</td><td>Session ID (resembling an address)</td><td>No</td></tr></tbody></table>\n","isPage":false,"text":"\nSome actions may necessitate additional validation. In such cases, the response code is validationRequired.\nThe data field contains:\nNameTypeDescriptionOptionalsessionIdstringSession ID (resembling an address)No\n","title":"Validation Required Response","titles":["Response Payloads","Types of Responses"]},"587":{"href":"/solutions/wallets/embedded-wallet/architecture/response-payloads#how-to-detect-4","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { payloads } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/waas&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> res</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ...</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // response from the Embedded Wallet API</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (payloads.responses.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isValidationRequiredResponse</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(res)) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Validation is required</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nimport { payloads } from &#x27;@0xsequence/waas&#x27;;\n \nconst res = ... // response from the Embedded Wallet API\n \nif (payloads.responses.isValidationRequiredResponse(res)) {\n  // Validation is required\n}\n","title":"How to Detect","titles":["Response Payloads","Types of Responses","Validation Required Response"]},"588":{"href":"/solutions/wallets/embedded-wallet/architecture/response-payloads#note","html":"\n<p>Both <code>sendTransaction</code> and <code>signMessage</code> intents could require validation. Always check for a <code>validationRequired</code> response before assuming you&#x27;ve received a transaction receipt or a signed message.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { payloads } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/waas&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> res</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ...</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // response from the Embedded Wallet API</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (payloads.responses.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isValidationRequiredResponse</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(res)) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Handle validation</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (payloads.responses.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isSendTransactionResponse</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(res)) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // It&#x27;s a transaction receipt</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>","isPage":false,"text":"\nBoth sendTransaction and signMessage intents could require validation. Always check for a validationRequired response before assuming you&#x27;ve received a transaction receipt or a signed message.\nimport { payloads } from &#x27;@0xsequence/waas&#x27;;\n \nconst res = ... // response from the Embedded Wallet API\n \nif (payloads.responses.isValidationRequiredResponse(res)) {\n  // Handle validation\n}\n \nif (payloads.responses.isSendTransactionResponse(res)) {\n  // It&#x27;s a transaction receipt\n}","title":"Note","titles":["Response Payloads","Types of Responses"]},"589":{"href":"/solutions/wallets/embedded-wallet/architecture/trust-contract-recovery-flow#trust-contract-recovery-flow","html":"</header>\n<p>Trust, a disaster recovery contract, protects Sequence WaaS accounts. This document explains the Trust contract&#x27;s function and the recovery flow during a disaster.</p>\n","isPage":true,"text":"\nTrust, a disaster recovery contract, protects Sequence WaaS accounts. This document explains the Trust contract&#x27;s function and the recovery flow during a disaster.\n","title":"Trust Contract Recovery Flow","titles":[]},"590":{"href":"/solutions/wallets/embedded-wallet/architecture/trust-contract-recovery-flow#trust-contract-architecture","html":"\n<p>Trust, a time lock contract, has two instances for each WaaS tenant project. One instance lies with the project&#x27;s recovery wallet, the other with the Sequence recovery wallet. Trust contracts start in a locked state, denying access to WaaS accounts under the tenant configuration.</p>\n<p>A controlling party can unlock a Trust contract by calling the setUnlocksAt method on the other party&#x27;s Trust contract instance. This action turns the Trust contract instance into a countdown state, starting a 90-day countdown that is publicly visible.</p>\n<p>After the countdown, the party that called setUnlocksAt can control the other&#x27;s Trust instance. With control over both instances, they can access all accounts created with the WaaS tenant configuration.</p>\n","isPage":false,"text":"\nTrust, a time lock contract, has two instances for each WaaS tenant project. One instance lies with the project&#x27;s recovery wallet, the other with the Sequence recovery wallet. Trust contracts start in a locked state, denying access to WaaS accounts under the tenant configuration.\nA controlling party can unlock a Trust contract by calling the setUnlocksAt method on the other party&#x27;s Trust contract instance. This action turns the Trust contract instance into a countdown state, starting a 90-day countdown that is publicly visible.\nAfter the countdown, the party that called setUnlocksAt can control the other&#x27;s Trust instance. With control over both instances, they can access all accounts created with the WaaS tenant configuration.\n","title":"Trust Contract Architecture","titles":["Trust Contract Recovery Flow"]},"591":{"href":"/solutions/wallets/embedded-wallet/architecture/trust-contract-recovery-flow#unlock-state-monitoring","html":"\n<p>Sequence monitors the unlock state of all Trust contract instances. This service operates under the existing Sequence WaaS deployed on AWS Nitro Secure Enclave instances. The monitoring system checks every Trust contract instance and alerts both the Sequence team and the project owner when an unlock state is detected on a contract. This prevents one party from calling setUnlocksAt on the other&#x27;s contract without their knowledge.</p>\n","isPage":false,"text":"\nSequence monitors the unlock state of all Trust contract instances. This service operates under the existing Sequence WaaS deployed on AWS Nitro Secure Enclave instances. The monitoring system checks every Trust contract instance and alerts both the Sequence team and the project owner when an unlock state is detected on a contract. This prevents one party from calling setUnlocksAt on the other&#x27;s contract without their knowledge.\n","title":"Unlock State Monitoring","titles":["Trust Contract Recovery Flow"]},"592":{"href":"/solutions/wallets/embedded-wallet/architecture/trust-contract-recovery-flow#disaster-recovery-flow","html":"\n<p>Trust contracts recover accounts if a party vanishes and access to the WaaS configuration accounts is lost. In this case, the counterparty can start the recovery flow by calling the setUnlocksAt method on the other&#x27;s Trust contract instance. This triggers unlock notifications for both parties until the countdown ends. After the 90-day countdown, it&#x27;s possible to recover the created accounts and the tokens in the accounts.</p>","isPage":false,"text":"\nTrust contracts recover accounts if a party vanishes and access to the WaaS configuration accounts is lost. In this case, the counterparty can start the recovery flow by calling the setUnlocksAt method on the other&#x27;s Trust contract instance. This triggers unlock notifications for both parties until the countdown ends. After the 90-day countdown, it&#x27;s possible to recover the created accounts and the tokens in the accounts.","title":"Disaster Recovery Flow","titles":["Trust Contract Recovery Flow"]},"593":{"href":"/solutions/wallets/embedded-wallet/examples/manage-sessions#session-management","html":"</header>\n<p>Sequence Auth + Embedded Wallet handles the following aspects of your application:</p>\n<ul>\n<li><a href=\"/solutions/wallets/embedded-wallet/examples/manage-sessions#account-management\">Account Management</a>: Manage blockchain accounts to sign up or sign in users.</li>\n<li><a href=\"/solutions/wallets/embedded-wallet/examples/manage-sessions#authenticating-accounts\">Authenticating Accounts</a>: Authentication sessions to return important details to be consumed by your application to enhance the experience of games and applications.</li>\n<li><a href=\"/solutions/wallets/embedded-wallet/examples/manage-sessions#managing-sessions\">Session Management</a>: Manage the listing and dropping of sessions handled by the WaaS stack.</li>\n</ul>\n<p>This means you don&#x27;t need to implement an account system yourself; instead, you interact with the Auth + WaaS SDK whenever you need to authenticate a user.</p>\n","isPage":true,"text":"\nSequence Auth + Embedded Wallet handles the following aspects of your application:\n\nAccount Management: Manage blockchain accounts to sign up or sign in users.\nAuthenticating Accounts: Authentication sessions to return important details to be consumed by your application to enhance the experience of games and applications.\nSession Management: Manage the listing and dropping of sessions handled by the WaaS stack.\n\nThis means you don&#x27;t need to implement an account system yourself; instead, you interact with the Auth + WaaS SDK whenever you need to authenticate a user.\n","title":"Session Management","titles":[]},"594":{"href":"/solutions/wallets/embedded-wallet/examples/manage-sessions#account-management","html":"\n","isPage":false,"text":"\n","title":"Account Management","titles":["Session Management"]},"595":{"href":"/solutions/wallets/embedded-wallet/examples/manage-sessions#sign-up--sign-in","html":"\n<p>Signing in and signing up are the same operation; the account is automatically created if it doesn&#x27;t already exist.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { SequenceWaaS } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/waas&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> sequence</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SequenceWaaS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  projectAccessKey: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">process</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">env</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">VITE_PROJECT_ACCESS_KEY</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  waasConfigKey: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">process</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">env</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">VITE_WAAS_CONFIG_KEY</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  network: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;arbitrum-nova&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get a sessionHash</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> sessionHash</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sequence.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSessionHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get an idToken using the social auth provider of your choice</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// (Google, Facebook, Twitter, etc.)</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Note: remember to pass the sessionHash as a nonce!</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Then sign in with Sequence WaaS</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> res</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sequence.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">signIn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ idToken }, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;MacBook Pro - Chrome&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(res)</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;sessionId&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x63A21cCa14ed7454B9cF6466af422B5c597c6b57&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;wallet&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0xd6043fe6f06d90ec2cB36cA5CD1B193A8515f350&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<aside data-callout=\"note\"><p>Sessions opened with some providers might require a second step in order to be usable for sending transactions.</p><p>See <a href=\"/solutions/wallets/embedded-wallet/examples/validation\">Email validation</a>.</p></aside>\n","isPage":false,"text":"\nSigning in and signing up are the same operation; the account is automatically created if it doesn&#x27;t already exist.\nimport { SequenceWaaS } from &#x27;@0xsequence/waas&#x27;\n \nconst sequence = new SequenceWaaS({\n  projectAccessKey: `${process.env.VITE_PROJECT_ACCESS_KEY}`,\n  waasConfigKey: `${process.env.VITE_WAAS_CONFIG_KEY}`,\n  network: &#x27;arbitrum-nova&#x27;\n})\n \n// Get a sessionHash\nconst sessionHash = await sequence.getSessionHash()\n \n// Get an idToken using the social auth provider of your choice\n// (Google, Facebook, Twitter, etc.)\n// Note: remember to pass the sessionHash as a nonce!\n \n// Then sign in with Sequence WaaS\nconst res = await sequence.signIn({ idToken }, &quot;MacBook Pro - Chrome&quot;)\n \nconsole.log(res)\n{\n  &quot;sessionId&quot;: &quot;0x63A21cCa14ed7454B9cF6466af422B5c597c6b57&quot;,\n  &quot;wallet&quot;: &quot;0xd6043fe6f06d90ec2cB36cA5CD1B193A8515f350&quot;,\n}\nSessions opened with some providers might require a second step in order to be usable for sending transactions.See Email validation.\n","title":"Sign Up / Sign In","titles":["Session Management","Account Management"]},"596":{"href":"/solutions/wallets/embedded-wallet/examples/manage-sessions#authenticating-accounts","html":"\n","isPage":false,"text":"\n","title":"Authenticating Accounts","titles":["Session Management"]},"597":{"href":"/solutions/wallets/embedded-wallet/examples/manage-sessions#email-sign-in--sign-up","html":"\n<strong>Validate Email and Initiate Session</strong>\n<ul>\n<li><strong>Direct Support</strong>: The SDK supports email sign-in when the key is generated with email scope.</li>\n<li><strong>Process</strong>: Provide the user&#x27;s email. The Embedded Wallet Nitro API sends a One-Time Password (OTP) to this email.</li>\n<li><strong>Authentication</strong>: Enter the OTP into the SDK to obtain an idToken.</li>\n<li><strong>Session Start</strong>: Use the idToken to open the session as usual.</li>\n</ul>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { SequenceWaaS } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/waas&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> sequence</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SequenceWaaS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  projectAccessKey: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">process</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">env</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">VITE_PROJECT_ACCESS_KEY</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  waasConfigKey: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">process</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">env</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">VITE_WAAS_CONFIG_KEY</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  network: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;arbitrum-nova&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Send validation email to the user with an OTP code</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">instance</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sequence.email.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">initiateAuth</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ email })</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> sessionHash</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sequence.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSessionHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Obtain OTP code from user and pass to finalizeAuth for validation</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">idToken</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sequence.email.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">finalizeAuth</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ instance, answer, email, sessionHash })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Log in using the idToken, as usual</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> waas.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">signIn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ idToken })</span></span></code></pre>\n","isPage":false,"text":"\nValidate Email and Initiate Session\n\nDirect Support: The SDK supports email sign-in when the key is generated with email scope.\nProcess: Provide the user&#x27;s email. The Embedded Wallet Nitro API sends a One-Time Password (OTP) to this email.\nAuthentication: Enter the OTP into the SDK to obtain an idToken.\nSession Start: Use the idToken to open the session as usual.\n\nimport { SequenceWaaS } from &#x27;@0xsequence/waas&#x27;\n \nconst sequence = new SequenceWaaS({\n  projectAccessKey: `${process.env.VITE_PROJECT_ACCESS_KEY}`,\n  waasConfigKey: `${process.env.VITE_WAAS_CONFIG_KEY}`,\n  network: &#x27;arbitrum-nova&#x27;\n})\n \n// Send validation email to the user with an OTP code\nconst { instance } = await sequence.email.initiateAuth({ email })\nconst sessionHash = await sequence.getSessionHash()\n \n// Obtain OTP code from user and pass to finalizeAuth for validation\nconst { idToken } = await sequence.email.finalizeAuth({ instance, answer, email, sessionHash })\n \n// Log in using the idToken, as usual\nawait waas.signIn({ idToken })\n","title":"Email Sign In / Sign Up","titles":["Session Management","Authenticating Accounts"]},"598":{"href":"/solutions/wallets/embedded-wallet/examples/manage-sessions#google--apple-auth","html":"\n<strong>Integrate Google and Apple Authentication:</strong>\n<ul>\n<li><strong>Support Authentication</strong>: The SDK directly supports Google and Apple authentication.</li>\n<li><strong>Open Sessions</strong>: Open sessions using idTokens obtained from the social auth providers.</li>\n<li><strong>Explore Examples</strong>: Start with a main.tsx file to set up the WaaS SDK, router, and Google OAuth provider. For more details, view the repository and functional <a href=\"https://github.com/0xsequence/demo-waas-auth\">demo-waas-auth</a>.</li>\n</ul>\n<p>Begin with a simple <code>main.tsx</code> file that sets up the WaaS SDK, the router, and the Google OAuth provider.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { SequenceWaaS } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/waas&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { GoogleOAuthProvider } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@react-oauth/google&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createHashRouter, RouterProvider } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;react-router-dom&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> sequence</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SequenceWaaS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  projectAccessKey: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">process</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">env</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">VITE_PROJECT_ACCESS_KEY</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  waasConfigKey: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">process</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">env</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">VITE_WAAS_CONFIG_KEY</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  network: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;arbitrum-nova&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">export</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> router</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createHashRouter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    path: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;/login&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    element: &lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Login</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    path: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;/&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    element: &lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">App</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">ReactDOM.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createRoot</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(document.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getElementById</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;root&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">render</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  &lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">React.StrictMode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      &lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">GoogleOAuthProvider clientId</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{GOOGLE_CLIENT_ID}</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        &lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">RouterProvider router</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{router} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/&gt;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      &lt;/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">GoogleOAuthProvider</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  &lt;/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">React.StrictMode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n<strong>Manage Session Security with Hooks:</strong>\n<ul>\n<li><strong>Use <code>useSessionHash</code> Hook</strong>: Implement this hook to obtain a session hash, enhancing security by preventing replay attacks.</li>\n<li><strong>Retrieve Session Hash</strong>: Utilize <strong><code>sequence.getSessionHash</code></strong> to acquire the current session hash.</li>\n<li><strong>Handle State Changes</strong>: Apply <strong><code>sequence.onSessionStateChanged</code></strong> to update the session hash whenever the session state changes.</li>\n</ul>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { sequence } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;./main&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { useEffect, useState } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;react&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">export</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> useSessionHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">sessionHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">setSessionHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> useState</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">setError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> useState</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">undefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    useEffect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        const</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> handler</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            try</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">                setSessionHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sequence.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSessionHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (error) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(error)</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">                setError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(error)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        handler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sequence.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">onSessionStateChanged</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(handler)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }, [setSessionHash, setError])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        sessionHash,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        error,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        loading: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!!</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">sessionHash,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<strong>Implement Google Login:</strong>\n<ul>\n<li><strong>Integrate GoogleLogin Component</strong>: Use the <strong><code>GoogleLogin</code></strong> component from the <strong><code>@react-oauth/google</code></strong> package for Google authentication.</li>\n<li><strong>Login Event Handling</strong>: Trigger the <strong><code>handleGoogleLogin</code></strong> function when a user successfully logs into Google.</li>\n</ul>\n<p>Make sure to re-render the component whenever <code>sessionHash</code> changes to avoid hard-to-track discrepancy errors. For example, you can use the <code>key</code> attribute to force the re-render.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { router, sequence } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;./main&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { CredentialResponse, GoogleLogin } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@react-oauth/google&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { useSessionHash } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;./useSessionHash.ts&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Login</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">sessionHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> useSessionHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">signingIn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">setSigningIn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> useState</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  useEffect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sequence.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isSignedIn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        router.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">navigate</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;/&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }, [])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> handleGoogleLogin</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">tokenResponse</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> CredentialResponse</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> walletAddress</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sequence.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">signIn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      idToken: tokenResponse.credential</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;MacBook Pro - Chrome&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`Wallet address: ${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">walletAddress</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    router.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">navigate</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;/&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {!!</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">sessionHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> &amp;&amp; (&lt;&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">GoogleLogin</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> key</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{sessionHash} onSuccess</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{handleGoogleLogin} shape</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;circle&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> width</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">230</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} nonce</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{sessionHash} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;/&gt;)}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">export</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> default</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Login</span></span></code></pre>\n","isPage":false,"text":"\nIntegrate Google and Apple Authentication:\n\nSupport Authentication: The SDK directly supports Google and Apple authentication.\nOpen Sessions: Open sessions using idTokens obtained from the social auth providers.\nExplore Examples: Start with a main.tsx file to set up the WaaS SDK, router, and Google OAuth provider. For more details, view the repository and functional demo-waas-auth.\n\nBegin with a simple main.tsx file that sets up the WaaS SDK, the router, and the Google OAuth provider.\nimport { SequenceWaaS } from &#x27;@0xsequence/waas&#x27;\nimport { GoogleOAuthProvider } from &#x27;@react-oauth/google&#x27;\nimport { createHashRouter, RouterProvider } from &#x27;react-router-dom&#x27;\n \nconst sequence = new SequenceWaaS({\n  projectAccessKey: `${process.env.VITE_PROJECT_ACCESS_KEY}`,\n  waasConfigKey: `${process.env.VITE_WAAS_CONFIG_KEY}`,\n  network: &#x27;arbitrum-nova&#x27;\n})\n \nexport const router = createHashRouter([\n  {\n    path: &#x27;/login&#x27;,\n    element: &lt;Login /&gt;\n  },\n  {\n    path: &#x27;/&#x27;,\n    element: &lt;App /&gt;\n  }\n])\n \nReactDOM.createRoot(document.getElementById(&#x27;root&#x27;)!).render(\n  &lt;React.StrictMode&gt;\n      &lt;GoogleOAuthProvider clientId={GOOGLE_CLIENT_ID}&gt;\n        &lt;RouterProvider router={router} /&gt;\n      &lt;/GoogleOAuthProvider&gt;\n  &lt;/React.StrictMode&gt;\n)\nManage Session Security with Hooks:\n\nUse useSessionHash Hook: Implement this hook to obtain a session hash, enhancing security by preventing replay attacks.\nRetrieve Session Hash: Utilize sequence.getSessionHash to acquire the current session hash.\nHandle State Changes: Apply sequence.onSessionStateChanged to update the session hash whenever the session state changes.\n\nimport { sequence } from &#x27;./main&#x27;\nimport { useEffect, useState } from &quot;react&quot;;\n \nexport function useSessionHash() {\n    const [sessionHash, setSessionHash] = useState(&quot;&quot;)\n    const [error, setError] = useState&lt;any&gt;(undefined)\n \n    useEffect(() =&gt; {\n        const handler = async () =&gt; {\n            try {\n                setSessionHash(await sequence.getSessionHash())\n            } catch (error) {\n                console.error(error)\n                setError(error)\n            }\n        }\n        handler()\n        return sequence.onSessionStateChanged(handler)\n    }, [setSessionHash, setError])\n \n    return {\n        sessionHash,\n        error,\n        loading: !!sessionHash,\n    }\n}\nImplement Google Login:\n\nIntegrate GoogleLogin Component: Use the GoogleLogin component from the @react-oauth/google package for Google authentication.\nLogin Event Handling: Trigger the handleGoogleLogin function when a user successfully logs into Google.\n\nMake sure to re-render the component whenever sessionHash changes to avoid hard-to-track discrepancy errors. For example, you can use the key attribute to force the re-render.\nimport { router, sequence } from &#x27;./main&#x27;\nimport { CredentialResponse, GoogleLogin } from &#x27;@react-oauth/google&#x27;\nimport { useSessionHash } from &quot;./useSessionHash.ts&quot;;\n \nfunction Login() {\n  const { sessionHash } = useSessionHash()\n  const [signingIn, setSigningIn] = useState(false)\n \n  useEffect(() =&gt; {\n    (async () =&gt; {\n      if (await sequence.isSignedIn()) {\n        router.navigate(&#x27;/&#x27;)\n      }\n    })()\n  }, [])\n \n  const handleGoogleLogin = async (tokenResponse: CredentialResponse) =&gt; {\n    const walletAddress = await sequence.signIn({\n      idToken: tokenResponse.credential!\n    }, &quot;MacBook Pro - Chrome&quot;)\n \n    console.log(`Wallet address: ${walletAddress}`)\n    router.navigate(&#x27;/&#x27;)\n  }\n \n  return (\n    {!!sessionHash &amp;&amp; (&lt;&gt;\n      &lt;GoogleLogin key={sessionHash} onSuccess={handleGoogleLogin} shape=&quot;circle&quot; width={230} nonce={sessionHash} /&gt;\n    &lt;/&gt;)}\n )\n}\n \nexport default Login\n","title":"Google / Apple Auth","titles":["Session Management","Authenticating Accounts"]},"599":{"href":"/solutions/wallets/embedded-wallet/examples/manage-sessions#check-if-a-user-is-signed-in","html":"\n<p>A user session can be checked to see if they are logged in with the following function call:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sequence.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isSignedIn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()){</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  ...</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // logged in</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  ...</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // not logged in</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nA user session can be checked to see if they are logged in with the following function call:\nif (await sequence.isSignedIn()){\n  ... // logged in\n} else {\n  ... // not logged in\n}\n","title":"Check if a User is Signed-In","titles":["Session Management","Authenticating Accounts"]},"600":{"href":"/solutions/wallets/embedded-wallet/examples/manage-sessions#idtoken-jwt-parsing","html":"\n<p>Based on the way that your application is configured from perspective of the Authentication Providers, you have the option to parse user details that can be shared with applications to be integrated in some way.</p>\n<p>For example, as a simple way to create social inclusion of profiling in your experience, you can reference Profile photos used already within the respective ecosystems: Google &amp; Apple.</p>\n<p>The following are details included in the returned JWT&#x27;s:</p>\n","isPage":false,"text":"\nBased on the way that your application is configured from perspective of the Authentication Providers, you have the option to parse user details that can be shared with applications to be integrated in some way.\nFor example, as a simple way to create social inclusion of profiling in your experience, you can reference Profile photos used already within the respective ecosystems: Google &amp; Apple.\nThe following are details included in the returned JWT&#x27;s:\n","title":"idToken JWT Parsing","titles":["Session Management","Authenticating Accounts"]},"601":{"href":"/solutions/wallets/embedded-wallet/examples/manage-sessions#google-jwt-parsing-idtoken-contents","html":"\n<ul>\n<li><code>iss</code> (aka Issuer) (string) - The issuer of the token. For tokens from Google, this is usually a URL like <a href=\"https://accounts.google.com\">https://accounts.google.com</a> or something similiar.</li>\n<li><code>azp</code> (aka Authorized party) (string) - The client ID of the authorized presenter. This claim is used in Google OAuth 2.0 to identify the party using the token.</li>\n<li><code>aud</code> (aka Audience) (string) - Intended audience of the token. Typically, this is your application&#x27;s client ID.</li>\n<li><code>sub</code> (aka Subject) (string) - The unique identifier for the user. It is intended to be used to identify the user across multiple systems.</li>\n<li><code>hd</code> (aka Hosted Domain) (string) - It means that the user who has authenticated is from the respective domain.</li>\n<li><code>email</code> (string) - The user&#x27;s email address, as registered in the authentication service.</li>\n<li><code>email_verified</code> (boolean) (string) - A boolean representing whether the email address has been verified as genuine.</li>\n<li><code>nonce</code> (string) - A string used to associate a client session with an ID token and to mitigate replay attacks.</li>\n<li><code>name</code> (string) - The full name of the user as registered in the authentication service.</li>\n<li><code>picture</code> (string) - URL of the user&#x27;s profile picture.</li>\n<li><code>given_name</code> (string) - The user&#x27;s first name.</li>\n<li><code>family_name</code> (string) - The user&#x27;s last name.</li>\n<li><code>iat</code> (aka Issued at) (number) - The timestamp when the token was issued, represented in Unix time (seconds since Jan 1, 1970).</li>\n<li><code>exp</code> (aka Expiration time) (number) - The expiration timestamp of the token, beyond which the token should not be considered valid.</li>\n</ul>\n","isPage":false,"text":"\n\niss (aka Issuer) (string) - The issuer of the token. For tokens from Google, this is usually a URL like https://accounts.google.com or something similiar.\nazp (aka Authorized party) (string) - The client ID of the authorized presenter. This claim is used in Google OAuth 2.0 to identify the party using the token.\naud (aka Audience) (string) - Intended audience of the token. Typically, this is your application&#x27;s client ID.\nsub (aka Subject) (string) - The unique identifier for the user. It is intended to be used to identify the user across multiple systems.\nhd (aka Hosted Domain) (string) - It means that the user who has authenticated is from the respective domain.\nemail (string) - The user&#x27;s email address, as registered in the authentication service.\nemail_verified (boolean) (string) - A boolean representing whether the email address has been verified as genuine.\nnonce (string) - A string used to associate a client session with an ID token and to mitigate replay attacks.\nname (string) - The full name of the user as registered in the authentication service.\npicture (string) - URL of the user&#x27;s profile picture.\ngiven_name (string) - The user&#x27;s first name.\nfamily_name (string) - The user&#x27;s last name.\niat (aka Issued at) (number) - The timestamp when the token was issued, represented in Unix time (seconds since Jan 1, 1970).\nexp (aka Expiration time) (number) - The expiration timestamp of the token, beyond which the token should not be considered valid.\n\n","title":"Google JWT Parsing idToken Contents","titles":["Session Management","Authenticating Accounts","idToken JWT Parsing"]},"602":{"href":"/solutions/wallets/embedded-wallet/examples/manage-sessions#apple-jwt-parsing-idtoken-contents","html":"\n<ul>\n<li><code>iss</code> (string) - The issuer registered claim identifies the principal that issues the identity token. Because Apple generates the token, the value is <a href=\"https://appleid.apple.com\">https://appleid.apple.com</a>.</li>\n<li><code>sub</code> (string) - The subject registered claim identifies the principal that’s the subject of the identity token. Because this token is for your app, the value is the unique identifier for the user.</li>\n<li><code>aud</code> (string) - The audience registered claim identifies the recipient of the identity token. Because the token is for your app, the value is the client_id from your developer account.</li>\n<li><code>iat</code> (number) - The issued at registered claim indicates the time that Apple issues the identity token, in the number of seconds since the Unix epoch in UTC.</li>\n<li><code>exp</code> (number) - The expiration time registered claim identifies the time that the identity token expires, in the number of seconds since the Unix epoch in UTC. The value must be greater than the current date and time when verifying the token.</li>\n<li><code>nonce</code> (string) - A string for associating a client session with the identity token. This value mitigates replay attacks and is present only if you pass it in the authorization request.</li>\n<li><code>nonce_supported</code> (boolean) - A Boolean value that indicates whether the transaction is on a nonce-supported platform. If you send a nonce in the authorization request, but don’t see the nonce claim in the identity token, check this claim to determine how to proceed. If this claim returns true, treat nonce as mandatory and fail the transaction; otherwise, you can proceed treating the nonce as optional.</li>\n<li><code>email</code> (string) - A string value that represents the user’s email address. The email address is either the user’s real email address or the proxy address, depending on their private email relay service. This value may be empty for Sign in with Apple at Work &amp; School users. For example, younger students may not have an email address.</li>\n<li><code>email_verified</code> (string || boolean) - A string or Boolean value that indicates whether the service verifies the email. The value can either be a string (&quot;true&quot; or &quot;false&quot;) or a Boolean (true or false). The system may not verify email addresses for Sign in with Apple at Work &amp; School users, and this claim is &quot;false&quot; or false for those users.</li>\n<li><code>is_private_email</code> (string || boolean) - A string or Boolean value that indicates whether the email that the user shares is the proxy address. The value can either be a string (&quot;true&quot; or &quot;false&quot;) or a Boolean (true or false).</li>\n<li><code>real_user_status</code> (number) - An Integer value that indicates whether the user appears to be a real person. Use the value of this claim to mitigate fraud. The possible values are: 0 (or Unsupported), 1 (or Unknown), 2 (or LikelyReal). This claim is present only in iOS 14 and later, macOS 11 and later, watchOS 7 and later, tvOS 14 and later. The claim isn’t present or supported for web-based apps.</li>\n<li><code>transfer_sub</code> (string) - A string value that represents the transfer identifier for migrating users to your team. This claim is present only during the 60-day transfer period after you transfer an app.</li>\n</ul>\n","isPage":false,"text":"\n\niss (string) - The issuer registered claim identifies the principal that issues the identity token. Because Apple generates the token, the value is https://appleid.apple.com.\nsub (string) - The subject registered claim identifies the principal that’s the subject of the identity token. Because this token is for your app, the value is the unique identifier for the user.\naud (string) - The audience registered claim identifies the recipient of the identity token. Because the token is for your app, the value is the client_id from your developer account.\niat (number) - The issued at registered claim indicates the time that Apple issues the identity token, in the number of seconds since the Unix epoch in UTC.\nexp (number) - The expiration time registered claim identifies the time that the identity token expires, in the number of seconds since the Unix epoch in UTC. The value must be greater than the current date and time when verifying the token.\nnonce (string) - A string for associating a client session with the identity token. This value mitigates replay attacks and is present only if you pass it in the authorization request.\nnonce_supported (boolean) - A Boolean value that indicates whether the transaction is on a nonce-supported platform. If you send a nonce in the authorization request, but don’t see the nonce claim in the identity token, check this claim to determine how to proceed. If this claim returns true, treat nonce as mandatory and fail the transaction; otherwise, you can proceed treating the nonce as optional.\nemail (string) - A string value that represents the user’s email address. The email address is either the user’s real email address or the proxy address, depending on their private email relay service. This value may be empty for Sign in with Apple at Work &amp; School users. For example, younger students may not have an email address.\nemail_verified (string || boolean) - A string or Boolean value that indicates whether the service verifies the email. The value can either be a string (&quot;true&quot; or &quot;false&quot;) or a Boolean (true or false). The system may not verify email addresses for Sign in with Apple at Work &amp; School users, and this claim is &quot;false&quot; or false for those users.\nis_private_email (string || boolean) - A string or Boolean value that indicates whether the email that the user shares is the proxy address. The value can either be a string (&quot;true&quot; or &quot;false&quot;) or a Boolean (true or false).\nreal_user_status (number) - An Integer value that indicates whether the user appears to be a real person. Use the value of this claim to mitigate fraud. The possible values are: 0 (or Unsupported), 1 (or Unknown), 2 (or LikelyReal). This claim is present only in iOS 14 and later, macOS 11 and later, watchOS 7 and later, tvOS 14 and later. The claim isn’t present or supported for web-based apps.\ntransfer_sub (string) - A string value that represents the transfer identifier for migrating users to your team. This claim is present only during the 60-day transfer period after you transfer an app.\n\n","title":"Apple JWT Parsing idToken Contents","titles":["Session Management","Authenticating Accounts","idToken JWT Parsing"]},"603":{"href":"/solutions/wallets/embedded-wallet/examples/manage-sessions#example-js-code-for-parsing","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> parseJwt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">token</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    try</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Split the token into its three parts</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> parts</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> token.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">split</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;.&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (parts.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">length</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> !==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            throw</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;JWT token must consist of three parts&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // The payload is the second part. We decode it from base64 URL encoding.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> decodedPayload</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> atob</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(parts[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">replace</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">/_/</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">g</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;/&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">replace</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">/-/</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">g</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;+&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Parse the decoded payload as JSON</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> payload</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> JSON</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parse</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(decodedPayload);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Return the payload object, which includes all the claims</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> payload;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (e) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Failed to parse JWT:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, e);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> null</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Example usage</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> token</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;eyJ...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Your JWT token here</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> jwtDetails</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> parseJwt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(token);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (jwtDetails) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Email:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, jwtDetails.email);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Name:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, jwtDetails.name);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Picture:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, jwtDetails.picture);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Access other fields similarly</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nfunction parseJwt(token) {\n    try {\n        // Split the token into its three parts\n        const parts = token.split(&#x27;.&#x27;);\n        if (parts.length !== 3) {\n            throw new Error(&#x27;JWT token must consist of three parts&#x27;);\n        }\n \n        // The payload is the second part. We decode it from base64 URL encoding.\n        const decodedPayload = atob(parts[1].replace(/_/g, &#x27;/&#x27;).replace(/-/g, &#x27;+&#x27;));\n \n        // Parse the decoded payload as JSON\n        const payload = JSON.parse(decodedPayload);\n \n        // Return the payload object, which includes all the claims\n        return payload;\n    } catch (e) {\n        console.error(&#x27;Failed to parse JWT:&#x27;, e);\n        return null;\n    }\n}\n \n// Example usage\nconst token = &#x27;eyJ...&#x27;; // Your JWT token here\nconst jwtDetails = parseJwt(token);\n \nif (jwtDetails) {\n    console.log(&#x27;Email:&#x27;, jwtDetails.email);\n    console.log(&#x27;Name:&#x27;, jwtDetails.name);\n    console.log(&#x27;Picture:&#x27;, jwtDetails.picture);\n    // Access other fields similarly\n}\n","title":"Example JS Code for Parsing","titles":["Session Management","Authenticating Accounts","idToken JWT Parsing"]},"604":{"href":"/solutions/wallets/embedded-wallet/examples/manage-sessions#managing-sessions","html":"\n","isPage":false,"text":"\n","title":"Managing Sessions","titles":["Session Management"]},"605":{"href":"/solutions/wallets/embedded-wallet/examples/manage-sessions#list-sessions","html":"\n<p>This function returns a list of sessions for the current user and only includes sessions that are still valid.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { SequenceWaaS } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/waas&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> sequence</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SequenceWaaS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  projectAccessKey: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">process</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">env</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">VITE_PROJECT_ACCESS_KEY</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  waasConfigKey: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">process</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">env</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">VITE_WAAS_CONFIG_KEY</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  network: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;arbitrum-nova&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sequence.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">signIn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ idToken }, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;MacBook Pro - Chrome&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> sessions</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sequence.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">listSessions</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(sessions)</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;id&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x574372ff1A0Eede68B5358Cce7bbb93155A9dfe0&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;address&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x574372ff1a0eede68b5358cce7bbb93155a9dfe0&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;userId&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;42#https://accounts.google.com#109234880945084120673&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;projectId&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">42</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;issuer&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://accounts.google.com&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;subject&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;109234880945084120673&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;friendlyName&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Pixel 3 - Brave&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;createdAt&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;2023-11-02T18:22:03.102950917Z&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;refreshedAt&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;2023-11-02T18:22:03.109787921Z&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;expiresAt&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;2123-10-09T18:22:03.102951017Z&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;isThis&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;id&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x3C4E11E4dbF23B87C14bd75d0Da9C75707392D21&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;address&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x3c4e11e4dbf23b87c14bd75d0da9c75707392d21&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;userId&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;42#https://accounts.google.com#109234880945084120673&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;projectId&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">42</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;issuer&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://accounts.google.com&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;subject&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;109234880945084120673&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;friendlyName&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;MacBook Pro - Chrome&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;createdAt&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;2023-11-02T18:50:32.815189174Z&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;refreshedAt&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;2023-11-02T18:50:32.819722082Z&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;expiresAt&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;2123-10-09T18:50:32.815189234Z&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;isThis&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span></code></pre>\n","isPage":false,"text":"\nThis function returns a list of sessions for the current user and only includes sessions that are still valid.\nimport { SequenceWaaS } from &#x27;@0xsequence/waas&#x27;\n \nconst sequence = new SequenceWaaS({\n  projectAccessKey: `${process.env.VITE_PROJECT_ACCESS_KEY}`,\n  waasConfigKey: `${process.env.VITE_WAAS_CONFIG_KEY}`,\n  network: &#x27;arbitrum-nova&#x27;\n})\n \nawait sequence.signIn({ idToken }, &quot;MacBook Pro - Chrome&quot;)\n \nconst sessions = await sequence.listSessions()\nconsole.log(sessions)\n[\n  {\n    &quot;id&quot;: &quot;0x574372ff1A0Eede68B5358Cce7bbb93155A9dfe0&quot;,\n    &quot;address&quot;: &quot;0x574372ff1a0eede68b5358cce7bbb93155a9dfe0&quot;,\n    &quot;userId&quot;: &quot;42#https://accounts.google.com#109234880945084120673&quot;,\n    &quot;projectId&quot;: 42,\n    &quot;issuer&quot;: &quot;https://accounts.google.com&quot;,\n    &quot;subject&quot;: &quot;109234880945084120673&quot;,\n    &quot;friendlyName&quot;: &quot;Pixel 3 - Brave&quot;,\n    &quot;createdAt&quot;: &quot;2023-11-02T18:22:03.102950917Z&quot;,\n    &quot;refreshedAt&quot;: &quot;2023-11-02T18:22:03.109787921Z&quot;,\n    &quot;expiresAt&quot;: &quot;2123-10-09T18:22:03.102951017Z&quot;,\n    &quot;isThis&quot;: false\n  },\n  {\n    &quot;id&quot;: &quot;0x3C4E11E4dbF23B87C14bd75d0Da9C75707392D21&quot;,\n    &quot;address&quot;: &quot;0x3c4e11e4dbf23b87c14bd75d0da9c75707392d21&quot;,\n    &quot;userId&quot;: &quot;42#https://accounts.google.com#109234880945084120673&quot;,\n    &quot;projectId&quot;: 42,\n    &quot;issuer&quot;: &quot;https://accounts.google.com&quot;,\n    &quot;subject&quot;: &quot;109234880945084120673&quot;,\n    &quot;friendlyName&quot;: &quot;MacBook Pro - Chrome&quot;,\n    &quot;createdAt&quot;: &quot;2023-11-02T18:50:32.815189174Z&quot;,\n    &quot;refreshedAt&quot;: &quot;2023-11-02T18:50:32.819722082Z&quot;,\n    &quot;expiresAt&quot;: &quot;2123-10-09T18:50:32.815189234Z&quot;,\n    &quot;isThis&quot;: true\n  }\n]\n","title":"List Sessions","titles":["Session Management","Managing Sessions"]},"606":{"href":"/solutions/wallets/embedded-wallet/examples/manage-sessions#close-session","html":"\n<p>A session can be closed using the <code>id</code> of the session. Any session can be closed from any device with an active session.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { SequenceWaaS } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/waas&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> sequence</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SequenceWaaS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  projectAccessKey: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">process</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">env</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">VITE_PROJECT_ACCESS_KEY</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  waasConfigKey: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">process</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">env</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">VITE_WAAS_CONFIG_KEY</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  network: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;arbitrum-nova&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sequence.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">signIn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ idToken }, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;MacBook Pro - Chrome&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> sessions</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sequence.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">listSessions</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sequence.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">dropSession</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ sessionId: sessions[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].id })</span></span></code></pre>","isPage":false,"text":"\nA session can be closed using the id of the session. Any session can be closed from any device with an active session.\nimport { SequenceWaaS } from &#x27;@0xsequence/waas&#x27;\n \nconst sequence = new SequenceWaaS({\n  projectAccessKey: `${process.env.VITE_PROJECT_ACCESS_KEY}`,\n  waasConfigKey: `${process.env.VITE_WAAS_CONFIG_KEY}`,\n  network: &#x27;arbitrum-nova&#x27;\n})\n \nawait sequence.signIn({ idToken }, &quot;MacBook Pro - Chrome&quot;)\n \nconst sessions = await sequence.listSessions()\nawait sequence.dropSession({ sessionId: sessions[0].id })","title":"Close Session","titles":["Session Management","Managing Sessions"]},"607":{"href":"/solutions/wallets/embedded-wallet/examples/on-ramp#on-ramp","html":"</header>\n<p>Since the Embedded Wallet product can be integrated with <a href=\"/solutions/wallets/sequence-kit/overview\">Sequence Kit</a> (a guide on this <a href=\"/guides/custom-marketplace#7-optional-integrate-embedded-wallet-into-sequence-kit\">here</a>), a developer can allow their users to purchase fiat via a credit or debit card with the use of a simplified react component.</p>\n<p>Integration steps can be found <a href=\"/solutions/wallets/sequence-kit/on-ramp\">here</a></p>","isPage":true,"text":"\nSince the Embedded Wallet product can be integrated with Sequence Kit (a guide on this here), a developer can allow their users to purchase fiat via a credit or debit card with the use of a simplified react component.\nIntegration steps can be found here","title":"On-ramp","titles":[]},"608":{"href":"/solutions/wallets/embedded-wallet/examples/transaction-receipts#transaction-receipts","html":"</header>\n<p><strong>Transaction Receipts:</strong> Transactions return receipts indicating success or failure. Failed receipts are generated without transaction execution.</p>\n<p><strong>Successful Transaction Response:</strong> A successful transaction provides a SentTransactionResponse. Always verify this response with the <strong><code>isSentTransactionResponse</code></strong> type guard before accessing the transaction hash.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Sequence, isSentTransactionResponse } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;@0xsequence/waas&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> waas</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SequenceWaaS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    projectAccessKey: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">process</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">env</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">PROJECT_ACCESS_KEY</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    waasConfigKey: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">process</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">env</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">WAAS_CONFIG_KEY</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    network: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;arbitrum-nova&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> waas.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">signIn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ idToken }, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Session name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> waas.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  chainId: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">42161</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  transactions: [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0xD72C236Be524Ec24F72329317e2785E687105B69&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      value: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">});</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isSentTransactionResponse</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tx)) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tx);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<strong>Understanding Transaction Details</strong>\n<strong>Fields in Transaction Responses:</strong>\n<ul>\n<li><strong>txHash</strong>: The hash of the transaction sent to the network.</li>\n<li><strong>receipt.logs</strong>: Logs emitted during the transaction.</li>\n<li><strong>receipt.status</strong>: Indicates if the transaction SUCCEEDED or FAILED.</li>\n<li><strong>receipt.revertReason</strong>: Explains why a transaction was reverted, if applicable.</li>\n</ul>\n<p>To view the full response object, see the <a href=\"/solutions/wallets/embedded-wallet/architecture/response-payloads\">Response payloads</a> section.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;code&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;transactionReceipt&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;txHash&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0xf2e9f728abd65089f25efda5852e605ced377f4e2c89dbf143b124623ed09b2c&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;metaTxHash&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;acc36ed4ef40db74137266e48d863083a5c7e85e2735d69adafcb5b362b6cfc0&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;nativeReceipt&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: { </span><span style=\"color:#B31D28;--shiki-dark:#FF938A;font-style:italic;--shiki-dark-font-style:italic\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> },</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;receipt&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;id&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;acc36ed4ef40db74137266e48d863083a5c7e85e2735d69adafcb5b362b6cfc0&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;index&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;logs&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;address&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x4d4EE1b8583e31fe789eAF2e1b6e011C220c10B6&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x0000000000000000000000001119e72b4af230becebd933d0e07f0eec51d8c2a0000000000000000000000000000000000000000000000000000000000000001&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;topics&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;0x1f180c27086c7a39ea2a7b25239d1ab92348f07ca7bb59d1438fcf527568f881&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          ]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;address&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x4d4EE1b8583e31fe789eAF2e1b6e011C220c10B6&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;topics&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;0x5c4eeb02dabf8976016ab414d617f9a162936dcace3cdef8c69ef6e262ad5ae7&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;0xacc36ed4ef40db74137266e48d863083a5c7e85e2735d69adafcb5b362b6cfc0&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          ]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      ],</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;receipts&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [ </span><span style=\"color:#B31D28;--shiki-dark:#FF938A;font-style:italic;--shiki-dark-font-style:italic\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ],</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;revertReason&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">null</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;status&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;SUCCEEDED&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;request&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: { </span><span style=\"color:#B31D28;--shiki-dark:#FF938A;font-style:italic;--shiki-dark-font-style:italic\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> },</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;simulations&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [ </span><span style=\"color:#B31D28;--shiki-dark:#FF938A;font-style:italic;--shiki-dark-font-style:italic\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":true,"text":"\nTransaction Receipts: Transactions return receipts indicating success or failure. Failed receipts are generated without transaction execution.\nSuccessful Transaction Response: A successful transaction provides a SentTransactionResponse. Always verify this response with the isSentTransactionResponse type guard before accessing the transaction hash.\nimport { Sequence, isSentTransactionResponse } from &quot;@0xsequence/waas&quot;;\n \nconst waas = new SequenceWaaS(\n  {\n    projectAccessKey: `${process.env.PROJECT_ACCESS_KEY}`,\n    waasConfigKey: `${process.env.WAAS_CONFIG_KEY}`,\n    network: &quot;arbitrum-nova&quot;,\n  }\n);\n \nawait waas.signIn({ idToken }, &quot;Session name&quot;);\n \nconst tx = await waas.sendTransaction({\n  chainId: 42161,\n  transactions: [\n    {\n      to: &quot;0xD72C236Be524Ec24F72329317e2785E687105B69&quot;,\n      value: &quot;0&quot;,\n    },\n  ],\n});\n \nif (isSentTransactionResponse(tx)) {\n  console.log(tx);\n}\nUnderstanding Transaction Details\nFields in Transaction Responses:\n\ntxHash: The hash of the transaction sent to the network.\nreceipt.logs: Logs emitted during the transaction.\nreceipt.status: Indicates if the transaction SUCCEEDED or FAILED.\nreceipt.revertReason: Explains why a transaction was reverted, if applicable.\n\nTo view the full response object, see the Response payloads section.\n{\n  &quot;code&quot;: &quot;transactionReceipt&quot;,\n  &quot;data&quot;: {\n    &quot;txHash&quot;: &quot;0xf2e9f728abd65089f25efda5852e605ced377f4e2c89dbf143b124623ed09b2c&quot;,\n    &quot;metaTxHash&quot;: &quot;acc36ed4ef40db74137266e48d863083a5c7e85e2735d69adafcb5b362b6cfc0&quot;,\n    &quot;nativeReceipt&quot;: { ... },\n    &quot;receipt&quot;: {\n      &quot;id&quot;: &quot;acc36ed4ef40db74137266e48d863083a5c7e85e2735d69adafcb5b362b6cfc0&quot;,\n      &quot;index&quot;: 0,\n      &quot;logs&quot;: [\n        {\n          &quot;address&quot;: &quot;0x4d4EE1b8583e31fe789eAF2e1b6e011C220c10B6&quot;,\n          &quot;data&quot;: &quot;0x0000000000000000000000001119e72b4af230becebd933d0e07f0eec51d8c2a0000000000000000000000000000000000000000000000000000000000000001&quot;,\n          &quot;topics&quot;: [\n            &quot;0x1f180c27086c7a39ea2a7b25239d1ab92348f07ca7bb59d1438fcf527568f881&quot;\n          ]\n        },\n        {\n          &quot;address&quot;: &quot;0x4d4EE1b8583e31fe789eAF2e1b6e011C220c10B6&quot;,\n          &quot;data&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,\n          &quot;topics&quot;: [\n            &quot;0x5c4eeb02dabf8976016ab414d617f9a162936dcace3cdef8c69ef6e262ad5ae7&quot;,\n            &quot;0xacc36ed4ef40db74137266e48d863083a5c7e85e2735d69adafcb5b362b6cfc0&quot;\n          ]\n        }\n      ],\n      &quot;receipts&quot;: [ ... ],\n      &quot;revertReason&quot;: null,\n      &quot;status&quot;: &quot;SUCCEEDED&quot;\n    },\n    &quot;request&quot;: { ... },\n    &quot;simulations&quot;: [ ... ]\n  }\n}\n","title":"Transaction receipts","titles":[]},"609":{"href":"/solutions/wallets/embedded-wallet/examples/transaction-receipts#failed-transaction-response","html":"\n<p>An In-Game Wallet pre-empts failing transactions by simulating them on the network before actual submission. If the simulation fails, the transaction is not sent, and a FailedTransactionResponse is returned.</p>\n<p>To view the full response object, see the wallet <a href=\"/solutions/wallets/embedded-wallet/architecture/response-payloads\">Response payloads</a> section.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Sequence, isSentTransactionResponse } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;@0xsequence/waas&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> waas</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SequenceWaaS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    projectAccessKey: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">process</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">env</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">PROJECT_ACCESS_KEY</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    waasConfigKey: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">process</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">env</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">WAAS_CONFIG_KEY</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    network: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;arbitrum-nova&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> waas.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">signIn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ idToken }, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Session name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> waas.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  chainId: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">137</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  transactions: [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">      // This address always fails on Polygon, give it a try :D</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x839eE023B21f4Ffe2294025DE0AC30Ba7278D6Fd&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      value: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">});</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isSentTransactionResponse</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tx)) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // ... This will never be executed</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // tx can only be `SentTransactionResponse` or `FailedTransactionResponse`</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tx);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;code&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;transactionFailed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;error&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;This is an error message&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;request&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;code&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;sendTransaction&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;expires&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1699443005</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;identifier&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ts-sdk-1699442705965-0x153824576D03629b264683B430bBF9AcEA1d0975&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;issued&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1699442705</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;network&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;137&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;transactions&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;to&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x839eE023B21f4Ffe2294025DE0AC30Ba7278D6Fd&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;type&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;transaction&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;value&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x00&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      ],</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;wallet&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x4d4EE1b8583e31fe789eAF2e1b6e011C220c10B6&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;simulations&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;executed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;gasLimit&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">7908</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;gasUsed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5931</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;reason&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;This is an error message :)&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;result&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">null</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;succeeded&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>","isPage":false,"text":"\nAn In-Game Wallet pre-empts failing transactions by simulating them on the network before actual submission. If the simulation fails, the transaction is not sent, and a FailedTransactionResponse is returned.\nTo view the full response object, see the wallet Response payloads section.\nimport { Sequence, isSentTransactionResponse } from &quot;@0xsequence/waas&quot;;\n \nconst waas = new SequenceWaaS(\n  {\n    projectAccessKey: `${process.env.PROJECT_ACCESS_KEY}`,\n    waasConfigKey: `${process.env.WAAS_CONFIG_KEY}`,\n    network: &quot;arbitrum-nova&quot;,\n  }\n);\n \nawait waas.signIn({ idToken }, &quot;Session name&quot;);\n \nconst tx = await waas.sendTransaction({\n  chainId: 137,\n  transactions: [\n    {\n      // This address always fails on Polygon, give it a try :D\n      to: &quot;0x839eE023B21f4Ffe2294025DE0AC30Ba7278D6Fd&quot;,\n      value: &quot;0&quot;,\n    },\n  ],\n});\n \nif (isSentTransactionResponse(tx)) {\n  // ... This will never be executed\n} else {\n  // tx can only be `SentTransactionResponse` or `FailedTransactionResponse`\n  console.log(tx);\n}\n{\n  &quot;code&quot;: &quot;transactionFailed&quot;,\n  &quot;data&quot;: {\n    &quot;error&quot;: &quot;This is an error message&quot;,\n    &quot;request&quot;: {\n      &quot;code&quot;: &quot;sendTransaction&quot;,\n      &quot;expires&quot;: 1699443005,\n      &quot;identifier&quot;: &quot;ts-sdk-1699442705965-0x153824576D03629b264683B430bBF9AcEA1d0975&quot;,\n      &quot;issued&quot;: 1699442705,\n      &quot;network&quot;: &quot;137&quot;,\n      &quot;transactions&quot;: [\n        {\n          &quot;data&quot;: &quot;0x&quot;,\n          &quot;to&quot;: &quot;0x839eE023B21f4Ffe2294025DE0AC30Ba7278D6Fd&quot;,\n          &quot;type&quot;: &quot;transaction&quot;,\n          &quot;value&quot;: &quot;0x00&quot;\n        }\n      ],\n      &quot;wallet&quot;: &quot;0x4d4EE1b8583e31fe789eAF2e1b6e011C220c10B6&quot;\n    },\n    &quot;simulations&quot;: [\n      {\n        &quot;executed&quot;: true,\n        &quot;gasLimit&quot;: 7908,\n        &quot;gasUsed&quot;: 5931,\n        &quot;reason&quot;: &quot;This is an error message :)&quot;,\n        &quot;result&quot;: null,\n        &quot;succeeded&quot;: false\n      }\n    ]\n  }\n}","title":"Failed transaction response","titles":["Transaction receipts"]},"610":{"href":"/solutions/wallets/embedded-wallet/examples/validation#validation","html":"</header>\n<p>Users with Auth + Embedded Wallet go through two distinct flows based on the login method:</p>\n","isPage":true,"text":"\nUsers with Auth + Embedded Wallet go through two distinct flows based on the login method:\n","title":"Validation","titles":[]},"611":{"href":"/solutions/wallets/embedded-wallet/examples/validation#email-login-one-time-code","html":"\n<p>For users logging in with an email, Amazon Cognito sends a one-time code to validate their identity. This is a trusted method that does not require additional verification.</p>\n","isPage":false,"text":"\nFor users logging in with an email, Amazon Cognito sends a one-time code to validate their identity. This is a trusted method that does not require additional verification.\n","title":"Email login (one-time code)","titles":["Validation",null]},"612":{"href":"/solutions/wallets/embedded-wallet/examples/validation#social-login","html":"\n<p>Users who log in via established social auth providers like Google or Facebook don&#x27;t need additional validation. However, when logging in using a custom provider, we cannot guarantee sufficient protection of user&#x27;s identity. Due to this, we might require additional verification by asking the user to provide a one-time code we send to their email address.</p>\n<p>Please contact Sequence support if you wish to discuss whether your authentication provider can be considered trusted.</p>\n","isPage":false,"text":"\nUsers who log in via established social auth providers like Google or Facebook don&#x27;t need additional validation. However, when logging in using a custom provider, we cannot guarantee sufficient protection of user&#x27;s identity. Due to this, we might require additional verification by asking the user to provide a one-time code we send to their email address.\nPlease contact Sequence support if you wish to discuss whether your authentication provider can be considered trusted.\n","title":"Social login","titles":["Validation",null]},"613":{"href":"/solutions/wallets/embedded-wallet/examples/validation#validation-status","html":"\n<p>To check the validation status of the current session, use the <code>isSessionValid</code> method. This returns <code>true</code> for email login and trusted social logins and <code>false</code> for custom logins until email validation is complete.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> isValid</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> waas.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isSessionValid</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(isValid);</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>true</span></span></code></pre>\n","isPage":false,"text":"\nTo check the validation status of the current session, use the isSessionValid method. This returns true for email login and trusted social logins and false for custom logins until email validation is complete.\nconst isValid = await waas.isSessionValid();\nconsole.log(isValid);\ntrue\n","title":"Validation status","titles":["Validation"]},"614":{"href":"/solutions/wallets/embedded-wallet/examples/validation#trigger-session-validation","html":"\n<p>Manually trigger a session validation with the <code>validateSession</code> method. This will send a code to the user&#x27;s email. If validated within 10 minutes, the method returns <code>true</code>; otherwise, it returns <code>false</code>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> waas.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">validateSession</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>true</span></span></code></pre>\n<p>Once user receives the code, he can validate the session with the <code>finishValidateSession</code> method that takes the code as an argument. If the code is valid, the method returns <code>true</code>; otherwise, it returns <code>false</code>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> waas.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">finishValidateSession</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;123456&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>true</span></span></code></pre>\n","isPage":false,"text":"\nManually trigger a session validation with the validateSession method. This will send a code to the user&#x27;s email. If validated within 10 minutes, the method returns true; otherwise, it returns false.\nconst result = await waas.validateSession();\ntrue\nOnce user receives the code, he can validate the session with the finishValidateSession method that takes the code as an argument. If the code is valid, the method returns true; otherwise, it returns false.\nconst result = await waas.finishValidateSession(&quot;123456&quot;);\ntrue\n","title":"Trigger session validation","titles":["Validation","Validation status"]},"615":{"href":"/solutions/wallets/embedded-wallet/examples/validation#onvalidationrequired-callback","html":"\n","isPage":false,"text":"\n","title":"onValidationRequired callback","titles":["Validation","Validation status","Trigger session validation"]},"616":{"href":"/solutions/wallets/embedded-wallet/examples/validation#control-session-validation","html":"\n<p>The <strong><code>onValidationRequired</code></strong> callback is used to determine the need for session validation during actions like sending transactions or signing messages. If the callback returns <strong><code>true</code></strong>, it triggers session validation. If it returns <strong><code>false</code></strong>, the related action is cancelled. This mechanism ensures that only validated sessions can proceed with sensitive operations.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> waas.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendERC20</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  validation: {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    onValidationRequired</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  chainId: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">42161</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  token: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x6b175474e89094c44da98b954eedeac495271d0f&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// DAI</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x27CabC9700EE6Db2797b6AC1e1eCe81C72A2cD8D&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Recipient</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  value: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;200000000000000000000&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 200 DAI</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">});</span></span></code></pre>\n","isPage":false,"text":"\nThe onValidationRequired callback is used to determine the need for session validation during actions like sending transactions or signing messages. If the callback returns true, it triggers session validation. If it returns false, the related action is cancelled. This mechanism ensures that only validated sessions can proceed with sensitive operations.\nconst tx = await waas.sendERC20({\n  validation: {\n    onValidationRequired: () =&gt; true,\n  },\n  chainId: 42161,\n  token: &quot;0x6b175474e89094c44da98b954eedeac495271d0f&quot;, // DAI\n  to: &quot;0x27CabC9700EE6Db2797b6AC1e1eCe81C72A2cD8D&quot;, // Recipient\n  value: &quot;200000000000000000000&quot;, // 200 DAI\n});\n","title":"Control Session Validation","titles":["Validation","Validation status"]},"617":{"href":"/solutions/wallets/embedded-wallet/examples/validation#listen-for-session-validations","html":"\n<p>Events like transaction sends may silently prompt session validation. Use the <code>onValidationRequired</code> hook to catch such instances.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">waas.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">onValidationRequired</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Session has been triggered for validation&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">});</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> waas.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ chainId: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }, { to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x...&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, value: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;1&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> });</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>Session has been triggered for validation</span></span></code></pre>\n","isPage":false,"text":"\nEvents like transaction sends may silently prompt session validation. Use the onValidationRequired hook to catch such instances.\nwaas.onValidationRequired(() =&gt; {\n  console.log(&quot;Session has been triggered for validation&quot;);\n});\n \nawait waas.sendTransaction({ chainId: 1 }, { to: &quot;0x...&quot;, value: &quot;1&quot; });\nSession has been triggered for validation\n","title":"Listen for session validations","titles":["Validation","Validation status"]},"618":{"href":"/solutions/wallets/embedded-wallet/examples/validation#manage-automatic-session-validation","html":"\n<p>Automatic session validation occurs during actions that require validation. Manage this process using the onValidationRequired hook.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> waas.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  chainId: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  validation: {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    onValidationRequired</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Session has been triggered for validation&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x061150e5574716DBb1a2cdf54b3DcE9F94395f65&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  value: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;1&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">});</span></span></code></pre>\n<p>By returning <code>true</code> or <code>false</code> from the <code>onValidationRequired</code> hook, you either continue or cancel the action, respectively.</p>","isPage":false,"text":"\nAutomatic session validation occurs during actions that require validation. Manage this process using the onValidationRequired hook.\nconst tx = await waas.sendTransaction({\n  chainId: 1,\n  validation: {\n    onValidationRequired: () =&gt; {\n      console.log(&quot;Session has been triggered for validation&quot;);\n      return true;\n    },\n  },\n  to: &quot;0x061150e5574716DBb1a2cdf54b3DcE9F94395f65&quot;,\n  value: &quot;1&quot;,\n});\nBy returning true or false from the onValidationRequired hook, you either continue or cancel the action, respectively.","title":"Manage Automatic session validation","titles":["Validation"]},"619":{"href":"/solutions/wallets/universal-wallet/examples/auth-address#authenticate-users-with-message-signature","html":"</header>\n","isPage":true,"text":"\n","title":"Authenticate Users with Message Signature","titles":[]},"620":{"href":"/solutions/wallets/universal-wallet/examples/auth-address#ask-for-the-wallet-address","html":"\n<p>To get the user&#x27;s Sequence wallet address:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> wallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sequence.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address)</span></span></code></pre>\n","isPage":false,"text":"\nTo get the user&#x27;s Sequence wallet address:\nconst wallet = sequence.getWallet()\nconst address = wallet.getAddress()\nconsole.log(address)\n","title":"Ask for the wallet address","titles":["Authenticate Users with Message Signature"]},"621":{"href":"/solutions/wallets/universal-wallet/examples/auth-address#authenticate-wallet","html":"\n<p>In many cases, you&#x27;ll want your users to connect and then verify they do control this wallet address. Applications typically do this by asking the user\nto sign a message with their wallet, and then verify the signature from the user to ensure its integrity.</p>\n<p>As this is such a common workflow, Sequence can automatically authenticate the account address at the same time\nwhile the user is prompt to connect their wallet to your dapp. This allows the user experience to be simpler and\nmore seamless.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { sequence } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;0xsequence&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> wallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sequence.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> connectDetails</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  app: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Your Dapp name&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  authorize: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // &lt;---&lt;&lt;&lt; this will automatically sign+verify a EIP712 message when user clicks &quot;Connect&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n<p>It will look like this to your users:</p>\n<img alt=\"Sequence on-demand sign in, connect\" src=\"/img/authorize_connect.png\" width=\"400\"/>\n<p>In the above example, we pass <code>authorize: true</code> to the <code>connect()</code> function, which will automatically have the user\nsign a <strong>EIP712 signed message</strong> to prove their identity. This allows you to then easily authenticate the connected\nwallet address with absolute certainty.</p>\n<p>You can find the signed message proof returned in <code>connectDetails.proof</code>, which is an EIP712 signed object using\na simple convention from <a href=\"https://github.com/0xsequence/ethauth.js\">ethauth</a>. NOTE: EIP712 allows you to use an actual object for\nsigning instead of just a plain-text string.</p>\n","isPage":false,"text":"\nIn many cases, you&#x27;ll want your users to connect and then verify they do control this wallet address. Applications typically do this by asking the user\nto sign a message with their wallet, and then verify the signature from the user to ensure its integrity.\nAs this is such a common workflow, Sequence can automatically authenticate the account address at the same time\nwhile the user is prompt to connect their wallet to your dapp. This allows the user experience to be simpler and\nmore seamless.\nimport { sequence } from &#x27;0xsequence&#x27;\n \nconst wallet = sequence.getWallet()\n \nconst connectDetails = await wallet.connect({\n  app: &#x27;Your Dapp name&#x27;,\n  authorize: true // &lt;---&lt;&lt;&lt; this will automatically sign+verify a EIP712 message when user clicks &quot;Connect&quot;\n})\nIt will look like this to your users:\n\nIn the above example, we pass authorize: true to the connect() function, which will automatically have the user\nsign a EIP712 signed message to prove their identity. This allows you to then easily authenticate the connected\nwallet address with absolute certainty.\nYou can find the signed message proof returned in connectDetails.proof, which is an EIP712 signed object using\na simple convention from ethauth. NOTE: EIP712 allows you to use an actual object for\nsigning instead of just a plain-text string.\n","title":"Authenticate wallet","titles":["Authenticate Users with Message Signature"]},"622":{"href":"/solutions/wallets/universal-wallet/examples/auth-address#authenticate-wallet-server-side","html":"\n<p>The above example demonstrates how to connect and verify the user&#x27;s identity in your dapp on the client-side,\nbut if you&#x27;d like to authenticate the Sequence authorization proof on your server, then you can do so with the following snippet:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { ValidateSequenceWalletProof } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/auth&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { commons, v2 } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/core&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { ETHAuth } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/ethauth&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { trackers } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/sessions&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> *</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> as</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;ethers&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// ...</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> rpcUrl</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;https://polygon-mainnet.infura.io/v3/&lt;your infura key here&gt;&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> provider</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.providers.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">JsonRpcProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(rpcUrl)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// create an EIP-6492-aware ETHAuth proof validator</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> validator</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> ValidateSequenceWalletProof</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> commons.reader.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">OnChainReader</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(provider),</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> trackers.remote.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">RemoteConfigTracker</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;https://sessions.sequence.app&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  v2.DeployedWalletContext</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ethauth</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> ETHAuth</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validator)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethauth.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">configJsonRpcProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(rpcUrl)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">try</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> proof</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethauth.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">decodeProof</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(connectDetails.proof.proofString)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`proof for address ${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">proof</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">address</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">} is valid`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (err) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`invalid proof -- do not trust address: ${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">err</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>See the <a href=\"https://github.com/0xsequence/go-sequence\">Go Sequence SDK</a> on using Sequence in your Go applications.</p>\n<p>If your server is written in a language other than Javascript/Typescript or Go, all you have to do is validate\nthe signature with <a href=\"https://eips.ethereum.org/EIPS/eip-1271\">EIP1271, the standard method for validating signed messages for a smart wallet</a>.</p>\n<p>As always, if you have any questions or require help, reach out to us on <a href=\"https://discord.gg/sequence\">Discord</a>.</p>","isPage":false,"text":"\nThe above example demonstrates how to connect and verify the user&#x27;s identity in your dapp on the client-side,\nbut if you&#x27;d like to authenticate the Sequence authorization proof on your server, then you can do so with the following snippet:\nimport { ValidateSequenceWalletProof } from &#x27;@0xsequence/auth&#x27;\nimport { commons, v2 } from &#x27;@0xsequence/core&#x27;\nimport { ETHAuth } from &#x27;@0xsequence/ethauth&#x27;\nimport { trackers } from &#x27;@0xsequence/sessions&#x27;\nimport * as ethers from &#x27;ethers&#x27;\n \n// ...\n \nconst rpcUrl = &#x27;https://polygon-mainnet.infura.io/v3/&lt;your infura key here&gt;&#x27;\nconst provider = new ethers.providers.JsonRpcProvider(rpcUrl)\n \n// create an EIP-6492-aware ETHAuth proof validator\nconst validator = ValidateSequenceWalletProof(\n  () =&gt; new commons.reader.OnChainReader(provider),\n  new trackers.remote.RemoteConfigTracker(&#x27;https://sessions.sequence.app&#x27;),\n  v2.DeployedWalletContext\n)\nconst ethauth = new ETHAuth(validator)\nawait ethauth.configJsonRpcProvider(rpcUrl)\n \ntry {\n  const proof = await ethauth.decodeProof(connectDetails.proof.proofString)\n  console.log(`proof for address ${proof.address} is valid`)\n} catch (err) {\n  console.log(`invalid proof -- do not trust address: ${err}`)\n}\nSee the Go Sequence SDK on using Sequence in your Go applications.\nIf your server is written in a language other than Javascript/Typescript or Go, all you have to do is validate\nthe signature with EIP1271, the standard method for validating signed messages for a smart wallet.\nAs always, if you have any questions or require help, reach out to us on Discord.","title":"Authenticate wallet server-side","titles":["Authenticate Users with Message Signature"]},"623":{"href":"/solutions/wallets/universal-wallet/examples/building-backends#building-backends-with-sequence","html":"</header>\n","isPage":true,"text":"\n","title":"Building Backends with Sequence","titles":[]},"624":{"href":"/solutions/wallets/universal-wallet/examples/building-backends#nodejs","html":"\n<p>The <a href=\"https://github.com/0xsequence/sequence.js\">0xsequence</a> package which is available for browser / client use, also works perfectly on nodejs backends\nwritten in Javascript or Typescript.</p>\n","isPage":false,"text":"\nThe 0xsequence package which is available for browser / client use, also works perfectly on nodejs backends\nwritten in Javascript or Typescript.\n","title":"nodejs","titles":["Building Backends with Sequence",null]},"625":{"href":"/solutions/wallets/universal-wallet/examples/building-backends#go","html":"\n<p>A complete Sequence SDK is also available in Go: <a href=\"https://github.com/0xsequence/go-sequence\">https://github.com/0xsequence/go-sequence</a>.</p>\n<p><a href=\"https://github.com/0xsequence/go-sequence\">go-sequence</a> is the equivalent of <a href=\"https://github.com/0xsequence/sequence.js\">0xsequence</a>\nbut for Go / Golang backends. In fact, all of Sequence&#x27;s infrastructure is written in Go and is built with <a href=\"https://github.com/0xsequence/go-sequence\">go-sequence</a>.</p>\n","isPage":false,"text":"\nA complete Sequence SDK is also available in Go: https://github.com/0xsequence/go-sequence.\ngo-sequence is the equivalent of 0xsequence\nbut for Go / Golang backends. In fact, all of Sequence&#x27;s infrastructure is written in Go and is built with go-sequence.\n","title":"Go","titles":["Building Backends with Sequence",null]},"626":{"href":"/solutions/wallets/universal-wallet/examples/building-backends#ethkit","html":"\n<p>As part of the Sequence open source tools, our team has also built <a href=\"https://github.com/0xsequence/ethkit\">ethkit</a>, which\nis an Ethereum dev toolkit for Go backends. <a href=\"https://github.com/0xsequence/ethkit\">ethkit</a> supports EOA wallets,\nand you can think of it like <code>ethers.js</code> but for Go.</p>\n","isPage":false,"text":"\nAs part of the Sequence open source tools, our team has also built ethkit, which\nis an Ethereum dev toolkit for Go backends. ethkit supports EOA wallets,\nand you can think of it like ethers.js but for Go.\n","title":"ethkit","titles":["Building Backends with Sequence",null]},"627":{"href":"/solutions/wallets/universal-wallet/examples/building-backends#support-for-other-backend-languages","html":"\n<p>If your backend services are written in a language other than JS or Go, you can still easily integrate Sequence,\nas Sequence is really just a standard Ethereum client library with some extra features. In many cases, the extra\nfeatures are best utilized on the client-side / dapp.</p>\n<p>If your situation for example is a Python or Java backend where you&#x27;d like to verify signatures from a Sequence Wallet,\nwell then, you can call the standard <a href=\"https://eips.ethereum.org/EIPS/eip-1271\">EIP1271</a> function for the account address\nfrom your backend.</p>\n<p>If you&#x27;d like to use the Sequence&#x27;s Meta-Transaction capabilities, see <a href=\"/guides/building-relaying-server\">Building Relaying Server with Sequence</a>.\ndescription: Learn how to build backends with Sequence for web3 gaming platforms using nodejs or Go. Check out the Sequence SDK for Go and ethkit, an Ethereum dev toolkit. Even if you use other backend languages like Python or Java, you can still integrate Sequence easily by calling standard</p>","isPage":false,"text":"\nIf your backend services are written in a language other than JS or Go, you can still easily integrate Sequence,\nas Sequence is really just a standard Ethereum client library with some extra features. In many cases, the extra\nfeatures are best utilized on the client-side / dapp.\nIf your situation for example is a Python or Java backend where you&#x27;d like to verify signatures from a Sequence Wallet,\nwell then, you can call the standard EIP1271 function for the account address\nfrom your backend.\nIf you&#x27;d like to use the Sequence&#x27;s Meta-Transaction capabilities, see Building Relaying Server with Sequence.\ndescription: Learn how to build backends with Sequence for web3 gaming platforms using nodejs or Go. Check out the Sequence SDK for Go and ethkit, an Ethereum dev toolkit. Even if you use other backend languages like Python or Java, you can still integrate Sequence easily by calling standard","title":"Support for other backend languages","titles":["Building Backends with Sequence",null]},"628":{"href":"/solutions/wallets/universal-wallet/examples/send-batch-transactions#sending-a-batch-of-transactions","html":"</header>\n<p>Likewise, bundling multiple transactions to be sent in a single native transaction is equally as easy:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: recipient1Address,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  value: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000000000000000000</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: recipient2Address,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  value: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000000000000000000</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> response</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([transaction1, transaction2])</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(response)</span></span></code></pre>\n<p>The transactions don&#x27;t have to be the same token or even token standard either.\nYou can mix and match:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc20Interface</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function transfer(address _to, uint256 _value)&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc721Interface</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function safeTransferFrom(address _from, address _to, uint256 _tokenId)&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc1155Interface</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data)&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc20Data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc20Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;transfer&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [recipient2Address, amount2]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc721Data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc721Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;safeTransferFrom&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [address, recipient3Address, amount3]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc1155Data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc1155Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;safeTransferFrom&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [address, recipient4Address, token4Id, amount4, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transactions</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  { to: recipient1Address, value: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;1000000000000000000&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  { to: daiContractAddress, data: erc20Data },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  { to: erc721ContractAddress, data: erc721Data },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  { to: erc1155ContractAddress, data: erc1155Data }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> response</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(transactions)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(response)</span></span></code></pre>","isPage":true,"text":"\nLikewise, bundling multiple transactions to be sent in a single native transaction is equally as easy:\nconst transaction1 = {\n  to: recipient1Address,\n  value: 1000000000000000000\n}\n \nconst transaction2 = {\n  to: recipient2Address,\n  value: 1000000000000000000\n}\n \nconst signer = wallet.getSigner()\nconst response = await signer.sendTransaction([transaction1, transaction2])\nconsole.log(response)\nThe transactions don&#x27;t have to be the same token or even token standard either.\nYou can mix and match:\nconst erc20Interface = new ethers.utils.Interface([\n  &#x27;function transfer(address _to, uint256 _value)&#x27;\n])\nconst erc721Interface = new ethers.utils.Interface([\n  &#x27;function safeTransferFrom(address _from, address _to, uint256 _tokenId)&#x27;\n])\nconst erc1155Interface = new ethers.utils.Interface([\n  &#x27;function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data)&#x27;\n])\n \nconst erc20Data = erc20Interface.encodeFunctionData(\n  &#x27;transfer&#x27;, [recipient2Address, amount2]\n)\nconst erc721Data = erc721Interface.encodeFunctionData(\n  &#x27;safeTransferFrom&#x27;, [address, recipient3Address, amount3]\n)\nconst erc1155Data = erc1155Interface.encodeFunctionData(\n  &#x27;safeTransferFrom&#x27;, [address, recipient4Address, token4Id, amount4, &#x27;0x&#x27;]\n)\n \nconst transactions = [\n  { to: recipient1Address, value: &#x27;1000000000000000000&#x27; },\n  { to: daiContractAddress, data: erc20Data },\n  { to: erc721ContractAddress, data: erc721Data },\n  { to: erc1155ContractAddress, data: erc1155Data }\n]\n \nconst signer = wallet.getSigner()\nconst response = await signer.sendTransaction(transactions)\nconsole.log(response)","title":"Sending a Batch of Transactions","titles":[]},"629":{"href":"/solutions/wallets/universal-wallet/examples/send-erc1155#sending-erc-1155-collectible-tokens","html":"</header>\n<p>Sending an ERC-1155 collectible is similar to sending an ERC-20 token.\nThe only notable difference is in the contract standard itself:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc1155Interface</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data)&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Encode the transfer of the collectible to recipient</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc1155Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;safeTransferFrom&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [address, recipientAddress, tokenId, amount, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: erc1155TokenAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txnResponse</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(transaction)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txnResponse)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span></code></pre>\n<p>With batching functionality, you can send multiple token transfers in a single native transaction:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc1155Interface</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data)&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Encode two different ERC-1155 token transfers</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> data1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc1155Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;safeTransferFrom&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [address, recipient1Address, token1Id, amount1, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> data2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc1155Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;safeTransferFrom&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [address, recipient2Address, token2Id, amount2, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: erc1155ContractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: data1</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: erc1155ContractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: data2</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Send a multiple transactions as a single bundle which is executed as one transaction on-chain.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txnResponse</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransactionBatch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([transaction1, transaction2])</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txnResponse)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span></code></pre>","isPage":true,"text":"\nSending an ERC-1155 collectible is similar to sending an ERC-20 token.\nThe only notable difference is in the contract standard itself:\nconst erc1155Interface = new ethers.utils.Interface([\n  &#x27;function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data)&#x27;\n])\n \n// Encode the transfer of the collectible to recipient\nconst address = await wallet.getAddress()\nconst data = erc1155Interface.encodeFunctionData(\n  &#x27;safeTransferFrom&#x27;, [address, recipientAddress, tokenId, amount, &#x27;0x&#x27;]\n)\n \nconst transaction = {\n  to: erc1155TokenAddress,\n  data\n}\n \nconst signer = wallet.getSigner()\nconst txnResponse = await signer.sendTransaction(transaction)\nconsole.log(txnResponse)\n \nWith batching functionality, you can send multiple token transfers in a single native transaction:\nconst erc1155Interface = new ethers.utils.Interface([\n  &#x27;function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data)&#x27;\n])\n \n// Encode two different ERC-1155 token transfers\nconst data1 = erc1155Interface.encodeFunctionData(\n  &#x27;safeTransferFrom&#x27;, [address, recipient1Address, token1Id, amount1, &#x27;0x&#x27;]\n)\nconst data2 = erc1155Interface.encodeFunctionData(\n  &#x27;safeTransferFrom&#x27;, [address, recipient2Address, token2Id, amount2, &#x27;0x&#x27;]\n)\n \nconst transaction1 = {\n  to: erc1155ContractAddress,\n  data: data1\n}\nconst transaction2 = {\n  to: erc1155ContractAddress,\n  data: data2\n}\n \n// Send a multiple transactions as a single bundle which is executed as one transaction on-chain.\nconst signer = wallet.getSigner()\nconst txnResponse = await signer.sendTransactionBatch([transaction1, transaction2])\nconsole.log(txnResponse)\n ","title":"Sending ERC-1155 (Collectible) Tokens","titles":[]},"630":{"href":"/solutions/wallets/universal-wallet/examples/send-erc20#sending-erc-20-tokens","html":"</header>\n<p>You can ask the wallet to send a single ERC-20 token transfer:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc20Interface</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function transfer(address _to, uint256 _value)&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Encode an ERC-20 token transfer to recipient of the specified amount</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc20Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;transfer&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [recipientAddress, amount]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: daiContractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txnResponse</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(transaction)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txnResponse)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span></code></pre>\n<p>With batching functionality, you can send multiple token transfers in a single native transaction:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc20Interface</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function transfer(address _to, uint256 _value)&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Encode two different ERC-20 token transfers</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> data1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc20Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;transfer&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [recipient1Address, amount1]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> data2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc20Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;transfer&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [recipient2Address, amount2]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: daiContractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: data1</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: daiContractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: data2</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Send a multiple transactions as a single bundle which is executed as one transaction on-chain.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txnResponse</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([transaction1, transaction2])</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txnResponse)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span></code></pre>\n","isPage":true,"text":"\nYou can ask the wallet to send a single ERC-20 token transfer:\nconst erc20Interface = new ethers.utils.Interface([\n  &#x27;function transfer(address _to, uint256 _value)&#x27;\n])\n \n// Encode an ERC-20 token transfer to recipient of the specified amount\nconst data = erc20Interface.encodeFunctionData(\n  &#x27;transfer&#x27;, [recipientAddress, amount]\n)\n \nconst transaction = {\n  to: daiContractAddress,\n  data\n}\n \nconst signer = wallet.getSigner()\nconst txnResponse = await signer.sendTransaction(transaction)\nconsole.log(txnResponse)\n \nWith batching functionality, you can send multiple token transfers in a single native transaction:\nconst erc20Interface = new ethers.utils.Interface([\n  &#x27;function transfer(address _to, uint256 _value)&#x27;\n])\n \n// Encode two different ERC-20 token transfers\nconst data1 = erc20Interface.encodeFunctionData(\n  &#x27;transfer&#x27;, [recipient1Address, amount1]\n)\nconst data2 = erc20Interface.encodeFunctionData(\n  &#x27;transfer&#x27;, [recipient2Address, amount2]\n)\n \nconst transaction1 = {\n  to: daiContractAddress,\n  data: data1\n}\n \nconst transaction2 = {\n  to: daiContractAddress,\n  data: data2\n}\n \n// Send a multiple transactions as a single bundle which is executed as one transaction on-chain.\nconst signer = wallet.getSigner()\nconst txnResponse = await signer.sendTransaction([transaction1, transaction2])\nconsole.log(txnResponse)\n \n","title":"Sending ERC-20 Tokens","titles":[]},"631":{"href":"/solutions/wallets/universal-wallet/examples/send-erc20#description-sequence-is-a-web3-gaming-platform-that-allows-users-to-send-erc-20-tokens-easily-using-a-universal-wallet-with-a-simple-code-snippet-users-can-send-a-single-erc-20-token-transfer-to-a-recipient-additionally-users-can-batch-multiple-token-transfers-into-a-single-transaction-f","html":"\n<hr/>\n","isPage":false,"text":"\n\n","title":"description: Sequence is a Web3 gaming platform that allows users to send ERC-20 tokens easily using a universal wallet. With a simple code snippet, users can send a single ERC-20 token transfer to a recipient. Additionally, users can batch multiple token transfers into a single transaction f","titles":["Sending ERC-20 Tokens"]},"632":{"href":"/solutions/wallets/universal-wallet/examples/send-erc20#title-sequence---web3-gaming-platform---universal-wallet-send-erc20s","html":"\n<header>","isPage":false,"text":"\n","title":"title: Sequence - Web3 Gaming Platform - Universal Wallet Send ERC20s","titles":["Sending ERC-20 Tokens"]},"633":{"href":"/solutions/wallets/universal-wallet/examples/send-erc20#sending-erc-20-tokens-1","html":"</header>\n<p>You can ask the wallet to send a single ERC-20 token transfer:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc20Interface</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function transfer(address _to, uint256 _value)&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Encode an ERC-20 token transfer to recipient of the specified amount</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc20Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;transfer&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [recipientAddress, amount]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: daiContractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txnResponse</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(transaction)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txnResponse)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span></code></pre>\n<p>With batching functionality, you can send multiple token transfers in a single native transaction:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc20Interface</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function transfer(address _to, uint256 _value)&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Encode two different ERC-20 token transfers</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> data1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc20Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;transfer&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [recipient1Address, amount1]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> data2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc20Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;transfer&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [recipient2Address, amount2]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: daiContractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: data1</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: daiContractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: data2</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Send a multiple transactions as a single bundle which is executed as one transaction on-chain.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txnResponse</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([transaction1, transaction2])</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txnResponse)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span></code></pre>","isPage":false,"text":"\nYou can ask the wallet to send a single ERC-20 token transfer:\nconst erc20Interface = new ethers.utils.Interface([\n  &#x27;function transfer(address _to, uint256 _value)&#x27;\n])\n \n// Encode an ERC-20 token transfer to recipient of the specified amount\nconst data = erc20Interface.encodeFunctionData(\n  &#x27;transfer&#x27;, [recipientAddress, amount]\n)\n \nconst transaction = {\n  to: daiContractAddress,\n  data\n}\n \nconst signer = wallet.getSigner()\nconst txnResponse = await signer.sendTransaction(transaction)\nconsole.log(txnResponse)\n \nWith batching functionality, you can send multiple token transfers in a single native transaction:\nconst erc20Interface = new ethers.utils.Interface([\n  &#x27;function transfer(address _to, uint256 _value)&#x27;\n])\n \n// Encode two different ERC-20 token transfers\nconst data1 = erc20Interface.encodeFunctionData(\n  &#x27;transfer&#x27;, [recipient1Address, amount1]\n)\nconst data2 = erc20Interface.encodeFunctionData(\n  &#x27;transfer&#x27;, [recipient2Address, amount2]\n)\n \nconst transaction1 = {\n  to: daiContractAddress,\n  data: data1\n}\n \nconst transaction2 = {\n  to: daiContractAddress,\n  data: data2\n}\n \n// Send a multiple transactions as a single bundle which is executed as one transaction on-chain.\nconst signer = wallet.getSigner()\nconst txnResponse = await signer.sendTransaction([transaction1, transaction2])\nconsole.log(txnResponse)\n ","title":"Sending ERC-20 Tokens","titles":[]},"634":{"href":"/solutions/wallets/universal-wallet/examples/send-erc721#sending-erc-721-nft-tokens","html":"</header>\n<p>Sending an ERC-721 NFT is similar to sending an ERC-20 token.\nThe only notable difference is in the contract standard itself:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc721Interface</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function safeTransferFrom(address _from, address _to, uint256 _tokenId)&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Encode the transfer of the NFT tokenId to recipient</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc721Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;safeTransferFrom&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [address, recipientAddress, tokenId]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: erc721TokenAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txnResponse</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(transaction)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txnResponse)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span></code></pre>\n<p>With batching functionality, you can send multiple token transfers in a single native transaction:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc721Interface</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function safeTransferFrom(address _from, address _to, uint256 _tokenId)&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Encode two different ERC-721 token transfers</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> data1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc721Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;safeTransferFrom&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [address, recipient1Address, amount1]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> data2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc721Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;safeTransferFrom&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [address, recipient2Address, amount2]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: erc721ContractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: data1</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: erc721ContractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: data2</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Send a multiple transactions as a single bundle which is executed as one transaction on-chain.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txnResponse</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransactionBatch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([transaction1, transaction2])</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txnResponse)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span></code></pre>","isPage":true,"text":"\nSending an ERC-721 NFT is similar to sending an ERC-20 token.\nThe only notable difference is in the contract standard itself:\nconst erc721Interface = new ethers.utils.Interface([\n  &#x27;function safeTransferFrom(address _from, address _to, uint256 _tokenId)&#x27;\n])\n \n// Encode the transfer of the NFT tokenId to recipient\nconst address = await wallet.getAddress()\nconst data = erc721Interface.encodeFunctionData(\n  &#x27;safeTransferFrom&#x27;, [address, recipientAddress, tokenId]\n)\n \nconst transaction = {\n  to: erc721TokenAddress,\n  data\n}\n \nconst signer = wallet.getSigner()\nconst txnResponse = await signer.sendTransaction(transaction)\nconsole.log(txnResponse)\n \nWith batching functionality, you can send multiple token transfers in a single native transaction:\nconst erc721Interface = new ethers.utils.Interface([\n  &#x27;function safeTransferFrom(address _from, address _to, uint256 _tokenId)&#x27;\n])\n \n// Encode two different ERC-721 token transfers\nconst data1 = erc721Interface.encodeFunctionData(\n  &#x27;safeTransferFrom&#x27;, [address, recipient1Address, amount1]\n)\nconst data2 = erc721Interface.encodeFunctionData(\n  &#x27;safeTransferFrom&#x27;, [address, recipient2Address, amount2]\n)\n \nconst transaction1 = {\n  to: erc721ContractAddress,\n  data: data1\n}\n \nconst transaction2 = {\n  to: erc721ContractAddress,\n  data: data2\n}\n \n// Send a multiple transactions as a single bundle which is executed as one transaction on-chain.\nconst signer = wallet.getSigner()\nconst txnResponse = await signer.sendTransactionBatch([transaction1, transaction2])\nconsole.log(txnResponse)\n ","title":"Sending ERC-721 (NFT) Tokens","titles":[]},"635":{"href":"/solutions/wallets/universal-wallet/examples/send-transaction#sending-transactions","html":"</header>\n<p>Signing a transaction will only retrieve the signed payload.\nIf you want the wallet to actually dispatch the transaction to the network as well, that requires only a small modification to the previous example (note the change from <code>signTransactions</code> to <code>sendTransaction</code>):</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: recipientAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  value: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000000000000000000</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txnResponse</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(transaction)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txnResponse)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span></code></pre>","isPage":true,"text":"\nSigning a transaction will only retrieve the signed payload.\nIf you want the wallet to actually dispatch the transaction to the network as well, that requires only a small modification to the previous example (note the change from signTransactions to sendTransaction):\nconst transaction = {\n  to: recipientAddress,\n  value: 1000000000000000000\n}\n \nconst signer = wallet.getSigner()\nconst txnResponse = await signer.sendTransaction(transaction)\nconsole.log(txnResponse)\n ","title":"Sending Transactions","titles":[]}},"dirtCount":0,"index":[["❤️",{"2":{"456":1}}],["zero",{"0":{"508":1,"509":1},"2":{"504":4,"508":1,"509":1,"510":2}}],["zellic",{"0":{"418":1},"2":{"415":1}}],["zimbabwe",{"2":{"12":1}}],["7908",{"2":{"578":1,"609":1}}],["77541a3d09cdf2728417c1537d190be0998cc84f8aec95a4f1e823c91a007d97f276c2453be7f653fd73fb862b42fcee",{"2":{"553":1,"554":1}}],["712",{"0":{"515":1},"2":{"515":1}}],["7coinbase",{"2":{"427":1}}],["7f1",{"2":{"378":2}}],["7",{"0":{"402":1},"2":{"304":1,"305":1,"427":1,"480":1,"481":1,"548":1,"602":1}}],["721",{"0":{"243":1,"309":1,"634":1},"2":{"27":1,"48":1,"309":2,"634":2}}],["🖼️",{"2":{"256":1,"260":1,"483":1,"487":1}}],["👛",{"2":{"256":1,"260":1,"483":1,"487":1}}],["🔐🪪",{"2":{"256":1,"260":1,"483":1,"487":1}}],["⛓️",{"2":{"256":1,"260":1,"483":1,"487":1}}],["🪙",{"2":{"256":1,"260":1,"483":1,"487":1}}],["🦊",{"2":{"256":1,"260":1,"483":1,"487":1}}],["🧰",{"2":{"255":1,"259":1,"482":1,"486":1}}],["×",{"2":{"182":1}}],["^5",{"2":{"304":1,"480":1}}],["^1",{"2":{"304":1,"480":1}}],["^",{"2":{"182":1}}],["50",{"2":{"605":3}}],["500",{"2":{"548":1}}],["5931",{"2":{"578":1,"609":1}}],["54530968763798660137294927684252503703134533114052628080002308208148824588621",{"2":{"183":1}}],["5",{"0":{"178":1,"201":1,"318":1,"400":1,"570":1},"2":{"107":1,"154":3,"177":3,"178":5,"305":1,"411":1,"472":1,"481":1,"520":2,"521":3,"548":1}}],["`failedtransactionresponse`",{"2":{"609":1}}],["`senttransactionresponse`",{"2":{"609":1}}],["`sequenceconfig`",{"2":{"378":2}}],["`wallet",{"2":{"598":1}}],["`walletproxybytecode`",{"2":{"525":1}}],["`mainmodule`",{"2":{"525":1}}],["`authorize",{"2":{"316":1}}],["`invalid",{"2":{"274":1,"622":1}}],["`proof",{"2":{"274":1,"622":1}}],["`testabi",{"2":{"120":1}}],["`",{"2":{"65":2,"274":1,"316":1,"595":2,"597":2,"598":3,"605":2,"606":2,"608":2,"609":2,"622":1}}],["`$",{"2":{"65":2,"595":2,"597":2,"598":2,"605":2,"606":2,"608":2,"609":2}}],["$",{"2":{"58":1,"79":1,"274":2,"598":1,"622":2}}],["||",{"2":{"57":1,"602":2}}],["|",{"2":{"57":4,"58":1,"248":1,"532":1,"535":1,"543":4,"548":3,"555":1,"575":3,"578":2}}],["+=",{"2":{"69":2,"94":1,"107":2,"370":1}}],["+",{"0":{"364":1},"1":{"365":1},"2":{"56":1,"73":1,"76":1,"93":1,"159":1,"185":1,"195":1,"196":2,"197":1,"198":1,"209":1,"230":1,"280":1,"301":1,"339":1,"364":1,"366":2,"369":1,"372":1,"404":1,"471":1,"514":2,"521":4,"593":2,"603":1,"610":1}}],["+1",{"2":{"49":2}}],["815189234z",{"2":{"605":1}}],["815189174z",{"2":{"605":1}}],["819722082z",{"2":{"605":1}}],["860",{"2":{"576":1}}],["8545",{"2":{"496":1}}],["8simple",{"2":{"427":1}}],["8080",{"2":{"372":2}}],["8",{"0":{"403":1},"2":{"49":1,"378":2}}],["90",{"2":{"590":1,"592":1}}],["9biconomy",{"2":{"427":1}}],["9light",{"2":{"427":1}}],["9kernel",{"2":{"427":1}}],["911",{"2":{"404":1}}],["96",{"2":{"57":2}}],["9",{"0":{"404":1},"2":{"48":2}}],["60",{"2":{"602":1}}],["66597",{"2":{"440":1}}],["66635",{"2":{"184":1}}],["66668",{"2":{"86":1}}],["66669",{"2":{"86":1}}],["6modular",{"2":{"427":1}}],["6492",{"2":{"274":1,"392":1,"622":1}}],["68657",{"2":{"86":1}}],["6f1",{"2":{"81":1}}],["6",{"0":{"319":1,"401":1,"571":1},"2":{"58":1,"364":1,"413":1,"465":1}}],["65548",{"2":{"49":2}}],["65535",{"2":{"529":1}}],["65535required",{"2":{"518":1}}],["65539",{"2":{"43":2,"44":1}}],["65538",{"2":{"43":2,"44":1}}],["65537",{"2":{"43":2,"44":1}}],["65556",{"2":{"37":1}}],["6x",{"2":{"37":1,"49":1}}],["42161",{"2":{"608":1,"616":1}}],["42",{"2":{"605":4}}],["4safe71",{"2":{"427":1}}],["4444",{"2":{"381":3}}],["462de2756e45c93698b89ada5ba4a3c9d1bfb9fb354ad2e7f36f1a9fefbc550b",{"2":{"248":4}}],["4859",{"2":{"214":1,"215":1,"217":1,"218":1,"221":1,"222":1,"223":1,"225":1,"226":1}}],["486",{"2":{"3":8}}],["4",{"0":{"178":1,"199":1,"317":1,"399":1,"438":1,"569":1},"1":{"200":1,"439":1,"440":1},"2":{"37":1,"154":1,"177":1,"178":3,"411":1,"515":1,"520":1}}],["\tmessage",{"2":{"515":1}}],["\tmetadataoptions",{"2":{"230":1,"239":1,"241":1,"243":1}}],["\tdomain",{"2":{"515":1}}],["\tprimarytype",{"2":{"515":1}}],["\tnativebalance",{"2":{"232":1}}],["\tnftbalances",{"2":{"230":1}}],["\tcontractaddress",{"2":{"230":1,"243":1}}],["\tconst",{"2":{"141":1,"142":1,"143":1,"167":4,"168":3,"169":1}}],["\tfilter",{"2":{"239":2,"241":1}}],["\tfmt",{"2":{"229":1,"230":1,"232":1,"239":1,"241":1,"243":1}}],["\tfgettransactionhistoryargs",{"2":{"171":1}}],["\tfgettokensuppliesmapargs",{"2":{"169":1}}],["\tfgetbalanceupdatesargs",{"2":{"170":1}}],["\tseqindexer",{"2":{"229":1,"230":1,"232":1,"239":1,"241":1,"243":1}}],["\tincludemetadata",{"2":{"229":2,"230":2,"239":1,"243":1}}],["\tif",{"2":{"167":1,"168":1,"229":1,"230":1,"232":1,"239":1,"241":1,"243":1}}],["\tue",{"2":{"180":1,"181":1}}],["\tusequencewallet",{"2":{"152":1,"162":1,"163":1,"164":1,"165":1,"166":1,"169":1,"170":1,"171":1,"186":1}}],["\taccountaddress",{"2":{"229":1,"230":1,"232":1,"239":1}}],["\targs",{"2":{"169":2,"170":3,"171":4}}],["\tapi",{"2":{"162":1,"163":1,"164":1,"165":1,"166":1,"169":1,"170":1,"171":1,"186":1}}],["\ttypes",{"2":{"515":1}}],["\ttokenbalances",{"2":{"229":1}}],["\ttokenmap",{"2":{"169":1}}],["\ttmap",{"2":{"169":1}}],["\t\twallet",{"2":{"515":1}}],["\t\tcount",{"2":{"515":1}}],["\t\tcontractaddress",{"2":{"241":1}}],["\t\tchainid",{"2":{"515":1}}],["\t\tverifyingcontract",{"2":{"515":1}}],["\t\tverifiedonly",{"2":{"230":1,"239":1,"241":1,"243":1}}],["\t\tversion",{"2":{"515":1}}],["\t\tname",{"2":{"515":2}}],["\t\tdefaulttheme",{"2":{"441":1}}],["\t\tincludecontracts",{"2":{"230":1,"239":1,"241":1,"243":1}}],["\t\tlog",{"2":{"229":1,"230":1,"232":1,"239":1,"241":1,"243":1}}],["\t\t\t\t\t\t\t\t",{"2":{"548":2}}],["\t\t\t\t\t\t\t",{"2":{"548":4}}],["\t\t\t\t\t\t",{"2":{"548":5}}],["\t\t\t\t\t",{"2":{"548":4}}],["\t\t\t\t",{"2":{"548":3}}],["\t\t\t",{"2":{"214":5,"215":5,"217":5,"218":5,"221":5,"222":5,"223":5,"225":5,"226":5,"515":3,"548":2}}],["\t\tfstring",{"2":{"186":3}}],["\t\tfgettokensuppliesargs",{"2":{"168":1}}],["\t\tfgettokenbalancesargs",{"2":{"167":1}}],["\t\ttarray",{"2":{"186":1}}],["\t\ttsharedptr",{"2":{"186":4}}],["\t\taccountaddress",{"2":{"239":1}}],["\t\tapi",{"2":{"167":1,"168":1}}],["\t\targs",{"2":{"167":2,"168":2}}],["\t\tunverifiedonly",{"2":{"230":1,"239":1,"241":1,"243":1}}],["\t\tusequencewallet",{"2":{"167":1,"168":1}}],["\t\tue",{"2":{"141":1,"142":1,"143":1}}],["\t\t",{"2":{"139":5,"143":1,"167":2,"168":2,"214":2,"215":2,"217":2,"218":2,"221":2,"222":2,"223":2,"225":2,"226":2,"441":1,"515":1}}],["\t\tperson",{"2":{"515":1}}],["\t\tposition",{"2":{"441":1}}],["\t\tprivatedependencymodulenames",{"2":{"139":1}}],["\t\tpublicdependencymodulenames",{"2":{"139":1}}],["\tverifiedonly",{"2":{"22":1}}],["\t",{"2":{"22":1,"30":1,"34":1,"43":1,"44":2,"54":1,"139":1,"141":3,"142":2,"143":4,"144":1,"147":1,"148":1,"162":2,"163":2,"164":2,"165":2,"166":3,"167":6,"168":6,"169":2,"170":3,"171":2,"180":1,"186":2,"229":6,"230":7,"232":8,"239":10,"241":9,"243":9,"441":1,"515":3}}],["🌄",{"2":{"20":1,"52":1}}],["09t18",{"2":{"605":2}}],["03",{"2":{"605":3}}],["02t18",{"2":{"605":4}}],["06",{"2":{"553":1}}],["08t17",{"2":{"553":1}}],["000005020$0",{"2":{"427":1}}],["00000500627440",{"2":{"427":1}}],["0000000130",{"2":{"427":1}}],["0a1",{"2":{"378":1}}],["0b3",{"2":{"378":1}}],["0123456789abcdef",{"2":{"555":1}}],["0148",{"2":{"427":1}}],["01",{"2":{"214":1,"215":1,"217":1,"218":1,"221":1,"222":1,"223":1,"225":1,"226":1}}],["0e0f9d1c4bef9f0b8a2d9d4c09529f260c7758a2",{"2":{"185":1}}],["0",{"2":{"48":1,"58":3,"73":1,"86":1,"105":1,"115":2,"117":1,"119":1,"171":1,"177":2,"185":1,"187":2,"248":1,"304":3,"378":2,"385":1,"411":1,"480":3,"496":1,"509":1,"512":1,"516":1,"529":1,"534":1,"540":2,"541":2,"542":2,"548":3,"549":2,"557":3,"564":1,"576":2,"601":1,"602":1,"606":1,"608":2,"609":1}}],["0x574372ff1a0eede68b5358cce7bbb93155a9dfe0",{"2":{"605":2}}],["0x5c4eeb02dabf8976016ab414d617f9a162936dcace3cdef8c69ef6e262ad5ae7",{"2":{"576":2,"608":1}}],["0x5",{"2":{"576":4}}],["0x596af90cecdbf9a768886e771178fd5561dd27ab",{"2":{"496":1,"520":1,"521":2}}],["0x91e8ac543c5fedf9f3ef8b9da1500db84305681f",{"2":{"548":1}}],["0x9766bf76b2e3e7bcb8c61410a3fc873f1e89b43f",{"2":{"108":2}}],["0x3c4e11e4dbf23b87c14bd75d0da9c75707392d21",{"2":{"605":2}}],["0x3c499c542cef5e3811e1192ce70d8cc03d5c3359",{"2":{"86":1,"237":3}}],["0x3251ba32",{"2":{"548":1}}],["0xe6b9b21c077f382333220a072e4c44280b873907",{"2":{"526":1}}],["0xec9a7204a43d3f4a82c84fde92d25bfc9110981e",{"2":{"520":1,"521":1}}],["0xd72c236be524ec24f72329317e2785e687105b69",{"2":{"608":1}}],["0xd6043fe6f06d90ec2cb36ca5cd1b193a8515f350",{"2":{"595":1}}],["0xdb374",{"2":{"576":1}}],["0xdbbfa3cb3b087b64f4ef5e3d20dda2488aa244e6",{"2":{"537":1}}],["0xd130b43062d875a4b7af3f8fc036bc6e9d3e1b3e",{"2":{"526":1}}],["0xd01f11855bccb95f88d7a48492f66410d4637313",{"2":{"525":1,"526":1}}],["0xf2e9f728abd65089f25efda5852e605ced377f4e2c89dbf143b124623ed09b2c",{"2":{"576":5,"608":1}}],["0xf87e31492faf9a91b02ee0deaad50d51d56d5d4d",{"2":{"548":1}}],["0xfea230ee243f88bc698dd8f1ae93f8301b6cdfae",{"2":{"537":1}}],["0xfbf8f1a5e00034762d928f46d438b947f5d4065d",{"2":{"537":1}}],["0xfaa5c0b14d1bed5c888ca655b9a8a5911f78ef4a",{"2":{"537":1}}],["0xff",{"2":{"525":1}}],["0xf9d09d634fb818b05149329c1dccfaea53639d96",{"2":{"525":1,"526":1}}],["0x44c2ea42fb006a613a7b41d142576ed6b5055902",{"2":{"584":1}}],["0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",{"2":{"576":1}}],["0x4d4ee1b8583e31fe789eaf2e1b6e011c220c10b6",{"2":{"576":6,"578":1,"608":2,"609":1}}],["0x49be8c81414fae655f1f4615f5b437ca5160bdd4e4d8ce06275338ec6fe2e20b",{"2":{"576":4}}],["0x48656c6c6f2c20686176652061206e69636520646179",{"2":{"557":1}}],["0x479f6a5b0c1728947318714963a583c56a78366a",{"2":{"548":1}}],["0x4f9555c73908b6a5b61e0a744cb4e00fce7b20743d5799e4cb1774081bc6b2ec192c740e50f1adec84605636e09c9cdf4d2f6629f9ce64d8d0f3ae10305ef90400",{"2":{"542":1,"548":1,"549":1}}],["0x4fbf69aa2a75f9942a768dc8da7804ec965f7bea",{"2":{"520":1,"521":2}}],["0x4b0fc0c7d42566958d60f92115ab95167c837c891e2f4fa62a75bfed30d86af7291051fe5c88985269286548a42bed5b70bb16588e48998206a2e7a547f527d101",{"2":{"540":1}}],["0x4222dca3974e39a8b41c411fedde9b09ae14b911",{"2":{"537":1}}],["0x468e8e29f6cfb0f6b7ff10ec6a1ab516ec849c04",{"2":{"247":1,"249":1}}],["0xc9d9b33231d24dd8cc53fdd64f7abdd156f2a7e2",{"2":{"548":1}}],["0xcf67bcbd9d5dfd373b03f4fc8143e1c6744b5696",{"2":{"540":1,"541":1,"542":1,"548":1,"549":2}}],["0xcccccccccccccccccccccccccccccccccccccccc",{"2":{"515":1}}],["0xc2be9cf6d9ee4fd211f88620760e829792659b16",{"2":{"245":2}}],["0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",{"2":{"58":2}}],["0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef",{"2":{"581":1}}],["0x1",{"2":{"576":1}}],["0x153824576d03629b264683b430bbf9acea1d0975",{"2":{"576":1,"578":1,"609":1}}],["0x15",{"2":{"576":1}}],["0x1f180c27086c7a39ea2a7b25239d1ab92348f07ca7bb59d1438fcf527568f881",{"2":{"576":2,"608":1}}],["0x14",{"2":{"576":1}}],["0x14a00",{"2":{"576":1}}],["0x140d72763d1ce39ad4e2e73ec6e8fc53e5b73b64",{"2":{"548":1}}],["0x17ffa2d95b58228e1ecb0c6ac25a6efd20ba08e4",{"2":{"548":1}}],["0x17b66009af459dc8ebf37acf8a8b355379be2fe5",{"2":{"30":2}}],["0x112233",{"2":{"548":1}}],["0x16",{"2":{"576":1}}],["0x1626ba7e",{"2":{"516":2}}],["0x1693ffc74edbb50d6138517fe5cd64fd1c917709",{"2":{"245":2,"411":1}}],["0xbdeafd3ee0550a73f615d2baea2e3d6d48fc857d",{"2":{"584":1}}],["0xbc5f07a5852fdf3dbd57a76835109220d0add8e8",{"2":{"540":1,"542":1,"548":1,"549":1}}],["0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d",{"2":{"48":1}}],["0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb",{"2":{"515":1}}],["0xb392c99d9f8e3e0b248e5c283818be5bf5cecca7",{"2":{"407":1}}],["0xb537a160472183f2150d42eb1c3dd6684a55f74c",{"2":{"245":2,"411":1}}],["0x6b175474e89094c44da98b954eedeac495271d0f",{"2":{"616":1}}],["0x6bd55a2877890bd58871eefe886770a7734077a74981910a75d7b1f044b5bf28",{"2":{"548":1}}],["0x63a21cca14ed7454b9cf6466af422b5c597c6b57",{"2":{"595":1}}],["0x631998e91476da5b870d741192fc5cbc55f5a52e",{"2":{"24":1,"30":3,"34":1,"37":4,"43":3,"44":3,"86":1,"184":1,"230":2,"241":3,"243":3,"440":1,"548":1}}],["0x603a600e3d39601a805130553df3363d3d373d3d3d363d30545af43d82803e903d91601857fd5bf3",{"2":{"525":1}}],["0x6192e0fdcd868b3de01c7fbc0ad98baebd7330c1",{"2":{"520":1,"521":2}}],["0x64d9f9d527abe2a1c1ce3fada98601c4ac5bfdd2",{"2":{"185":1}}],["0x061150e5574716dbb1a2cdf54b3dce9f94395f65",{"2":{"618":1}}],["0x095ae61e8207c7856ea273235d6badb69d815f5e",{"2":{"548":1}}],["0x02390f3e6e5fd1c6786cb78fd3027c117a9955a7",{"2":{"526":1}}],["0x000000000000000000000000959c65b72147faf3450d8b50a0de57e72ffc5e0d",{"2":{"576":1}}],["0x00000000000000000000000000e91788bcb998379027d36e6407a9187d7f313c",{"2":{"576":1}}],["0x0000000000000000000000000000000000001010",{"2":{"576":1}}],["0x00000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000008800000002000000000001004000000000000000000000000000000000800000000000000000000100000000400000000200400000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000002000000000000000000000000000000004000008000000000000001000000000000000000000000000000100000020000000000000000000000002000000020020002020040000000000000000040100000",{"2":{"576":1}}],["0x0000000000000000000000000000000000000000000000000000000000001010",{"2":{"576":1}}],["0x0000000000000000000000000000000000000000000000000000000000000000",{"2":{"576":2,"608":1}}],["0x000000000000000000000000000000000000000000000000001284e7c67266000000000000000000000000000000000000000000000000014c0fa753f2298415000000000000000000000000000000000000000000001386f7e2c243dcc978070000000000000000000000000000000000000000000000014bfd226c2bb71e15000000000000000000000000000000000000000000001386f7f5472ba33bde07",{"2":{"576":1}}],["0x0000000000000000000000000000000000000000",{"2":{"576":1}}],["0x0000000000000000000000001119e72b4af230becebd933d0e07f0eec51d8c2a0000000000000000000000000000000000000000000000000000000000000001",{"2":{"576":2,"608":1}}],["0x00",{"2":{"405":1,"576":1,"578":1,"609":1}}],["0x0e0f9d1c4bef9f0b8a2d9d4c09529f260c7758a2",{"2":{"170":1,"182":1,"183":1,"184":1}}],["0x01047de46debeeb83e1270b80ae65996ea64ad2c033e330cfffe9b725bf078423140124dce0cfe0cab9a61b385ca74fe77cd5e8a7147bfd87052f334cfbadc45c79a",{"2":{"557":1}}],["0x01",{"2":{"168":1,"185":1}}],["0x0",{"2":{"119":1,"516":1}}],["0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270",{"2":{"86":1}}],["0xacc36ed4ef40db74137266e48d863083a5c7e85e2735d69adafcb5b362b6cfc0",{"2":{"576":2,"608":1}}],["0xa9c88358862211870db6f18bc9b3f6e4f8b3eae7",{"2":{"245":2,"411":1}}],["0xa9a6a3626993d487d2dbda3173cf58ca1a9d9e9f",{"2":{"183":1}}],["0xabc",{"2":{"229":1,"230":1,"232":1,"239":1}}],["0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",{"2":{"58":2,"548":1}}],["0xa1c57f48f0deb89f569dfbe6e2b7f46d33606fd4",{"2":{"30":2}}],["0x",{"2":{"37":1,"168":1,"185":1,"306":1,"307":3,"576":3,"578":1,"609":1,"617":1,"628":1,"629":3}}],["0x839ee023b21f4ffe2294025de0ac30ba7278d6fd",{"2":{"578":1,"609":2}}],["0x8e3e38fe7367dd3b52d1e281e4e8400447c8d8b9",{"2":{"229":1,"230":1,"232":1,"239":1}}],["0x8f3cf7ad23cd3cadbd9735aff958023239c6a063",{"2":{"30":2}}],["0x8bb759bb68995343ff1e9d57ac85ff5c5fb79334",{"2":{"24":1}}],["0x7b7d7ba79542584f9aef539f6696c070a4e1ced6",{"2":{"557":1}}],["0x7b1bd3474d789e18e2e329e2c53f819b6e687b4a",{"2":{"548":1}}],["0x7efe6ce415956c5f80c6530cc6cc81b4808f6118",{"2":{"526":1}}],["0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0",{"2":{"58":1}}],["0x7c0ebabfc394ec6d926e801fe0e69a1f15a7fe4d",{"2":{"30":2}}],["0x7227e371540cf7b8e512544ba6871472031f3335",{"2":{"30":2}}],["0x2f63834",{"2":{"576":4}}],["0x28ec6ddcdbc0987a99dde19792ff0c9be69ad2be873fb9351353171b74d2df3380f0ffcae2b8cb37a0659e374859420500b4399a2aab0209ee7919aaea575ac7",{"2":{"557":1}}],["0x223344",{"2":{"548":1}}],["0x27cabc9700ee6db2797b6ac1e1ece81c72a2cd8d",{"2":{"616":1}}],["0x27a11c1563a5dda238379b95c91b3abbad9c0cf6",{"2":{"49":1}}],["0x2791bca1f2de4661ed88a30c99a7a9449aa84174",{"2":{"30":2,"182":1,"439":1}}],["0x2953399124f0cbb46d2cbacd8a89cf0599974963",{"2":{"30":2}}],["0xsequence",{"0":{"281":1},"2":{"21":5,"22":2,"24":1,"30":2,"33":4,"34":2,"43":2,"44":4,"53":3,"54":2,"63":1,"65":1,"66":2,"72":1,"73":1,"96":1,"229":2,"230":2,"232":2,"237":3,"239":2,"241":2,"243":2,"247":1,"253":1,"263":2,"265":1,"273":1,"274":4,"276":1,"277":2,"280":1,"281":3,"304":7,"305":3,"314":1,"435":3,"436":1,"437":1,"452":2,"453":1,"455":1,"459":3,"460":1,"461":1,"480":7,"481":3,"514":1,"515":2,"554":1,"555":1,"577":1,"579":1,"582":1,"585":1,"587":1,"588":1,"595":1,"597":1,"598":1,"605":1,"606":1,"608":1,"609":1,"621":1,"622":4,"624":1,"625":2}}],["05",{"2":{"17":1,"214":2,"215":2,"217":2,"218":2,"221":2,"222":2,"223":2,"225":2,"226":2}}],["04",{"2":{"17":1,"214":1,"215":1,"217":1,"218":1,"221":1,"222":1,"223":1,"225":1,"226":1,"553":1}}],["284892",{"2":{"540":1,"542":1}}],["255",{"2":{"519":1}}],["24",{"2":{"416":1}}],["26",{"2":{"157":1}}],["22",{"2":{"37":2,"605":3}}],["2123",{"2":{"605":2}}],["21",{"2":{"37":2,"39":1}}],["2",{"0":{"196":1,"315":1,"356":1,"397":1,"436":1,"460":1,"568":1},"2":{"37":1,"43":1,"44":2,"49":1,"73":1,"154":1,"177":1,"178":1,"247":1,"249":1,"354":1,"378":2,"383":2,"385":1,"388":1,"391":4,"396":1,"411":1,"416":1,"520":2,"521":4,"523":2,"534":1,"548":1,"559":2,"560":2,"564":4,"601":1,"602":1}}],["200000000000000000000",{"2":{"616":1}}],["200",{"2":{"299":1,"616":1}}],["2019",{"2":{"178":1}}],["2020",{"2":{"416":1,"417":1,"548":1}}],["2023",{"2":{"378":4,"417":1,"418":1,"605":4}}],["2022",{"2":{"178":1,"378":3}}],["2021",{"2":{"81":1,"378":1,"416":1}}],["2024",{"2":{"17":2,"214":4,"215":4,"217":4,"218":4,"221":4,"222":4,"223":4,"225":4,"226":4,"553":1}}],["20",{"0":{"308":1,"630":1,"631":2,"633":1},"1":{"631":1,"632":1},"2":{"37":7,"39":2,"307":1,"308":3,"309":1,"553":1,"629":1,"630":3,"633":3,"634":1}}],["230",{"2":{"598":1}}],["23",{"2":{"17":2,"214":4,"215":4,"217":4,"218":4,"221":4,"222":4,"223":4,"225":4,"226":4}}],["qmw5gvygwb98gsn8vjtrwu4pln6jryexnxzknwpphvwtdm",{"2":{"404":1}}],["qmdjzqexj2wnny7pnnn4kauzckjh4va5xhoxmmis919ev3",{"2":{"397":1}}],["qmuqgkka8ew7exiuhnmwz4uoxa11wv7nfjhaogvabassyy",{"2":{"48":1}}],["qr",{"2":{"303":2}}],["qatar",{"2":{"12":1}}],["quantstamp",{"0":{"416":1},"2":{"391":1,"415":1,"559":2,"562":2}}],["quantityraw",{"2":{"440":1}}],["quantityremaining",{"2":{"246":1}}],["quantity",{"2":{"246":1}}],["quicker",{"2":{"106":1}}],["quickly",{"2":{"61":1,"368":1,"410":1,"479":1}}],["quickstart",{"0":{"59":1,"408":1,"477":1},"1":{"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"409":1,"410":1,"411":1,"412":1,"478":1,"479":1,"480":1,"481":1},"2":{"9":1,"211":1,"452":1,"464":1,"472":1}}],["quite",{"2":{"36":1}}],["quote",{"2":{"247":1,"249":1}}],["quot",{"2":{"3":4,"6":8,"17":12,"22":8,"24":16,"29":2,"30":46,"34":8,"37":78,"42":2,"43":44,"44":56,"48":93,"49":68,"54":2,"58":88,"68":2,"69":2,"73":4,"74":4,"75":10,"76":4,"79":2,"86":14,"93":2,"94":2,"100":2,"102":4,"103":4,"104":2,"105":2,"108":8,"109":10,"115":12,"117":2,"119":2,"123":4,"129":4,"137":8,"139":18,"141":2,"142":2,"143":2,"147":2,"150":20,"151":4,"152":12,"168":2,"170":2,"173":16,"178":4,"180":4,"181":2,"182":6,"183":6,"184":8,"185":12,"187":10,"214":40,"215":44,"217":40,"218":44,"219":6,"221":50,"222":44,"223":44,"225":40,"226":44,"227":6,"229":26,"230":30,"232":24,"237":26,"239":30,"241":34,"243":26,"245":54,"246":6,"247":10,"248":22,"249":8,"253":8,"273":2,"281":38,"292":2,"293":2,"294":12,"295":2,"296":6,"297":4,"298":2,"303":2,"304":13,"305":4,"322":4,"323":4,"326":4,"328":4,"330":4,"332":6,"340":8,"342":4,"345":2,"346":2,"369":2,"372":2,"377":2,"378":58,"381":2,"382":2,"390":2,"396":12,"397":12,"400":2,"401":2,"406":4,"407":2,"411":32,"415":6,"419":2,"480":13,"481":4,"496":6,"514":4,"516":2,"518":4,"519":10,"520":28,"525":20,"527":2,"528":2,"533":2,"534":4,"536":2,"540":36,"541":32,"542":38,"543":2,"544":2,"545":2,"546":2,"547":2,"548":254,"549":34,"553":16,"554":16,"555":2,"556":2,"557":36,"567":2,"569":2,"576":288,"578":66,"581":14,"584":14,"595":10,"598":10,"602":10,"605":82,"606":2,"608":74,"609":76,"614":2,"616":6,"617":6,"618":6,"621":2}}],["queried",{"2":{"189":1,"246":1,"430":1,"511":1,"512":1}}],["queries",{"2":{"21":1,"22":1,"27":1,"339":1,"350":1}}],["queryclient",{"2":{"436":1,"455":1,"460":1}}],["queryclientprovider",{"2":{"436":2,"455":2,"460":2}}],["querycontractmessagesender",{"2":{"342":1}}],["querycontract",{"2":{"342":2}}],["querying",{"0":{"342":1},"2":{"24":1,"37":1,"48":1,"49":1,"51":1,"339":1,"342":1,"351":1}}],["query",{"2":{"1":1,"19":1,"21":1,"22":1,"25":6,"29":2,"32":1,"36":3,"37":6,"42":2,"87":1,"117":1,"188":1,"210":1,"219":3,"223":1,"227":4,"229":1,"230":1,"232":1,"239":1,"241":6,"243":6,"342":3,"347":1,"350":1,"430":1}}],["questions",{"2":{"254":1,"274":1,"430":1,"622":1}}],["question",{"2":{"0":1}}],["==",{"2":{"249":1,"534":1,"603":1}}],["===",{"2":{"247":1,"319":1,"544":1,"546":1}}],["=",{"2":{"6":3,"21":2,"22":5,"30":4,"33":1,"34":2,"43":4,"44":8,"65":1,"68":2,"69":2,"78":3,"79":1,"82":3,"83":3,"84":13,"85":2,"86":11,"87":3,"110":2,"112":2,"114":2,"117":6,"123":6,"129":2,"139":1,"141":6,"142":6,"143":6,"144":2,"145":2,"146":2,"147":2,"148":2,"150":3,"152":2,"162":6,"163":6,"164":6,"165":6,"166":6,"167":8,"168":8,"169":8,"170":9,"171":10,"173":8,"180":5,"181":1,"182":5,"183":4,"184":4,"185":7,"186":10,"187":12,"214":2,"215":2,"217":2,"218":2,"221":2,"222":2,"223":2,"225":2,"226":2,"229":7,"230":9,"232":6,"237":10,"239":8,"241":9,"243":7,"245":2,"247":15,"248":2,"249":9,"252":3,"253":3,"265":2,"266":5,"272":2,"273":2,"274":6,"281":11,"282":1,"306":13,"307":13,"308":12,"309":13,"310":3,"314":3,"315":3,"316":2,"317":3,"318":2,"319":1,"320":1,"322":2,"323":1,"324":1,"325":1,"326":1,"327":1,"328":1,"329":1,"330":1,"331":1,"332":2,"333":1,"334":1,"335":1,"336":1,"337":1,"338":1,"339":1,"340":10,"342":6,"343":2,"351":7,"353":2,"355":2,"356":1,"358":1,"359":1,"360":1,"361":1,"362":1,"363":2,"367":1,"368":1,"382":1,"436":2,"437":6,"438":1,"439":2,"441":1,"452":3,"454":4,"455":3,"460":2,"461":5,"496":4,"504":1,"509":1,"510":1,"514":3,"515":4,"516":1,"521":3,"523":3,"525":6,"526":1,"535":2,"537":1,"577":1,"579":1,"582":1,"585":1,"587":1,"588":1,"595":3,"597":4,"598":14,"603":5,"605":2,"606":2,"608":2,"609":2,"613":1,"614":2,"616":2,"617":1,"618":2,"620":2,"621":2,"622":6,"628":13,"629":13,"630":12,"633":12,"634":13,"635":3}}],["yield",{"2":{"561":1}}],["yyyy",{"2":{"219":2,"227":2}}],["yellow",{"2":{"566":1}}],["yet",{"2":{"106":1,"509":1,"512":1,"555":1}}],["yemen",{"2":{"12":1}}],["yarn",{"2":{"6":1,"21":1,"53":1,"304":1,"435":1,"459":1,"480":1}}],["younger",{"2":{"602":1}}],["you",{"2":{"2":4,"3":5,"5":2,"8":2,"9":2,"10":1,"11":1,"13":2,"14":1,"16":4,"17":1,"18":1,"19":1,"20":3,"21":3,"22":2,"25":4,"26":1,"27":1,"28":1,"33":1,"36":1,"37":6,"40":1,"49":1,"50":2,"52":1,"58":4,"63":1,"64":2,"65":2,"67":1,"68":11,"69":8,"73":1,"74":3,"75":2,"76":8,"77":2,"78":6,"81":1,"82":3,"84":7,"85":4,"86":3,"87":3,"88":2,"93":9,"94":4,"96":1,"97":2,"98":4,"101":2,"103":2,"104":1,"105":5,"106":4,"107":6,"108":3,"109":3,"110":5,"111":3,"112":5,"113":3,"114":5,"115":13,"116":3,"117":9,"120":4,"123":5,"124":1,"127":8,"128":2,"129":5,"130":3,"131":6,"132":2,"133":2,"134":3,"136":1,"139":3,"141":2,"142":1,"143":1,"144":1,"145":1,"146":1,"147":1,"148":1,"149":2,"150":3,"152":2,"156":1,"157":1,"159":3,"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"171":1,"174":3,"175":3,"177":3,"178":2,"180":1,"181":1,"182":1,"185":2,"186":1,"188":4,"189":1,"190":2,"194":1,"196":5,"198":2,"199":2,"200":1,"201":2,"202":1,"204":1,"206":1,"210":2,"212":2,"220":1,"222":1,"223":1,"224":1,"229":2,"230":2,"232":1,"234":1,"239":2,"241":4,"243":3,"244":1,"247":1,"254":6,"261":1,"273":4,"274":4,"278":1,"279":4,"280":2,"281":9,"303":1,"304":3,"306":1,"307":1,"308":2,"309":1,"310":1,"319":1,"320":4,"322":2,"339":4,"340":7,"341":2,"342":3,"343":2,"345":2,"347":4,"351":4,"352":2,"353":1,"356":2,"357":1,"361":3,"362":3,"363":2,"364":3,"365":2,"367":5,"368":2,"369":2,"370":3,"371":2,"372":5,"374":1,"376":1,"377":1,"378":4,"379":1,"380":5,"381":3,"382":2,"383":1,"385":3,"386":4,"387":2,"388":5,"389":2,"393":1,"395":1,"396":4,"399":1,"402":1,"403":4,"404":4,"405":1,"406":1,"407":5,"412":1,"413":2,"419":1,"441":1,"452":1,"453":2,"454":3,"455":2,"463":1,"464":1,"465":2,"472":1,"480":2,"488":1,"539":2,"550":1,"552":1,"555":2,"556":4,"557":2,"564":2,"588":1,"593":3,"598":1,"600":2,"602":4,"612":1,"618":1,"621":4,"622":4,"626":1,"627":6,"628":1,"629":1,"630":2,"633":2,"634":1,"635":1}}],["yourprojectdirectory",{"2":{"173":1}}],["yourproject",{"0":{"139":1},"2":{"133":2,"134":3,"174":1,"175":1}}],["yourcallshowauthfailurescreen",{"2":{"129":1}}],["yourcallreadytoreceivecode",{"2":{"129":1}}],["yourself",{"2":{"593":1}}],["yourserversbaseurl",{"2":{"68":1}}],["yoursite",{"2":{"281":2,"293":1}}],["yours",{"2":{"8":1}}],["your",{"0":{"213":1,"216":1,"255":1,"258":1,"259":1,"281":1,"301":1,"396":1,"398":1,"401":1,"436":1,"456":1,"460":1,"482":1,"485":1,"486":1},"1":{"214":1,"215":1,"217":1,"218":1,"256":1,"260":1,"483":1,"487":1},"2":{"0":1,"2":2,"3":3,"4":1,"5":2,"6":2,"7":2,"8":8,"10":2,"13":4,"16":2,"17":2,"18":1,"19":2,"20":2,"22":1,"24":4,"25":4,"27":1,"29":1,"33":2,"34":1,"36":1,"37":1,"42":1,"46":2,"50":1,"52":1,"54":1,"56":3,"58":2,"68":4,"69":4,"72":1,"73":2,"74":1,"75":1,"76":3,"77":2,"78":3,"80":1,"82":1,"83":1,"84":3,"87":1,"88":1,"93":5,"98":2,"101":2,"103":2,"104":2,"105":3,"106":1,"109":2,"110":1,"112":1,"114":1,"115":1,"116":1,"117":8,"120":1,"123":2,"124":3,"127":4,"129":1,"130":3,"133":1,"134":3,"136":4,"137":3,"139":2,"141":1,"142":1,"143":1,"144":1,"145":1,"146":1,"147":1,"148":1,"149":2,"150":1,"152":1,"155":1,"157":1,"159":4,"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"171":1,"175":1,"178":6,"180":1,"186":1,"187":1,"188":3,"189":1,"190":2,"194":2,"195":3,"196":3,"197":1,"198":2,"199":1,"201":1,"202":1,"209":1,"210":3,"211":1,"212":2,"216":1,"219":1,"220":2,"222":1,"223":1,"227":1,"229":1,"232":1,"247":8,"254":2,"255":2,"256":3,"259":2,"260":3,"261":1,"273":4,"274":5,"279":3,"280":2,"281":8,"293":1,"303":1,"304":4,"320":3,"321":1,"345":1,"351":2,"352":1,"353":1,"364":2,"366":1,"367":1,"368":3,"369":2,"370":1,"371":3,"372":8,"374":1,"375":1,"377":1,"378":1,"380":3,"381":6,"382":4,"383":4,"385":2,"386":2,"387":1,"388":1,"389":2,"390":2,"392":1,"393":1,"395":1,"396":2,"397":2,"398":2,"399":1,"400":3,"401":2,"402":1,"403":3,"405":2,"406":1,"407":1,"410":1,"412":1,"430":3,"432":2,"454":2,"455":2,"456":2,"462":2,"463":5,"464":1,"472":1,"475":1,"480":4,"482":2,"483":3,"486":2,"487":3,"488":1,"514":1,"515":1,"550":1,"553":1,"556":2,"557":4,"560":1,"564":1,"593":2,"595":1,"600":2,"601":1,"602":4,"603":1,"612":1,"621":4,"622":5,"627":3}}],["risk",{"2":{"550":1}}],["risks",{"2":{"471":1}}],["rights",{"2":{"431":1}}],["right",{"2":{"80":1,"105":1,"178":1,"190":1,"444":3,"535":1}}],["rlp",{"2":{"349":2}}],["rule",{"2":{"347":1}}],["runs",{"2":{"281":2,"553":1,"554":1,"560":1}}],["runtimestatus",{"0":{"164":1},"2":{"164":3}}],["runtime",{"2":{"93":1,"492":1}}],["running",{"2":{"82":1,"127":1,"159":1,"253":1,"282":1,"412":1,"550":1,"555":1,"559":2,"563":1,"568":1}}],["run",{"2":{"81":1,"159":4,"280":1,"372":2,"381":1,"554":1,"566":3}}],["russian",{"2":{"12":1}}],["rotation",{"2":{"425":1}}],["royalties",{"2":{"196":1}}],["root",{"2":{"72":1,"93":1,"136":2,"381":1,"555":1,"576":1,"598":1}}],["router=",{"2":{"598":1}}],["routerprovider",{"2":{"598":2}}],["router",{"2":{"598":8}}],["route",{"2":{"25":1,"76":1,"339":1}}],["routes",{"2":{"25":1}}],["robust",{"2":{"13":1,"255":1,"259":1,"462":1,"482":1,"486":1}}],["rainbow",{"2":{"423":1}}],["rainbowkit",{"2":{"254":1}}],["ration",{"2":{"293":1}}],["ratio",{"2":{"281":2}}],["rather",{"2":{"107":1,"173":1,"339":1}}],["ranked",{"2":{"427":1}}],["ranks",{"2":{"427":1}}],["range",{"2":{"157":1,"221":1,"249":1,"326":1}}],["randombytes",{"2":{"315":1}}],["random",{"2":{"49":1,"355":1,"503":1,"530":1}}],["rawtransactions",{"2":{"110":1,"112":1,"114":1}}],["rawtransaction",{"0":{"108":1},"2":{"108":1,"110":2,"112":2,"114":2,"116":2,"117":1}}],["raw",{"0":{"122":1,"185":1,"544":1},"2":{"17":1,"58":1,"108":2,"122":1,"185":3,"214":1,"215":1,"217":1,"218":1,"221":1,"222":1,"223":1,"225":1,"226":1}}],["ramping",{"2":{"78":1,"150":1}}],["ramp",{"0":{"78":1,"150":1,"414":1,"457":1,"466":1,"607":1},"1":{"458":1,"459":1,"460":1,"461":1},"2":{"11":1,"78":1,"150":1,"281":2,"297":1,"413":5,"414":1,"457":2,"458":1,"465":5,"466":1}}],["ramps",{"0":{"413":1,"465":1},"1":{"414":1,"466":1},"2":{"10":1}}],["rpcurl",{"2":{"6":2,"247":2,"274":3,"622":3}}],["rpc",{"0":{"40":1,"41":1},"2":{"5":2,"6":2,"17":1,"20":2,"24":3,"30":2,"36":6,"38":3,"40":2,"41":1,"43":2,"44":4,"58":1,"214":2,"215":2,"217":2,"218":2,"221":2,"222":2,"223":2,"225":2,"226":2,"229":2,"230":2,"232":2,"235":1,"237":1,"239":2,"241":2,"243":2,"245":2,"248":1,"320":2,"347":1,"411":1}}],["reorganizationno",{"2":{"575":1}}],["reviewing",{"2":{"559":1}}],["reverted",{"2":{"608":1}}],["revert",{"2":{"506":1,"575":1}}],["revertonerror",{"0":{"506":1},"2":{"249":1,"504":2,"506":1,"509":1,"510":1}}],["revertreason",{"2":{"248":1,"576":2,"608":2}}],["revenue",{"2":{"212":1}}],["reused",{"2":{"557":1}}],["rejected",{"2":{"495":1,"503":1,"544":1}}],["reward",{"2":{"431":1}}],["rewrite",{"2":{"351":2}}],["req",{"2":{"237":2}}],["requiring",{"2":{"68":1,"281":1,"311":1,"312":1,"351":1}}],["requirefreshsigner",{"2":{"526":1}}],["requirements",{"0":{"81":1,"133":1,"134":1,"154":1,"158":1,"552":1},"2":{"134":1,"155":1,"158":1,"371":1,"386":1}}],["required",{"0":{"586":1},"1":{"587":1},"2":{"80":1,"101":1,"102":1,"115":1,"119":1,"132":1,"249":2,"280":1,"329":1,"339":1,"377":1,"388":1,"389":1,"427":1,"528":1,"534":1,"559":1,"564":1,"587":1}}],["require",{"2":{"56":1,"88":1,"251":1,"253":1,"274":1,"312":1,"351":1,"470":1,"508":1,"536":1,"588":1,"595":1,"611":1,"612":1,"618":1,"622":1}}],["requires",{"2":{"1":1,"2":1,"4":1,"21":1,"30":1,"33":1,"43":1,"98":1,"117":1,"229":1,"304":1,"310":1,"320":1,"347":1,"374":1,"388":1,"480":1,"567":1,"635":1}}],["requested",{"2":{"365":1,"490":1,"541":1}}],["requestsendtransactionpayloadthe",{"2":{"578":1}}],["requests",{"0":{"193":1},"2":{"20":1,"25":1,"40":1,"52":1,"188":1,"189":1,"193":1,"303":1,"320":1,"347":1,"549":1}}],["request",{"0":{"17":1},"2":{"2":1,"3":1,"4":1,"16":1,"17":1,"25":1,"29":1,"30":1,"37":2,"42":1,"43":1,"44":3,"82":1,"84":1,"116":1,"117":1,"181":1,"186":2,"219":2,"227":2,"229":1,"230":1,"232":1,"235":1,"239":1,"241":1,"243":1,"246":1,"303":1,"347":1,"366":1,"411":1,"456":1,"555":2,"569":1,"570":1,"575":1,"576":1,"578":1,"602":2,"608":1,"609":1}}],["rebuild",{"2":{"178":1}}],["remains",{"2":{"553":1}}],["remaining",{"2":{"468":1}}],["remotely",{"2":{"280":1}}],["remoteconfigtracker",{"2":{"274":1,"622":1}}],["remote",{"2":{"274":1,"514":1,"515":1,"622":1}}],["removing",{"2":{"115":1,"203":1}}],["removed",{"2":{"97":1,"471":1,"575":1,"576":3}}],["remove",{"2":{"96":1,"471":1}}],["remember",{"2":{"159":1,"553":1,"595":1}}],["redirect",{"2":{"284":1,"372":1,"377":1,"385":1}}],["redirecturl",{"2":{"134":1,"173":1,"372":1}}],["reduces",{"2":{"548":1}}],["reduced",{"2":{"533":1}}],["reduce",{"2":{"229":1,"230":1,"239":1,"243":1,"312":1,"522":1}}],["reddit",{"2":{"69":1,"94":1,"107":1,"370":1}}],["retrieving",{"0":{"370":1,"511":1,"512":1},"1":{"512":1}}],["retrieval",{"2":{"187":1}}],["retrieve",{"2":{"129":1,"187":2,"244":1,"281":1,"310":1,"319":1,"430":1,"598":1,"635":1}}],["retrieved",{"2":{"58":1,"201":1,"367":1}}],["returning",{"2":{"618":1}}],["returns",{"2":{"29":1,"110":1,"112":1,"114":1,"123":3,"249":1,"358":1,"392":3,"498":1,"512":1,"516":1,"555":1,"602":1,"605":1,"613":1,"614":4,"616":2}}],["return",{"0":{"500":1},"2":{"3":1,"48":1,"49":1,"108":1,"117":1,"197":1,"229":3,"230":1,"239":1,"243":1,"247":1,"252":2,"253":2,"287":1,"333":1,"338":1,"342":1,"366":1,"436":1,"437":1,"454":2,"455":1,"460":1,"461":1,"511":1,"516":5,"535":4,"593":1,"598":3,"603":3,"608":1,"618":1}}],["returned",{"2":{"3":2,"24":1,"44":1,"117":1,"273":1,"291":1,"371":1,"514":1,"515":1,"600":1,"609":1,"621":1}}],["relies",{"2":{"550":1}}],["reliable",{"2":{"25":1}}],["rely",{"2":{"455":1}}],["reload",{"2":{"407":1}}],["relevant",{"2":{"365":1,"430":1}}],["releases",{"2":{"153":1,"177":1,"555":1}}],["release",{"2":{"76":1,"177":1,"555":1}}],["related",{"2":{"616":1}}],["relating",{"2":{"86":2}}],["relays",{"2":{"571":1}}],["relay",{"0":{"571":1},"2":{"569":1,"602":1}}],["relaying",{"2":{"279":1,"627":1}}],["relayerfeeoption",{"2":{"249":1}}],["relayerurl",{"2":{"247":2}}],["relayer",{"0":{"208":1},"2":{"52":6,"54":1,"55":1,"56":1,"58":3,"208":1,"247":4,"248":4}}],["reflect",{"2":{"303":1}}],["refine",{"2":{"212":1}}],["refreshedat",{"2":{"605":2}}],["refreshes",{"2":{"105":1}}],["refreshjobstatus",{"2":{"44":3}}],["refreshjob",{"2":{"44":1}}],["refresh",{"0":{"289":1},"2":{"44":3,"45":2,"289":2,"407":3}}],["refreshing",{"0":{"44":1},"1":{"45":1}}],["referencing",{"2":{"495":1,"503":1,"508":1}}],["references",{"2":{"21":1,"22":1,"415":1}}],["reference",{"0":{"36":1,"201":1},"1":{"37":1,"38":1,"39":1,"40":1,"41":1},"2":{"20":2,"40":2,"52":2,"103":2,"110":1,"112":1,"114":1,"127":1,"129":1,"194":2,"196":1,"199":1,"201":1,"367":1,"369":1,"370":1,"600":1}}],["referred",{"2":{"113":1}}],["refer",{"2":{"12":1,"63":1,"133":1,"155":1,"158":1,"175":1,"454":1}}],["rendered",{"2":{"251":1,"252":1,"253":4,"292":1,"503":1,"509":1}}],["rendering",{"2":{"239":1,"251":1,"252":2}}],["render",{"2":{"25":3,"243":1,"251":1,"506":1,"598":3}}],["recursive",{"2":{"535":1}}],["recipientaddress",{"2":{"307":1,"308":1,"309":1,"310":1,"353":1,"461":1,"629":1,"630":1,"633":1,"634":1,"635":1}}],["recipient",{"0":{"631":1},"2":{"307":1,"308":1,"309":1,"544":1,"545":1,"546":1,"547":1,"602":1,"616":1,"629":1,"630":1,"633":1,"634":1}}],["recipient4address",{"2":{"306":1,"628":1}}],["recipient3address",{"2":{"306":1,"628":1}}],["recipient2address",{"2":{"306":2,"307":1,"308":1,"309":1,"628":2,"629":1,"630":1,"633":1,"634":1}}],["recipient1address",{"2":{"306":2,"307":1,"308":1,"309":1,"628":2,"629":1,"630":1,"633":1,"634":1}}],["recttransform",{"2":{"101":1}}],["receiptnologsmetatxnreceiptlog",{"2":{"575":1}}],["receiptnostatusstringstatus",{"2":{"575":1}}],["receiptsnotxnreceiptstringstring",{"2":{"575":1}}],["receipts",{"0":{"237":1,"248":1,"608":1},"1":{"609":1},"2":{"362":1,"576":2,"608":4}}],["receipt",{"0":{"571":1,"575":1},"1":{"576":1,"577":1},"2":{"116":1,"186":2,"248":4,"249":4,"338":1,"340":5,"343":1,"351":2,"353":1,"360":1,"362":1,"571":1,"575":1,"576":1,"577":1,"588":2,"608":4}}],["receives",{"2":{"569":1,"570":1,"614":1}}],["received",{"2":{"129":2,"187":1,"367":1,"382":1,"588":1}}],["receive",{"2":{"69":1,"84":2,"93":1,"116":1,"120":1,"130":1,"339":1,"341":1,"361":2,"362":2,"364":1,"366":2,"368":1,"381":1,"382":1}}],["recent",{"2":{"25":1,"325":1}}],["recommed",{"2":{"452":1}}],["recommendations",{"2":{"471":1}}],["recommended",{"0":{"71":1},"1":{"72":1,"73":1,"74":1,"75":1},"2":{"69":1,"94":1,"107":1,"109":1,"110":1,"112":1,"114":1,"115":1,"252":1,"253":1,"322":1,"332":1,"339":1,"351":1,"353":1,"363":1,"392":1,"429":1}}],["recommend",{"2":{"21":1,"24":1,"33":1,"36":1,"38":1,"50":1,"69":1,"82":1,"93":1,"115":1,"117":1,"127":1,"178":1,"369":2,"388":1}}],["record",{"2":{"430":1}}],["recovery",{"0":{"388":1,"589":1,"592":1},"1":{"590":1,"591":1,"592":1},"2":{"383":3,"388":4,"390":1,"425":1,"565":1,"589":2,"590":2,"592":1}}],["recoveredsessionaddress",{"2":{"319":2}}],["recover",{"2":{"88":1,"93":1,"592":2}}],["recovering",{"0":{"88":1},"1":{"89":1,"90":1,"91":1,"92":1},"2":{"93":1,"388":1}}],["recognize",{"2":{"69":1,"76":1}}],["reason",{"2":{"509":1,"576":1,"578":1,"609":1}}],["reasons",{"2":{"503":1}}],["reactdom",{"2":{"598":1}}],["react",{"0":{"262":1},"1":{"263":1,"264":1,"265":1,"266":1,"267":1,"268":1,"269":1,"270":1},"2":{"254":1,"262":3,"263":1,"265":2,"266":1,"270":1,"379":1,"381":1,"414":1,"466":1,"598":7,"607":1}}],["reaches",{"2":{"534":1}}],["reached",{"2":{"514":1,"515":1}}],["reach",{"2":{"106":1,"254":1,"274":1,"622":1}}],["really",{"2":{"279":1,"322":1,"627":1}}],["realm",{"2":{"116":1,"127":1,"255":1,"259":1,"462":1,"482":1,"486":1}}],["real",{"2":{"24":1,"25":2,"117":1,"189":2,"234":1,"555":1,"602":3}}],["readme",{"2":{"382":1}}],["reader",{"2":{"237":2,"274":1,"622":1}}],["readonlytargetrules",{"2":{"139":1}}],["readable",{"2":{"109":1,"115":1}}],["reading",{"0":{"496":1},"2":{"82":1}}],["read",{"0":{"82":1,"160":1},"1":{"83":1,"84":1,"85":1,"86":1,"87":1,"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"171":1},"2":{"20":1,"32":1,"40":1,"48":1,"52":1,"68":1,"76":2,"109":2,"120":1,"123":1,"128":1,"196":3,"201":1,"237":2,"342":1,"407":1,"496":1}}],["ready",{"0":{"258":1,"485":1},"2":{"17":1,"129":1,"130":1,"261":1,"402":1,"407":1,"464":1,"488":1}}],["re",{"2":{"13":1,"21":1,"25":1,"33":1,"69":1,"94":1,"96":1,"107":1,"109":1,"115":3,"129":1,"131":1,"261":1,"280":1,"289":1,"364":1,"370":1,"464":1,"488":1,"536":1,"598":2}}],["repository",{"2":{"554":1,"598":1}}],["repo",{"2":{"301":1}}],["reports",{"2":{"415":1}}],["reporting",{"2":{"220":1}}],["report",{"2":{"212":1}}],["reported",{"2":{"93":1}}],["representing",{"2":{"601":1}}],["representation",{"2":{"557":1,"575":1}}],["represent",{"2":{"229":1,"531":1}}],["represents",{"2":{"119":2,"191":1,"193":1,"509":1,"533":1,"534":1,"556":1,"557":1,"602":2}}],["represented",{"2":{"51":1,"108":2,"532":1,"601":1}}],["replay",{"2":{"57":1,"288":1,"349":1,"489":1,"598":1,"601":1,"602":1}}],["replaced",{"2":{"97":1,"98":1,"366":1}}],["replace",{"2":{"6":1,"93":1,"97":1,"98":1,"103":1,"129":1,"141":1,"142":1,"143":1,"144":1,"145":1,"146":1,"147":1,"148":1,"152":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"171":1,"177":1,"180":1,"186":1,"212":1,"220":1,"378":1,"468":1,"471":1,"491":1,"536":1,"603":2}}],["republic",{"2":{"12":2}}],["regardless",{"2":{"573":1}}],["region",{"2":{"413":1,"465":1}}],["regions",{"0":{"11":1,"12":1},"1":{"12":1},"2":{"11":1}}],["registration",{"2":{"141":1}}],["registry",{"2":{"25":1}}],["registered",{"2":{"561":1,"601":2,"602":5}}],["registers",{"2":{"159":1}}],["registersession",{"0":{"141":1},"2":{"141":1}}],["register",{"2":{"123":1,"134":2,"141":1,"371":1,"557":1}}],["regulations",{"2":{"11":1,"12":1}}],["resembling",{"2":{"583":1,"586":1}}],["reset",{"2":{"124":1}}],["res",{"2":{"214":3,"215":3,"217":3,"218":3,"221":3,"222":3,"223":3,"225":3,"226":3,"245":3,"378":2,"577":2,"579":2,"582":2,"585":2,"587":2,"588":3,"595":2}}],["resides",{"2":{"127":1}}],["reside",{"2":{"127":1}}],["resilient",{"2":{"5":1,"25":1}}],["resolution",{"2":{"380":1}}],["resolving",{"0":{"97":1}}],["resources",{"2":{"74":1,"93":6,"371":1,"411":1,"550":1}}],["resubmitted",{"2":{"56":1}}],["resulting",{"2":{"514":1,"515":1,"516":1,"571":1}}],["result",{"2":{"37":1,"69":3,"107":2,"108":1,"198":1,"342":1,"382":2,"494":1,"534":1,"563":1,"575":1,"576":1,"578":2,"609":1,"614":2}}],["resultsyes",{"2":{"575":1}}],["results",{"2":{"24":3,"105":1,"578":1}}],["restarted",{"2":{"378":1}}],["restart",{"2":{"137":1,"380":1}}],["rest",{"0":{"36":1,"39":1},"1":{"37":1,"38":1,"39":1,"40":1,"41":1},"2":{"25":1,"32":1,"36":3,"38":2,"39":1,"252":1,"253":1,"356":1,"497":1}}],["restricted",{"0":{"11":1},"1":{"12":1}}],["respect",{"2":{"516":1}}],["respectively",{"2":{"120":1,"534":1,"618":1}}],["respective",{"2":{"23":1,"35":1,"84":1,"254":1,"370":1,"600":1,"601":1}}],["responds",{"2":{"249":1}}],["responsive",{"2":{"320":1}}],["responsibility",{"2":{"503":1,"534":1,"562":1}}],["responsibilities",{"2":{"102":1}}],["responsible",{"2":{"100":1,"102":1,"103":1,"348":1,"350":1}}],["responsenodataobjectholds",{"2":{"573":1}}],["response",{"0":{"572":1,"573":1,"575":1,"578":1,"580":1,"583":1,"586":1,"609":1},"1":{"573":1,"574":1,"575":1,"576":2,"577":2,"578":1,"579":2,"580":1,"581":2,"582":2,"583":1,"584":2,"585":2,"586":1,"587":2,"588":1},"2":{"37":2,"48":1,"93":1,"117":8,"141":1,"142":2,"143":2,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"171":1,"180":2,"187":7,"219":1,"227":1,"229":2,"230":1,"239":2,"243":1,"246":1,"248":1,"249":2,"306":4,"339":1,"555":1,"572":2,"573":2,"575":1,"577":1,"578":1,"579":1,"582":1,"585":1,"586":1,"587":1,"588":2,"608":4,"609":2,"628":4}}],["responses",{"0":{"574":1},"1":{"575":1,"576":1,"577":1,"578":1,"579":1,"580":1,"581":1,"582":1,"583":1,"584":1,"585":1,"586":1,"587":1,"588":1},"2":{"25":1,"37":1,"573":1,"577":1,"579":1,"582":1,"585":1,"587":1,"588":2,"608":1}}],["vulnerate",{"2":{"565":1}}],["v1",{"0":{"526":1},"2":{"419":1,"553":1,"554":4}}],["v18",{"2":{"21":1,"33":1}}],["v6",{"0":{"262":1},"1":{"263":1,"264":1,"265":1,"266":1,"267":1,"268":1,"269":1,"270":1},"2":{"262":2,"263":1,"265":1,"270":1}}],["volume",{"2":{"189":1}}],["void",{"2":{"69":3,"94":2,"107":3,"129":7,"141":1,"143":1,"187":1,"370":1,"382":1}}],["v3",{"0":{"95":1},"1":{"96":1,"97":1},"2":{"274":1,"622":1}}],["v258",{"2":{"427":1}}],["v242",{"2":{"427":1}}],["v2",{"0":{"95":1,"537":1},"1":{"96":1,"97":1},"2":{"274":2,"419":1,"427":1,"528":1,"622":2}}],["v",{"2":{"44":2,"237":2,"247":1}}],["vs",{"0":{"50":1},"2":{"36":1}}],["venly",{"2":{"429":1}}],["venezuela",{"2":{"12":1}}],["ver",{"2":{"553":2,"554":1}}],["verifying",{"2":{"564":1,"602":1}}],["verifymessage",{"2":{"319":1}}],["verify",{"0":{"317":1,"319":1},"2":{"273":2,"274":1,"279":1,"317":1,"319":1,"372":1,"554":1,"555":1,"563":1,"602":1,"608":1,"621":2,"622":1,"627":1}}],["verifies",{"2":{"516":1,"553":1,"570":1,"602":1}}],["verifiedonly",{"2":{"24":2,"229":2,"230":2,"239":2,"243":2}}],["verified",{"2":{"24":3,"107":1,"229":1,"230":2,"239":2,"241":1,"243":2,"285":1,"516":1,"565":1,"601":2,"602":1}}],["verifiying",{"2":{"431":1}}],["verification",{"0":{"516":1,"550":1,"551":1,"555":1},"1":{"551":1,"552":2,"553":2,"554":2,"555":1},"2":{"392":2,"513":1,"550":2,"552":1,"563":1,"611":1,"612":1}}],["verifiable",{"2":{"210":1,"312":1,"431":2}}],["version=v1",{"2":{"554":1}}],["version=",{"2":{"378":2}}],["versions",{"0":{"177":1,"252":1},"1":{"178":1},"2":{"177":1,"251":1,"262":1,"378":3,"552":1}}],["versioning",{"2":{"80":1,"153":1}}],["version",{"0":{"163":1,"253":1},"2":{"76":1,"80":3,"97":1,"105":1,"137":1,"153":3,"163":3,"177":2,"178":2,"251":1,"304":1,"372":1,"419":2,"480":1,"539":1,"540":1,"541":1,"542":1,"548":1,"549":1,"554":1,"557":1,"559":1,"563":1}}],["versa",{"2":{"50":1}}],["very",{"2":{"24":1,"69":1,"77":1,"85":1,"93":1,"108":1,"149":1,"280":1,"380":1,"392":1}}],["ve",{"2":{"18":1,"46":1,"50":1,"68":3,"75":1,"84":1,"96":1,"105":1,"110":1,"111":1,"112":1,"114":1,"115":1,"123":1,"127":2,"129":1,"130":1,"254":1,"280":2,"320":1,"345":1,"351":1,"367":1,"370":1,"376":1,"380":1,"382":2,"403":1,"406":1,"588":1}}],["vite",{"2":{"595":2,"597":2,"598":2,"605":2,"606":2}}],["virtual",{"2":{"203":1,"424":1,"516":1}}],["virtually",{"2":{"57":1}}],["visit",{"2":{"553":1}}],["visibility",{"2":{"199":1}}],["visible",{"2":{"195":2,"413":1,"465":1,"590":1}}],["visualizations",{"2":{"189":1}}],["visual",{"2":{"155":1,"178":2}}],["vice",{"2":{"50":1}}],["viewing",{"2":{"194":1}}],["viewable",{"2":{"107":1,"195":1}}],["view",{"2":{"20":1,"52":1,"195":1,"378":2,"402":1,"451":3,"498":1,"516":1,"548":1,"598":1,"608":1,"609":1}}],["via",{"0":{"78":1,"150":1,"303":1},"2":{"10":1,"27":1,"44":2,"45":1,"58":1,"68":2,"69":2,"76":3,"78":3,"92":1,"93":1,"96":1,"105":1,"117":1,"122":2,"129":1,"188":2,"191":1,"192":1,"248":1,"256":1,"260":1,"263":1,"280":4,"303":3,"305":1,"351":1,"359":1,"360":1,"361":1,"362":1,"371":1,"374":2,"379":1,"382":2,"413":2,"453":1,"457":1,"463":1,"465":2,"468":1,"472":2,"481":1,"483":1,"487":1,"561":1,"564":1,"566":1,"607":1,"612":1}}],["video",{"2":{"3":2,"9":1,"206":1,"254":1}}],["vanishes",{"2":{"592":1}}],["vary",{"2":{"304":1,"480":1,"553":1}}],["var",{"2":{"141":1,"142":1,"143":1,"144":1,"145":1,"146":1,"147":1,"148":1,"152":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"171":1,"180":1,"186":1,"249":1}}],["varies",{"2":{"427":1,"496":1}}],["variety",{"2":{"9":1,"20":1,"52":1,"56":1,"77":2,"149":2,"220":1}}],["variable",{"2":{"115":1,"119":1,"124":1,"175":1,"452":1}}],["variables",{"2":{"115":1,"212":1,"220":1}}],["variation",{"2":{"110":1,"112":1,"114":1}}],["various",{"2":{"7":1,"28":1,"203":1,"244":1,"347":1,"383":1,"427":1,"444":1}}],["valuable",{"2":{"188":1,"431":1}}],["value=",{"2":{"378":2}}],["valueasstring",{"2":{"115":2,"116":1}}],["value",{"0":{"508":1},"2":{"48":8,"49":1,"108":4,"109":1,"115":1,"182":7,"185":1,"190":1,"198":1,"219":1,"227":1,"247":1,"249":2,"269":1,"285":1,"306":5,"307":2,"308":2,"310":1,"341":1,"496":1,"504":2,"508":1,"510":1,"516":3,"529":1,"530":1,"535":2,"544":1,"548":4,"554":2,"555":1,"563":1,"576":1,"578":1,"602":15,"608":1,"609":2,"616":1,"617":1,"618":1,"628":5,"629":2,"630":2,"633":2,"635":1}}],["valuestringthe",{"2":{"548":1}}],["values",{"0":{"500":1},"2":{"3":1,"78":2,"93":1,"105":1,"108":1,"115":1,"128":1,"150":1,"322":1,"323":1,"326":1,"328":1,"330":1,"332":1,"443":1,"444":1,"449":1,"450":1,"525":1,"553":1,"555":2,"602":1}}],["vals",{"2":{"184":1,"548":1}}],["val",{"2":{"184":4}}],["validity",{"2":{"504":1,"557":1}}],["valid`",{"2":{"274":1,"622":1}}],["validations",{"0":{"617":1}}],["validationrequired",{"2":{"586":1,"588":1}}],["validation",{"0":{"497":1,"586":1,"610":1,"613":1,"614":1,"616":1,"618":1},"1":{"498":1,"499":1,"500":1,"587":1,"611":1,"612":1,"613":1,"614":2,"615":3,"616":2,"617":2,"618":1},"2":{"497":1,"536":1,"555":1,"568":1,"586":1,"587":1,"588":2,"595":1,"597":2,"612":1,"613":2,"614":1,"616":3,"617":3,"618":4}}],["validating",{"2":{"274":1,"431":1,"534":1,"622":1}}],["validator",{"2":{"274":3,"622":3}}],["validatesession",{"2":{"614":2}}],["validatesequencewalletproof",{"2":{"274":2,"622":2}}],["validates",{"2":{"498":1,"536":1,"568":1}}],["validated",{"2":{"379":1,"499":1,"503":1,"522":2,"614":1,"616":1}}],["validate",{"2":{"68":1,"274":1,"392":2,"491":1,"497":1,"498":1,"516":2,"525":1,"567":1,"597":1,"611":1,"614":1,"622":1}}],["valid",{"0":{"521":1},"2":{"117":1,"129":1,"246":1,"281":1,"319":1,"387":1,"392":2,"405":1,"503":1,"509":1,"516":4,"518":1,"528":1,"529":1,"533":1,"534":1,"541":2,"563":1,"567":2,"570":1,"601":1,"605":1,"614":1}}],["jxlg9b",{"2":{"541":1}}],["jit",{"2":{"429":1,"430":1}}],["join",{"2":{"540":1,"542":1}}],["joined",{"2":{"514":1,"515":1}}],["jointly",{"2":{"391":1}}],["job",{"2":{"44":2}}],["jobid",{"2":{"44":1}}],["jq",{"2":{"58":1,"248":1}}],["jan",{"2":{"601":1}}],["java",{"2":{"279":1,"627":2}}],["javascript",{"2":{"20":1,"274":1,"276":1,"381":1,"622":1,"624":1}}],["jacket",{"2":{"48":1}}],["jpg",{"2":{"37":1}}],["july",{"2":{"416":1}}],["just",{"0":{"430":1},"2":{"24":1,"37":1,"51":1,"85":1,"115":2,"127":1,"129":1,"143":1,"211":1,"256":1,"260":1,"273":1,"279":1,"280":3,"375":1,"380":1,"406":1,"429":1,"463":1,"483":1,"487":1,"621":1,"627":1}}],["jurisdictions",{"2":{"11":1,"12":1}}],["jvpalhbthl7vgn6jv0ydqafy",{"2":{"21":1,"22":1,"30":4,"33":1,"34":1,"43":4,"44":4,"229":3,"230":3,"232":3,"239":3,"241":3,"243":4}}],["js",{"0":{"21":1,"33":1,"53":1,"251":1,"252":1,"253":1,"301":2,"305":1,"481":1,"603":1},"2":{"20":1,"21":1,"30":1,"33":1,"40":1,"43":1,"44":2,"52":1,"67":1,"214":1,"215":1,"217":1,"218":1,"221":1,"222":1,"223":1,"225":1,"226":1,"229":1,"230":1,"232":1,"237":1,"239":1,"241":1,"243":1,"245":1,"251":2,"253":1,"254":1,"278":1,"279":1,"280":2,"304":3,"305":3,"480":1,"481":3,"626":1,"627":1}}],["jsonrpcprovider",{"2":{"6":1,"274":1,"496":1,"622":1}}],["json",{"2":{"3":2,"17":1,"30":3,"37":1,"43":3,"44":6,"48":1,"49":1,"58":1,"76":2,"186":2,"187":1,"196":2,"201":1,"214":4,"215":4,"217":4,"218":4,"219":3,"221":4,"222":4,"223":4,"225":4,"226":4,"227":3,"229":3,"230":3,"232":3,"235":2,"237":1,"239":3,"241":3,"243":3,"245":4,"246":3,"247":1,"248":1,"249":1,"304":2,"381":1,"396":3,"397":2,"398":1,"399":1,"403":1,"404":3,"405":1,"411":1,"480":2,"538":1,"539":1,"556":1,"557":2,"603":2}}],["jwtdetails",{"2":{"603":5}}],["jwt",{"0":{"600":1,"601":1,"602":1},"1":{"601":1,"602":1,"603":1},"2":{"2":1,"3":1,"16":1,"541":1,"600":1,"603":3}}],["1970",{"2":{"601":1}}],["191",{"0":{"514":1},"2":{"514":1,"540":2,"557":1}}],["1712775416",{"2":{"557":1}}],["1712775116",{"2":{"557":1}}],["177514099z",{"2":{"553":1}}],["1699442705",{"2":{"578":1,"609":1}}],["1699442705965",{"2":{"578":1,"609":1}}],["1699443005",{"2":{"578":1,"609":1}}],["1699440462",{"2":{"576":1}}],["1699440462686",{"2":{"576":1}}],["1699440762",{"2":{"576":1}}],["167168",{"2":{"553":1}}],["1600000000",{"2":{"540":1,"541":1,"542":1,"548":3,"549":1}}],["1600086400",{"2":{"540":1,"541":1,"542":1,"548":1,"549":1}}],["160",{"2":{"57":2,"532":1}}],["1st",{"2":{"548":1}}],["1147",{"2":{"576":1}}],["11",{"0":{"406":1},"2":{"602":1,"605":4}}],["1155",{"0":{"243":1,"307":1,"629":1},"2":{"27":1,"37":2,"48":2,"49":2,"229":2,"307":2,"401":1,"403":1,"629":2}}],["155",{"2":{"349":1}}],["102951017z",{"2":{"605":1}}],["102950917z",{"2":{"605":1}}],["109787921z",{"2":{"605":1}}],["109234880945084120673",{"2":{"605":4}}],["10",{"0":{"405":1},"2":{"170":1,"182":1,"605":2,"614":1}}],["10000000000",{"2":{"439":1}}],["1000000000000000000",{"2":{"108":1,"247":1,"249":1,"306":3,"310":1,"548":1,"628":3,"635":1}}],["1000",{"2":{"182":1,"548":1}}],["100",{"2":{"150":2,"152":1,"299":1,"440":1}}],["10^6",{"2":{"182":1}}],["10^decimals",{"2":{"108":1}}],["10^18",{"2":{"108":1}}],["149",{"2":{"427":1}}],["1447300",{"2":{"378":1}}],["14",{"2":{"73":1,"602":2}}],["18",{"2":{"58":2,"108":2,"109":1}}],["1271",{"2":{"392":1,"503":1,"513":1,"519":1}}],["123",{"2":{"288":1,"404":2}}],["123456",{"2":{"614":1}}],["1234",{"2":{"44":3}}],["1200x400",{"2":{"281":2,"293":1}}],["128",{"2":{"58":1}}],["12",{"0":{"407":1},"2":{"49":2,"525":1}}],["13+",{"2":{"251":1}}],["13",{"0":{"253":1},"2":{"251":1,"253":1}}],["131092",{"2":{"37":1}}],["137",{"2":{"30":1,"37":1,"43":1,"44":1,"146":1,"161":1,"265":1,"439":1,"455":1,"540":1,"548":1,"576":1,"578":1,"609":2}}],["1",{"0":{"195":1,"314":1,"355":1,"396":1,"435":1,"459":1,"567":1},"2":{"3":13,"30":1,"43":2,"44":3,"58":3,"86":1,"108":4,"115":1,"116":1,"133":1,"177":2,"182":2,"184":1,"245":2,"281":2,"286":1,"293":1,"351":2,"353":1,"361":1,"362":1,"376":1,"378":3,"391":4,"396":1,"405":1,"407":1,"411":1,"452":1,"515":2,"520":1,"521":1,"523":2,"534":2,"540":1,"541":1,"542":2,"548":2,"549":1,"553":2,"554":10,"557":1,"564":1,"601":1,"602":1,"603":1,"617":2,"618":2}}],["3rd",{"2":{"564":1}}],["3843b48b32b98fa311cbcd1604c0c6931f03c75075212e8bb4c06d02a3d53509",{"2":{"554":1}}],["365294f408bcc5913b44110544bb611255d05666f89fd182900330bc117744fa563c2afcf74808b719ac7a29492099c6",{"2":{"554":1}}],["36000",{"2":{"286":1}}],["39381",{"2":{"548":1}}],["3+",{"2":{"388":1}}],["30",{"2":{"190":1}}],["33",{"2":{"157":1}}],["34",{"2":{"157":1}}],["32",{"2":{"119":2,"157":1,"175":1,"315":1,"525":1,"605":3}}],["3",{"0":{"197":1,"316":1,"398":1,"437":1,"461":1},"1":{"198":1},"2":{"3":1,"56":1,"81":1,"86":1,"154":1,"177":3,"178":1,"281":2,"293":1,"378":2,"411":1,"468":1,"520":1,"521":2,"523":2,"528":1,"534":1,"603":1,"605":1}}],["x19ethereum",{"2":{"514":1}}],["xmlns",{"2":{"378":4}}],["xml",{"2":{"378":6}}],["xattr",{"2":{"159":1}}],["xavier",{"2":{"49":1}}],["xavi",{"2":{"49":1}}],["xcodeproj",{"2":{"159":3}}],["xcode",{"0":{"159":1},"2":{"159":2,"374":2}}],["xyz",{"2":{"21":1,"22":1,"72":1}}],["x",{"2":{"2":1,"16":1,"21":1,"30":2,"33":1,"43":2,"44":4,"58":1,"229":2,"230":2,"232":2,"237":2,"239":2,"241":2,"243":2,"245":1,"248":1,"407":1,"555":4,"564":2}}],["x27",{"2":{"0":1,"3":1,"13":1,"17":10,"18":1,"20":2,"21":8,"22":1,"24":1,"30":24,"33":7,"36":1,"37":5,"40":1,"43":16,"44":22,"46":1,"48":1,"49":2,"50":1,"52":1,"56":1,"58":4,"64":1,"65":6,"66":1,"68":5,"69":3,"74":1,"75":1,"76":2,"77":1,"78":3,"80":1,"81":1,"83":1,"84":6,"85":1,"87":1,"88":2,"93":5,"94":1,"96":1,"98":1,"101":1,"104":1,"105":3,"106":1,"107":1,"109":1,"110":4,"111":1,"112":4,"114":4,"115":7,"117":6,"123":2,"127":5,"128":2,"129":3,"130":2,"131":1,"132":2,"136":2,"149":1,"150":1,"157":1,"178":1,"185":1,"188":1,"201":2,"202":1,"214":10,"215":10,"217":10,"218":10,"221":10,"222":10,"223":10,"225":10,"226":10,"229":16,"230":17,"232":13,"237":16,"239":13,"241":7,"243":14,"245":2,"246":2,"247":14,"248":6,"249":6,"252":4,"253":3,"254":2,"261":1,"265":4,"266":4,"272":1,"273":5,"274":16,"277":1,"279":3,"280":3,"281":5,"283":2,"285":1,"288":1,"303":2,"306":17,"307":16,"308":10,"309":10,"312":2,"314":4,"315":2,"316":1,"317":4,"318":2,"319":4,"320":1,"322":1,"340":6,"342":3,"345":1,"351":1,"364":3,"365":2,"367":2,"368":1,"370":4,"372":2,"376":1,"377":1,"378":8,"380":3,"381":4,"382":4,"396":1,"398":3,"405":1,"406":1,"411":4,"419":1,"424":2,"429":1,"430":9,"431":1,"436":2,"437":2,"439":6,"440":6,"441":5,"443":4,"449":9,"450":9,"452":8,"454":6,"455":17,"460":2,"461":2,"464":1,"469":1,"488":1,"492":1,"494":1,"496":4,"497":2,"498":1,"503":1,"504":5,"505":1,"508":1,"509":2,"510":2,"511":1,"512":1,"514":2,"515":28,"516":1,"522":1,"523":8,"524":1,"526":12,"533":2,"534":2,"535":24,"537":10,"538":1,"539":1,"541":2,"548":5,"550":1,"553":1,"554":1,"556":1,"557":2,"559":4,"561":1,"564":3,"565":2,"577":3,"579":3,"582":3,"585":3,"587":2,"588":4,"589":1,"590":3,"591":1,"592":2,"593":1,"595":5,"597":5,"598":24,"600":1,"601":5,"603":18,"605":4,"606":4,"612":2,"614":1,"620":1,"621":5,"622":16,"625":1,"627":3,"628":17,"629":16,"630":10,"633":10,"634":10}}],["hd",{"2":{"601":1}}],["hypervisor",{"2":{"563":1}}],["html",{"2":{"378":1,"555":1}}],["http",{"2":{"20":2,"40":1,"52":1,"229":1,"230":1,"232":1,"239":1,"241":1,"243":1,"372":1,"378":4,"381":2,"496":1}}],["https",{"2":{"3":8,"6":1,"17":1,"20":2,"21":2,"22":2,"24":2,"30":2,"31":1,"33":1,"37":5,"39":3,"41":1,"43":2,"44":5,"48":4,"49":3,"52":2,"58":5,"66":1,"73":1,"96":1,"137":1,"173":1,"214":2,"215":2,"217":2,"218":2,"221":2,"222":2,"223":2,"225":2,"226":2,"229":3,"230":3,"232":3,"237":3,"239":3,"241":3,"243":3,"245":2,"247":2,"248":1,"253":1,"274":2,"277":1,"280":1,"281":2,"293":1,"305":2,"372":1,"377":1,"378":2,"387":1,"404":1,"407":2,"411":1,"474":1,"475":1,"481":2,"540":1,"553":1,"554":1,"555":3,"601":1,"602":1,"605":4,"622":2,"625":1}}],["human",{"2":{"109":1,"115":1}}],["hint",{"2":{"285":1}}],["hidden",{"2":{"195":1,"369":1}}],["hi",{"2":{"180":1}}],["hit",{"2":{"159":2}}],["highly",{"2":{"251":1,"320":1,"322":1,"339":1}}],["high",{"2":{"25":1,"189":1,"190":1,"557":1}}],["higher",{"2":{"4":1}}],["history",{"0":{"87":1,"238":1,"239":1,"240":1,"241":1},"1":{"239":1,"241":1},"2":{"25":2,"27":2,"87":3,"98":1,"239":6,"241":6}}],["hold",{"2":{"538":1}}],["holds",{"2":{"68":1,"103":1,"431":2,"491":1,"541":1}}],["horizon",{"2":{"470":3}}],["horik",{"2":{"49":1}}],["home",{"2":{"252":3}}],["hook",{"2":{"252":1,"414":1,"437":1,"466":1,"598":2,"617":1,"618":2}}],["hooks",{"2":{"252":2,"598":1}}],["hope",{"2":{"105":1,"106":1,"548":1}}],["house",{"2":{"25":1}}],["hosting",{"2":{"395":1,"470":1}}],["hosted",{"2":{"381":1,"564":1,"601":1}}],["hosts",{"2":{"21":1,"22":1,"387":1}}],["host",{"2":{"20":1,"52":1,"285":1}}],["however",{"2":{"48":1,"76":1,"88":1,"93":1,"98":1,"117":1,"141":1,"142":1,"143":1,"144":1,"145":1,"146":1,"147":1,"148":1,"152":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"171":1,"180":1,"186":1,"351":1,"379":1,"382":1,"431":1,"453":1,"472":1,"554":1,"612":1}}],["how",{"0":{"99":1,"189":1,"205":1,"252":1,"253":1,"394":1,"577":1,"579":1,"582":1,"585":1,"587":1},"1":{"100":1,"101":1,"102":1,"103":1,"395":1,"396":1,"397":1,"398":1,"399":1,"400":1,"401":1,"402":1,"403":1,"404":1,"405":1,"406":1,"407":1},"2":{"3":1,"13":1,"19":1,"29":2,"32":1,"37":1,"42":2,"46":1,"76":1,"79":1,"87":1,"88":1,"109":2,"111":1,"113":1,"115":1,"117":2,"127":1,"133":1,"151":1,"212":1,"274":1,"280":1,"322":1,"341":1,"346":1,"369":1,"379":1,"385":1,"386":1,"393":1,"407":1,"413":1,"432":1,"441":1,"454":2,"465":1,"471":1,"472":1,"527":1,"532":1,"556":1,"602":1,"622":1,"627":1}}],["h",{"2":{"17":3,"30":2,"43":2,"44":4,"58":1,"120":1,"121":1,"122":1,"123":1,"129":3,"177":2,"185":1,"214":3,"215":3,"217":3,"218":3,"221":3,"222":3,"223":3,"225":3,"226":3,"229":2,"230":2,"232":2,"237":2,"239":2,"241":2,"243":2,"245":1,"248":1,"555":1}}],["hence",{"2":{"536":1}}],["henrique",{"2":{"49":1}}],["hello",{"2":{"514":1,"581":1}}],["helps",{"2":{"133":1,"548":1}}],["helper",{"2":{"108":1}}],["help",{"2":{"11":1,"24":1,"46":1,"75":1,"78":2,"105":1,"106":1,"229":1,"230":1,"239":1,"243":1,"254":1,"274":1,"312":1,"369":1,"395":1,"430":1,"470":1,"622":1}}],["helpful",{"2":{"9":1,"24":1,"77":1,"149":1,"241":1,"243":1,"346":1}}],["he",{"2":{"419":1,"614":1}}],["hexdataslice",{"2":{"525":1}}],["hexzeropad",{"2":{"525":1}}],["hexlify",{"2":{"315":1}}],["hextoaddress",{"2":{"247":1}}],["hex",{"2":{"119":1,"168":1,"514":1,"515":1}}],["hexadecimal",{"2":{"69":1,"108":1,"322":2,"323":1,"325":1,"326":1,"327":1,"328":2,"330":1,"332":1,"363":2}}],["hesitate",{"2":{"106":1}}],["heirarchy",{"2":{"102":1}}],["head",{"2":{"397":1,"406":1}}],["header",{"2":{"159":1,"185":1,"411":1,"555":2}}],["headers",{"2":{"2":1,"16":1,"214":1,"215":1,"217":1,"218":1,"221":1,"222":1,"223":1,"225":1,"226":1,"245":1}}],["heavily",{"2":{"345":1}}],["heard",{"2":{"111":1}}],["healthok",{"2":{"553":1}}],["healthy",{"2":{"25":1}}],["health",{"2":{"25":1,"555":1}}],["here",{"2":{"14":1,"20":1,"26":1,"27":1,"48":1,"49":1,"52":1,"69":1,"77":1,"78":1,"86":1,"87":1,"117":3,"123":3,"127":1,"129":1,"149":1,"150":1,"153":1,"161":1,"174":2,"221":1,"241":1,"243":1,"253":2,"270":1,"274":1,"281":1,"372":1,"380":1,"382":1,"383":1,"386":1,"414":1,"427":1,"432":1,"441":1,"452":1,"454":1,"466":1,"555":1,"603":1,"607":2,"622":1}}],["hard",{"2":{"598":1}}],["hardware",{"0":{"158":1},"2":{"158":1,"388":1,"562":1}}],["half",{"2":{"569":1}}],["happy",{"2":{"430":1}}],["happen",{"2":{"68":1,"564":1}}],["had",{"2":{"97":1,"471":1}}],["handling",{"2":{"102":1,"187":2,"491":1,"536":1,"598":1}}],["handlegooglelogin",{"2":{"598":3}}],["handled",{"2":{"122":1,"593":1}}],["handles",{"2":{"107":1,"593":1}}],["handlers",{"2":{"281":1}}],["handler",{"2":{"69":1,"94":1,"107":1,"598":3}}],["handle",{"2":{"6":2,"8":1,"39":1,"88":1,"93":1,"115":1,"151":2,"152":2,"347":1,"588":1,"598":1}}],["hand",{"2":{"49":1,"159":1,"195":1,"210":1}}],["hat",{"2":{"48":2}}],["haiti",{"2":{"12":1}}],["having",{"2":{"5":1,"196":1,"281":1,"369":1}}],["haven",{"2":{"74":1,"76":1,"382":1}}],["have",{"2":{"5":1,"8":1,"24":1,"25":1,"28":1,"46":1,"48":1,"51":1,"57":1,"65":1,"68":1,"73":1,"84":2,"88":2,"93":6,"97":2,"106":2,"108":1,"110":1,"112":1,"114":1,"115":2,"117":2,"120":1,"123":2,"133":1,"134":2,"136":1,"159":1,"182":1,"190":1,"194":1,"202":1,"204":2,"206":1,"210":2,"216":1,"220":1,"273":1,"274":2,"280":1,"281":1,"306":1,"321":1,"351":1,"352":1,"356":1,"371":2,"374":2,"378":1,"380":2,"381":1,"382":1,"386":1,"388":1,"389":1,"393":1,"396":1,"405":1,"472":1,"509":1,"522":1,"529":1,"533":1,"534":1,"536":1,"539":1,"548":1,"550":1,"552":1,"555":2,"559":2,"562":1,"573":1,"600":1,"602":1,"621":1,"622":2,"628":1}}],["hashalgorithm",{"2":{"554":1}}],["hashtree",{"2":{"535":7}}],["hashed",{"2":{"522":1,"535":1}}],["hasheddata",{"2":{"515":2}}],["hashes",{"2":{"235":1,"239":1,"361":1,"503":1,"535":1}}],["hashfromstring",{"2":{"237":1}}],["hash",{"0":{"522":1,"523":1},"1":{"523":1,"525":1},"2":{"121":1,"122":1,"237":1,"249":1,"324":1,"333":1,"336":1,"337":1,"338":1,"361":1,"497":1,"498":1,"502":1,"503":1,"511":1,"516":6,"525":2,"532":1,"533":1,"534":1,"563":3,"575":1,"598":4,"608":2}}],["has",{"2":{"0":1,"9":1,"24":1,"67":1,"84":2,"97":1,"109":2,"117":1,"129":1,"196":1,"278":1,"298":1,"303":1,"352":1,"365":1,"366":1,"379":1,"388":1,"430":2,"469":1,"472":1,"495":1,"496":1,"503":1,"517":1,"520":1,"534":2,"569":1,"570":1,"590":1,"601":2,"617":2,"618":1,"626":1}}],["ubiquitous",{"2":{"351":1}}],["umd",{"2":{"305":3,"481":3}}],["utc",{"2":{"602":2}}],["utf",{"2":{"378":2}}],["utilises",{"2":{"419":1}}],["utility",{"2":{"317":1,"455":1}}],["utilizing",{"2":{"3":1}}],["utilized",{"2":{"279":1,"627":1}}],["utilize",{"2":{"2":1,"16":1,"50":1,"598":1}}],["utils",{"2":{"306":3,"307":2,"308":2,"309":2,"315":2,"317":1,"319":1,"496":2,"515":1,"523":3,"525":7,"535":4,"628":3,"629":2,"630":2,"633":2,"634":2}}],["utransakonramp",{"2":{"150":4}}],["ue",{"2":{"129":1,"151":2,"152":2,"187":1}}],["ufunction",{"2":{"129":1}}],["ufunctions",{"2":{"129":1}}],["ugenericnativeencryptor",{"2":{"129":1}}],["uauthenticator",{"2":{"129":6,"130":1,"131":2,"132":1,"141":1,"187":4}}],["uobject",{"2":{"129":4}}],["ux",{"2":{"60":1,"78":2,"210":1}}],["u",{"2":{"22":1,"34":1,"54":1}}],["ukraine",{"2":{"12":1}}],["unauthenticated",{"2":{"534":1}}],["unauthorized",{"2":{"387":1,"469":1}}],["unbalanced",{"2":{"531":1}}],["unusable",{"2":{"503":1,"506":1,"509":1}}],["unknown",{"2":{"503":1,"602":1}}],["unpkg",{"2":{"305":1,"481":1}}],["unparalleled",{"2":{"113":1}}],["undefined",{"2":{"247":1,"249":1,"451":1,"598":1}}],["underlying",{"2":{"424":1,"492":1,"494":1}}],["underwent",{"2":{"415":1}}],["undergoing",{"2":{"129":1}}],["under",{"2":{"75":1,"93":2,"97":2,"98":2,"109":1,"159":2,"174":1,"175":2,"369":3,"372":1,"374":1,"378":1,"379":1,"380":2,"387":2,"404":1,"405":1,"521":1,"590":1,"591":1}}],["understanding",{"0":{"341":1},"2":{"115":1,"608":1}}],["understands",{"2":{"106":1}}],["understand",{"2":{"13":1,"88":1,"341":1,"346":1}}],["undone",{"2":{"200":1}}],["uncomment",{"2":{"139":2}}],["unzip",{"2":{"136":1}}],["unsanitized",{"2":{"503":1}}],["unsafe",{"2":{"345":1}}],["unsupported",{"2":{"93":1,"602":1}}],["unstoppable",{"2":{"37":1}}],["unexpected",{"2":{"93":1}}],["unleash",{"2":{"256":1,"260":1,"463":1,"483":1,"487":1}}],["unless",{"2":{"81":1,"115":1,"322":1}}],["unlock",{"0":{"591":1},"2":{"255":1,"259":1,"462":1,"468":2,"482":1,"486":1,"590":1,"591":2,"592":1}}],["unlimited",{"2":{"57":1,"509":2,"518":1}}],["unlike",{"2":{"57":1,"559":2}}],["unnoticed",{"2":{"76":1}}],["unfamiliar",{"2":{"69":1,"94":1,"107":1,"370":1}}],["until",{"2":{"65":1,"198":1,"252":1,"592":1,"613":1}}],["unix",{"2":{"557":1,"601":1,"602":2}}],["uniswap",{"2":{"303":1}}],["universal",{"0":{"452":1,"631":1,"632":1},"2":{"210":2,"256":1,"260":1,"452":1,"463":1,"472":3,"478":1,"483":1,"487":1}}],["unit",{"2":{"37":1,"49":1}}],["unityactivity",{"2":{"378":2}}],["unitythemeselector",{"2":{"378":2}}],["unityplayer",{"2":{"378":2}}],["unityplayeractivity",{"2":{"378":2}}],["unitypackage",{"2":{"76":2,"382":1}}],["unity3d",{"2":{"378":3}}],["unity",{"0":{"23":1,"35":1},"2":{"8":1,"23":1,"35":1,"63":3,"68":1,"69":3,"72":2,"73":2,"74":1,"76":3,"80":3,"81":1,"82":1,"94":1,"96":3,"104":1,"105":2,"107":1,"210":1,"284":1,"345":3,"370":1,"374":1,"378":4,"379":1,"380":2,"381":1,"382":1,"393":1}}],["unique",{"0":{"243":1},"2":{"27":1,"93":1,"386":1,"396":1,"430":2,"454":1,"496":1,"541":1,"601":1,"602":1}}],["unverified",{"2":{"24":1}}],["unreals",{"2":{"175":1}}],["unrealengine",{"2":{"137":1}}],["unreal",{"0":{"23":1,"35":1,"159":1,"178":1},"2":{"8":1,"23":1,"35":1,"127":2,"136":2,"137":3,"153":3,"154":1,"155":1,"158":1,"159":4,"174":1,"177":2,"178":4,"210":1,"284":1,"393":1}}],["uindexersupport",{"2":{"187":1}}],["uint96",{"2":{"535":1}}],["uint160",{"2":{"532":1}}],["uint16",{"2":{"529":1,"534":1}}],["uint32",{"2":{"120":1,"185":1,"530":1}}],["uint80",{"2":{"519":1}}],["uint8",{"2":{"119":1,"341":1,"515":1,"523":4,"532":1,"534":1}}],["uint256",{"2":{"48":1,"49":1,"57":1,"115":1,"185":1,"306":4,"307":4,"308":2,"309":2,"339":1,"405":2,"523":2,"532":2,"535":2,"548":3,"628":4,"629":4,"630":2,"633":2,"634":2}}],["uint64",{"2":{"44":1,"219":3,"227":2,"246":1}}],["uint",{"2":{"44":1,"341":1}}],["uipanels",{"2":{"102":1,"103":1}}],["uipanel",{"0":{"102":1},"2":{"101":1,"102":1}}],["uipages",{"2":{"102":1}}],["uipage",{"0":{"100":1},"2":{"100":1,"101":2,"102":2}}],["ui",{"0":{"73":1,"98":1,"104":1,"126":1,"128":1,"129":1},"1":{"99":1,"100":1,"101":1,"102":1,"103":1,"104":1,"105":2,"106":2,"127":1,"128":1},"2":{"8":1,"76":1,"88":1,"93":1,"98":6,"99":1,"100":1,"102":2,"103":3,"104":2,"105":1,"106":1,"117":2,"123":1,"127":1,"128":1,"129":1,"130":1,"139":1,"210":1,"364":1,"369":2}}],["ultimate",{"2":{"7":1,"255":1,"259":1,"462":1,"482":1,"486":1}}],["uri",{"0":{"201":1,"404":1},"2":{"48":2,"49":4,"194":1,"201":5}}],["uris",{"2":{"3":1,"194":1,"201":1,"377":1,"385":1}}],["urls",{"2":{"387":1}}],["url",{"0":{"399":1},"2":{"3":2,"6":2,"17":1,"37":2,"44":1,"49":1,"68":2,"73":2,"81":1,"93":1,"96":1,"127":1,"129":2,"131":1,"147":1,"196":1,"219":1,"227":1,"293":1,"320":2,"371":1,"372":3,"376":2,"378":3,"381":1,"383":1,"399":1,"403":1,"404":2,"411":1,"431":1,"446":1,"601":2,"603":1}}],["usual",{"2":{"597":2}}],["usually",{"2":{"115":1,"122":1,"405":1,"548":1,"557":1,"601":1}}],["usd",{"2":{"150":2,"152":1,"427":1}}],["usdcaddress",{"2":{"86":3}}],["usdc",{"2":{"56":1,"58":2,"182":1,"247":2,"249":2,"298":1,"425":1,"567":1}}],["us",{"2":{"106":1,"115":1,"137":1,"274":1,"555":1,"622":1}}],["usable",{"2":{"56":1,"595":1}}],["usa",{"2":{"11":1}}],["usage",{"0":{"4":1,"36":1,"38":1,"264":1},"1":{"37":1,"38":1,"39":1,"40":1,"41":1,"265":1,"266":1},"2":{"13":2,"32":1,"117":1,"129":1,"254":1,"387":1,"522":1,"603":1}}],["useaddfundsmodal",{"2":{"461":2}}],["usecheckoutmodal",{"2":{"437":3}}],["useweb3react",{"2":{"266":2}}],["useismounted",{"2":{"252":2}}],["useeffect",{"2":{"252":1,"598":3}}],["useexplicitorsharedpchs",{"2":{"139":1}}],["usequencewallet",{"0":{"124":1,"152":1},"2":{"123":17,"124":1,"141":3,"142":3,"143":3,"144":3,"145":3,"146":3,"147":3,"148":3,"152":3,"162":2,"163":2,"164":2,"165":2,"166":2,"167":2,"168":2,"169":2,"170":2,"171":2,"180":3,"186":2,"187":6}}],["usefulness",{"2":{"113":1}}],["useful",{"2":{"36":1,"69":1,"75":3,"82":1,"84":1,"108":1,"117":1,"198":1,"300":1,"312":1,"443":1}}],["usestate",{"2":{"598":4}}],["usesessionhash",{"2":{"598":5}}],["uses",{"2":{"25":1,"48":1,"49":1,"93":1,"127":1,"379":1,"471":1,"491":1,"492":1,"538":1,"563":1}}],["userid",{"2":{"605":2}}],["username",{"2":{"430":1}}],["useraccountaddress",{"2":{"84":1,"87":1}}],["useraddress",{"2":{"84":2,"245":2,"246":1,"314":1,"317":1}}],["userwalletaddress",{"2":{"78":2,"150":2}}],["user",{"0":{"77":1,"78":1,"150":1,"570":1,"599":1},"1":{"78":1,"79":1},"2":{"8":2,"13":2,"58":3,"65":1,"68":2,"77":1,"78":1,"83":1,"84":1,"88":1,"93":3,"115":1,"117":6,"129":1,"130":1,"149":1,"150":2,"210":2,"244":1,"245":1,"246":1,"272":1,"273":6,"274":1,"280":1,"281":5,"283":1,"291":1,"294":2,"295":3,"296":1,"303":9,"312":4,"316":1,"318":1,"364":2,"365":2,"366":7,"367":3,"371":1,"382":1,"388":1,"430":17,"431":4,"467":2,"468":4,"470":2,"471":4,"490":1,"538":1,"541":4,"555":1,"557":1,"559":1,"560":1,"564":4,"565":2,"567":2,"593":1,"597":3,"598":1,"599":1,"600":1,"601":8,"602":6,"605":1,"612":2,"614":2,"620":1,"621":6,"622":1}}],["users",{"0":{"271":1,"619":1,"631":3},"1":{"272":1,"273":1,"274":1,"620":1,"621":1,"622":1},"2":{"7":1,"10":1,"56":2,"68":1,"76":1,"77":2,"86":1,"88":1,"93":3,"98":1,"117":3,"118":1,"129":1,"149":2,"202":2,"210":4,"222":1,"223":1,"244":1,"255":1,"256":2,"259":1,"260":2,"273":2,"280":8,"281":3,"293":1,"297":2,"298":1,"300":3,"311":1,"312":2,"321":1,"345":1,"368":1,"413":3,"414":1,"429":2,"430":1,"431":1,"462":1,"463":4,"465":3,"466":1,"467":1,"469":1,"470":1,"471":3,"472":2,"475":1,"482":1,"483":2,"486":1,"487":2,"561":1,"565":1,"593":1,"602":4,"607":1,"610":1,"611":1,"612":1,"621":2}}],["use",{"0":{"252":1,"253":1},"2":{"3":4,"5":1,"8":2,"20":1,"25":2,"28":1,"32":1,"48":3,"50":3,"52":1,"57":1,"69":3,"76":1,"78":1,"79":1,"83":1,"84":2,"85":1,"87":1,"94":1,"98":1,"105":1,"107":1,"108":1,"109":2,"110":1,"111":1,"112":1,"113":1,"114":1,"115":2,"116":1,"117":2,"123":4,"127":1,"131":2,"132":2,"133":1,"150":1,"151":1,"161":1,"173":1,"174":1,"185":1,"187":1,"188":1,"201":3,"220":1,"221":1,"234":1,"241":2,"243":2,"244":1,"252":1,"253":4,"254":1,"273":1,"276":1,"279":1,"281":2,"291":1,"299":1,"318":1,"320":2,"321":1,"340":5,"342":4,"343":1,"351":2,"352":1,"353":1,"356":1,"363":1,"368":1,"369":2,"372":1,"378":1,"388":1,"392":2,"398":1,"405":1,"410":1,"422":1,"437":1,"452":1,"454":2,"455":1,"457":1,"468":1,"489":1,"505":1,"539":1,"546":1,"553":1,"556":1,"557":1,"563":1,"566":1,"597":1,"598":3,"602":1,"607":1,"613":1,"617":1,"621":1,"624":1,"627":2}}],["used",{"0":{"251":1},"2":{"2":1,"16":1,"25":1,"51":1,"65":1,"93":1,"110":1,"112":1,"114":1,"117":1,"129":5,"141":1,"144":1,"145":1,"146":1,"147":1,"157":1,"161":1,"180":1,"181":1,"213":1,"220":1,"224":1,"252":1,"262":1,"286":1,"322":1,"323":1,"324":1,"325":1,"326":1,"327":1,"328":1,"331":1,"332":1,"334":1,"335":1,"336":1,"337":1,"345":1,"349":1,"356":1,"365":1,"382":1,"388":1,"419":2,"443":1,"445":1,"471":1,"491":1,"505":1,"506":1,"522":1,"525":1,"527":1,"528":1,"530":1,"531":1,"534":1,"536":1,"546":1,"554":1,"561":1,"562":1,"575":1,"578":1,"600":1,"601":3,"616":1}}],["using",{"0":{"73":1,"136":1,"137":1,"152":1,"252":1,"253":1,"262":1,"313":1,"455":1,"631":1},"1":{"263":1,"264":1,"265":1,"266":1,"267":1,"268":1,"269":1,"270":1,"314":1,"315":1,"316":1,"317":1,"318":1,"319":1},"2":{"2":1,"5":1,"6":1,"16":1,"21":2,"24":1,"25":3,"29":1,"30":1,"33":3,"42":1,"43":1,"45":3,"64":1,"65":1,"68":1,"75":1,"76":1,"77":3,"81":2,"82":2,"96":2,"97":5,"98":2,"101":1,"103":1,"109":2,"110":1,"111":1,"112":1,"113":1,"114":1,"115":1,"116":1,"117":4,"119":2,"120":1,"123":1,"127":1,"130":1,"136":1,"139":2,"149":3,"150":1,"175":1,"177":2,"187":2,"198":1,"229":1,"230":1,"232":1,"234":1,"239":1,"241":1,"243":1,"247":1,"249":2,"251":2,"253":4,"254":2,"273":1,"274":1,"280":2,"281":1,"303":2,"311":1,"317":1,"320":3,"350":1,"355":1,"363":1,"364":1,"366":6,"367":1,"369":1,"371":2,"382":2,"383":1,"414":2,"419":1,"425":1,"430":2,"431":1,"432":1,"438":1,"441":1,"452":1,"453":1,"455":1,"463":1,"466":2,"467":1,"468":1,"471":1,"475":1,"479":1,"489":2,"495":1,"497":1,"503":1,"504":1,"524":1,"536":1,"555":1,"557":1,"561":1,"562":1,"564":1,"595":1,"597":1,"598":1,"601":1,"606":1,"612":1,"618":1,"621":1,"622":1,"627":1}}],["upon",{"2":{"319":1,"379":1,"392":1,"575":1,"578":1}}],["ups",{"2":{"210":1}}],["upate",{"2":{"194":1}}],["upgradeable",{"0":{"491":1},"2":{"491":2}}],["upgradeability",{"2":{"425":1}}],["upgraded",{"2":{"424":1}}],["upgrade",{"0":{"207":1},"2":{"177":1,"178":1,"207":1}}],["upgrading",{"0":{"95":1,"176":1,"177":1,"178":1},"1":{"96":1,"97":1,"177":1,"178":2},"2":{"117":1}}],["uproject",{"2":{"136":1,"139":1}}],["updating",{"0":{"407":1},"2":{"76":1,"177":1,"204":1,"493":1,"497":1,"509":1}}],["updateimagehash",{"0":{"502":1},"1":{"503":1,"505":1,"506":1,"507":1,"508":1,"509":1},"2":{"502":1,"504":2,"509":1,"510":2}}],["updateimplementation",{"2":{"494":3,"504":1,"509":1}}],["updateconfiguration",{"0":{"494":1},"1":{"495":1}}],["updated",{"2":{"177":1,"303":1,"491":1,"501":1,"504":1,"509":3,"510":2,"511":1,"512":2,"522":1,"552":1}}],["updateproviderurl",{"0":{"147":1},"2":{"147":1}}],["updatenetworkid",{"0":{"146":1},"2":{"146":1}}],["updates",{"0":{"236":1,"510":1},"2":{"44":1,"98":1,"127":1,"173":1,"194":1,"502":1,"524":1,"528":1,"530":1,"559":1}}],["update",{"0":{"199":1,"403":1,"492":1,"504":1},"1":{"200":1,"493":1,"494":1,"495":1,"496":1,"497":1,"498":1,"499":1,"500":1,"501":1,"502":1,"503":1,"504":1,"505":2,"506":2,"507":2,"508":2,"509":2,"510":2,"511":2,"512":2},"2":{"1":1,"2":1,"3":1,"127":1,"128":1,"136":1,"146":1,"147":1,"157":1,"194":1,"197":1,"199":2,"383":1,"397":1,"407":1,"430":2,"494":1,"504":3,"506":1,"598":1}}],["uptime",{"2":{"25":1,"553":1}}],["uploaded",{"2":{"399":1,"405":1}}],["upload",{"0":{"398":1},"2":{"3":6,"194":1,"196":1,"197":1,"397":1,"398":2}}],["up",{"0":{"397":1,"400":1,"595":1,"597":1},"2":{"2":1,"16":1,"19":1,"24":1,"81":1,"82":1,"93":1,"127":3,"155":2,"157":1,"159":1,"177":1,"182":1,"371":1,"378":1,"380":2,"381":1,"385":1,"388":1,"393":1,"400":1,"405":1,"552":1,"593":1,"595":1,"598":2}}],["kms",{"2":{"562":1,"563":1}}],["kind",{"2":{"564":1}}],["kinds",{"2":{"21":1,"22":1,"254":1}}],["kitconfig",{"2":{"441":2,"455":2}}],["kitcheckoutprovider",{"0":{"436":1,"460":1},"2":{"436":3,"460":3}}],["kitprovider",{"2":{"436":2,"441":3,"455":2,"460":2}}],["kit",{"0":{"255":1,"258":1,"259":1,"414":1,"435":1,"436":1,"453":1,"459":1,"460":1,"462":1,"466":1,"482":1,"485":1,"486":1},"1":{"256":1,"260":1,"454":1,"463":1,"464":1,"483":1,"487":1},"2":{"210":2,"254":1,"255":1,"256":1,"258":1,"259":1,"260":1,"261":2,"414":1,"435":3,"436":1,"437":1,"441":2,"443":1,"452":2,"453":3,"454":2,"455":3,"456":1,"459":3,"460":1,"461":1,"462":1,"463":4,"464":2,"466":1,"478":1,"479":1,"482":1,"483":1,"485":1,"486":1,"487":1,"488":2,"607":1}}],["kitexavier",{"2":{"49":1}}],["korea",{"2":{"12":1}}],["kept",{"2":{"388":1,"559":1}}],["keccak256",{"2":{"516":2,"523":5,"525":2,"533":1,"534":1,"535":2}}],["keccak",{"2":{"121":1}}],["keepwalletopened",{"0":{"290":1},"2":{"290":2}}],["keeps",{"2":{"24":1,"348":1}}],["keeping",{"2":{"8":1}}],["keep",{"2":{"2":1,"16":1,"93":1,"290":1,"538":1}}],["key=",{"2":{"598":1}}],["keyword",{"2":{"115":1}}],["keychain",{"2":{"89":1,"90":1}}],["keyboard",{"2":{"73":1}}],["keystore",{"2":{"133":1}}],["keys",{"0":{"312":1,"313":1,"469":1,"562":1},"1":{"314":1,"315":1,"316":1,"317":1,"318":1,"319":1},"2":{"2":1,"16":1,"64":1,"88":2,"93":4,"119":1,"174":2,"280":1,"311":2,"312":3,"378":1,"391":1,"425":1,"467":3,"468":6,"469":1,"471":3,"472":3,"557":1,"559":2,"562":1,"565":1,"567":1}}],["key",{"0":{"174":1,"256":1,"260":1,"315":1,"318":1,"463":1,"467":1,"470":1,"471":1,"483":1,"487":1,"561":1},"1":{"468":1,"469":1,"470":1,"471":1},"2":{"2":4,"6":2,"16":4,"17":3,"19":1,"21":1,"30":2,"33":2,"43":2,"44":3,"64":2,"65":2,"93":3,"121":3,"133":1,"159":2,"174":2,"175":1,"188":1,"190":1,"198":1,"212":1,"214":1,"215":1,"217":1,"218":1,"220":1,"221":1,"222":1,"223":1,"225":1,"226":1,"229":3,"230":2,"232":2,"237":1,"239":2,"241":2,"243":1,"247":2,"274":1,"281":1,"312":2,"315":1,"316":1,"317":2,"318":1,"319":2,"320":1,"348":2,"355":2,"383":1,"421":1,"425":1,"452":1,"455":1,"467":3,"468":9,"469":1,"470":6,"471":6,"472":1,"538":2,"548":1,"556":1,"557":5,"561":2,"562":2,"563":1,"564":1,"567":3,"595":2,"597":3,"598":3,"605":2,"606":2,"608":2,"609":2,"622":1}}],["knowledge",{"2":{"591":1}}],["known",{"2":{"115":1,"202":1,"340":2,"342":2,"415":1,"511":1,"512":1,"525":1}}],["know",{"2":{"0":1,"304":1,"480":1}}],["pseudo",{"2":{"535":1}}],["photos",{"2":{"600":1}}],["phone",{"2":{"280":2,"474":1,"475":1,"564":1}}],["philosophy",{"2":{"467":1}}],["phase",{"2":{"159":2}}],["python",{"2":{"279":1,"627":2}}],["pcr2",{"2":{"554":1}}],["pcr1",{"2":{"554":1}}],["pcr0",{"0":{"553":1},"2":{"553":3,"554":3,"555":2,"563":3}}],["pchusagemode",{"2":{"139":1}}],["pchusage",{"2":{"139":1}}],["pcs",{"2":{"91":1}}],["pc",{"0":{"377":1},"2":{"81":1,"154":1,"431":1}}],["png",{"2":{"37":2,"49":1,"58":3,"281":2,"293":1}}],["pnpm",{"2":{"6":1,"21":1,"53":1,"63":1,"304":1,"381":3,"435":1,"459":1,"480":1}}],["pixel",{"2":{"605":1}}],["picture",{"2":{"601":2,"603":2}}],["picks",{"2":{"380":1}}],["pick",{"2":{"24":1,"81":1,"281":1,"296":1,"380":1}}],["piped",{"2":{"571":1}}],["pipeline",{"2":{"13":1}}],["pinata",{"0":{"397":1},"2":{"395":1,"397":2,"398":1,"399":1,"404":1,"405":1}}],["ping",{"0":{"162":1},"2":{"82":2,"162":3}}],["piece",{"2":{"25":1}}],["pluginconfig",{"2":{"177":1}}],["plugins",{"2":{"127":1,"136":2,"137":1,"139":1,"378":1,"380":1}}],["plugin",{"2":{"127":6,"136":2,"137":1,"173":3,"177":1}}],["plain",{"2":{"273":1,"621":1}}],["platform",{"0":{"631":1,"632":1},"2":{"88":3,"93":2,"371":1,"431":1,"560":1,"602":1}}],["platforms",{"0":{"375":1,"473":1},"1":{"474":1,"475":1,"476":1},"2":{"88":3,"93":1,"364":1,"372":1,"375":1,"377":1,"379":2,"381":1,"383":1,"627":1}}],["platformspecificsetup",{"2":{"81":2}}],["playground",{"2":{"443":1}}],["playing",{"2":{"368":1}}],["playfabsettings",{"2":{"382":1}}],["playfablogin",{"2":{"382":2}}],["playfab",{"0":{"382":1},"2":{"93":1,"367":1,"369":1,"382":6}}],["players",{"2":{"210":1}}],["playerprefs",{"2":{"92":1}}],["player",{"2":{"84":2,"203":1,"376":2,"378":3,"380":1}}],["play",{"2":{"37":1,"74":1,"76":1,"316":1}}],["placed",{"2":{"253":1}}],["places",{"2":{"98":1}}],["place",{"0":{"436":1,"460":1},"2":{"25":1,"93":1,"133":2,"564":1,"565":1}}],["plan",{"2":{"19":1,"115":1}}],["please",{"2":{"1":1,"4":1,"11":1,"12":2,"19":1,"30":1,"32":1,"44":2,"63":1,"68":1,"76":1,"93":2,"96":1,"98":1,"105":1,"106":1,"108":1,"109":1,"115":1,"117":2,"133":1,"134":3,"139":1,"155":1,"158":1,"173":1,"177":1,"229":1,"254":2,"262":1,"301":1,"369":1,"370":2,"372":1,"374":1,"378":3,"379":2,"382":1,"430":1,"554":1,"612":1}}],["people",{"2":{"12":1}}],["permanently",{"2":{"200":1}}],["permission",{"2":{"2":1,"16":1}}],["period",{"2":{"191":1,"557":1,"602":1}}],["person",{"2":{"515":1,"602":1}}],["personal",{"2":{"374":1}}],["personalized",{"2":{"244":1}}],["personally",{"2":{"157":1}}],["perspective",{"2":{"303":1,"600":1}}],["persists",{"2":{"124":1}}],["persistence",{"0":{"124":1}}],["persistent",{"2":{"88":2}}],["per",{"0":{"427":1},"2":{"93":2,"246":1,"366":1,"560":1,"561":1,"564":1}}],["performs",{"2":{"564":1}}],["performed",{"2":{"321":1}}],["performing",{"2":{"212":1}}],["perform",{"2":{"96":1,"105":1,"181":1,"287":1,"318":1,"372":1,"555":1,"557":1}}],["performance",{"2":{"13":1}}],["perfectly",{"2":{"276":1,"624":1}}],["perfect",{"2":{"8":1,"105":2}}],["packet",{"2":{"539":1,"540":1,"541":1,"542":1,"548":1,"549":1,"575":1,"578":1}}],["packetobjectcontents",{"2":{"539":1}}],["packaging",{"0":{"155":1},"1":{"156":1,"157":1,"158":1,"159":1},"2":{"155":1,"159":2,"175":1}}],["packaged",{"2":{"159":1,"175":1}}],["packages",{"2":{"73":1,"96":1,"304":2,"480":2}}],["package",{"0":{"71":1,"73":1},"1":{"72":1,"73":1,"74":1,"75":1},"2":{"73":4,"74":3,"75":1,"76":6,"96":2,"105":1,"117":1,"159":1,"263":1,"276":1,"280":1,"304":5,"374":2,"381":1,"386":1,"452":1,"453":1,"472":1,"480":4,"598":1,"624":1}}],["palette",{"2":{"443":1}}],["pair",{"2":{"348":1,"421":1,"557":1}}],["paid",{"2":{"117":1,"330":1}}],["pawn",{"2":{"127":1}}],["panels",{"2":{"102":1}}],["panel",{"2":{"102":1,"366":1}}],["pagination",{"2":{"84":1}}],["pageprops",{"2":{"253":2}}],["pagesize",{"2":{"246":1}}],["pages",{"0":{"252":1},"2":{"100":1,"102":1,"251":2}}],["page",{"2":{"9":2,"82":1,"84":4,"93":1,"100":2,"170":3,"171":3,"195":1,"197":1,"208":1,"246":4,"251":1,"252":2,"298":1,"322":1,"364":1,"383":1,"436":1,"449":1,"450":1,"460":1,"553":1}}],["pattern",{"2":{"429":1,"534":1}}],["patterns",{"2":{"9":1,"13":1}}],["path",{"2":{"159":1,"281":3,"378":1,"598":2}}],["path=",{"2":{"73":1,"96":1}}],["patch",{"2":{"80":2,"153":2}}],["pasting",{"2":{"115":1}}],["pasted",{"2":{"93":1,"303":1}}],["paste",{"2":{"69":1,"73":1,"372":1,"378":1,"385":1,"397":1,"404":1}}],["passing",{"2":{"441":1,"443":1,"451":1}}],["password",{"0":{"389":1},"2":{"364":1,"383":3,"389":2,"390":1,"597":1}}],["passes",{"2":{"361":1,"362":1}}],["passed",{"2":{"24":1,"129":1,"288":1,"430":3,"449":2,"450":2,"497":1}}],["pass",{"2":{"2":1,"3":3,"16":1,"24":1,"29":1,"42":1,"116":1,"120":1,"129":2,"187":1,"221":1,"229":1,"273":1,"281":3,"361":1,"362":1,"437":1,"455":1,"548":1,"595":1,"597":1,"602":1,"621":1}}],["parsing",{"0":{"600":1,"601":1,"602":1,"603":1},"1":{"601":1,"602":1,"603":1}}],["parsejwt",{"2":{"603":2}}],["parse",{"2":{"46":1,"50":1,"600":1,"603":3}}],["parent",{"0":{"391":1,"392":1},"1":{"392":1},"2":{"127":2,"383":1,"391":4,"392":4,"534":1}}],["parentheses",{"2":{"115":1}}],["param",{"2":{"516":2}}],["parametersasobjectarray",{"2":{"115":2,"116":1}}],["parameters",{"0":{"495":1,"499":1,"503":1},"2":{"115":5,"150":1,"282":1,"349":1,"527":1,"536":1}}],["parameter",{"2":{"108":1,"109":1,"115":1,"129":1,"130":1,"221":1,"320":1,"322":1,"339":1,"370":1,"444":1,"541":1}}],["parallelize",{"2":{"56":1}}],["parallel",{"2":{"56":1,"57":1}}],["parts",{"2":{"603":5}}],["partner",{"2":{"565":3,"566":2}}],["parties",{"2":{"559":1,"592":1}}],["partial",{"2":{"506":1,"565":1}}],["particularly",{"2":{"251":1,"312":1,"345":1}}],["particular",{"0":{"243":1},"2":{"27":3,"234":1,"241":1}}],["part",{"2":{"56":1,"67":1,"103":1,"197":1,"278":1,"381":1,"386":1,"557":1,"603":1,"626":1}}],["party",{"2":{"11":1,"563":2,"564":1,"590":3,"591":1,"592":1,"601":2}}],["paytrie",{"2":{"413":1,"465":1}}],["paypal",{"2":{"280":1}}],["payloadno",{"2":{"539":1,"540":1}}],["payloads",{"0":{"538":1,"572":1},"1":{"539":1,"540":1,"541":1,"542":1,"543":1,"544":1,"545":1,"546":1,"547":1,"548":1,"549":1,"573":1,"574":1,"575":1,"576":1,"577":1,"578":1,"579":1,"580":1,"581":1,"582":1,"583":1,"584":1,"585":1,"586":1,"587":1,"588":1},"2":{"538":2,"577":2,"579":2,"582":2,"585":2,"587":2,"588":3,"608":1,"609":1}}],["payload",{"0":{"539":1,"541":1,"542":1,"543":1,"549":1},"1":{"540":1,"541":1,"542":1,"543":1,"544":2,"545":2,"546":2,"547":2,"548":2,"549":1},"2":{"159":1,"310":1,"538":1,"539":7,"541":3,"542":2,"543":2,"548":2,"549":2,"572":2,"603":5,"635":1}}],["payable",{"2":{"115":4}}],["payments",{"2":{"433":1}}],["payment",{"2":{"58":2,"297":2,"298":2,"413":1,"465":1}}],["pay",{"0":{"10":1},"2":{"7":1,"10":1,"56":1,"58":2,"77":1,"115":1,"117":3,"149":1,"249":1,"425":1}}],["pull",{"2":{"456":1}}],["pulling",{"2":{"411":1}}],["push",{"2":{"182":1,"183":1,"184":1,"185":1,"559":1}}],["purchasing",{"2":{"300":1}}],["purchased",{"2":{"137":1}}],["purchase",{"2":{"10":1,"77":1,"149":1,"299":1,"300":2,"413":2,"457":1,"463":1,"465":2,"607":1}}],["purpose",{"2":{"80":1,"107":1}}],["purple",{"2":{"48":1,"201":1}}],["publishing",{"2":{"378":1}}],["published",{"2":{"24":1,"555":1}}],["publishcollection",{"2":{"3":1}}],["publickey",{"2":{"121":1}}],["publically",{"2":{"107":1}}],["public",{"2":{"2":1,"3":1,"5":1,"16":1,"69":3,"94":2,"107":3,"121":2,"139":1,"194":1,"195":2,"348":1,"370":1,"372":1,"382":1,"388":2,"489":1,"516":1,"555":1,"557":1,"563":1}}],["publicly",{"2":{"2":2,"16":2,"559":1,"563":1,"590":1}}],["putting",{"2":{"115":1}}],["put",{"2":{"3":3,"76":1,"463":1}}],["port",{"2":{"372":2,"381":1}}],["potential",{"2":{"210":1,"256":1,"260":1,"463":1,"483":1,"487":1}}],["potentially",{"2":{"127":1,"321":1,"345":1}}],["pointer",{"2":{"119":1,"123":3}}],["point",{"2":{"108":1,"199":1,"321":1,"322":1,"403":1,"410":1,"454":1}}],["points",{"2":{"98":1}}],["powers",{"2":{"412":1}}],["power",{"2":{"86":1,"256":1,"260":1,"463":1,"483":1,"487":1}}],["powered",{"2":{"37":1,"378":5}}],["powerful",{"2":{"25":1}}],["position",{"0":{"444":1},"2":{"444":1}}],["poses",{"2":{"203":1}}],["possibilities",{"2":{"116":1,"255":1,"259":1,"462":1,"482":1,"486":1}}],["possible",{"2":{"2":1,"12":1,"16":1,"194":1,"221":1,"281":1,"303":1,"311":2,"342":1,"392":1,"443":1,"444":1,"531":1,"534":1,"565":1,"592":1,"602":1}}],["post",{"2":{"30":2,"43":2,"44":5,"58":1,"69":1,"94":1,"107":1,"214":1,"215":1,"217":1,"218":1,"219":1,"221":1,"222":1,"223":1,"225":1,"226":1,"227":1,"229":2,"230":2,"232":2,"235":1,"237":1,"239":2,"241":2,"243":2,"245":2,"246":1,"248":1,"370":1,"379":1,"383":1,"411":1}}],["pop",{"2":{"210":1}}],["popups",{"2":{"281":1,"463":1}}],["popupmost",{"2":{"281":1}}],["popup",{"2":{"196":1,"281":1}}],["popular",{"0":{"423":1},"2":{"24":2,"37":1,"46":1,"101":1,"255":1,"256":1,"259":1,"260":1,"345":1,"374":1,"382":1,"462":1,"463":1,"482":1,"483":1,"486":1,"487":1}}],["pops",{"2":{"2":1,"16":1}}],["polygonindexer",{"2":{"82":1}}],["polygon",{"0":{"232":1},"2":{"20":2,"22":1,"30":5,"34":1,"37":4,"43":4,"44":4,"52":2,"69":1,"82":1,"86":1,"94":1,"108":1,"109":1,"110":1,"111":1,"112":1,"113":1,"114":1,"115":2,"116":1,"161":1,"229":5,"230":5,"232":5,"237":3,"239":5,"241":6,"243":5,"247":1,"248":1,"274":1,"281":1,"320":1,"363":1,"609":1,"622":1}}],["policy",{"2":{"12":1,"563":1}}],["policies",{"2":{"11":1}}],["prudent",{"2":{"469":1}}],["practical",{"2":{"103":1}}],["practices",{"2":{"46":1}}],["practice",{"2":{"46":1,"48":1,"50":2,"345":1}}],["pr",{"2":{"98":1,"106":1}}],["principal",{"2":{"602":2}}],["printed",{"2":{"372":1}}],["println",{"2":{"229":1,"230":1,"232":1,"237":1,"239":1,"241":1,"243":1,"249":2}}],["primitive",{"2":{"421":1}}],["primary",{"2":{"312":2,"429":1}}],["primarily",{"2":{"210":1,"527":1}}],["pricepertoken",{"2":{"246":1}}],["price",{"2":{"117":1,"246":1,"334":1}}],["pricesort",{"2":{"411":1}}],["prices",{"2":{"98":1}}],["pricing",{"0":{"4":1},"2":{"56":1}}],["privatedependencymodulenames",{"2":{"139":2}}],["privatedependencymodule",{"0":{"138":1},"1":{"139":1}}],["privatekeystring",{"2":{"355":1}}],["privatekey",{"2":{"121":1}}],["private",{"0":{"562":1},"2":{"88":2,"93":2,"117":1,"119":1,"121":1,"139":1,"194":1,"195":1,"312":1,"315":1,"348":2,"355":2,"467":3,"468":1,"471":1,"472":2,"557":1,"562":1,"602":2}}],["privately",{"2":{"3":1}}],["prism",{"2":{"49":1}}],["priority",{"2":{"335":1}}],["prior",{"2":{"1":1,"3":1,"127":1,"129":1,"198":1,"378":2}}],["prepare",{"0":{"396":1}}],["prepared",{"2":{"347":1,"389":1,"424":1}}],["pre",{"2":{"351":1,"352":1,"489":1,"609":1}}],["precisely",{"2":{"220":1}}],["predeployed",{"2":{"201":1}}],["presenter",{"2":{"601":1}}],["presented",{"2":{"189":1}}],["present",{"2":{"541":2,"602":4}}],["presentation",{"2":{"380":1}}],["press",{"2":{"73":1}}],["preview",{"2":{"404":1}}],["previously",{"2":{"97":1,"303":1,"355":1,"554":1}}],["previous",{"0":{"177":1},"1":{"178":1},"2":{"3":1,"310":1,"430":1,"554":1,"635":1}}],["preventing",{"2":{"598":1}}],["prevents",{"2":{"591":1}}],["prevent",{"2":{"175":1,"300":1,"383":1,"387":1,"392":1,"557":1}}],["prefixedmessage",{"2":{"514":2}}],["prefilling",{"2":{"299":1}}],["prefab",{"2":{"97":3,"98":1,"366":3,"369":2}}],["prefabs",{"2":{"75":1,"97":1,"98":1,"366":1,"369":1}}],["preference",{"2":{"471":1}}],["preferred",{"2":{"56":1}}],["prefer",{"2":{"3":1,"117":1,"210":1,"320":1}}],["profile",{"2":{"600":1,"601":1}}],["profiling",{"2":{"600":1}}],["proxy",{"2":{"494":1,"525":2,"602":2}}],["pros",{"0":{"422":1,"425":1}}],["prove",{"2":{"273":1,"621":1}}],["provisioning",{"2":{"156":1}}],["providing",{"2":{"110":1,"112":1,"114":1,"115":1,"150":1,"255":1,"259":1,"348":1,"462":1,"482":1,"486":1,"560":1}}],["provided",{"2":{"64":1,"75":1,"103":1,"108":1,"110":1,"112":1,"114":1,"235":1,"292":1,"320":1,"322":3,"340":2,"345":1,"351":1,"352":1,"363":1,"374":1,"382":2,"451":3,"492":1,"498":1,"504":1,"516":4,"530":1,"533":1,"541":1,"566":4}}],["provide",{"2":{"8":1,"9":1,"20":1,"24":1,"40":1,"52":1,"63":1,"78":2,"86":1,"98":3,"115":3,"117":1,"120":1,"175":1,"210":1,"230":1,"239":1,"241":1,"243":1,"256":1,"260":1,"312":1,"322":1,"338":1,"339":2,"340":1,"341":1,"345":1,"351":1,"369":1,"372":1,"388":1,"404":1,"420":1,"431":1,"454":1,"455":1,"463":1,"472":1,"483":1,"487":1,"534":4,"560":1,"597":1,"612":1}}],["provides",{"2":{"7":1,"13":1,"37":1,"42":1,"80":1,"116":1,"120":1,"121":1,"153":1,"203":1,"345":1,"357":1,"364":1,"369":1,"429":1,"443":1,"453":1,"555":1,"557":1,"560":2,"561":1,"565":1,"608":1}}],["providerrelative",{"2":{"427":1}}],["providerexecution",{"2":{"427":1}}],["providerurl",{"2":{"123":3}}],["provider",{"0":{"436":1,"460":1},"2":{"6":4,"25":1,"147":1,"247":3,"253":1,"274":2,"281":1,"294":2,"298":1,"317":1,"372":1,"379":1,"385":1,"386":1,"413":1,"430":3,"465":1,"496":2,"559":1,"561":4,"595":1,"598":2,"612":2,"622":2}}],["providers",{"0":{"384":1},"1":{"385":1,"386":1},"2":{"5":1,"6":1,"11":1,"25":1,"210":1,"274":1,"294":1,"297":2,"298":1,"371":2,"379":1,"383":2,"384":1,"413":4,"427":2,"429":1,"463":1,"465":4,"496":1,"559":1,"595":1,"598":1,"600":1,"612":1,"622":1}}],["produce",{"0":{"251":1},"2":{"251":1}}],["products",{"2":{"383":1}}],["production",{"2":{"174":1,"387":1}}],["product",{"2":{"98":1,"137":1,"607":1}}],["prone",{"2":{"115":1}}],["probably",{"2":{"111":1}}],["problem",{"2":{"25":1,"203":1}}],["problems",{"2":{"0":1}}],["property",{"0":{"198":1},"2":{"198":2}}],["properties",{"0":{"50":1,"528":1},"1":{"529":1,"530":1,"531":1,"532":1,"533":1,"534":1},"2":{"37":1,"48":4,"49":2,"50":6,"194":2,"198":1,"528":1}}],["proper",{"2":{"133":1,"134":2,"385":2,"503":1}}],["properly",{"2":{"93":1,"133":1,"134":1,"388":1}}],["proceed",{"2":{"602":2,"616":1}}],["proceeding",{"2":{"93":1}}],["processed",{"2":{"490":1}}],["process",{"0":{"430":1},"2":{"9":1,"65":2,"105":1,"115":3,"129":2,"159":1,"202":1,"256":1,"260":1,"281":1,"312":1,"372":1,"383":1,"405":1,"430":3,"463":1,"483":1,"487":1,"489":1,"552":1,"595":2,"597":3,"598":2,"605":2,"606":2,"608":2,"609":2,"618":1}}],["prompted",{"2":{"303":1,"404":1}}],["prompt",{"2":{"74":1,"76":1,"273":1,"303":1,"366":1,"372":2,"389":1,"430":1,"572":1,"617":1,"621":1}}],["proofstring",{"2":{"274":1,"622":1}}],["proofing",{"2":{"178":1}}],["proof",{"0":{"392":1},"2":{"68":1,"273":2,"274":6,"281":2,"286":1,"287":1,"541":2,"621":2,"622":6}}],["protocol",{"2":{"246":1,"280":1,"284":1,"411":1,"559":1}}],["protocols",{"2":{"28":1,"303":1}}],["prototyp",{"2":{"237":3}}],["protects",{"2":{"565":1,"589":1}}],["protected",{"2":{"388":1}}],["protections",{"2":{"559":1}}],["protection",{"2":{"91":1,"288":1,"383":1,"470":1,"489":1,"565":1,"612":1}}],["protect",{"2":{"57":1,"349":1,"471":1}}],["programatically",{"2":{"188":1}}],["program",{"2":{"44":1,"492":1}}],["progressively",{"2":{"280":1}}],["progress",{"2":{"13":1,"98":1}}],["pro",{"2":{"29":1,"36":1,"42":1,"159":1,"229":1,"595":1,"598":1,"605":2,"606":1}}],["projectname",{"0":{"447":1}}],["projector",{"2":{"209":1}}],["projectfilesios",{"2":{"159":1}}],["projectaccesskey",{"2":{"65":1,"173":1,"174":1,"247":6,"281":3,"452":3,"455":1,"595":1,"597":1,"598":1,"605":1,"606":1,"608":1,"609":1}}],["projectid",{"2":{"3":2,"17":1,"214":2,"215":2,"217":2,"218":2,"219":2,"221":2,"222":2,"223":2,"225":2,"226":2,"227":2,"605":2}}],["project",{"0":{"64":1,"206":1,"221":1},"2":{"2":1,"4":1,"6":1,"16":1,"17":3,"24":1,"37":1,"50":2,"58":2,"64":1,"65":1,"72":1,"76":2,"93":1,"103":1,"117":1,"127":2,"136":3,"137":1,"157":1,"159":10,"175":1,"178":2,"188":1,"189":1,"190":1,"193":1,"195":1,"204":2,"206":2,"208":1,"212":2,"214":1,"215":1,"217":1,"218":1,"219":2,"220":3,"221":1,"222":1,"223":1,"225":1,"226":1,"227":2,"230":1,"247":3,"254":1,"304":2,"364":1,"372":2,"376":1,"378":2,"380":1,"381":3,"382":2,"383":1,"385":2,"391":1,"400":1,"447":1,"480":2,"564":1,"590":2,"591":1,"595":1,"597":1,"598":1,"605":1,"606":1,"608":1,"609":1}}],["projectsettings",{"2":{"127":1,"157":1}}],["projects",{"2":{"0":1,"3":10,"46":3,"50":1,"56":1,"139":1,"195":1,"206":1}}],["circle",{"2":{"598":1}}],["cid",{"2":{"397":1,"398":1}}],["cd",{"2":{"372":1,"554":1}}],["cdn",{"0":{"305":1,"481":1},"2":{"305":1,"481":1}}],["ctx",{"2":{"247":1,"248":1,"249":3}}],["c3bgcu3lkfr9bp9jfsslenpaaaaaaaaaa",{"2":{"237":3}}],["cs",{"0":{"139":1},"2":{"139":1,"374":1}}],["c++",{"2":{"124":1,"127":1,"129":1}}],["cpp",{"2":{"120":1,"129":3}}],["cng",{"2":{"91":1}}],["c",{"2":{"69":1,"93":2,"341":1,"534":1}}],["claims",{"2":{"603":1}}],["claim",{"2":{"288":1,"601":1,"602":13}}],["classes",{"2":{"97":1}}],["class",{"2":{"65":1,"82":1,"97":1,"110":1,"112":1,"114":1,"120":1,"127":3,"351":1}}],["clears",{"2":{"148":1}}],["clone",{"2":{"554":2}}],["cloud",{"0":{"397":1},"2":{"385":1,"397":1,"404":1,"405":1}}],["clossing",{"2":{"549":1}}],["closes",{"2":{"143":1,"148":1}}],["closesession",{"0":{"143":1},"2":{"143":1,"549":2}}],["close",{"0":{"549":1,"606":1},"2":{"93":1,"178":1,"290":1,"549":1}}],["closedno",{"2":{"549":1}}],["closed",{"2":{"64":1,"88":1,"246":1,"606":2}}],["closing",{"2":{"93":1,"100":1}}],["clothes",{"2":{"48":1}}],["clipboard",{"2":{"303":2}}],["clientid=",{"2":{"598":1}}],["client=",{"2":{"253":1,"436":1,"455":1,"460":1}}],["clients",{"0":{"320":1},"1":{"321":1,"322":1,"323":1,"324":1,"325":1,"326":1,"327":1,"328":1,"329":1,"330":1,"331":1,"332":1,"333":1,"334":1,"335":1,"336":1,"337":1,"338":1},"2":{"38":1,"347":1}}],["client",{"0":{"40":1,"347":1},"2":{"20":2,"38":3,"40":2,"52":2,"115":1,"133":6,"252":2,"253":9,"274":1,"276":1,"279":2,"312":1,"317":1,"318":1,"319":1,"320":4,"321":1,"322":2,"323":1,"324":1,"325":1,"326":1,"327":2,"328":1,"329":1,"330":1,"331":2,"332":2,"333":1,"334":1,"335":1,"336":1,"337":1,"338":1,"340":7,"342":3,"343":1,"347":2,"350":1,"351":5,"353":2,"359":2,"360":2,"361":2,"362":2,"371":1,"372":1,"375":1,"377":1,"385":3,"538":1,"541":1,"548":2,"549":2,"557":1,"561":3,"567":3,"569":1,"571":1,"598":1,"601":3,"602":2,"622":1,"624":1,"627":2}}],["clicks",{"2":{"256":1,"260":1,"273":1,"463":1,"483":1,"487":1,"621":1}}],["clicking",{"2":{"190":1}}],["click",{"2":{"2":3,"16":3,"37":1,"73":2,"74":1,"75":2,"76":1,"93":1,"105":2,"137":3,"159":7,"178":2,"253":1,"390":1,"399":1,"400":1,"402":1,"404":1,"406":1}}],["cumulativegasused",{"2":{"576":1}}],["custodial",{"2":{"210":2,"383":1,"391":1,"463":1,"471":1,"472":1}}],["customui",{"0":{"130":1,"131":1,"132":1},"1":{"133":1,"134":1}}],["customspectatorpawn",{"2":{"127":2}}],["customizing",{"0":{"128":1}}],["customizationwhile",{"2":{"471":1}}],["customization",{"0":{"106":1}}],["customizable",{"2":{"104":1,"210":1}}],["customizability",{"0":{"104":1},"1":{"105":1,"106":1},"2":{"463":1}}],["customized",{"2":{"366":1}}],["customize",{"2":{"8":2,"106":1,"281":1,"441":1,"454":1}}],["custom",{"0":{"129":1,"365":1,"453":1,"454":1,"455":1,"456":1},"1":{"454":1},"2":{"9":1,"28":1,"81":1,"110":1,"112":1,"114":1,"116":1,"129":2,"244":1,"253":1,"284":1,"345":1,"371":1,"378":1,"409":1,"453":2,"454":6,"455":5,"456":2,"612":1,"613":1}}],["cut",{"2":{"49":1}}],["curious",{"2":{"115":1}}],["currencies",{"2":{"108":1}}],["currencyaddress",{"2":{"246":1}}],["currencyaddresses",{"2":{"245":2,"246":1,"411":1}}],["currency",{"2":{"83":1,"108":2,"117":2,"246":2,"298":2,"300":4,"322":1,"353":1,"457":1}}],["currently",{"2":{"64":1,"128":1,"144":1,"178":1,"201":1,"354":1,"371":1,"379":1,"382":1,"413":1,"465":1,"468":1,"565":1}}],["current",{"0":{"496":1,"511":1},"1":{"512":1},"2":{"45":1,"500":1,"511":2,"549":1,"598":1,"602":1,"605":1,"613":1}}],["curl",{"2":{"17":1,"20":1,"30":1,"43":1,"44":2,"58":1,"214":1,"215":1,"217":1,"218":1,"221":1,"222":1,"223":1,"225":1,"226":1,"229":1,"230":1,"232":1,"237":1,"239":1,"241":1,"243":1,"245":1,"248":1,"407":1,"411":1,"553":1,"555":1}}],["cuba",{"2":{"12":1}}],["center",{"2":{"444":3}}],["centers",{"2":{"120":1}}],["central",{"2":{"12":1}}],["certainty",{"2":{"273":1,"621":1}}],["certain",{"2":{"11":1,"194":1,"198":1,"244":1}}],["cross",{"2":{"214":2,"215":2,"217":2,"218":2,"221":2,"222":2,"223":2,"225":2,"226":2,"245":1}}],["crafting",{"2":{"194":1}}],["cr",{"2":{"159":1}}],["credential",{"2":{"598":1}}],["credentialresponse",{"2":{"598":2}}],["credentialsin",{"2":{"129":3}}],["credentials",{"2":{"64":1,"123":9,"127":1,"129":4,"130":1,"141":3,"142":3,"143":3,"144":3,"145":3,"146":3,"147":3,"148":4,"152":3,"162":3,"163":3,"164":3,"165":3,"166":3,"167":3,"168":3,"169":3,"170":3,"171":3,"174":1,"180":3,"186":3,"370":1,"377":1,"381":1,"471":1,"561":1}}],["credits",{"2":{"117":1}}],["credit",{"0":{"78":1,"150":1,"461":1},"2":{"77":1,"149":1,"413":1,"414":1,"457":1,"463":1,"465":1,"466":1,"607":1}}],["creation",{"2":{"497":1,"522":1,"525":1,"530":1,"560":1}}],["creating",{"0":{"3":1,"454":1},"2":{"82":1,"101":1,"107":1,"110":1,"112":1,"114":1,"159":1,"320":1,"339":2,"350":1,"372":1,"452":1,"453":1,"454":1,"456":1}}],["creator",{"2":{"403":1}}],["creators",{"2":{"113":1}}],["createroot",{"2":{"598":1}}],["createhashrouter",{"2":{"598":2}}],["create2",{"2":{"525":1,"536":1}}],["createtransaction",{"2":{"353":2}}],["createtoken",{"2":{"3":1}}],["createconnector",{"2":{"454":2}}],["createconfig",{"2":{"452":1,"455":1}}],["createcollection",{"2":{"3":1}}],["createclient",{"2":{"253":1}}],["creates",{"2":{"203":1,"468":1}}],["createasset",{"2":{"3":1}}],["createdat",{"2":{"246":1,"605":2}}],["createdby",{"2":{"246":1}}],["created",{"2":{"3":2,"84":1,"93":1,"105":1,"110":1,"112":1,"114":1,"196":1,"246":2,"351":1,"355":1,"356":1,"364":1,"366":1,"368":1,"370":1,"381":1,"382":1,"386":1,"391":1,"399":1,"403":1,"468":1,"504":1,"514":1,"534":1,"555":1,"557":1,"559":1,"590":1,"592":1,"595":1}}],["create",{"0":{"195":1,"197":1,"206":1,"452":1},"1":{"198":1},"2":{"2":1,"3":1,"6":2,"8":1,"16":1,"58":1,"65":1,"68":1,"75":1,"93":6,"105":2,"110":2,"112":2,"114":2,"116":1,"117":1,"123":1,"129":1,"133":1,"136":1,"173":1,"181":2,"182":1,"183":1,"184":1,"185":1,"187":1,"194":3,"195":1,"197":1,"206":1,"210":1,"247":1,"253":1,"274":1,"315":1,"319":1,"320":2,"340":5,"342":1,"351":2,"353":1,"355":1,"366":1,"372":1,"378":1,"382":1,"383":1,"389":1,"397":1,"400":1,"431":1,"454":3,"455":1,"467":2,"531":1,"534":1,"600":1,"622":1}}],["cryptography",{"2":{"471":1}}],["cryptographically",{"2":{"355":1}}],["cryptographic",{"0":{"121":1},"2":{"118":1,"119":1,"555":1,"563":2}}],["cryptocheckout",{"0":{"439":1},"2":{"438":1,"439":2}}],["cryptocurrencies",{"2":{"77":2,"149":2,"413":1,"465":1}}],["cryptocurrency",{"2":{"58":1,"433":1,"439":1,"457":1}}],["crypto",{"0":{"439":1},"2":{"7":1,"10":1,"11":1,"91":1,"121":1,"203":1,"463":1,"560":1}}],["cheap",{"2":{"422":1}}],["checkpoint",{"0":{"530":1},"2":{"528":1,"530":2,"535":1}}],["checked",{"2":{"522":1,"599":1}}],["checksum",{"2":{"553":1,"554":2}}],["checks",{"2":{"430":2,"504":1,"557":1,"591":1}}],["checking",{"2":{"24":1,"84":1,"439":1}}],["checkoutconfig",{"2":{"439":1}}],["checkoutsettings",{"2":{"437":2,"438":2}}],["checkout",{"0":{"433":1,"435":1,"437":1,"438":1,"439":1,"459":1},"1":{"439":1,"440":1},"2":{"10":1,"261":1,"433":1,"434":1,"435":3,"436":1,"437":3,"438":1,"457":1,"459":3,"460":1,"461":1,"463":1,"464":1,"488":1}}],["check",{"0":{"79":1,"151":1,"258":1,"485":1,"599":1},"2":{"9":1,"20":1,"28":1,"45":2,"52":1,"69":1,"79":1,"82":2,"83":1,"84":1,"93":1,"94":1,"107":1,"120":1,"129":1,"139":1,"151":1,"196":1,"261":1,"281":1,"322":1,"370":1,"409":1,"411":1,"464":1,"472":1,"488":1,"588":1,"602":1,"613":1,"627":1}}],["chrome",{"0":{"302":1},"2":{"280":2,"301":1,"302":1,"476":1,"595":1,"598":1,"605":2,"606":1}}],["chromium",{"2":{"127":1}}],["children",{"2":{"253":2}}],["child",{"2":{"102":1,"253":1,"391":2,"392":1}}],["china",{"2":{"12":1}}],["choosing",{"2":{"403":1}}],["chooses",{"2":{"303":1}}],["choose",{"2":{"6":1,"8":1,"98":1,"141":1,"142":1,"143":1,"144":1,"145":1,"146":1,"147":1,"148":1,"152":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"171":1,"178":1,"180":1,"186":1,"303":1,"372":1,"413":1,"465":1,"471":1}}],["chosen",{"2":{"100":1}}],["chose",{"2":{"76":1,"131":1,"303":1,"339":1}}],["chop",{"2":{"37":1}}],["choice",{"2":{"8":1,"400":1,"595":1}}],["changing",{"2":{"491":1}}],["changed",{"2":{"124":1,"491":1,"497":1,"536":1}}],["changes",{"0":{"390":1},"2":{"45":1,"56":1,"76":2,"80":1,"105":1,"137":1,"153":1,"159":1,"262":1,"280":1,"383":1,"390":2,"598":3}}],["change",{"2":{"2":1,"12":1,"16":1,"17":1,"37":2,"190":1,"310":1,"372":1,"492":1,"497":1,"504":1,"524":1,"539":1,"557":1,"563":1,"635":1}}],["challenge",{"2":{"203":1,"364":1,"365":1}}],["challenging",{"2":{"76":1}}],["chart",{"2":{"190":1}}],["characters",{"2":{"175":1}}],["character",{"2":{"175":1}}],["chainindexer",{"2":{"82":5,"83":3,"84":12,"85":3,"86":1,"87":3}}],["chainid",{"0":{"268":1,"327":1},"2":{"30":3,"37":1,"43":3,"44":3,"58":3,"165":1,"247":5,"248":1,"265":1,"317":2,"327":2,"363":2,"439":1,"451":1,"515":2,"608":1,"609":1,"616":1,"617":1,"618":1}}],["chain",{"2":{"2":1,"6":1,"21":2,"22":2,"24":1,"25":6,"30":1,"39":2,"42":1,"43":1,"44":1,"68":2,"69":1,"82":3,"83":1,"84":4,"85":1,"86":1,"87":1,"94":1,"108":1,"109":1,"110":1,"111":1,"112":1,"113":1,"114":1,"115":2,"116":1,"117":4,"247":1,"249":1,"268":1,"300":1,"307":1,"308":1,"309":1,"320":2,"322":2,"327":2,"331":2,"349":1,"363":5,"392":1,"401":1,"404":1,"407":1,"427":1,"452":1,"472":1,"490":1,"575":1,"629":1,"630":1,"633":1,"634":1}}],["chains",{"2":{"1":1,"25":3,"32":1,"36":2,"304":1,"355":1,"452":1,"455":1}}],["capable",{"2":{"559":1}}],["capability",{"2":{"374":3}}],["capabilities",{"2":{"13":1,"40":1,"247":1,"249":2,"279":1,"627":1}}],["calculated",{"2":{"532":1,"533":1,"534":1,"535":1}}],["caller",{"2":{"503":1}}],["called",{"2":{"31":1,"44":1,"48":1,"49":1,"247":1,"281":1,"304":1,"480":1,"495":1,"498":1,"503":1,"504":1,"505":1,"507":2,"535":1,"542":1,"543":1,"564":1,"590":1}}],["callfunction",{"2":{"340":7}}],["calldata",{"2":{"306":1,"307":2,"516":1,"628":1,"629":2}}],["callback",{"0":{"615":1},"2":{"187":2,"247":1,"377":1,"616":2}}],["callcontractfunction",{"2":{"110":1,"112":1,"114":1,"340":4,"351":1}}],["callshowauthsuccessscreen",{"2":{"129":4}}],["calls",{"2":{"24":2,"48":1,"129":3,"181":1,"345":2,"350":1,"495":1,"503":1,"538":2,"569":1}}],["calling",{"0":{"340":1},"2":{"1":1,"24":1,"58":1,"69":1,"94":1,"107":1,"115":3,"339":1,"340":1,"510":1,"511":1,"516":1,"536":1,"590":1,"591":1,"592":1,"627":1}}],["call",{"0":{"185":1,"411":1},"2":{"1":1,"2":1,"3":1,"6":1,"16":1,"20":1,"45":1,"69":2,"78":1,"94":1,"107":1,"115":5,"120":1,"123":2,"129":8,"130":1,"131":1,"132":1,"185":2,"248":1,"279":1,"340":1,"365":2,"367":1,"368":1,"382":1,"383":1,"407":1,"461":1,"504":1,"548":2,"567":1,"599":1,"627":1}}],["category",{"2":{"378":12}}],["caters",{"2":{"210":1}}],["catch",{"2":{"6":1,"79":1,"274":1,"345":2,"347":1,"370":1,"598":1,"603":1,"617":1,"622":1}}],["cached",{"2":{"148":1}}],["caches",{"2":{"25":1}}],["care",{"2":{"556":1}}],["carefully",{"2":{"88":1,"280":1}}],["cardtype",{"2":{"49":1}}],["cards",{"2":{"37":2,"49":2,"190":1}}],["card",{"0":{"78":1,"150":1,"461":1},"2":{"37":2,"49":1,"77":1,"149":1,"413":2,"414":1,"457":1,"463":1,"465":2,"466":1,"607":1}}],["causes",{"2":{"253":1}}],["cause",{"2":{"80":3,"93":1,"153":3,"461":1}}],["cast",{"2":{"49":1}}],["cases",{"2":{"50":1,"56":1,"69":1,"76":1,"117":1,"273":1,"279":1,"503":1,"586":1,"621":1,"627":1}}],["case",{"2":{"19":1,"48":1,"84":1,"85":1,"116":1,"129":1,"220":1,"340":2,"342":2,"451":1,"470":1,"497":1,"505":1,"506":1,"512":2,"548":1,"566":1,"592":1}}],["cancel",{"2":{"618":1}}],["cancelled",{"2":{"246":1,"616":1}}],["canonical",{"2":{"557":1}}],["canvas",{"2":{"369":4}}],["candidate",{"2":{"247":1,"512":1}}],["cannot",{"0":{"12":1},"2":{"200":1,"262":1,"339":1,"388":1,"563":1,"565":1,"612":1}}],["canada",{"2":{"11":1}}],["can",{"0":{"631":2},"2":{"3":3,"5":1,"11":1,"13":1,"14":1,"17":1,"21":1,"22":1,"24":1,"25":4,"26":1,"27":1,"37":3,"49":1,"50":1,"51":2,"56":1,"58":7,"63":1,"65":1,"67":1,"68":6,"69":4,"75":1,"76":1,"78":4,"82":3,"85":1,"86":2,"93":2,"94":2,"98":2,"101":2,"103":1,"105":2,"107":3,"108":2,"109":3,"110":1,"111":2,"112":1,"113":3,"114":1,"115":2,"117":6,"119":1,"120":1,"123":1,"124":1,"127":2,"129":1,"131":2,"137":1,"150":3,"152":1,"153":1,"159":3,"174":4,"175":1,"177":1,"188":2,"194":1,"196":1,"198":2,"199":2,"200":1,"201":3,"204":1,"210":1,"212":2,"213":1,"219":1,"220":2,"221":2,"222":1,"224":1,"227":1,"234":1,"241":1,"243":1,"244":1,"251":1,"252":2,"253":6,"254":1,"266":1,"273":2,"274":1,"278":1,"279":2,"280":1,"281":6,"282":1,"285":1,"297":1,"300":1,"303":3,"304":2,"305":1,"306":1,"307":1,"308":2,"309":1,"312":3,"319":1,"320":2,"321":2,"340":2,"342":1,"343":1,"345":2,"346":1,"351":1,"363":1,"366":1,"368":1,"369":1,"370":1,"380":1,"382":1,"383":1,"385":1,"386":1,"391":1,"392":2,"395":1,"396":2,"403":1,"407":2,"413":3,"414":1,"424":2,"431":2,"441":2,"443":1,"451":1,"452":1,"453":1,"454":3,"455":1,"456":1,"457":1,"463":1,"465":3,"466":1,"467":2,"468":2,"470":1,"471":2,"472":1,"480":1,"481":1,"489":1,"491":1,"492":1,"493":2,"495":1,"497":1,"503":1,"510":1,"511":2,"512":1,"515":1,"516":1,"524":1,"527":1,"529":1,"530":1,"531":2,"532":1,"534":6,"546":1,"548":1,"553":1,"554":1,"555":2,"556":1,"557":1,"561":1,"564":4,"590":3,"592":1,"598":1,"599":1,"600":2,"602":3,"606":2,"607":3,"609":1,"612":1,"614":1,"616":1,"621":2,"622":1,"626":1,"627":3,"628":1,"629":1,"630":2,"633":2,"634":1}}],["cognito",{"2":{"611":1}}],["coinbase",{"2":{"450":1}}],["coinquantity",{"2":{"439":1}}],["coins",{"2":{"256":1,"260":1,"463":1,"483":1,"487":1}}],["coingecko",{"2":{"24":1}}],["cost",{"2":{"203":1,"392":1,"522":1}}],["cover",{"2":{"203":1}}],["covalenthq",{"2":{"58":2}}],["corrupt",{"2":{"494":1}}],["corruption",{"2":{"494":1}}],["corresponds",{"2":{"498":1,"500":1,"503":1,"570":1}}],["correspond",{"2":{"449":1,"450":1,"503":1}}],["corresponding",{"2":{"1":1,"20":1,"52":1,"56":1,"219":1,"227":1,"241":1,"243":1,"430":1,"449":1,"450":1,"517":1,"518":1,"568":1,"572":1}}],["correctness",{"2":{"534":1}}],["correct",{"2":{"119":1,"182":1,"503":1,"511":1,"516":1,"530":1,"534":1,"570":1}}],["correctly",{"2":{"93":1,"127":1}}],["corner",{"2":{"190":1}}],["coreuobject",{"2":{"139":1}}],["core",{"0":{"436":1,"460":1},"2":{"128":1,"139":1,"266":1,"274":1,"494":1,"559":1,"622":1}}],["co",{"2":{"113":1}}],["countdown",{"2":{"590":3,"592":2}}],["counterparty",{"2":{"592":1}}],["counter",{"2":{"497":1,"512":1,"525":1}}],["counterfactual",{"2":{"491":1,"504":1,"536":1}}],["count",{"2":{"191":1,"515":1}}],["countryname",{"2":{"151":1,"152":1}}],["country",{"0":{"222":1},"2":{"151":3,"152":3,"220":1,"222":1}}],["countries",{"0":{"79":1,"151":1},"2":{"79":2,"151":3,"152":2}}],["could",{"2":{"127":1,"341":1,"396":1,"471":1,"555":2,"565":1,"572":1,"588":1}}],["course",{"2":{"25":1,"37":1,"280":1}}],["codestringidentifier",{"2":{"539":1}}],["codehash",{"2":{"525":2}}],["codeat",{"0":{"328":1},"2":{"328":1}}],["codefor",{"2":{"281":1}}],["codein",{"2":{"129":1,"130":1}}],["code",{"0":{"603":1,"611":1,"631":1},"2":{"20":1,"21":1,"30":1,"40":1,"43":1,"52":1,"69":2,"109":1,"111":1,"113":1,"115":3,"117":1,"124":1,"129":2,"130":2,"159":2,"178":3,"229":1,"252":1,"253":1,"303":3,"328":1,"364":1,"365":2,"367":2,"370":1,"372":1,"382":1,"491":2,"494":1,"525":2,"535":1,"536":3,"540":1,"541":2,"542":2,"543":1,"548":1,"549":2,"550":1,"553":1,"554":1,"563":5,"564":1,"575":1,"576":2,"578":3,"580":1,"581":1,"583":1,"584":1,"586":1,"597":2,"608":1,"609":2,"611":1,"612":1,"614":4}}],["coding",{"2":{"8":1}}],["coming",{"0":{"106":1},"2":{"98":1,"312":1,"495":1,"503":1}}],["comes",{"2":{"127":1,"467":1,"555":1}}],["come",{"2":{"37":1,"68":1}}],["combinations",{"0":{"521":1}}],["combination",{"2":{"37":1,"253":1,"521":1,"531":1}}],["combined",{"2":{"304":1,"468":1,"480":1,"503":1,"516":1,"518":1,"521":4,"559":1}}],["combine",{"2":{"8":1,"254":1}}],["combat",{"2":{"24":1}}],["com",{"2":{"22":2,"24":1,"30":1,"34":2,"43":1,"44":2,"48":2,"49":2,"54":2,"58":3,"66":1,"73":1,"76":1,"96":1,"137":1,"229":1,"230":1,"232":1,"237":2,"239":1,"241":1,"243":1,"253":1,"277":1,"281":2,"293":1,"295":1,"305":1,"378":8,"481":1,"541":1,"554":1,"555":2,"601":1,"602":1,"605":4,"625":1}}],["communicating",{"2":{"564":1}}],["communication",{"2":{"475":1,"564":1}}],["communicate",{"2":{"280":1}}],["community",{"2":{"203":1}}],["command",{"2":{"44":1,"72":1,"136":1,"159":1,"253":1,"372":2,"381":1,"554":2}}],["commands",{"2":{"20":1,"81":3}}],["comma",{"2":{"37":1}}],["commons",{"2":{"274":2,"622":2}}],["common",{"2":{"9":1,"46":1,"85":1,"93":1,"210":1,"220":1,"247":1,"273":1,"304":1,"566":1,"621":1}}],["computing",{"2":{"525":1,"536":1}}],["computed",{"2":{"524":1}}],["compute",{"0":{"523":1,"525":1},"2":{"512":1,"525":1}}],["computer",{"2":{"398":1,"474":1}}],["compatibility",{"2":{"559":1}}],["compatible",{"2":{"1":1,"25":4,"32":1,"36":1,"48":1,"55":1,"56":1,"254":1,"280":1,"281":1}}],["compare",{"2":{"554":1,"555":1}}],["compared",{"2":{"467":1,"511":1,"512":1}}],["comparison",{"2":{"427":2,"555":1}}],["composed",{"2":{"304":1,"421":1,"480":1}}],["component",{"2":{"101":1,"253":12,"369":1,"414":1,"466":1,"598":3,"607":1}}],["components",{"0":{"346":1},"1":{"347":1,"348":1,"349":1,"350":1},"2":{"99":1,"252":1,"253":6,"346":1,"412":2}}],["compromised",{"2":{"383":1,"388":1,"467":1,"468":2,"470":1,"471":3,"472":2,"565":3}}],["comprehensive",{"2":{"256":1,"260":1,"483":1,"487":1}}],["comprised",{"2":{"99":1}}],["compiled",{"2":{"69":1}}],["compile",{"0":{"97":1},"2":{"69":1,"97":1}}],["compliant",{"2":{"532":1}}],["complicated",{"2":{"115":2}}],["comply",{"2":{"11":1}}],["complexities",{"2":{"556":1}}],["complexity",{"2":{"8":1,"107":1}}],["complex",{"0":{"110":1,"112":1,"114":1,"555":1},"2":{"107":1,"115":1,"116":1,"430":1,"531":1}}],["completeness",{"2":{"321":1}}],["completely",{"2":{"48":1,"50":1,"75":1,"88":1,"210":1,"489":1}}],["complete",{"2":{"24":1,"66":1,"129":1,"196":2,"198":1,"277":1,"281":1,"538":1,"613":1,"625":1}}],["completedplease",{"2":{"43":1}}],["completedto",{"2":{"43":1}}],["completed",{"2":{"2":1,"16":1,"123":1,"386":1,"525":1}}],["column",{"2":{"430":2}}],["collects",{"0":{"569":1}}],["collect",{"2":{"130":1,"133":1,"569":1}}],["collected",{"2":{"129":3,"130":1,"131":1}}],["collectibles",{"2":{"256":1,"260":1,"440":1,"463":2,"483":1,"487":1}}],["collectible",{"0":{"197":1,"307":1,"629":1},"1":{"198":1},"2":{"194":4,"196":2,"197":3,"198":2,"199":1,"307":2,"629":2}}],["collectibleinfo",{"2":{"43":1}}],["collectionaddress",{"2":{"245":2,"246":1,"411":1}}],["collectionid",{"2":{"3":4}}],["collection",{"0":{"195":1,"200":1},"2":{"3":5,"194":5,"195":4,"196":1,"197":1,"198":1,"199":2,"200":2,"201":1,"230":2,"246":3,"401":1,"411":1}}],["collections",{"0":{"3":1,"194":1,"230":1},"1":{"195":1,"196":1,"197":1,"198":1,"199":1,"200":1,"201":1},"2":{"1":1,"3":10,"194":2,"195":1,"197":1}}],["colours",{"2":{"128":1}}],["color",{"0":{"105":1},"2":{"58":1,"105":3,"443":1,"463":1}}],["colorschememanager",{"2":{"105":4}}],["colors",{"2":{"8":1,"105":1,"443":2}}],["congratulations",{"2":{"406":1}}],["congo",{"2":{"12":1}}],["concept",{"2":{"202":1}}],["convenient",{"2":{"312":1}}],["convenience",{"2":{"36":1,"38":1,"106":1,"110":1,"112":1,"114":1,"117":1,"210":1,"351":1,"352":2}}],["convention",{"2":{"273":1,"621":1}}],["conversely",{"2":{"553":1}}],["conversion",{"2":{"182":1}}],["converted",{"2":{"341":1}}],["convert",{"2":{"109":1,"115":1,"120":1}}],["conflicts",{"2":{"382":1,"454":1}}],["confusing",{"2":{"93":1}}],["configs",{"2":{"516":1}}],["config=",{"2":{"436":1,"441":1,"455":2,"460":1}}],["configjsonrpcprovider",{"2":{"274":1,"622":1}}],["configurable",{"2":{"381":1}}],["configurationsigner",{"2":{"497":1}}],["configurations",{"2":{"173":1,"455":1,"511":1,"528":1,"534":2}}],["configuration",{"0":{"174":1,"383":1,"389":1,"390":1,"439":1,"440":1,"441":1,"445":1,"491":1,"497":1,"504":1,"510":1,"511":1,"512":1,"517":1,"518":1,"522":1,"524":1,"527":1,"534":1,"536":1,"561":1},"1":{"384":1,"385":1,"386":1,"387":1,"388":1,"389":1,"390":1,"391":1,"392":1,"393":1,"446":1,"447":1,"448":1,"449":1,"450":1,"498":1,"499":1,"500":1,"505":1,"506":1,"507":1,"508":1,"509":1,"510":1,"511":1,"512":2,"518":1,"519":2,"520":2,"521":2,"522":2,"523":3,"524":1,"525":3,"528":1,"529":1,"530":1,"531":1,"532":1,"533":1,"534":1,"535":1,"536":1},"2":{"64":1,"68":1,"93":2,"174":1,"177":1,"261":1,"371":1,"376":1,"383":5,"387":1,"388":1,"389":2,"390":2,"392":2,"393":1,"439":1,"440":1,"441":1,"452":1,"455":2,"464":1,"488":1,"491":2,"497":1,"498":1,"499":1,"500":1,"501":1,"502":1,"503":3,"504":4,"506":1,"511":2,"517":1,"522":1,"523":2,"524":1,"527":1,"530":1,"534":5,"535":2,"536":3,"559":1,"560":1,"561":2,"564":1,"590":2,"592":1}}],["configuring",{"0":{"438":1},"1":{"439":1,"440":1},"2":{"377":1,"381":1,"385":1}}],["configured",{"2":{"68":2,"93":1,"371":1,"376":1,"385":1,"386":1,"388":1,"498":1,"600":1}}],["configure",{"2":{"68":1,"383":2,"386":1,"413":1,"438":1,"441":1,"445":1,"463":1,"465":1,"564":1}}],["config",{"0":{"173":1},"2":{"65":1,"93":2,"133":2,"134":3,"173":2,"174":1,"175":2,"177":3,"247":4,"248":1,"436":1,"452":1,"455":1,"460":1,"534":1,"535":1,"595":1,"597":1,"598":1,"605":1,"606":1,"608":1,"609":1}}],["confirms",{"2":{"303":1}}],["confirmed",{"2":{"249":1}}],["confirmations",{"2":{"312":1}}],["confirmation",{"0":{"311":1},"2":{"143":1,"303":1,"311":1,"318":1}}],["confirm",{"2":{"2":1,"16":1,"178":1,"312":1,"541":2}}],["connectoptions",{"2":{"282":2}}],["connector",{"0":{"252":1,"253":1,"454":1},"2":{"262":2,"263":2,"265":2,"266":1,"449":2,"450":2,"454":12,"455":3}}],["connectors",{"0":{"254":1,"452":1,"453":1,"455":1,"456":1},"1":{"454":1},"2":{"251":1,"253":3,"254":4,"265":1,"266":2,"449":2,"450":2,"452":3,"453":4,"454":5,"455":5,"456":2}}],["connectdetails",{"2":{"273":2,"274":1,"281":3,"282":1,"291":1,"621":2,"622":1}}],["connectweb3react",{"2":{"266":1}}],["connected",{"0":{"191":1},"2":{"188":1,"191":2,"273":1,"281":1,"303":1,"327":1,"331":1,"621":1}}],["connect",{"0":{"280":1,"282":1,"314":1},"1":{"281":1,"282":1,"283":2,"284":2,"285":2,"286":2,"287":2,"288":2,"289":2,"290":2,"291":2,"292":2,"293":2,"294":2,"295":2,"296":2,"297":2,"298":2,"299":2,"300":2,"301":1,"302":1,"303":1},"2":{"68":2,"188":1,"256":1,"260":1,"268":1,"273":5,"274":1,"280":3,"281":7,"282":2,"283":2,"286":1,"287":1,"288":1,"289":3,"290":1,"291":1,"292":1,"293":1,"294":1,"295":1,"296":1,"297":1,"298":1,"299":1,"300":1,"303":1,"314":1,"413":1,"450":1,"452":2,"455":1,"463":1,"465":1,"483":1,"487":1,"559":2,"621":5,"622":1}}],["connecting",{"0":{"68":1,"281":1,"301":1,"302":1,"303":1},"2":{"290":2,"291":1,"293":1,"303":1}}],["connections",{"2":{"256":1,"260":1,"463":1,"483":1,"487":1}}],["connection",{"2":{"6":1,"68":1,"266":1,"269":1,"303":3,"321":1,"347":1}}],["cons",{"2":{"439":1}}],["consensys",{"0":{"417":1},"2":{"415":1}}],["consumed",{"2":{"593":1}}],["consumption",{"2":{"239":1}}],["consulted",{"2":{"253":1}}],["consist",{"2":{"603":1}}],["consists",{"2":{"57":1}}],["considered",{"2":{"518":1,"521":1,"528":1,"529":1,"534":1,"601":1,"612":1}}],["considerations",{"2":{"509":1}}],["consider",{"2":{"101":1,"345":1}}],["constraints",{"2":{"564":1}}],["constructor",{"2":{"351":1}}],["construct",{"2":{"342":1,"353":1,"514":1,"515":1}}],["constant",{"2":{"553":1}}],["constants",{"0":{"508":1,"509":1},"2":{"504":4,"510":2}}],["const",{"2":{"6":3,"21":2,"30":2,"33":1,"43":2,"44":4,"65":1,"123":6,"129":8,"130":1,"131":2,"132":1,"141":4,"142":4,"143":5,"144":2,"145":2,"146":2,"147":2,"148":2,"151":1,"152":3,"162":6,"163":6,"164":6,"165":6,"166":6,"167":2,"168":3,"169":6,"170":6,"171":6,"180":7,"181":2,"186":3,"187":13,"214":1,"215":1,"217":1,"218":1,"221":1,"222":1,"223":1,"225":1,"226":1,"229":3,"230":4,"232":3,"237":3,"239":3,"241":4,"243":3,"245":1,"247":4,"248":1,"249":3,"252":2,"253":2,"265":2,"266":3,"272":2,"273":2,"274":5,"281":11,"282":1,"306":13,"307":13,"308":12,"309":13,"310":3,"314":3,"315":3,"316":2,"317":3,"318":2,"319":1,"436":1,"437":4,"438":1,"441":1,"452":3,"454":2,"455":3,"460":1,"461":3,"496":4,"504":1,"510":1,"514":4,"515":6,"523":2,"525":6,"526":1,"535":1,"537":1,"577":1,"579":1,"582":1,"585":1,"587":1,"588":1,"595":3,"597":4,"598":9,"603":5,"605":2,"606":2,"608":2,"609":2,"613":1,"614":2,"616":1,"618":1,"620":2,"621":2,"622":5,"628":13,"629":13,"630":12,"633":12,"634":13,"635":3}}],["console",{"2":{"1":1,"6":2,"30":1,"43":1,"44":2,"214":1,"215":1,"217":1,"218":1,"221":1,"222":1,"223":1,"225":1,"226":1,"229":1,"230":1,"232":1,"237":2,"239":1,"241":1,"243":1,"245":1,"247":1,"249":1,"272":1,"274":2,"281":2,"306":2,"307":2,"308":2,"309":2,"310":1,"317":2,"319":2,"385":1,"386":1,"431":1,"439":1,"472":1,"496":1,"595":1,"598":2,"603":4,"605":1,"608":1,"609":1,"613":1,"617":1,"618":1,"620":1,"622":2,"628":2,"629":2,"630":2,"633":2,"634":2,"635":1}}],["contained",{"2":{"163":1}}],["contains",{"2":{"48":1,"49":1,"50":1,"75":1,"97":1,"117":1,"122":1,"159":1,"349":1,"494":1,"498":1,"555":1,"575":1,"578":1,"580":1,"583":1,"586":1}}],["contain",{"2":{"48":1,"49":1,"97":1,"378":1,"528":1,"531":1}}],["containing",{"2":{"43":1,"44":1,"253":1,"468":1,"548":1,"575":1}}],["contact",{"2":{"4":1,"30":1,"43":1,"44":2,"64":1,"229":1,"612":1}}],["context",{"0":{"419":1,"526":1,"537":1},"2":{"22":1,"30":1,"34":1,"43":1,"44":2,"129":1,"229":2,"230":2,"232":2,"237":2,"239":2,"241":2,"243":2,"320":1,"354":1,"419":6,"504":1,"525":1,"527":1}}],["contents",{"0":{"601":1,"602":1},"2":{"539":1}}],["content",{"2":{"17":1,"30":2,"43":2,"44":4,"45":1,"58":1,"127":2,"128":1,"136":5,"137":5,"214":2,"215":2,"217":2,"218":2,"219":1,"221":2,"222":2,"223":2,"225":2,"226":2,"227":1,"229":2,"230":2,"232":2,"235":1,"237":1,"239":2,"241":2,"243":2,"245":2,"246":1,"248":1,"252":1,"253":2,"397":1,"411":1,"573":1}}],["continue",{"2":{"12":1,"177":1,"452":1,"472":1,"618":1}}],["contribution",{"2":{"534":1}}],["contributes",{"2":{"532":1,"560":1,"564":1}}],["contribute",{"2":{"456":1}}],["controlling",{"2":{"471":1,"590":1}}],["controlled",{"2":{"202":1,"388":1,"391":2,"467":1,"472":2}}],["control",{"0":{"616":1},"2":{"8":1,"24":1,"76":1,"194":1,"204":1,"273":1,"388":1,"454":1,"467":1,"469":1,"470":1,"471":1,"472":1,"527":1,"590":2,"621":1}}],["contractbytecodeasstring",{"2":{"343":1}}],["contractdeploymentresult",{"2":{"343":1}}],["contractdeploymentreturn",{"2":{"69":1}}],["contractdeployer",{"2":{"343":2}}],["contractcall",{"2":{"340":3,"351":1}}],["contractabi",{"2":{"340":2,"342":2}}],["contractabiasstring",{"2":{"115":2,"116":1}}],["contractaddress",{"2":{"37":1,"39":3,"43":3,"44":3,"48":1,"49":1,"58":3,"84":5,"85":1,"115":2,"116":1,"168":1,"170":1,"229":2,"230":5,"237":1,"239":1,"241":6,"243":6,"249":1,"328":1,"339":1,"340":2,"342":2,"343":1,"351":1,"439":1,"440":1,"451":1,"576":1}}],["contractaddresses",{"2":{"30":3,"235":2,"237":2,"239":1}}],["contracturi",{"2":{"31":1,"51":1}}],["contractinfo",{"2":{"30":1,"34":1}}],["contractmetadata",{"2":{"30":2}}],["contracts",{"0":{"339":1,"342":1,"343":1,"420":1},"1":{"340":1,"341":1,"342":1,"343":1,"421":1,"422":1,"423":1,"424":1,"425":1,"426":1,"427":1},"2":{"24":2,"27":1,"30":1,"41":1,"44":1,"48":2,"49":1,"56":2,"58":1,"69":1,"84":2,"86":1,"116":1,"120":1,"185":1,"194":1,"201":2,"202":1,"204":2,"209":1,"229":1,"230":3,"239":3,"241":2,"243":3,"249":1,"341":1,"400":1,"415":1,"424":2,"522":1,"534":2,"560":1,"590":1,"592":1}}],["contract",{"0":{"29":1,"30":2,"31":1,"43":1,"69":1,"185":1,"196":1,"205":1,"209":1,"240":1,"241":1,"242":1,"243":1,"340":1,"350":1,"401":1,"402":1,"403":1,"415":1,"424":1,"589":1,"590":1},"1":{"30":1,"31":1,"241":1,"243":1,"416":1,"417":1,"418":1,"425":1,"590":1,"591":1,"592":1},"2":{"3":4,"24":1,"25":1,"27":3,"29":5,"30":2,"31":1,"32":1,"36":3,"37":10,"39":1,"41":5,"42":3,"43":1,"44":1,"48":2,"49":2,"51":3,"56":1,"69":5,"84":3,"85":1,"87":1,"109":2,"110":2,"111":1,"112":2,"113":2,"114":2,"115":4,"116":2,"121":1,"168":1,"181":1,"182":2,"185":1,"194":3,"195":1,"196":10,"200":1,"201":2,"204":3,"209":2,"210":1,"229":2,"230":4,"234":1,"235":1,"239":3,"241":8,"243":9,"246":4,"307":1,"309":1,"328":1,"339":8,"340":8,"342":9,"343":1,"350":1,"351":5,"352":1,"395":1,"400":1,"401":2,"402":1,"403":3,"404":1,"407":1,"420":2,"424":1,"427":1,"439":2,"472":1,"489":1,"490":1,"491":1,"492":2,"496":1,"497":1,"503":1,"504":1,"513":1,"519":1,"522":2,"525":2,"532":1,"536":1,"545":1,"546":1,"547":1,"548":2,"559":1,"564":1,"567":1,"589":2,"590":4,"591":4,"592":1,"629":1,"634":1}}],["contrast",{"2":{"2":1,"16":1}}],["copy",{"2":{"2":1,"16":1,"93":1,"115":1,"136":1,"201":1,"303":1,"372":1,"385":1,"397":1,"398":1,"399":1}}],["eyj",{"2":{"603":1}}],["eyjpc3mioijodhrwoi8vbxktzg9tywlulmf1dggwlmnvbsisinn1yii6imf1dggwfdeymzq1niisimf1zci6ijeymzrhymnkzwyilcjlehaiojezmteyode5nzasimlhdci6mtmxmti4mdk3mcwibmftzsi6ikphbmugrg9liiwiz2l2zw5fbmftzsi6ikphbmuilcjmyw1pbhlfbmftzsi6ikrvzsj9",{"2":{"541":1}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9",{"2":{"541":1}}],["eyes",{"2":{"48":1}}],["ecdsa",{"2":{"421":1}}],["ecosystems",{"2":{"210":1,"600":1}}],["ecosystem",{"2":{"46":1,"210":1,"427":1,"456":1}}],["epoch",{"2":{"602":2}}],["ephemeral",{"2":{"311":1,"312":1,"315":1}}],["epic",{"0":{"137":1}}],["equal",{"2":{"361":1,"362":1,"529":1}}],["equally",{"2":{"306":1,"628":1}}],["equivalent",{"2":{"66":1,"277":1,"625":1}}],["eerrortype",{"2":{"187":1}}],["elsewhere",{"2":{"251":1}}],["else",{"2":{"129":1,"187":1,"317":1,"319":1,"372":1,"599":1,"609":1}}],["elements",{"2":{"369":1}}],["element",{"2":{"49":1,"376":1,"598":2}}],["effortlessly",{"2":{"255":1,"256":1,"259":1,"260":1,"462":1,"463":1,"482":1,"483":1,"486":1,"487":1}}],["efforts",{"2":{"98":1}}],["efficient",{"2":{"203":1}}],["effective",{"2":{"203":1}}],["effectively",{"2":{"7":1,"469":1,"563":1}}],["effect",{"2":{"88":1,"137":1}}],["established",{"2":{"559":1,"612":1}}],["establishing",{"2":{"369":1}}],["estimate",{"2":{"329":1}}],["estimategas",{"0":{"329":1},"2":{"329":1}}],["especially",{"2":{"367":1}}],["esocialsignintype",{"2":{"129":2,"131":1,"132":1}}],["es",{"2":{"87":2}}],["essentials",{"2":{"74":1,"76":1}}],["essentially",{"2":{"69":1,"404":1}}],["emitted",{"2":{"608":1}}],["emittednotransactionhashstringhash",{"2":{"575":1}}],["empts",{"2":{"609":1}}],["empty",{"2":{"187":1,"602":1}}],["emptyresponse",{"2":{"187":1}}],["empower",{"2":{"76":1}}],["emailstringuser",{"2":{"541":1}}],["emailnoproof",{"2":{"541":1}}],["emailalreadyinuse",{"2":{"366":1}}],["emailed",{"2":{"364":1}}],["emailcode",{"2":{"129":1,"130":1}}],["emailin",{"2":{"129":1,"130":1}}],["emaillogin",{"2":{"129":1,"130":1}}],["email",{"0":{"130":1,"364":1,"597":1,"611":1},"1":{"365":1},"2":{"93":3,"129":1,"130":3,"210":1,"291":1,"295":3,"296":1,"364":3,"365":6,"366":7,"367":5,"369":1,"382":3,"430":2,"448":1,"468":2,"471":2,"541":10,"560":1,"564":1,"595":1,"597":10,"601":4,"602":11,"603":2,"611":1,"612":1,"613":2,"614":1}}],["embeddedwallet",{"2":{"97":3,"98":1,"108":1,"109":1,"110":1,"111":1,"112":1,"113":1,"114":1,"115":2,"116":1}}],["embedded",{"0":{"383":1,"428":1,"559":1},"1":{"384":1,"385":1,"386":1,"387":1,"388":1,"389":1,"390":1,"391":1,"392":1,"393":1,"429":1,"430":1},"2":{"60":1,"61":1,"63":2,"64":3,"65":1,"68":4,"80":2,"93":2,"107":1,"110":2,"112":2,"114":2,"117":1,"127":1,"137":1,"153":2,"210":3,"211":1,"256":1,"260":1,"369":2,"371":1,"383":6,"384":1,"389":3,"390":2,"391":1,"392":3,"393":1,"396":1,"429":1,"430":3,"431":3,"432":1,"452":1,"463":2,"483":1,"487":1,"538":6,"539":1,"541":3,"548":1,"559":1,"566":1,"572":1,"577":1,"579":1,"582":1,"585":1,"587":1,"588":1,"593":1,"597":1,"607":1,"610":1}}],["editor",{"0":{"372":1},"2":{"97":1,"137":2,"178":3,"372":1,"374":1,"380":1}}],["edit",{"2":{"76":1,"105":1,"137":1,"376":1,"378":1}}],["eoas",{"2":{"420":1,"421":1,"424":1,"472":1}}],["eoawallet",{"0":{"355":1},"2":{"97":1,"355":6,"356":1,"361":2,"362":2}}],["eoawalletlinker",{"2":{"68":3}}],["eoa",{"2":{"67":1,"278":1,"355":1,"356":1,"519":1,"532":1,"626":1}}],["ealiest",{"2":{"323":1,"326":1,"328":1,"330":1,"332":1}}],["earlier",{"2":{"404":1}}],["earliest",{"2":{"322":2}}],["earn",{"2":{"212":1}}],["earring",{"2":{"48":1}}],["each",{"2":{"84":2,"116":2,"117":1,"129":1,"159":1,"181":1,"198":1,"229":1,"312":1,"361":1,"362":1,"396":1,"397":3,"419":1,"467":2,"531":1,"534":3,"538":1,"539":1,"555":1,"557":1,"561":1,"572":1,"590":1}}],["ease",{"2":{"161":1,"247":1,"430":1}}],["easier",{"2":{"75":1,"84":1,"106":1,"548":1}}],["easily",{"0":{"631":1},"2":{"10":1,"25":3,"37":1,"56":1,"76":1,"101":1,"109":2,"111":1,"113":1,"210":1,"273":1,"279":1,"355":1,"356":1,"382":1,"395":1,"433":1,"457":1,"621":1,"627":2}}],["easy",{"2":{"25":2,"28":1,"46":1,"116":1,"194":1,"204":1,"239":1,"306":1,"369":1,"383":1,"422":1,"431":1,"628":1}}],["eif",{"2":{"554":3}}],["eip1271",{"2":{"274":1,"279":1,"622":1,"627":1}}],["eip1155",{"2":{"46":1}}],["eip712",{"2":{"273":4,"287":1,"621":4}}],["eip721",{"2":{"46":1}}],["eips",{"2":{"48":4,"49":2,"540":2}}],["eip",{"2":{"48":3,"49":2,"274":1,"349":1,"503":1,"519":1,"540":2,"557":1,"622":1}}],["either",{"2":{"38":1,"45":1,"48":1,"50":2,"58":1,"115":1,"116":1,"123":1,"204":1,"209":1,"213":1,"216":1,"224":1,"306":1,"361":1,"362":1,"366":1,"455":1,"467":1,"493":1,"532":1,"541":2,"564":1,"572":1,"602":3,"618":1,"628":1}}],["etc",{"0":{"231":1,"232":1},"1":{"232":1},"2":{"30":1,"43":1,"44":1,"56":1,"87":1,"93":1,"247":1,"372":1,"396":1,"429":1,"560":1,"564":1,"595":1}}],["ethauth",{"2":{"273":1,"274":7,"286":1,"287":1,"288":1,"621":1,"622":7}}],["ethrpc",{"2":{"247":1}}],["ethtransaction",{"2":{"122":1,"340":4,"349":1,"351":2,"353":1,"359":1,"360":1,"361":2,"362":2}}],["eth",{"0":{"231":1,"232":1},"1":{"232":1},"2":{"108":3,"121":1,"281":1,"353":1,"427":3}}],["ethwallet",{"2":{"97":1,"247":1}}],["ethkit",{"0":{"67":1,"278":1,"626":1},"2":{"67":2,"278":2,"626":2,"627":1}}],["ethiopia",{"2":{"12":1}}],["etherbalance",{"2":{"83":1,"166":1}}],["ether",{"2":{"58":1,"83":1,"515":1,"548":1}}],["etherscan",{"2":{"115":1}}],["ethers",{"0":{"301":1,"508":1,"509":1},"2":{"6":7,"21":3,"53":3,"67":1,"247":3,"263":1,"274":3,"278":1,"280":1,"304":5,"305":2,"306":3,"307":2,"308":2,"309":2,"314":2,"315":3,"319":1,"480":4,"481":2,"496":4,"504":4,"510":2,"523":3,"525":7,"535":4,"622":3,"626":1,"628":3,"629":2,"630":2,"633":2,"634":2}}],["ethereum",{"0":{"122":1,"232":1,"302":1,"514":1},"2":{"1":1,"20":1,"25":3,"32":1,"36":2,"37":1,"48":2,"49":1,"52":1,"55":1,"56":1,"57":2,"67":1,"121":1,"122":1,"254":1,"278":1,"279":1,"280":3,"281":1,"304":1,"321":1,"345":1,"420":1,"421":1,"472":1,"475":1,"514":1,"540":1,"544":1,"545":1,"546":1,"547":1,"548":1,"575":2,"626":1,"627":2}}],["evidence",{"2":{"555":1}}],["evm",{"2":{"20":1,"25":1,"42":1,"52":1,"108":1,"109":1,"115":2,"281":1,"341":1,"345":2,"349":1,"355":1}}],["evolve",{"2":{"12":1}}],["ever",{"2":{"339":1,"392":2,"536":1}}],["everywhere",{"2":{"280":1}}],["everytime",{"2":{"88":1}}],["everything",{"2":{"3":1,"8":1,"24":1,"127":1,"345":1,"570":1}}],["every",{"2":{"25":1,"311":1,"388":2,"391":2,"492":1,"496":1,"517":1,"519":1,"522":1,"555":1,"561":1,"567":1,"591":1}}],["eventual",{"2":{"381":1}}],["eventfilter",{"2":{"237":1}}],["event",{"2":{"94":1,"97":1,"102":1,"129":1,"159":1,"235":1,"237":3,"281":1,"364":1,"365":3,"368":1,"370":1,"381":1,"382":1,"383":1,"430":1,"598":1}}],["events",{"0":{"234":1,"235":1},"1":{"235":1,"236":1,"237":1},"2":{"25":1,"69":3,"94":1,"107":2,"189":1,"192":1,"213":1,"234":1,"235":1,"365":1,"370":1,"617":1}}],["even",{"2":{"8":1,"25":1,"56":1,"101":1,"229":1,"230":1,"239":1,"243":1,"306":1,"341":1,"467":1,"471":1,"495":1,"503":1,"563":1,"627":1,"628":1}}],["egypt",{"2":{"12":1}}],["err",{"2":{"22":1,"30":1,"34":1,"43":1,"44":2,"229":3,"230":3,"232":3,"237":9,"239":3,"241":3,"243":3,"274":2,"622":2}}],["errormessage",{"2":{"151":1,"152":1}}],["errors",{"0":{"97":1},"2":{"151":1,"152":1,"251":1,"598":1}}],["error",{"0":{"251":1},"2":{"6":1,"79":1,"97":1,"115":1,"129":1,"141":3,"142":3,"143":3,"151":4,"152":4,"159":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"171":1,"180":3,"181":3,"187":4,"237":1,"365":2,"366":2,"578":4,"598":6,"603":2,"609":3}}],["erc1271",{"2":{"516":1,"532":1}}],["erc1155send",{"2":{"543":1,"547":1,"548":1}}],["erc1155contractaddress",{"2":{"306":1,"307":2,"628":1,"629":2}}],["erc1155data",{"2":{"306":2,"628":2}}],["erc1155interface",{"2":{"306":2,"307":5,"628":2,"629":5}}],["erc1155tokenaddress",{"2":{"113":1,"116":1,"307":1,"629":1}}],["erc1155",{"0":{"30":1,"43":1,"49":1,"114":1,"184":1,"229":1,"230":1,"241":1},"2":{"3":1,"24":1,"25":2,"27":1,"29":2,"36":1,"37":1,"41":4,"42":3,"48":2,"49":2,"50":1,"84":1,"113":5,"114":9,"117":1,"184":2,"196":1,"229":1,"230":1,"235":1,"239":1,"241":1,"243":2,"351":1,"352":1,"547":1}}],["erc21",{"2":{"112":1}}],["erc20contract",{"2":{"340":6,"342":4}}],["erc20data",{"2":{"306":2,"628":2}}],["erc20interface",{"2":{"306":2,"308":5,"628":2,"630":5,"633":5}}],["erc20tokenaddress",{"2":{"109":1,"116":2}}],["erc20send",{"2":{"543":1,"545":1,"548":1}}],["erc20s",{"0":{"632":1},"2":{"84":1}}],["erc20",{"0":{"30":1,"51":1,"110":1,"182":1,"229":1,"241":1,"243":1},"2":{"24":1,"25":2,"27":2,"29":2,"36":1,"41":2,"51":3,"58":3,"86":1,"109":5,"110":9,"115":1,"116":1,"117":1,"182":3,"235":1,"239":1,"241":1,"243":2,"339":1,"340":2,"342":2,"351":8,"352":1,"425":1,"431":1,"545":1}}],["erc",{"0":{"307":1,"308":1,"309":1,"514":1,"515":1,"629":1,"630":1,"631":2,"633":1,"634":1},"1":{"631":1,"632":1},"2":{"48":1,"49":1,"307":3,"308":3,"309":3,"401":1,"403":1,"513":1,"514":1,"515":1,"629":3,"630":3,"633":3,"634":3}}],["erc721send",{"2":{"543":1,"546":1,"548":1}}],["erc721contractaddress",{"2":{"306":1,"309":2,"628":1,"634":2}}],["erc721data",{"2":{"306":2,"628":2}}],["erc721interface",{"2":{"306":2,"309":5,"628":2,"634":5}}],["erc721tokenaddress",{"2":{"111":1,"116":1,"309":1,"634":1}}],["erc721",{"0":{"30":1,"43":1,"48":1,"112":1,"183":1,"229":1,"230":1,"241":1},"2":{"3":1,"24":1,"25":2,"29":2,"36":1,"41":4,"42":3,"48":1,"50":1,"84":1,"111":3,"112":8,"183":2,"196":1,"229":3,"230":1,"235":1,"239":1,"241":1,"243":2,"351":1,"352":1,"546":1}}],["e",{"2":{"3":1,"79":2,"87":1,"88":1,"93":1,"98":1,"110":1,"112":1,"114":1,"151":1,"152":1,"182":1,"196":1,"247":1,"312":1,"339":1,"378":1,"387":1,"425":1,"439":1,"472":1,"560":1,"561":1,"567":1,"603":2}}],["enhancing",{"2":{"598":1}}],["enhance",{"2":{"13":1,"593":1}}],["ensuring",{"2":{"534":1}}],["ensures",{"2":{"541":1,"616":1}}],["ensure",{"2":{"3":1,"6":1,"56":1,"73":1,"119":1,"133":1,"134":2,"159":1,"273":1,"388":1,"471":2,"503":1,"530":1,"563":1,"621":1}}],["enjoy",{"2":{"256":1,"260":1,"431":1,"456":1,"463":1,"483":1,"487":1}}],["enjoyable",{"2":{"203":1}}],["enum",{"2":{"246":1}}],["enabling",{"2":{"202":1,"253":1,"256":1,"260":1,"463":1,"483":1,"487":1,"560":1}}],["enablemultipleaccountsperemail",{"2":{"93":2,"366":1}}],["enable",{"2":{"88":1,"136":1,"137":2,"364":1,"371":1,"378":1,"379":1,"383":1,"463":1}}],["enabled",{"2":{"7":1,"93":3,"139":1,"210":1,"229":1,"230":1,"239":1,"243":1,"304":1,"366":1,"463":1}}],["enables",{"2":{"5":1,"10":1,"210":1,"244":1,"431":1,"433":1,"457":1}}],["en",{"2":{"137":1}}],["enclaves",{"2":{"555":1,"560":1}}],["enclave",{"0":{"550":1,"554":1,"563":1},"1":{"551":1,"552":1,"553":1,"554":1,"555":1},"2":{"550":2,"555":4,"557":1,"559":2,"563":6,"566":1,"568":1,"591":1}}],["encrypted",{"2":{"559":1,"562":3,"563":1}}],["encrypt",{"2":{"175":1,"562":1}}],["encryption",{"2":{"175":1}}],["encryptorin",{"2":{"129":1}}],["encryptor",{"2":{"129":1}}],["encapsulate",{"2":{"119":1}}],["encodepacked",{"2":{"533":1,"534":1}}],["encodetypeddatadigest",{"2":{"515":2}}],["encodefunctiondata",{"2":{"306":3,"307":3,"308":3,"309":3,"504":2,"510":1,"628":3,"629":3,"630":3,"633":3,"634":3}}],["encode",{"2":{"115":1,"120":2,"185":2,"194":1,"249":1,"307":2,"308":2,"309":2,"496":1,"515":1,"516":1,"523":5,"535":2,"548":1,"629":2,"630":2,"633":2,"634":2}}],["encodeddata",{"2":{"185":2}}],["encoded",{"2":{"57":1,"115":1,"349":2,"514":2,"515":1,"516":1,"548":2,"555":1}}],["encoding=",{"2":{"378":2}}],["encoding",{"0":{"513":1},"1":{"514":1,"515":1,"516":1},"2":{"115":2,"120":1,"339":1,"349":1,"603":1}}],["encourage",{"2":{"104":1,"352":1}}],["encountered",{"2":{"79":1,"151":1,"152":1}}],["enough",{"2":{"117":1}}],["entity",{"2":{"563":1}}],["entire",{"2":{"115":1,"177":1,"253":1,"339":1,"398":1}}],["entirely",{"2":{"51":1,"104":1}}],["entered",{"2":{"364":1}}],["enter",{"2":{"73":1,"364":1,"376":1,"390":1,"405":1,"597":1}}],["env",{"2":{"65":2,"595":2,"597":2,"598":2,"605":2,"606":2,"608":2,"609":2}}],["environments",{"2":{"548":1}}],["environment",{"2":{"8":1}}],["enforce",{"2":{"57":1,"564":1}}],["enqueuetokensforrefresh",{"2":{"44":6}}],["engine",{"2":{"137":4,"139":1,"177":1,"178":1}}],["engines",{"2":{"8":1}}],["engagement",{"2":{"13":1,"203":1}}],["ends",{"2":{"592":1}}],["endingblocknumber",{"2":{"326":1}}],["ending",{"2":{"219":1,"227":1}}],["endian",{"2":{"57":1}}],["enddate",{"2":{"17":1,"214":2,"215":2,"217":2,"218":2,"219":1,"221":2,"222":2,"223":2,"225":2,"226":2,"227":1}}],["endpoint",{"2":{"3":2,"5":1,"6":2,"20":2,"36":1,"37":1,"39":1,"41":1,"52":1,"58":1,"219":1,"227":1,"248":2,"407":2,"538":1}}],["endpointssequence",{"2":{"36":1}}],["endpoints",{"0":{"14":1,"26":1,"39":1},"2":{"1":3,"5":1,"20":3,"36":3,"45":1,"52":2,"55":1,"219":1,"220":1,"221":1,"227":1,"234":1}}],["end",{"2":{"3":2,"28":2,"93":1,"196":1,"412":2}}],["execution",{"2":{"575":1,"608":1}}],["executing",{"2":{"489":1,"509":2,"583":1}}],["execute",{"2":{"489":1,"578":1}}],["executednosucceededbooleanwhether",{"2":{"575":1,"578":1}}],["executed",{"2":{"57":1,"307":1,"308":1,"309":1,"576":1,"578":1,"609":2,"629":1,"630":1,"633":1,"634":1}}],["exact",{"2":{"380":1,"563":1}}],["examine",{"2":{"115":1}}],["examples",{"0":{"18":1,"212":1,"220":1,"423":1,"426":1},"1":{"213":1,"214":1,"215":1,"216":1,"217":1,"218":1,"219":1,"221":1,"222":1,"223":1,"224":1,"225":1,"226":1,"227":1},"2":{"18":1,"20":1,"21":1,"22":1,"28":1,"39":1,"97":1,"281":1,"598":1}}],["example",{"0":{"37":1,"141":1,"142":1,"143":1,"144":1,"145":1,"146":1,"147":1,"148":1,"180":1,"181":1,"185":1,"245":1,"270":1,"411":1,"520":1,"576":1,"581":1,"584":1,"603":1},"1":{"182":1,"183":1,"184":1,"185":1,"186":1},"2":{"3":3,"20":1,"24":1,"27":1,"30":1,"37":2,"39":2,"43":1,"48":2,"49":1,"52":1,"94":1,"97":1,"100":1,"102":1,"107":1,"108":2,"110":1,"112":1,"114":1,"115":1,"116":1,"117":2,"119":1,"120":1,"127":1,"129":1,"229":1,"230":1,"232":1,"237":1,"239":1,"241":2,"243":2,"252":3,"253":4,"254":1,"273":1,"274":1,"279":1,"281":1,"283":1,"286":1,"287":1,"288":1,"289":1,"290":1,"291":1,"292":1,"293":1,"294":1,"295":1,"296":1,"297":1,"298":1,"299":1,"300":1,"301":1,"303":1,"310":1,"340":3,"341":1,"342":3,"351":3,"366":2,"377":1,"381":1,"439":1,"440":1,"454":2,"468":1,"520":1,"553":1,"554":2,"555":1,"557":1,"564":1,"598":1,"600":1,"602":1,"603":1,"621":1,"622":1,"627":1,"635":1}}],["exists",{"2":{"430":1,"570":1}}],["exist",{"2":{"378":2,"430":1,"533":1,"595":1}}],["existing",{"2":{"56":1,"68":1,"97":1,"201":1,"210":1,"380":1,"430":1,"454":1,"539":1,"591":1}}],["extra",{"2":{"279":2,"345":1,"627":2}}],["extremely",{"2":{"116":1,"369":1}}],["extension",{"0":{"302":1,"476":1},"2":{"51":1,"280":2,"301":1,"302":1,"476":1}}],["extensions",{"2":{"37":1,"281":1}}],["extend",{"2":{"50":1,"76":1,"505":1}}],["externally",{"0":{"421":1},"1":{"422":1,"423":1},"2":{"420":1,"421":1,"472":1,"507":1}}],["external",{"0":{"68":1},"2":{"11":1,"68":1,"195":1,"199":1,"210":1,"431":3,"463":1,"494":1,"502":1,"534":2}}],["excluding",{"2":{"557":1}}],["exclude",{"2":{"115":1}}],["excellent",{"2":{"280":1}}],["exceptions",{"2":{"81":1,"345":3,"347":1}}],["exception",{"2":{"79":1,"97":1,"321":1,"341":1}}],["exp",{"2":{"601":1,"602":1}}],["expiration",{"2":{"601":2,"602":1}}],["expiresat",{"2":{"557":1,"605":2}}],["expires",{"2":{"540":1,"541":1,"542":1,"548":1,"549":1,"576":1,"578":1,"602":1,"609":1}}],["expiresnumbertimestamp",{"2":{"539":1}}],["expire",{"2":{"539":1}}],["expiry",{"0":{"286":1},"2":{"246":2,"286":2}}],["express",{"2":{"534":1}}],["exported=",{"2":{"378":1}}],["export",{"2":{"252":1,"253":1,"265":1,"452":2,"454":1,"526":1,"535":1,"537":1,"562":1,"598":3}}],["exposes",{"2":{"107":1}}],["expose",{"2":{"82":1,"88":1}}],["exposed",{"2":{"2":1,"16":1,"85":1}}],["expanding",{"2":{"456":1}}],["expand",{"2":{"159":1,"376":1,"379":1,"404":1,"405":1}}],["explore",{"2":{"256":1,"260":1,"463":1,"483":1,"487":1,"598":1}}],["explorer",{"2":{"115":1}}],["explicitly",{"2":{"253":1}}],["explains",{"2":{"589":1,"608":1}}],["explaining",{"2":{"430":1}}],["explain",{"2":{"133":1,"366":1,"383":1}}],["experimental",{"2":{"251":1,"253":1}}],["experiment",{"2":{"105":1}}],["experienced",{"2":{"117":1}}],["experience",{"2":{"8":4,"150":1,"203":1,"210":3,"255":1,"256":1,"259":1,"260":1,"273":1,"280":1,"312":1,"345":1,"430":1,"431":1,"441":1,"462":1,"463":1,"471":1,"482":1,"483":1,"486":1,"487":1,"593":1,"600":1,"621":1}}],["experiences",{"2":{"0":1,"244":1,"560":1}}],["expects",{"2":{"341":1}}],["expected",{"2":{"182":2,"363":1,"563":1}}],["expect",{"2":{"69":1,"85":1,"86":2,"98":1,"347":1}}],["b7ada9ee8a3fa0a2c74c23ddd04a58f0b095d0465327b2d8461b9b81bcbc7236563ff0326c8614fe9205669636955199",{"2":{"554":1}}],["bql",{"2":{"541":1}}],["bsc",{"0":{"232":1}}],["bsuccess",{"2":{"162":2}}],["bnb",{"0":{"232":1}}],["btc",{"2":{"150":2,"152":1}}],["blue",{"2":{"566":1}}],["blueprint",{"2":{"127":1}}],["blank",{"2":{"148":1}}],["blobs",{"2":{"562":1}}],["blob",{"2":{"48":2,"49":1,"253":1}}],["blocknoremovedbooleanwhether",{"2":{"575":1}}],["blocknoblockhashstringhash",{"2":{"575":1}}],["blocknumbers",{"2":{"326":1}}],["blocknumber",{"0":{"325":1},"2":{"322":5,"323":2,"325":2,"326":1,"328":3,"330":2,"332":3,"576":4}}],["blockcount",{"2":{"330":2}}],["blockchains",{"2":{"77":1,"149":1,"210":1,"345":1}}],["blockchain",{"0":{"82":1,"107":1,"118":1,"160":1,"179":1,"234":1,"344":1},"1":{"83":1,"84":1,"85":1,"86":1,"87":1,"108":1,"109":1,"110":1,"111":1,"112":1,"113":1,"114":1,"115":1,"116":1,"117":1,"119":1,"120":1,"121":1,"122":1,"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"171":1,"180":1,"181":1,"182":1,"183":1,"184":1,"185":1,"186":1,"187":1,"235":1,"236":1,"237":1,"345":1,"346":1,"347":1,"348":1,"349":1,"350":1},"2":{"7":1,"8":1,"19":1,"24":1,"25":1,"27":1,"82":1,"107":3,"120":1,"121":1,"210":1,"234":1,"256":1,"260":1,"281":1,"304":1,"347":2,"463":1,"467":1,"472":1,"483":1,"487":1,"561":1,"593":1}}],["blockrange",{"0":{"326":1},"2":{"326":2}}],["blockhash",{"2":{"324":1,"337":1,"576":4}}],["blockbyhash",{"0":{"324":1},"2":{"324":1}}],["blockbynumber",{"0":{"323":1},"2":{"323":1}}],["blocking",{"2":{"281":2}}],["blocks",{"2":{"24":1,"56":1,"326":1,"330":1,"345":2}}],["block",{"2":{"6":4,"115":1,"281":1,"322":3,"323":4,"324":4,"325":1,"326":2,"337":2,"575":2}}],["bp",{"2":{"127":2}}],["b",{"2":{"93":2,"97":1,"378":1,"534":2,"554":1}}],["bielkqonjty9di9fillfb6imqinxoysw",{"2":{"541":1}}],["binaries",{"2":{"159":1}}],["binary",{"0":{"119":1},"2":{"115":1,"119":2,"120":2,"121":1,"531":1,"548":1}}],["bindufunction",{"2":{"129":1}}],["bind",{"2":{"129":3}}],["billing",{"0":{"207":1},"2":{"117":1,"207":1}}],["bigintegar",{"2":{"322":2,"329":1,"332":1,"334":1,"335":1,"337":1,"342":6,"351":1}}],["biginteger",{"2":{"83":1,"84":2,"332":1,"341":1}}],["big",{"2":{"57":1,"247":1}}],["bits",{"2":{"57":2}}],["bit",{"2":{"57":2,"159":1}}],["bootmeasurement",{"2":{"554":1}}],["boolean",{"2":{"229":3,"230":2,"239":2,"243":2,"601":2,"602":8}}],["bool",{"2":{"82":1,"120":1,"129":1,"162":2,"246":2,"341":2,"498":1,"516":1}}],["bob",{"2":{"515":1}}],["bought",{"2":{"219":1}}],["bounded",{"2":{"518":1}}],["bounds",{"2":{"424":1}}],["bound",{"2":{"129":1}}],["box",{"2":{"159":1,"210":2}}],["bonus",{"0":{"352":1},"2":{"98":1}}],["bow",{"2":{"49":1}}],["bored",{"2":{"48":2}}],["body",{"2":{"30":1,"43":1,"44":2,"214":1,"215":1,"217":1,"218":1,"219":1,"221":1,"222":1,"223":1,"225":1,"226":1,"227":1,"229":1,"230":1,"232":1,"235":1,"239":1,"241":1,"243":1,"245":1,"246":1}}],["both",{"2":{"3":1,"20":1,"30":1,"36":1,"43":1,"44":2,"46":1,"48":1,"50":5,"210":2,"214":1,"215":1,"217":1,"218":1,"221":1,"222":1,"223":1,"225":1,"226":1,"229":1,"230":1,"232":1,"237":1,"239":1,"241":1,"243":1,"245":1,"391":1,"392":1,"468":1,"509":2,"559":2,"588":1,"590":1,"591":1,"592":1}}],["bottom",{"2":{"0":1,"444":3}}],["breaches",{"2":{"516":1}}],["break",{"2":{"249":1,"557":1}}],["breaking",{"2":{"80":2,"153":2,"262":1}}],["breaks",{"2":{"48":1,"556":1}}],["brave",{"2":{"605":1}}],["branded",{"2":{"564":1}}],["brand",{"2":{"463":1}}],["branding",{"2":{"8":1}}],["brackets",{"2":{"339":1}}],["broken",{"2":{"216":1}}],["broadcast",{"2":{"129":1}}],["browsable",{"2":{"378":2}}],["browse",{"2":{"378":1}}],["browsers",{"2":{"281":3,"474":1}}],["browser",{"0":{"476":1},"2":{"8":2,"30":1,"38":1,"43":1,"44":2,"68":1,"127":2,"131":1,"150":1,"152":1,"210":1,"214":1,"215":1,"217":1,"218":1,"221":1,"222":1,"223":1,"225":1,"226":1,"229":1,"230":1,"232":1,"237":1,"239":1,"241":1,"243":1,"245":1,"251":1,"253":4,"276":1,"280":3,"281":1,"412":1,"431":1,"469":1,"475":1,"553":1,"624":1}}],["brown",{"2":{"48":1}}],["bring",{"2":{"12":1,"106":1}}],["bug",{"2":{"253":1,"378":1}}],["bugfixes",{"2":{"80":1,"153":1}}],["buyitems",{"2":{"219":1}}],["buy",{"2":{"192":1}}],["burden",{"2":{"548":1}}],["burn",{"2":{"116":1}}],["burma",{"2":{"12":1}}],["bundling",{"2":{"306":1,"628":1}}],["bundled",{"2":{"127":1}}],["bundle",{"0":{"57":1},"2":{"57":1,"58":1,"134":1,"307":1,"308":1,"309":1,"506":1,"509":3,"629":1,"630":1,"633":1,"634":1}}],["bunch",{"2":{"56":1,"280":1}}],["bump",{"2":{"56":1}}],["built",{"0":{"126":1,"128":1},"1":{"127":1,"128":1},"2":{"20":1,"25":2,"66":1,"67":1,"80":1,"104":1,"153":1,"159":1,"255":1,"259":1,"277":1,"278":1,"280":1,"364":1,"381":1,"462":1,"482":1,"486":1,"625":1,"626":1}}],["builds",{"2":{"81":3,"92":1,"374":1}}],["building",{"0":{"275":1,"381":1,"623":1},"1":{"276":1,"277":1,"278":1,"279":1,"624":1,"625":1,"626":1,"627":1},"2":{"9":1,"129":1,"254":1,"279":1,"412":1,"627":1}}],["build",{"0":{"139":1,"554":1},"2":{"8":1,"17":2,"24":1,"25":1,"28":1,"37":1,"58":1,"74":1,"76":1,"139":1,"157":1,"159":4,"188":1,"210":1,"214":2,"215":2,"217":2,"218":2,"221":2,"222":2,"223":2,"225":2,"226":2,"244":1,"254":1,"311":1,"345":1,"369":1,"378":1,"381":2,"396":1,"474":1,"475":1,"568":1,"627":1}}],["builder",{"0":{"394":1,"400":1},"1":{"395":1,"396":1,"397":1,"398":1,"399":1,"400":1,"401":1,"402":1,"403":1,"404":1,"405":1,"406":1,"407":1},"2":{"1":1,"2":1,"6":1,"16":1,"17":1,"19":3,"21":1,"24":1,"30":1,"33":1,"43":1,"44":1,"58":1,"68":1,"69":1,"93":5,"109":3,"111":2,"113":2,"117":1,"174":1,"188":1,"189":1,"190":1,"194":3,"195":1,"202":1,"212":1,"214":2,"215":2,"217":2,"218":2,"219":1,"220":1,"221":2,"222":2,"223":2,"225":2,"226":2,"227":1,"229":1,"247":2,"249":2,"320":1,"364":1,"371":4,"383":4,"389":1,"392":2,"395":1,"400":1,"401":1,"443":1,"472":1}}],["button",{"2":{"102":1,"201":1,"367":1,"437":2,"461":2}}],["but",{"2":{"4":1,"24":2,"25":1,"36":2,"38":1,"46":1,"48":1,"51":1,"65":1,"66":1,"67":1,"76":1,"85":1,"98":1,"105":1,"107":1,"115":1,"117":1,"124":1,"127":1,"201":1,"241":2,"243":2,"254":1,"274":1,"277":1,"278":1,"280":2,"304":1,"321":1,"352":1,"366":1,"431":1,"501":1,"507":1,"522":1,"534":2,"539":1,"555":1,"564":1,"565":1,"566":1,"602":1,"622":1,"625":1,"626":1}}],["banner",{"2":{"281":2,"293":3}}],["bannerurl",{"0":{"293":1},"2":{"281":2,"293":1}}],["bangladesh",{"2":{"12":1}}],["barebones",{"2":{"117":1}}],["bar",{"2":{"93":1,"105":1}}],["basis",{"2":{"454":1}}],["basic",{"2":{"105":1,"108":2,"110":1,"112":1,"114":1}}],["basics",{"2":{"88":1,"396":1}}],["base64",{"2":{"555":1,"603":1}}],["basemetadatauri",{"2":{"196":1}}],["baseuri",{"2":{"45":1,"196":1}}],["baseuris",{"2":{"3":1}}],["basecardid",{"2":{"37":1,"49":1}}],["based",{"0":{"130":1,"131":1,"132":1},"1":{"133":1,"134":1},"2":{"8":3,"25":1,"115":1,"129":1,"130":2,"131":2,"251":1,"252":1,"345":1,"369":1,"383":1,"412":1,"550":1,"563":1,"600":1,"602":1,"610":1}}],["base",{"0":{"404":1},"2":{"3":1,"100":1,"102":1,"139":1,"194":1,"403":1,"404":1}}],["balancequery",{"2":{"342":3}}],["balanceat",{"0":{"322":1},"2":{"321":1,"322":2}}],["balanceof",{"2":{"185":1,"342":2,"351":1}}],["balanceupdates",{"2":{"170":1}}],["balancewei",{"2":{"83":1}}],["balanceinwei",{"2":{"83":1}}],["balance",{"0":{"83":1,"232":1,"236":1},"2":{"83":3,"84":1,"232":3,"322":5,"342":3,"351":1}}],["balances",{"0":{"84":1,"230":1,"231":1},"1":{"232":1},"2":{"25":2,"84":11,"229":2,"230":1}}],["batching",{"2":{"116":1,"307":1,"308":1,"309":1,"490":1,"629":1,"630":1,"633":1,"634":1}}],["batch",{"0":{"116":1,"306":1,"628":1,"631":1},"2":{"41":2,"116":3,"117":1}}],["batched",{"2":{"37":1,"56":1,"116":1,"187":1,"361":1,"362":1,"490":1}}],["backed",{"2":{"177":1}}],["backends",{"0":{"275":1,"623":1},"1":{"276":1,"277":1,"278":1,"279":1,"624":1,"625":1,"626":1,"627":1},"2":{"19":1,"56":1,"66":1,"67":1,"276":1,"277":1,"278":1,"624":1,"625":1,"626":1,"627":1}}],["backend",{"0":{"279":1,"627":1},"2":{"2":1,"8":1,"16":1,"20":1,"251":1,"279":3,"430":1,"565":1,"567":1,"627":4}}],["back",{"2":{"37":1,"68":1,"102":1,"190":1,"303":1,"468":1,"571":1}}],["background",{"2":{"22":1,"30":1,"34":1,"43":1,"44":2,"48":1,"229":1,"230":1,"232":1,"237":1,"239":1,"241":1,"243":1,"463":1}}],["backup",{"2":{"0":1,"177":1,"422":1}}],["bytes1",{"2":{"525":1}}],["bytes4",{"2":{"516":4}}],["bytes32",{"2":{"496":1,"498":1,"502":1,"512":1,"516":3,"523":1,"525":3,"532":1,"535":6,"548":2}}],["bytesn",{"2":{"341":1}}],["bytes",{"2":{"306":1,"307":2,"341":2,"405":1,"516":3,"525":1,"548":2,"628":1,"629":2}}],["byte",{"2":{"119":3,"341":1,"516":1}}],["bytecode",{"2":{"69":5,"328":1}}],["by",{"0":{"222":1,"223":1,"224":1},"1":{"225":1,"226":1},"2":{"3":1,"5":1,"8":1,"9":1,"11":1,"13":1,"18":2,"24":2,"37":1,"44":1,"48":1,"51":3,"56":1,"57":1,"58":2,"75":1,"76":1,"79":1,"82":1,"87":1,"88":2,"93":1,"105":1,"108":1,"110":2,"112":2,"113":1,"114":2,"115":1,"116":1,"117":1,"123":2,"129":1,"133":1,"141":1,"150":1,"151":1,"161":1,"187":1,"190":1,"193":1,"196":2,"197":1,"198":1,"200":1,"201":2,"202":1,"203":1,"204":2,"213":1,"214":1,"215":1,"216":2,"217":1,"218":1,"221":1,"222":2,"223":2,"224":2,"225":1,"226":1,"229":2,"246":2,"252":1,"253":2,"254":1,"256":1,"260":1,"269":1,"273":1,"281":3,"292":1,"297":1,"298":1,"300":1,"303":2,"312":1,"320":1,"321":2,"322":1,"324":1,"326":1,"336":1,"337":1,"350":1,"354":1,"366":2,"369":2,"372":2,"374":1,"375":1,"378":6,"379":2,"382":1,"387":1,"388":2,"391":2,"415":1,"424":1,"432":2,"441":1,"443":1,"451":1,"455":1,"456":2,"463":1,"467":1,"468":1,"470":1,"471":1,"472":2,"483":1,"487":1,"489":1,"490":2,"493":2,"495":1,"496":1,"497":1,"503":1,"504":1,"505":1,"506":1,"510":1,"511":1,"516":1,"517":1,"518":1,"525":2,"530":1,"532":1,"536":3,"539":3,"548":1,"555":1,"559":1,"563":4,"564":3,"565":1,"566":5,"567":1,"569":1,"570":1,"573":1,"590":1,"592":1,"593":2,"598":1,"609":1,"612":1,"618":1,"621":1,"627":1}}],["beyond",{"2":{"190":1,"505":1,"601":1}}],["being",{"2":{"116":1,"132":1,"144":1,"145":1,"195":1,"196":1,"246":1,"251":1,"507":1,"548":1,"557":1,"569":1}}],["bespoke",{"2":{"116":1}}],["best",{"2":{"56":1,"210":1,"279":1,"281":2,"293":1,"345":1,"627":1}}],["beneficial",{"2":{"116":1}}],["benefit",{"2":{"25":1,"456":1}}],["benefits",{"0":{"56":1},"2":{"5":1,"55":1,"280":1}}],["beautifully",{"2":{"474":1,"475":1}}],["beautify",{"2":{"104":1}}],["beauty",{"2":{"280":1}}],["bearer",{"2":{"17":1,"214":1,"215":1,"217":1,"218":1,"221":1,"222":1,"223":1,"225":1,"226":1}}],["better",{"2":{"106":2,"115":1}}],["between",{"2":{"102":1,"210":2,"281":1,"369":1,"431":2,"529":1,"553":1,"554":1,"562":1}}],["beta",{"2":{"64":1,"177":1}}],["before",{"0":{"127":1},"2":{"93":1,"116":1,"159":1,"174":1,"177":1,"252":2,"366":1,"372":1,"509":2,"554":1,"557":1,"559":1,"569":1,"588":1,"608":1,"609":1}}],["because",{"2":{"76":1,"88":1,"424":1,"492":1,"565":1,"602":3}}],["becomes",{"2":{"467":1,"555":1}}],["become",{"2":{"76":1}}],["behaves",{"2":{"303":1}}],["behaviournone",{"2":{"392":1}}],["behaviour",{"2":{"93":3,"392":1,"494":1,"501":1}}],["behavior",{"2":{"13":1,"527":1}}],["behalf",{"2":{"203":1,"312":1,"567":1}}],["behind",{"2":{"25":1,"353":1}}],["been",{"2":{"24":1,"97":1,"129":1,"196":1,"379":1,"388":1,"430":1,"522":1,"555":1,"569":1,"570":1,"601":1,"617":2,"618":1}}],["belong",{"2":{"532":1}}],["below",{"0":{"436":1,"460":1},"2":{"1":1,"3":2,"17":2,"19":1,"20":2,"21":1,"22":1,"29":1,"36":1,"37":1,"40":1,"42":1,"46":1,"48":1,"52":1,"88":1,"117":1,"137":1,"139":1,"159":1,"229":1,"252":1,"253":1,"254":2,"282":1,"503":1,"566":1}}],["bells",{"2":{"345":1}}],["believers",{"2":{"113":1}}],["belarus",{"2":{"12":1}}],["begin",{"2":{"8":1,"129":1,"598":1}}],["be",{"0":{"12":1},"2":{"2":4,"3":1,"11":2,"16":4,"17":1,"24":4,"25":2,"28":1,"36":1,"39":1,"43":2,"44":1,"50":1,"56":4,"57":1,"58":1,"64":1,"65":1,"75":2,"76":2,"77":2,"82":1,"85":1,"93":1,"98":2,"101":1,"103":1,"105":1,"107":1,"109":1,"110":1,"112":1,"114":1,"115":3,"117":3,"119":1,"120":1,"122":1,"123":3,"127":4,"128":1,"129":6,"130":1,"133":1,"134":2,"141":3,"142":1,"143":1,"144":1,"145":1,"146":1,"147":1,"148":1,"149":2,"152":1,"153":1,"159":1,"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"171":1,"174":2,"178":1,"180":1,"186":1,"187":1,"194":1,"195":1,"198":1,"200":1,"201":1,"202":1,"204":1,"213":1,"219":1,"220":1,"227":1,"229":2,"230":2,"235":1,"239":2,"243":2,"249":1,"251":1,"252":2,"253":9,"262":1,"263":1,"265":1,"266":1,"269":1,"273":1,"281":1,"283":1,"285":2,"288":1,"291":1,"292":1,"294":1,"295":1,"296":1,"297":1,"298":1,"300":2,"303":2,"305":1,"306":2,"312":1,"319":1,"321":2,"323":1,"326":1,"328":1,"330":1,"332":1,"341":1,"345":1,"346":1,"347":2,"349":1,"351":1,"356":1,"361":3,"362":3,"363":1,"366":2,"370":1,"374":2,"375":1,"381":1,"382":1,"386":1,"387":1,"388":4,"389":2,"391":1,"392":3,"404":2,"405":1,"413":3,"414":1,"424":1,"427":1,"431":1,"443":1,"446":1,"447":1,"448":1,"449":3,"450":3,"451":3,"465":3,"466":1,"467":2,"469":1,"470":1,"471":5,"472":4,"481":1,"489":1,"491":1,"493":2,"495":2,"497":1,"499":1,"501":1,"503":4,"506":1,"507":1,"509":5,"510":1,"511":2,"512":2,"514":1,"515":1,"516":1,"518":1,"519":1,"524":1,"525":1,"528":1,"530":1,"531":1,"534":2,"536":1,"539":1,"540":1,"541":2,"542":1,"544":2,"545":1,"546":2,"547":1,"548":2,"549":1,"554":2,"555":2,"559":1,"561":1,"563":1,"564":2,"565":3,"572":1,"593":1,"595":1,"599":1,"600":2,"601":2,"602":5,"606":2,"607":2,"609":2,"612":1,"621":1,"628":2}}],["gnosis",{"2":{"388":1,"426":1}}],["gm",{"2":{"127":2}}],["g",{"2":{"87":1,"88":1,"98":1,"110":1,"112":1,"114":1,"151":1,"152":1,"247":1,"312":1,"339":1,"425":1,"439":1,"561":1,"603":2}}],["guarantee",{"2":{"612":1}}],["guaranteed",{"2":{"563":1}}],["guard",{"0":{"470":1,"564":1,"569":1,"570":1},"1":{"565":1},"2":{"49":1,"391":1,"468":2,"470":2,"471":1,"559":2,"564":4,"565":2,"569":1,"570":1,"608":1}}],["guess",{"2":{"396":1}}],["guestmodule",{"2":{"526":1,"537":1}}],["guestlogin",{"2":{"368":2}}],["guest",{"0":{"368":1,"489":1},"1":{"490":1},"2":{"367":2,"368":1,"369":1,"382":1,"489":1,"490":1}}],["guidance",{"2":{"429":1}}],["guides",{"2":{"393":1}}],["guide",{"0":{"428":1},"1":{"429":1,"430":1},"2":{"9":1,"28":1,"68":1,"93":2,"117":1,"133":1,"261":1,"385":1,"395":1,"412":2,"432":1,"453":1,"454":1,"464":1,"472":1,"488":1,"555":1,"607":1}}],["gui",{"2":{"129":2,"130":2}}],["gist",{"2":{"372":1}}],["git",{"2":{"73":3,"96":2,"552":1,"554":2}}],["githubusercontent",{"2":{"58":1}}],["github",{"0":{"136":1},"2":{"22":2,"24":1,"30":1,"34":2,"43":1,"44":2,"48":2,"49":1,"54":2,"66":1,"73":1,"96":1,"229":1,"230":1,"232":1,"237":2,"239":1,"241":1,"243":1,"252":1,"253":2,"277":1,"554":1,"555":1,"625":1}}],["gives",{"2":{"97":1,"472":1}}],["give",{"0":{"6":1},"2":{"49":1,"105":2,"366":1,"609":1}}],["given",{"2":{"2":1,"16":1,"82":1,"84":2,"85":1,"87":1,"101":1,"121":1,"123":2,"322":2,"328":1,"329":1,"332":2,"333":1,"359":2,"360":2,"361":2,"362":2,"363":1,"496":1,"500":1,"504":1,"506":1,"540":1,"541":2,"549":1,"568":1,"570":1,"601":1}}],["good",{"2":{"454":1}}],["googlelogin",{"2":{"598":4}}],["googleoauthprovider",{"2":{"598":3}}],["googleclientid",{"2":{"133":1,"134":1,"173":1}}],["google",{"0":{"385":1,"598":1,"601":1},"2":{"93":1,"132":1,"133":2,"134":1,"256":1,"260":1,"281":1,"294":2,"296":1,"366":2,"371":1,"377":1,"379":1,"381":1,"385":4,"449":1,"455":2,"463":1,"471":1,"483":1,"487":1,"559":1,"561":1,"564":1,"595":1,"598":11,"600":1,"601":3,"605":4,"612":1}}],["governance",{"2":{"431":1}}],["got",{"2":{"404":1}}],["gotten",{"2":{"18":1}}],["goes",{"2":{"115":1}}],["golang",{"2":{"66":1,"277":1,"625":1}}],["goldcardid",{"2":{"37":1}}],["going",{"2":{"25":1}}],["go",{"0":{"22":1,"34":1,"54":1,"66":1,"277":1,"625":1},"2":{"20":2,"22":3,"25":1,"30":1,"34":3,"38":1,"40":1,"43":1,"44":2,"52":1,"54":3,"56":1,"66":6,"67":2,"76":1,"173":1,"208":1,"229":1,"230":1,"232":1,"237":2,"239":1,"241":1,"243":2,"274":3,"277":6,"278":2,"279":1,"339":1,"372":11,"389":1,"393":1,"610":1,"622":3,"625":6,"626":2,"627":3}}],["green",{"2":{"566":1}}],["grep",{"2":{"555":1}}],["greyish",{"2":{"197":1}}],["greater",{"2":{"529":1,"602":1}}],["great",{"2":{"69":1,"94":1,"107":1,"210":1,"370":1}}],["ground",{"2":{"412":1}}],["group",{"2":{"56":1}}],["grows",{"2":{"13":1}}],["grin",{"2":{"48":1}}],["grained",{"2":{"220":1}}],["grade",{"2":{"37":1}}],["grab",{"2":{"19":1}}],["globe",{"2":{"12":1}}],["global",{"2":{"11":1}}],["genuine",{"2":{"601":1}}],["genericfailure",{"2":{"162":2,"163":2,"164":2,"165":2,"166":2,"167":2,"168":2,"169":2,"170":2,"171":2}}],["genericsuccess",{"2":{"162":2,"163":2,"164":2,"165":2,"166":2,"167":2,"168":2,"169":2,"170":2,"171":2}}],["generating",{"2":{"129":1}}],["generation",{"0":{"567":1},"2":{"25":1,"91":1}}],["generates",{"2":{"538":1,"541":1,"563":1,"602":1}}],["generated",{"2":{"78":1,"150":1,"312":1,"355":1,"396":1,"431":1,"468":2,"471":2,"539":1,"542":1,"543":1,"549":1,"561":2,"567":1,"575":2,"597":1,"608":1}}],["generateeoawalletlink",{"2":{"68":1}}],["generate",{"0":{"315":1},"2":{"68":2,"78":1,"133":2,"150":1,"355":1,"471":1,"530":1,"567":1}}],["generatenonce",{"2":{"68":1}}],["generally",{"2":{"210":1,"431":1,"452":1}}],["general",{"0":{"573":1},"2":{"39":1,"69":1,"76":1,"84":1,"93":1,"97":1,"107":1,"159":1,"345":2}}],["geographical",{"2":{"11":1}}],["getelementbyid",{"2":{"598":1}}],["getetherbalance",{"0":{"166":1},"2":{"83":2,"166":2,"232":7}}],["getimagehash",{"2":{"511":1}}],["getinstance",{"2":{"367":1,"368":1,"382":1}}],["getfunction",{"2":{"504":2,"510":1}}],["getfeeoptions",{"2":{"117":2,"187":2}}],["getkitconnectwallets",{"2":{"455":2}}],["getkeccakhash",{"2":{"121":1}}],["getdefaultconnectors",{"2":{"452":3,"455":1}}],["getprovider",{"2":{"317":1}}],["getpublickey",{"2":{"121":1}}],["getwallet",{"2":{"272":1,"273":1,"281":5,"620":1,"621":1}}],["getwalletaddress",{"0":{"144":1},"2":{"144":1,"166":1,"167":1,"171":1}}],["getmetatxnreceipt",{"2":{"248":2}}],["getuseractivities",{"0":{"244":1},"1":{"245":1,"246":1},"2":{"244":1,"245":3,"246":1}}],["getbalanceupdates",{"0":{"170":1},"2":{"170":2}}],["getblock",{"2":{"6":1}}],["getcredentials",{"2":{"187":2}}],["getchainid",{"0":{"165":1},"2":{"165":2,"317":1}}],["getcomponentinchildren",{"2":{"369":1}}],["getcontractaddress",{"2":{"121":1}}],["getcontractinfo",{"2":{"30":1,"34":1,"41":1}}],["getcontractinfobatch",{"2":{"30":5,"41":1}}],["getcollection",{"2":{"3":1}}],["getnetworkid",{"0":{"145":1},"2":{"145":1}}],["getsessionhash",{"2":{"595":1,"597":1,"598":2}}],["getstorageat",{"2":{"496":1}}],["getstoredcredentials",{"2":{"129":1,"187":2}}],["getsigner",{"2":{"247":1,"306":2,"307":2,"308":2,"309":2,"310":1,"314":1,"628":2,"629":2,"630":2,"633":2,"634":2,"635":1}}],["getsigninurl",{"2":{"131":1}}],["getsupportedtransakcountries",{"2":{"152":1}}],["getsupportedcountries",{"2":{"79":2,"151":2}}],["gets",{"2":{"144":1,"145":1}}],["getloginurl",{"2":{"129":1}}],["getlatestblock",{"2":{"6":2}}],["getvalue",{"2":{"123":6,"141":2,"142":2,"143":2,"144":2,"145":2,"146":2,"147":2,"148":2,"152":2,"162":2,"163":2,"164":2,"165":2,"166":2,"167":2,"168":2,"169":2,"170":2,"171":2,"180":2,"186":2,"187":4}}],["getaddress",{"0":{"358":1},"2":{"121":1,"272":1,"307":1,"309":1,"314":1,"315":1,"322":2,"332":2,"340":2,"351":1,"358":1,"525":1,"620":1,"629":1,"634":1}}],["gettoporders",{"2":{"411":1}}],["gettokensuppliesmapargs",{"2":{"86":1}}],["gettokensuppliesmapreturn",{"2":{"86":1}}],["gettokensuppliesmap",{"0":{"169":1},"2":{"86":2,"169":2}}],["gettokensuppliesargs",{"2":{"85":1}}],["gettokensuppliesreturn",{"2":{"85":1}}],["gettokensupplies",{"0":{"168":1},"2":{"85":2,"86":1,"168":2,"243":7}}],["gettokenrefreshstatus",{"2":{"44":5}}],["gettokenmetadatabatch",{"2":{"41":1}}],["gettokenmetadata",{"2":{"41":1,"43":6}}],["gettokenbalancesorganizedindictionary",{"2":{"84":2}}],["gettokenbalancesargs",{"2":{"84":5}}],["gettokenbalancesreturn",{"2":{"84":4}}],["gettokenbalances",{"0":{"167":1},"2":{"21":1,"22":1,"84":5,"167":2,"229":9,"230":7}}],["gettransactionhistoryargs",{"2":{"87":1}}],["gettransactionhistoryreturn",{"2":{"87":1}}],["gettransactionhistory",{"0":{"171":1},"2":{"87":2,"171":2,"239":7,"241":7}}],["gettransaklink",{"2":{"78":1,"150":1}}],["getting",{"0":{"9":1,"15":1,"27":1,"62":1,"211":1},"1":{"16":1,"17":1,"18":1,"63":1,"64":1,"65":1},"2":{"261":1,"488":1}}],["get",{"0":{"83":1,"84":1,"85":1,"86":1,"87":1,"399":1},"1":{"86":1},"2":{"0":1,"3":1,"6":1,"9":2,"19":1,"22":1,"24":1,"34":1,"39":3,"54":1,"61":1,"93":1,"115":1,"123":6,"131":2,"137":1,"141":2,"142":2,"143":2,"144":2,"145":2,"146":2,"147":2,"148":2,"152":2,"159":1,"162":2,"163":2,"164":2,"165":2,"166":2,"167":2,"168":2,"169":2,"170":2,"171":2,"174":1,"180":2,"186":2,"187":3,"196":1,"198":1,"210":1,"212":1,"221":1,"223":1,"272":1,"322":4,"323":1,"324":1,"325":1,"326":1,"327":1,"328":1,"330":1,"331":1,"332":1,"334":1,"335":1,"336":1,"337":1,"363":1,"367":1,"368":1,"407":1,"410":1,"412":1,"430":1,"474":1,"475":1,"479":1,"544":1,"555":1,"595":2,"620":1}}],["gating",{"2":{"431":1}}],["gather",{"2":{"396":1,"398":1}}],["gate",{"2":{"105":1}}],["gateway",{"0":{"5":1},"1":{"6":1},"2":{"5":1,"25":2,"320":1}}],["gaming",{"0":{"631":1,"632":1},"2":{"203":1,"210":2,"627":1}}],["gamers",{"2":{"203":1}}],["gamemode",{"2":{"127":5}}],["gameinstance",{"2":{"124":1}}],["gameobject",{"2":{"105":1,"369":1}}],["game",{"0":{"203":1},"2":{"7":2,"8":6,"10":1,"13":2,"20":2,"25":1,"27":1,"37":1,"52":1,"77":1,"117":1,"124":1,"149":1,"198":1,"203":2,"210":2,"254":1,"256":1,"260":1,"304":1,"316":1,"368":1,"381":1,"401":1,"412":1,"431":3,"432":1,"451":1,"483":1,"487":1,"540":1,"542":1,"561":1,"609":1}}],["games",{"0":{"137":1},"2":{"0":1,"19":1,"25":3,"68":1,"80":1,"113":1,"124":1,"153":1,"210":1,"383":1,"431":1,"593":1}}],["gasused",{"2":{"576":2,"578":1,"609":1}}],["gaslist",{"2":{"518":1}}],["gaslimitestimator",{"2":{"353":1}}],["gaslimit",{"0":{"509":1},"2":{"340":1,"353":1,"504":2,"509":2,"510":1,"576":1,"578":1,"609":1}}],["gasl1",{"2":{"427":1}}],["gasexecution",{"2":{"427":1}}],["gastipcap",{"2":{"335":1}}],["gasprice",{"2":{"334":1,"340":1,"353":1}}],["gas",{"0":{"58":1,"202":1,"203":1,"204":2},"1":{"203":1,"204":1,"205":1,"206":1,"207":1,"208":1,"209":1},"2":{"56":7,"83":1,"108":3,"116":1,"117":5,"202":3,"203":3,"204":1,"208":1,"247":1,"249":2,"322":1,"329":2,"330":1,"334":1,"335":1,"353":1,"392":1,"509":1,"522":1,"575":1,"578":1}}],["gain",{"2":{"13":1,"123":1,"565":2}}],["gt",{"2":{"2":2,"6":2,"16":2,"17":2,"39":10,"50":2,"57":3,"73":2,"74":1,"76":1,"81":6,"84":3,"86":2,"93":5,"97":10,"98":1,"105":3,"117":1,"119":4,"120":1,"123":6,"127":1,"129":10,"136":2,"137":3,"141":3,"142":5,"143":3,"144":2,"145":2,"146":2,"147":2,"148":2,"150":2,"151":2,"152":4,"159":3,"162":3,"163":3,"164":3,"165":3,"166":4,"167":4,"168":3,"169":5,"170":3,"171":4,"178":1,"180":3,"181":4,"182":2,"183":1,"184":1,"185":2,"186":8,"187":15,"196":1,"201":1,"214":3,"215":3,"217":3,"218":3,"221":3,"222":3,"223":3,"225":3,"226":3,"237":2,"245":1,"247":1,"252":4,"253":6,"266":2,"274":2,"281":1,"304":1,"305":4,"326":2,"341":6,"342":5,"366":2,"369":1,"371":2,"374":1,"376":2,"378":42,"380":2,"398":1,"407":3,"436":10,"437":4,"439":1,"441":3,"452":1,"454":2,"455":8,"460":10,"461":4,"480":1,"481":4,"516":1,"534":1,"598":16,"616":1,"617":1,"618":1,"622":2}}],["dl",{"2":{"372":1}}],["dd",{"2":{"219":2,"227":2}}],["dynamic",{"2":{"120":2}}],["dune",{"2":{"188":1}}],["duplicate",{"2":{"127":3,"366":1}}],["due",{"2":{"105":1,"252":1,"262":1,"575":1,"612":1}}],["during",{"2":{"82":1,"127":1,"159":1,"389":1,"392":1,"497":1,"522":1,"530":2,"536":2,"589":1,"602":1,"608":1,"616":1,"618":1}}],["dpapi",{"2":{"91":1}}],["dashboard",{"2":{"564":1}}],["dangerous",{"2":{"494":1,"509":1}}],["day",{"2":{"214":1,"215":2,"217":1,"218":2,"219":1,"221":3,"222":2,"223":2,"225":1,"226":2,"227":1,"590":1,"592":1,"602":1}}],["days",{"2":{"190":1,"216":1}}],["date",{"2":{"219":3,"221":1,"227":3,"602":1}}],["dateinterval",{"2":{"214":1,"215":2,"217":1,"218":2,"219":1,"221":3,"222":2,"223":2,"225":1,"226":2,"227":1}}],["datadelayedencodedatathe",{"2":{"548":1}}],["datatypes",{"2":{"341":2}}],["data2",{"2":{"307":2,"308":2,"309":2,"629":2,"630":2,"633":2,"634":2}}],["data1",{"2":{"307":2,"308":2,"309":2,"629":2,"630":2,"633":2,"634":2}}],["databeat",{"2":{"189":2}}],["database",{"2":{"107":2,"189":2,"430":4,"562":1}}],["databases",{"2":{"25":1}}],["data",{"0":{"119":1,"200":1,"341":1,"514":1,"515":1,"566":1},"1":{"567":1,"568":1,"569":1,"570":1,"571":1},"2":{"13":1,"17":1,"19":1,"24":2,"25":6,"44":1,"49":1,"50":3,"91":1,"108":1,"119":4,"120":4,"121":2,"124":1,"129":1,"175":1,"177":1,"185":2,"189":1,"190":2,"195":2,"199":1,"200":4,"214":1,"215":1,"217":1,"218":1,"220":1,"221":1,"222":1,"223":1,"225":1,"226":1,"244":1,"249":3,"306":4,"307":6,"308":4,"309":4,"340":1,"342":1,"349":1,"378":4,"405":1,"411":1,"430":1,"504":2,"510":1,"514":1,"515":2,"516":1,"538":1,"541":1,"544":1,"546":2,"547":1,"548":7,"557":4,"562":2,"563":1,"566":1,"575":1,"576":7,"578":3,"580":1,"581":1,"583":1,"584":1,"586":1,"608":3,"609":2,"628":4,"629":6,"630":4,"633":4,"634":4}}],["dark",{"2":{"128":1,"281":1,"443":1}}],["daicontractaddress",{"2":{"306":1,"308":3,"628":1,"630":3,"633":3}}],["daily",{"2":{"188":1}}],["dai",{"2":{"56":1,"616":2}}],["damage",{"2":{"37":1,"565":1}}],["dapps",{"2":{"25":1,"56":1,"254":1,"282":1,"303":1,"475":1}}],["dapp",{"0":{"281":1,"301":1,"302":1},"2":{"20":1,"25":1,"27":1,"52":1,"56":1,"253":1,"254":3,"273":2,"274":1,"279":1,"280":3,"281":9,"283":1,"285":1,"287":1,"293":1,"301":2,"303":6,"304":1,"475":1,"480":1,"621":2,"622":1,"627":1}}],["d",{"2":{"20":1,"21":1,"22":1,"30":1,"37":2,"40":1,"43":1,"44":2,"52":1,"58":1,"93":1,"115":1,"117":1,"229":2,"230":2,"232":2,"237":1,"239":2,"241":2,"243":1,"245":1,"248":1,"254":1,"274":1,"279":2,"609":1,"622":1,"627":2}}],["dropsession",{"2":{"606":1}}],["drop",{"2":{"195":1}}],["dropping",{"2":{"178":1,"593":1}}],["dropdown",{"2":{"2":1,"16":1,"208":1}}],["drawer",{"2":{"136":2,"137":2}}],["drag",{"2":{"76":1,"159":1,"369":1,"380":2}}],["drive",{"2":{"13":1}}],["digest",{"2":{"533":1,"535":1}}],["digit",{"2":{"364":1}}],["diligence",{"0":{"417":1},"2":{"415":1}}],["differ",{"2":{"554":1}}],["differs",{"2":{"492":1}}],["difference",{"2":{"307":1,"309":1,"629":1,"634":1}}],["differences",{"2":{"46":1}}],["different",{"2":{"93":1,"150":1,"182":1,"234":1,"254":1,"281":1,"307":1,"308":1,"309":1,"366":2,"372":1,"419":1,"420":1,"457":1,"563":1,"564":1,"572":1,"629":1,"630":1,"633":1,"634":1}}],["difficult",{"2":{"345":1}}],["dive",{"2":{"261":1,"432":1,"464":1,"488":1}}],["dictionary",{"2":{"49":1,"50":1,"84":2,"86":2}}],["dice",{"2":{"49":1}}],["die",{"2":{"49":1}}],["disruption",{"2":{"430":1}}],["disaster",{"0":{"592":1},"2":{"388":1,"589":2}}],["disable",{"2":{"204":1}}],["disabled",{"2":{"93":2,"369":1}}],["dist",{"2":{"305":1,"481":1}}],["distributions",{"2":{"431":1}}],["distribution",{"0":{"305":1,"481":1},"2":{"305":1,"481":1,"534":1}}],["district",{"2":{"48":1}}],["distinct",{"2":{"191":1,"610":1}}],["discuss",{"2":{"612":1}}],["discrepancy",{"2":{"598":1}}],["discretion",{"2":{"11":1}}],["disconnect",{"2":{"289":1,"303":1}}],["disconnectweb3react",{"2":{"266":1}}],["discouraged",{"2":{"251":1}}],["discordclientid",{"2":{"173":1}}],["discord",{"2":{"132":1,"256":1,"260":1,"274":1,"294":1,"463":1,"483":1,"487":1,"622":1}}],["disk",{"2":{"123":1,"129":2}}],["displayedassets",{"0":{"451":1}}],["displayed",{"2":{"128":1,"269":1,"303":1,"413":1,"430":1,"449":1,"450":1,"451":4,"465":1}}],["display",{"2":{"117":1,"141":1,"142":1,"143":1,"180":1,"181":1,"187":1,"430":1}}],["dispatched",{"2":{"248":1}}],["dispatches",{"2":{"58":1}}],["dispatch",{"2":{"56":1,"58":1,"310":1,"635":1}}],["dispatching",{"2":{"55":1}}],["directive",{"2":{"253":4}}],["directory",{"0":{"252":1,"253":1},"2":{"24":2,"136":2,"177":1,"251":2,"253":2,"372":1}}],["directly",{"2":{"20":1,"23":1,"25":1,"29":2,"35":1,"36":1,"42":2,"58":1,"69":1,"94":1,"107":1,"118":1,"120":1,"121":1,"201":1,"304":1,"312":1,"340":1,"382":1,"413":1,"465":1,"480":1,"512":1,"522":2,"564":1,"598":1}}],["direct",{"2":{"10":1,"282":1,"431":1,"504":1,"564":1,"597":1}}],["debit",{"2":{"413":1,"414":1,"465":1,"466":1,"607":1}}],["debugging",{"2":{"345":1}}],["debug",{"2":{"79":1,"117":1}}],["derive",{"2":{"315":1}}],["derives",{"2":{"121":3}}],["deactivate",{"2":{"266":1}}],["deactivated",{"2":{"266":1}}],["deactivation",{"0":{"266":1}}],["deal",{"2":{"84":1,"115":1}}],["decryption",{"2":{"562":1}}],["decoding",{"2":{"339":1}}],["decode",{"2":{"496":2,"603":1}}],["decodeproof",{"2":{"274":1,"622":1}}],["decodedpayload",{"2":{"603":2}}],["decoded",{"2":{"239":1,"603":1}}],["decentralized",{"2":{"312":1}}],["declare",{"2":{"253":1}}],["declared",{"2":{"253":1,"509":1}}],["declaration",{"2":{"253":1}}],["decimalnormalizer",{"2":{"108":2,"109":1,"110":1,"115":2,"116":2,"351":2,"353":1}}],["decimals",{"2":{"37":1,"48":1,"49":1,"51":1,"58":3,"108":3,"109":4,"182":2}}],["decisions",{"2":{"12":1}}],["denoted",{"2":{"115":1}}],["denying",{"2":{"590":1}}],["deny",{"2":{"11":1}}],["departments",{"2":{"534":1}}],["department",{"2":{"534":2}}],["depth",{"2":{"411":1}}],["depending",{"2":{"403":1,"602":1}}],["dependancy",{"2":{"382":1}}],["dependancies",{"2":{"381":1}}],["dependant",{"2":{"105":1}}],["dependencies",{"2":{"304":1,"480":1}}],["dependency",{"2":{"139":1,"304":1,"480":1}}],["depends",{"2":{"252":1}}],["depend",{"2":{"251":1,"304":1,"480":1}}],["deployable",{"2":{"194":1}}],["deploycontract",{"2":{"69":4}}],["deploymentresult",{"2":{"343":2}}],["deployment",{"0":{"69":1,"427":1,"490":1},"2":{"69":1,"196":1,"490":2,"493":1,"536":1}}],["deployedupon",{"2":{"392":1}}],["deployedmanually",{"2":{"392":1}}],["deployeddefault",{"2":{"392":1}}],["deployedwalletcontext",{"2":{"274":1,"622":1}}],["deployedcontractaddress",{"2":{"69":1}}],["deployed",{"2":{"56":1,"204":1,"339":1,"372":1,"392":3,"403":1,"427":1,"472":1,"491":1,"512":2,"536":1,"591":1}}],["deploying",{"0":{"343":1,"392":1},"2":{"44":1,"69":2,"116":1,"196":1}}],["deploy",{"0":{"401":1},"2":{"3":2,"5":1,"69":2,"109":1,"111":1,"113":1,"194":1,"196":2,"343":2,"372":3,"390":1,"400":1,"401":1,"419":1,"427":1,"536":1}}],["delightful",{"2":{"281":1}}],["delivery",{"2":{"56":1}}],["del",{"2":{"129":3}}],["delegation",{"2":{"383":1}}],["delegatecall",{"0":{"505":1},"2":{"504":2,"505":2,"510":1}}],["delegates",{"2":{"129":2}}],["delegate",{"2":{"129":2,"342":1}}],["delete",{"0":{"200":1},"2":{"97":1,"159":3,"177":1,"200":3}}],["delayed",{"2":{"115":1,"548":1}}],["delayedencodesubpackettype",{"2":{"548":1}}],["delayedencodedata",{"2":{"115":2,"116":1,"548":2}}],["delayedencode",{"0":{"115":1,"548":1},"2":{"115":4,"116":1,"543":1,"548":3}}],["defense",{"2":{"564":1}}],["defi",{"2":{"283":1}}],["defines",{"2":{"494":1,"502":1,"527":1}}],["define",{"2":{"119":1,"187":2,"387":1,"527":1,"564":1}}],["defined",{"2":{"50":2,"119":1,"129":1,"320":1,"351":1,"352":1,"354":1,"496":1,"504":1,"505":1,"507":1,"517":1,"525":2,"539":1,"573":1}}],["definitions",{"2":{"539":1}}],["definition",{"2":{"115":1}}],["defaultabicoder",{"2":{"496":2,"523":1}}],["defaultchainid",{"2":{"452":1}}],["defaulttheme",{"0":{"443":1},"2":{"443":1}}],["defaultpurchaseamount",{"0":{"299":1},"2":{"299":1}}],["defaultpawn",{"2":{"127":1}}],["defaultfundingcurrency",{"0":{"298":1},"2":{"281":2,"298":1,"300":2}}],["defaultnetwork",{"2":{"281":1,"455":1}}],["defaulting",{"2":{"108":1,"381":1}}],["defaults",{"2":{"65":1,"105":1,"332":1,"471":1}}],["default",{"0":{"452":1},"2":{"24":1,"68":1,"78":2,"83":1,"88":3,"93":4,"98":1,"117":1,"127":1,"128":1,"150":2,"152":1,"161":1,"190":1,"229":3,"230":1,"239":1,"243":1,"252":1,"253":1,"268":1,"286":1,"290":1,"297":1,"298":1,"299":2,"300":2,"322":2,"351":1,"366":3,"369":1,"375":1,"378":3,"379":1,"387":1,"452":1,"471":1,"598":1}}],["detected",{"2":{"591":1}}],["detect",{"0":{"577":1,"579":1,"582":1,"585":1,"587":1}}],["detects",{"2":{"25":1}}],["determining",{"2":{"353":1}}],["determines",{"2":{"443":1,"444":1,"448":1,"449":1,"450":1,"524":1,"528":1}}],["determined",{"2":{"285":1}}],["determine",{"0":{"553":1},"2":{"84":1,"340":1,"451":1,"557":1,"561":1,"602":1,"616":1}}],["detail",{"2":{"51":1}}],["details",{"0":{"402":1},"2":{"48":1,"49":1,"194":3,"195":1,"196":1,"197":1,"199":1,"239":1,"241":1,"243":3,"303":1,"383":1,"402":1,"405":1,"454":1,"541":1,"564":1,"593":1,"598":1,"600":2,"608":1}}],["demand",{"0":{"490":1},"2":{"280":2,"301":1}}],["demystify",{"2":{"46":1}}],["demo",{"0":{"60":1,"409":1,"432":1,"478":1},"2":{"60":1,"75":1,"105":2,"117":1,"253":1,"254":1,"256":1,"260":1,"265":1,"270":1,"281":2,"301":1,"409":1,"452":1,"463":1,"478":1,"483":1,"487":1,"598":1}}],["demonstration",{"2":{"127":1}}],["demonstrating",{"2":{"3":1}}],["demonstrates",{"2":{"274":1,"622":1}}],["demonstrated",{"2":{"252":1,"553":1}}],["demonstrate",{"2":{"36":1}}],["democratic",{"2":{"12":1}}],["demos",{"2":{"9":1}}],["desc",{"2":{"411":1}}],["describing",{"2":{"566":1,"578":1}}],["described",{"2":{"51":1,"252":1,"253":1,"282":1,"563":1}}],["describe",{"2":{"46":1}}],["description",{"0":{"631":1},"2":{"37":3,"48":2,"49":1,"195":1,"197":1,"199":1,"396":2,"397":2,"627":1}}],["destinations",{"2":{"159":1}}],["desktop",{"0":{"131":1},"2":{"129":1,"131":2,"280":1,"377":1}}],["design",{"2":{"116":1,"425":1}}],["designed",{"2":{"24":1,"25":1,"28":1,"122":1,"189":1,"210":1,"280":1,"430":1,"489":1}}],["desired",{"2":{"105":1,"181":1,"430":2,"431":1}}],["deep",{"2":{"13":1,"212":1,"371":2,"378":3}}],["deviate",{"2":{"46":1,"568":1}}],["devices",{"2":{"469":1,"475":1}}],["device",{"0":{"223":1},"2":{"18":1,"68":1,"127":1,"220":1,"223":1,"316":1,"467":1,"468":1,"557":2,"606":1}}],["developed",{"2":{"254":1,"280":1}}],["developers",{"2":{"244":1,"280":1,"383":1,"433":1,"441":1,"457":1,"559":1}}],["developer",{"2":{"117":1,"210":1,"386":1,"413":1,"431":1,"465":1,"602":1,"607":1}}],["developing",{"2":{"8":1,"345":1}}],["development",{"2":{"8":1,"82":1,"247":1,"304":1,"387":1,"412":1,"564":1}}],["dev",{"2":{"0":1,"67":1,"278":1,"372":1,"381":1,"516":1,"626":1,"627":1}}],["domain",{"2":{"601":2}}],["domains",{"2":{"387":1}}],["dom",{"2":{"598":1}}],["doubt",{"2":{"115":1}}],["double",{"2":{"93":1}}],["dotween",{"2":{"101":1}}],["don",{"2":{"85":1,"101":1,"105":1,"106":1,"115":1,"136":1,"188":1,"303":1,"306":1,"340":1,"364":1,"368":1,"381":2,"382":1,"522":1,"524":1,"539":1,"556":1,"593":1,"602":1,"612":1,"628":1}}],["done",{"2":{"2":1,"16":1,"64":1,"68":1,"69":1,"82":1,"123":1,"127":2,"130":1,"131":1,"141":1,"204":1,"303":1,"370":1,"468":1,"489":1,"490":1}}],["doing",{"2":{"81":1,"351":1,"382":1}}],["do",{"0":{"252":1,"253":1},"2":{"37":1,"48":1,"51":1,"69":2,"74":1,"76":2,"88":1,"93":1,"94":1,"106":1,"107":2,"117":2,"173":1,"182":1,"188":1,"252":1,"254":1,"273":2,"274":3,"339":2,"370":1,"397":1,"424":1,"567":1,"621":2,"622":3}}],["download",{"2":{"76":1,"136":1,"372":1}}],["downtime",{"2":{"25":1}}],["down",{"2":{"25":1,"195":1,"216":1,"339":1,"376":1,"449":1,"450":1,"556":1,"557":1}}],["downside",{"2":{"24":1}}],["docker",{"2":{"552":1}}],["document",{"2":{"115":1,"117":1,"429":1,"555":5,"556":1,"563":1,"589":1,"598":1}}],["documentation",{"2":{"1":1,"14":1,"25":1,"28":1,"55":1,"63":1,"75":2,"108":1,"109":1,"111":1,"113":1,"258":1,"321":1,"322":1,"370":1,"411":1,"485":1}}],["docs",{"2":{"21":1,"22":1,"31":2,"48":2,"120":1,"133":1,"156":1,"158":1,"175":1,"178":1,"254":1,"369":1,"378":1,"555":1}}],["doesn",{"2":{"56":1,"81":1,"378":2,"430":1,"431":1,"492":1,"503":1,"504":1,"508":1,"509":1,"559":1,"595":1}}],["does",{"0":{"251":1},"2":{"0":1,"84":1,"108":1,"117":1,"127":1,"489":1,"536":1,"564":1,"568":1,"611":1}}],["l1",{"2":{"427":1}}],["luckily",{"2":{"382":1}}],["lv7xncqh",{"2":{"49":1}}],["lsm",{"2":{"25":1}}],["len",{"2":{"514":1}}],["length",{"2":{"86":2,"117":1,"119":1,"120":4,"361":2,"362":2,"603":1}}],["lemur",{"2":{"404":1}}],["left",{"2":{"159":2,"195":2,"441":1,"444":3,"535":1,"548":1}}],["leaked",{"2":{"565":1}}],["leaf",{"2":{"531":2,"532":1,"533":1,"534":1,"535":1}}],["lead",{"2":{"494":1}}],["leading",{"2":{"168":1,"256":1,"260":1,"463":1,"483":1,"487":1}}],["least",{"2":{"388":1,"468":1}}],["leave",{"2":{"93":1}}],["learned",{"2":{"174":2}}],["learn",{"2":{"29":2,"32":1,"42":2,"77":1,"79":1,"88":1,"109":1,"111":1,"113":1,"115":1,"149":1,"151":1,"379":1,"412":1,"413":1,"465":1,"563":1,"627":1}}],["let",{"2":{"37":2,"115":1,"523":1,"557":1}}],["lebanon",{"2":{"12":1}}],["leverage",{"2":{"89":1,"90":1,"91":1,"92":1,"452":1,"463":1,"559":1}}],["leverages",{"2":{"25":1,"412":1,"559":1}}],["leveraging",{"2":{"9":1,"13":1,"61":1,"410":1,"411":1,"478":1}}],["levels",{"2":{"534":1}}],["level",{"0":{"31":1,"528":1},"1":{"529":1,"530":1,"531":1,"532":1,"533":1,"534":1},"2":{"3":4,"29":3,"31":1,"32":1,"37":3,"39":2,"124":1,"157":2,"190":1,"280":1,"557":1}}],["loss",{"2":{"494":1}}],["lost",{"2":{"127":1,"468":3,"470":1,"592":1}}],["love",{"2":{"456":1}}],["long",{"2":{"281":1,"405":1}}],["longer",{"2":{"25":1,"246":1}}],["loyalty",{"2":{"203":1}}],["locally",{"2":{"552":1,"554":1,"557":1}}],["localhost",{"2":{"372":1,"381":3,"496":1}}],["localstorage",{"2":{"315":1}}],["local",{"2":{"312":1,"315":1,"319":1,"372":1,"514":1,"515":1}}],["location",{"2":{"380":1,"444":1}}],["locations",{"2":{"11":1}}],["locate",{"2":{"93":1,"105":1,"369":1}}],["located",{"2":{"37":1,"93":1,"128":1,"366":1}}],["lock",{"2":{"590":1}}],["locked",{"2":{"559":1,"590":1}}],["locking",{"2":{"300":1}}],["lockfundingcurrencytodefault",{"0":{"300":1},"2":{"281":2}}],["locks",{"2":{"117":1}}],["loading",{"2":{"319":1,"598":1}}],["loaded",{"2":{"119":1}}],["load",{"2":{"93":2}}],["lowest",{"2":{"427":1}}],["low",{"2":{"25":1,"392":1}}],["looks",{"2":{"430":1}}],["lookup",{"2":{"37":1,"430":1}}],["look",{"2":{"12":1,"115":1,"190":1,"261":1,"273":1,"304":1,"340":1,"342":1,"396":1,"397":1,"404":2,"412":1,"464":1,"480":1,"488":1,"553":1,"621":1}}],["looking",{"2":{"8":1,"50":1}}],["lognologindexnumberindex",{"2":{"575":1}}],["lognotransactionindexnumberindex",{"2":{"575":1}}],["lognotopicsstring",{"2":{"575":1}}],["lognoblocknumbernumberthe",{"2":{"575":1}}],["lognodatastringdata",{"2":{"575":1}}],["logic",{"2":{"424":1,"491":2}}],["logically",{"2":{"346":1}}],["logindex",{"2":{"576":3}}],["loginresult",{"2":{"382":2}}],["loginmethod",{"2":{"365":1,"367":1}}],["logins",{"2":{"256":1,"260":1,"463":1,"468":1,"483":1,"487":1,"613":2}}],["loginpage",{"2":{"100":1}}],["loginpanel",{"2":{"88":1,"93":1,"97":1,"102":1,"364":1,"366":2,"369":5}}],["login",{"0":{"282":1,"384":1,"468":1,"611":1,"612":1},"1":{"283":1,"284":1,"285":1,"286":1,"287":1,"288":1,"289":1,"290":1,"291":1,"292":1,"293":1,"294":1,"295":1,"296":1,"297":1,"298":1,"299":1,"300":1,"385":1,"386":1,"469":1,"470":1,"471":1},"2":{"93":4,"129":3,"131":1,"210":2,"365":3,"366":5,"367":10,"368":3,"382":4,"383":1,"384":1,"385":1,"386":1,"432":1,"467":1,"468":2,"471":1,"560":3,"561":3,"565":1,"598":6,"610":1,"613":1}}],["logging",{"2":{"293":1,"611":1,"612":1}}],["logged",{"2":{"222":1,"366":1,"430":1,"599":3}}],["logsbloom",{"2":{"576":1}}],["logs",{"2":{"248":1,"430":2,"575":1,"576":3,"598":1,"608":3}}],["logtemp",{"2":{"129":1,"141":1,"142":1,"143":1,"151":2,"152":2,"180":1,"181":1,"187":1}}],["logerror",{"2":{"79":1,"117":1}}],["logolight",{"2":{"454":2}}],["logodark",{"2":{"454":2}}],["logourl",{"0":{"446":1},"2":{"58":3}}],["logouri",{"2":{"37":1}}],["logo",{"2":{"37":1,"446":1,"463":1}}],["logos",{"2":{"8":1,"58":2}}],["log",{"2":{"6":1,"30":1,"43":1,"44":2,"127":1,"129":1,"141":1,"142":1,"143":1,"151":4,"152":4,"180":1,"181":1,"187":1,"214":1,"215":1,"217":1,"218":1,"221":1,"222":1,"223":1,"225":1,"226":1,"229":2,"230":2,"232":2,"237":5,"239":2,"241":2,"243":2,"245":1,"247":1,"249":1,"272":1,"274":2,"281":2,"306":2,"307":2,"308":2,"309":2,"310":1,"317":2,"319":2,"429":1,"430":1,"439":1,"496":1,"575":3,"595":1,"597":1,"598":1,"603":3,"605":1,"608":1,"609":1,"612":1,"613":1,"617":1,"618":1,"620":1,"622":2,"628":2,"629":2,"630":2,"633":2,"634":2,"635":1}}],["layer",{"2":{"559":1}}],["layout",{"0":{"518":1,"519":1},"1":{"519":1,"520":2,"521":2,"522":1,"523":1},"2":{"566":1}}],["last",{"2":{"159":1,"190":1,"601":1}}],["lastly",{"2":{"127":1,"210":1,"224":1,"412":1}}],["launchurl",{"2":{"150":1}}],["launcher",{"2":{"137":1,"378":2}}],["launch",{"2":{"127":1,"136":1,"407":1}}],["later",{"2":{"81":1,"262":1,"340":1,"342":1,"350":1,"351":1,"367":1,"553":1,"602":4}}],["latency",{"2":{"25":1}}],["latestblock",{"2":{"6":2}}],["latest",{"2":{"6":5,"22":1,"34":1,"54":1,"76":1,"153":1,"305":1,"322":3,"323":1,"326":1,"328":1,"330":1,"332":3,"481":1,"555":1,"559":1}}],["languages",{"0":{"279":1,"627":1},"2":{"627":1}}],["language",{"2":{"20":1,"40":1,"52":1,"56":1,"274":1,"279":1,"622":1,"627":1}}],["lanka",{"2":{"12":1}}],["label",{"2":{"8":3,"9":1,"219":2,"227":2}}],["lt",{"2":{"6":2,"17":2,"39":10,"50":2,"57":3,"84":3,"86":2,"117":1,"119":4,"120":1,"123":6,"129":1,"141":2,"142":4,"143":2,"144":1,"145":1,"146":1,"147":1,"148":1,"151":1,"152":2,"162":2,"163":2,"164":2,"165":2,"166":2,"167":2,"168":2,"169":4,"170":2,"171":2,"180":2,"181":4,"182":1,"183":1,"184":1,"185":2,"186":7,"187":10,"196":1,"201":1,"214":2,"215":2,"217":2,"218":2,"221":2,"222":2,"223":2,"225":2,"226":2,"252":3,"253":5,"273":4,"274":1,"281":1,"304":1,"305":4,"326":2,"342":5,"378":38,"407":3,"436":9,"437":2,"441":3,"452":1,"455":8,"460":9,"461":2,"480":1,"481":4,"532":2,"598":11,"621":4,"622":1}}],["lies",{"2":{"590":1}}],["lifecycle",{"2":{"566":1}}],["lifetime",{"2":{"124":1}}],["live",{"2":{"555":1}}],["lives",{"2":{"75":1}}],["liquidity",{"2":{"431":1}}],["little",{"2":{"395":1}}],["lightweight",{"2":{"345":1}}],["light",{"2":{"281":1,"292":1,"427":1,"441":1,"443":1,"530":1}}],["limit",{"2":{"281":1,"296":1,"575":1,"578":1}}],["limitation",{"2":{"252":2}}],["limited",{"2":{"117":1,"312":1,"534":1,"548":1,"565":1}}],["limits",{"2":{"4":2,"564":1}}],["linux",{"2":{"376":2,"552":1}}],["linked",{"2":{"194":1,"209":2,"371":1}}],["linker",{"2":{"68":3}}],["links",{"2":{"155":1}}],["linking",{"0":{"431":1},"1":{"432":1},"2":{"68":1,"210":1,"366":1,"371":1,"378":3,"431":1,"432":1}}],["link",{"0":{"196":1},"2":{"37":1,"78":2,"96":1,"137":1,"150":2,"152":1,"194":2,"195":1,"196":2,"199":1,"201":1,"210":1,"371":1,"431":2,"541":1}}],["linear",{"2":{"534":1}}],["lines",{"2":{"173":1}}],["line",{"2":{"0":1,"44":1,"72":1,"136":1,"139":1,"381":1,"564":1}}],["libs",{"2":{"526":1}}],["libraries",{"2":{"251":4,"252":1,"254":2,"548":1}}],["library",{"0":{"65":1,"252":1,"253":1},"2":{"6":1,"65":1,"80":1,"110":1,"112":1,"114":1,"210":1,"252":1,"253":2,"255":1,"259":1,"279":1,"341":1,"345":3,"346":1,"356":1,"462":1,"482":1,"486":1,"514":1,"515":1,"627":1}}],["lib",{"2":{"237":1,"305":1,"481":1}}],["libya",{"2":{"12":1}}],["listing",{"2":{"246":1,"593":1}}],["listed",{"2":{"206":1}}],["listening",{"2":{"372":1}}],["listeners",{"2":{"102":1}}],["listen",{"0":{"241":1,"617":1},"2":{"25":1,"27":1,"234":1}}],["lists",{"2":{"142":1}}],["listsessions",{"0":{"142":1},"2":{"142":1,"605":1,"606":1}}],["list",{"0":{"11":1,"229":1,"605":1},"1":{"12":1},"2":{"12":1,"14":1,"20":1,"21":1,"22":1,"26":1,"52":1,"57":1,"58":1,"84":2,"142":1,"159":1,"161":1,"181":1,"229":1,"230":2,"239":6,"241":1,"243":2,"247":1,"297":1,"326":2,"427":2,"440":1,"449":1,"450":1,"451":2,"455":1,"511":1,"517":1,"575":1,"605":1}}],["likelyreal",{"2":{"602":1}}],["likewise",{"2":{"306":1,"628":1}}],["like",{"2":{"7":1,"8":1,"20":1,"21":1,"22":1,"24":1,"37":3,"40":1,"46":1,"52":1,"57":1,"67":1,"101":1,"115":1,"117":2,"129":5,"188":1,"195":1,"197":1,"198":1,"199":1,"210":1,"229":1,"230":1,"232":1,"239":1,"241":1,"256":1,"260":1,"273":1,"274":1,"278":1,"279":2,"280":2,"281":2,"304":1,"340":1,"342":1,"380":1,"385":1,"386":1,"396":2,"397":1,"404":1,"430":1,"463":1,"467":1,"480":1,"483":1,"487":1,"534":1,"541":1,"553":2,"601":1,"612":1,"616":1,"617":1,"621":1,"622":1,"626":1,"627":3}}],["ll",{"2":{"0":1,"20":1,"49":1,"64":1,"65":1,"68":1,"69":2,"77":1,"78":2,"84":5,"87":1,"93":1,"98":1,"110":3,"112":3,"114":3,"117":2,"123":1,"127":1,"128":2,"129":1,"130":1,"149":1,"157":1,"178":1,"185":1,"229":1,"273":1,"322":1,"340":5,"342":3,"364":1,"365":2,"367":1,"370":1,"372":2,"377":1,"380":1,"381":1,"396":1,"621":1}}],["npx",{"2":{"253":1}}],["npm",{"2":{"21":1,"33":2,"53":1,"263":2,"280":1,"304":2,"435":1,"459":1,"480":2}}],["ndk",{"2":{"157":1}}],["n",{"2":{"49":3,"341":1,"376":1,"514":1,"533":1,"534":2,"535":2}}],["num",{"2":{"187":1}}],["numbers",{"2":{"108":2,"198":1}}],["number",{"2":{"30":1,"36":1,"37":1,"43":1,"44":1,"78":2,"188":1,"192":1,"193":1,"213":1,"219":2,"220":1,"224":1,"246":4,"268":1,"286":1,"288":1,"312":1,"321":1,"323":1,"325":1,"337":1,"340":1,"357":1,"405":1,"431":2,"451":1,"534":1,"564":1,"575":2,"601":2,"602":5}}],["nuget",{"2":{"76":1}}],["nullthe",{"2":{"575":1,"578":1}}],["nullreason",{"2":{"575":2,"578":1}}],["null",{"2":{"37":1,"48":1,"49":1,"248":1,"252":1,"576":5,"578":1,"603":1,"608":1,"609":1}}],["nav",{"2":{"195":1}}],["navigating",{"2":{"93":1,"105":1}}],["navigate",{"2":{"2":1,"16":1,"93":1,"131":2,"136":1,"137":1,"195":1,"378":1,"390":1,"400":1,"403":1,"598":2}}],["nativebalance",{"2":{"232":2}}],["nativereceipt",{"2":{"186":2,"576":1,"608":1}}],["native",{"0":{"231":1,"232":1,"305":1,"481":1},"1":{"232":1},"2":{"58":1,"82":1,"88":1,"93":1,"210":1,"306":1,"307":1,"308":1,"309":1,"374":1,"559":1,"628":1,"629":1,"630":1,"633":1,"634":1}}],["nametyperangedescription",{"2":{"519":1}}],["nametyperangedescriptionthresholduint161",{"2":{"518":1}}],["nametypedescriptionoptionalsessionidstringsession",{"2":{"583":1,"586":1}}],["nametypedescriptionoptionalsessionstringidentifier",{"2":{"540":1}}],["nametypedescriptionoptionalmessagestringthe",{"2":{"580":1}}],["nametypedescriptionoptionalexecutedbooleanwhether",{"2":{"575":1,"578":1}}],["nametypedescriptionoptionaladdressstringthe",{"2":{"575":1}}],["nametypedescriptionoptionalidstringunique",{"2":{"575":1}}],["nametypedescriptionoptionaltxhashstringtransaction",{"2":{"575":1}}],["nametypedescriptionoptionaltypestringtransaction",{"2":{"544":1,"545":1,"546":1,"547":1}}],["nametypedescriptionoptionalcodestringidentifies",{"2":{"573":1}}],["nametypedescriptionoptionalcodestringthe",{"2":{"541":1,"542":1,"543":1,"549":1}}],["nametypedescriptionoptionalversionstringthe",{"2":{"539":1}}],["nametypedescription",{"2":{"495":1,"499":1,"500":1,"503":1}}],["name=",{"2":{"378":14}}],["named",{"2":{"173":1,"396":1}}],["names",{"2":{"115":2,"151":1,"152":1,"235":1,"406":1}}],["namespaces",{"2":{"97":1}}],["name",{"2":{"30":1,"37":3,"43":1,"44":1,"48":3,"49":3,"51":1,"58":3,"76":1,"97":2,"105":1,"115":1,"159":3,"195":1,"196":1,"197":1,"199":1,"273":1,"281":3,"283":1,"292":1,"304":2,"339":1,"378":1,"396":2,"397":2,"399":1,"401":1,"407":1,"447":1,"452":1,"454":2,"480":2,"515":4,"539":1,"548":6,"557":4,"601":6,"603":2,"608":1,"609":1,"621":1}}],["nitro",{"2":{"559":1,"560":1,"563":1,"566":1,"568":1,"591":1,"597":1}}],["nicely",{"2":{"161":1}}],["niche",{"2":{"117":1}}],["nicaragua",{"2":{"12":1}}],["nil",{"2":{"22":4,"44":1,"229":4,"230":7,"232":1,"237":2,"239":4,"241":4,"243":4,"247":1}}],["nosessionstringidentifier",{"2":{"549":1}}],["nosessionstringthe",{"2":{"541":1}}],["nova",{"2":{"595":1,"597":1,"598":1,"605":1,"606":1,"608":1,"609":1}}],["nov",{"2":{"548":1}}],["noidentifierstringunique",{"2":{"543":1}}],["nomessagestringmessage",{"2":{"542":1}}],["nobody",{"2":{"106":1}}],["nonpayable",{"2":{"548":1}}],["nonetworkstringnetwork",{"2":{"542":1,"543":1}}],["none",{"2":{"123":1,"319":1,"322":1}}],["non",{"2":{"80":1,"111":1,"115":1,"153":1,"210":2,"383":1,"463":1,"471":1,"472":1,"512":3,"534":1}}],["nonce=",{"2":{"598":1}}],["nonceat",{"0":{"332":1},"2":{"332":2}}],["nonce",{"2":{"57":7,"121":2,"288":1,"332":4,"340":1,"353":1,"555":2,"595":1,"601":1,"602":7}}],["nonces",{"2":{"56":1,"57":2,"489":1}}],["north",{"2":{"12":1}}],["normally",{"2":{"253":1}}],["normalizeasbiginteger",{"2":{"110":1,"116":1,"351":2}}],["normalize",{"2":{"108":2,"109":1,"115":2,"116":1,"353":1}}],["normal",{"2":{"2":1,"16":1,"530":1}}],["no",{"0":{"311":1},"2":{"8":1,"25":2,"48":1,"80":1,"88":1,"98":1,"115":1,"124":1,"129":1,"187":1,"246":1,"280":1,"322":1,"369":1,"377":1,"391":1,"430":2,"451":1,"489":1,"504":1,"505":1,"534":1,"542":1,"543":1,"555":1,"557":1,"562":3,"564":1,"586":1}}],["nodejs",{"0":{"276":1,"624":1},"2":{"276":1,"624":1,"627":1}}],["nodes",{"2":{"6":1,"25":2,"247":1,"321":1}}],["node",{"0":{"5":1,"21":1,"33":1,"53":1},"1":{"6":1},"2":{"5":1,"20":1,"21":2,"25":4,"30":1,"33":2,"38":1,"40":1,"43":1,"44":2,"52":1,"214":1,"215":1,"217":1,"218":1,"221":1,"222":1,"223":1,"225":1,"226":1,"229":1,"230":1,"232":1,"237":1,"239":1,"241":1,"243":1,"245":1,"320":1,"535":13}}],["nowalletstringthe",{"2":{"583":1}}],["nowalletstringaddress",{"2":{"542":1,"549":1}}],["now",{"2":{"3":1,"17":1,"18":1,"68":1,"97":1,"123":1,"124":1,"127":1,"159":1,"173":1,"186":1,"366":1,"393":1,"398":1,"403":1,"407":1}}],["notifications",{"2":{"592":1}}],["notice",{"2":{"78":2,"98":1,"196":1,"229":1,"340":1,"516":1,"533":1,"541":1,"544":1,"546":1,"549":1}}],["notokenstringthe",{"2":{"545":1,"546":1,"547":1}}],["notostringthe",{"2":{"544":1}}],["notransactions",{"2":{"543":1}}],["notable",{"2":{"307":1,"309":1,"629":1,"634":1}}],["nothing",{"2":{"129":1,"303":1}}],["noted",{"2":{"554":1}}],["notexpired",{"2":{"548":2}}],["notes",{"0":{"24":1}}],["note",{"0":{"588":1},"2":{"12":1,"21":1,"33":1,"48":1,"51":1,"65":1,"68":1,"74":1,"76":3,"105":1,"108":1,"109":1,"113":1,"115":1,"122":1,"127":1,"129":1,"161":1,"174":1,"182":1,"185":1,"262":1,"273":1,"281":1,"310":1,"319":1,"321":1,"322":1,"323":1,"326":1,"328":1,"330":1,"332":1,"340":1,"349":1,"363":1,"369":1,"372":1,"378":2,"379":1,"415":1,"553":1,"554":1,"595":1,"621":1,"635":1}}],["not",{"2":{"0":1,"2":3,"5":1,"11":1,"16":3,"24":1,"49":1,"51":1,"56":1,"88":2,"93":1,"108":2,"109":2,"110":1,"112":1,"114":1,"115":1,"117":4,"118":1,"124":1,"127":1,"129":1,"209":1,"249":2,"274":1,"299":1,"317":1,"321":1,"339":1,"345":1,"351":1,"363":1,"366":1,"369":1,"374":1,"380":1,"382":1,"424":1,"430":1,"489":2,"503":2,"509":1,"512":1,"536":1,"548":1,"555":2,"564":2,"568":1,"599":1,"601":1,"602":2,"609":1,"611":1,"622":1}}],["necessitate",{"2":{"586":1}}],["necessary",{"2":{"131":1,"247":1,"390":1,"555":1}}],["nesting",{"2":{"534":1}}],["nested",{"0":{"534":1},"2":{"533":2,"534":3,"535":3}}],["nearly",{"2":{"431":1}}],["never",{"2":{"93":1,"522":2,"535":1,"538":1,"559":1,"609":1}}],["neon",{"2":{"48":1}}],["nethereum",{"2":{"80":1,"345":1}}],["net",{"2":{"37":4,"49":1,"229":1,"230":1,"232":1,"239":1,"241":1,"243":1,"430":1}}],["networkid",{"0":{"331":1},"2":{"161":1,"331":2}}],["network2",{"2":{"150":2,"152":1}}],["network1",{"2":{"150":2,"152":1}}],["networks",{"0":{"14":1,"26":1},"2":{"14":1,"20":2,"25":1,"26":1,"37":1,"39":1,"52":2,"55":1,"241":1,"243":1,"347":1,"457":1}}],["network",{"0":{"208":1,"231":1,"232":1},"1":{"232":1},"2":{"6":2,"37":4,"39":4,"56":1,"58":2,"65":1,"83":1,"108":1,"115":2,"116":1,"117":1,"145":1,"146":1,"161":2,"196":1,"208":1,"241":2,"243":2,"247":2,"310":1,"333":1,"353":1,"400":1,"471":2,"540":1,"542":1,"548":1,"557":1,"576":1,"578":1,"595":1,"597":1,"598":1,"605":1,"606":1,"608":2,"609":3,"635":1}}],["nepal",{"2":{"12":1}}],["nextjs",{"0":{"250":1,"252":1},"1":{"251":1,"252":1,"253":1},"2":{"251":3,"252":1,"253":6}}],["next",{"0":{"251":1,"252":1,"253":1,"257":1,"261":1,"464":1,"484":1,"488":1},"1":{"258":1,"485":1},"2":{"2":1,"16":1,"25":1,"75":1,"91":1,"93":1,"130":1,"251":2,"253":2,"322":1,"364":1,"397":1,"455":1}}],["needing",{"2":{"58":1}}],["needs",{"2":{"25":1,"106":1,"303":1,"504":1,"512":1,"569":1}}],["needed",{"2":{"9":1,"13":1,"76":1,"103":1,"129":1,"203":1,"304":1,"312":1,"412":1,"454":1,"468":1,"527":1,"528":1}}],["need",{"2":{"2":1,"16":1,"25":3,"28":1,"64":1,"65":1,"69":1,"85":2,"93":3,"105":1,"110":1,"112":1,"114":1,"115":2,"117":3,"118":1,"120":1,"123":1,"127":2,"129":2,"131":1,"132":1,"133":1,"156":1,"157":1,"174":1,"177":1,"178":1,"182":1,"188":1,"254":1,"303":1,"321":1,"339":1,"345":1,"347":2,"351":1,"372":1,"385":1,"386":1,"396":1,"430":1,"455":1,"467":1,"472":1,"505":1,"507":1,"539":2,"557":1,"593":2,"612":1,"616":1}}],["newimagehash",{"2":{"504":1,"510":1}}],["newint",{"2":{"247":1}}],["newindexer",{"2":{"22":1,"229":1,"230":1,"232":1,"237":1,"239":1,"241":1,"243":1}}],["newestblock",{"2":{"330":2}}],["newer",{"2":{"21":1,"33":1}}],["newrpcrelayer",{"2":{"247":1}}],["newprovider",{"2":{"247":1}}],["newproviderurl",{"2":{"147":1}}],["newwalletsingleowner",{"2":{"247":1}}],["newwalletfrommnemonic",{"2":{"247":1}}],["newobject",{"2":{"129":1,"187":2}}],["newly",{"2":{"93":1,"105":1,"340":1,"364":1,"368":1,"370":1,"380":1,"381":1,"382":1}}],["newlydeployedcontractaddress",{"2":{"69":1,"343":1}}],["newtonsoft",{"2":{"76":2}}],["newmetadata",{"2":{"30":1,"34":1,"43":1,"44":2}}],["new",{"2":{"0":1,"2":1,"6":1,"16":1,"21":1,"30":1,"33":1,"43":1,"44":3,"58":1,"65":2,"68":1,"78":2,"80":1,"82":2,"83":1,"84":9,"85":2,"86":6,"87":3,"105":1,"108":2,"109":2,"110":4,"111":2,"112":4,"113":4,"114":4,"115":7,"116":12,"117":3,"139":3,"153":1,"159":2,"177":1,"194":1,"196":1,"210":1,"229":1,"230":1,"232":1,"237":1,"239":1,"241":1,"243":1,"253":1,"265":1,"274":4,"280":1,"306":3,"307":2,"308":2,"309":2,"314":1,"315":2,"319":1,"320":1,"330":1,"339":1,"340":4,"342":2,"351":2,"355":2,"356":1,"376":1,"378":2,"381":1,"399":1,"400":1,"430":3,"471":1,"495":1,"496":1,"503":1,"534":1,"539":1,"541":1,"561":1,"595":1,"597":1,"598":1,"603":1,"605":1,"606":1,"608":1,"609":1,"622":4,"628":3,"629":2,"630":2,"633":2,"634":2}}],["nftbalances",{"2":{"230":4}}],["nfts",{"2":{"10":1,"25":1,"27":1,"111":1}}],["nft",{"0":{"309":1,"634":1},"2":{"1":1,"3":2,"10":1,"19":1,"25":2,"32":1,"36":1,"194":1,"230":1,"246":1,"309":2,"403":1,"431":1,"463":1,"564":1,"634":2}}],["mpc",{"2":{"559":1}}],["mkdir",{"2":{"372":1}}],["mnemonic",{"2":{"247":6}}],["msg",{"2":{"237":3}}],["mm",{"2":{"219":2,"227":2}}],["mycustomlogolight",{"2":{"454":1}}],["mycustomlogodark",{"2":{"454":1}}],["mycustomconnectoroptions",{"2":{"454":1}}],["mycustomconnector",{"2":{"454":2,"455":1}}],["mycomponent",{"2":{"437":1,"461":1}}],["myetherwallet",{"2":{"423":1}}],["mypinata",{"2":{"404":1}}],["myunityserver",{"2":{"372":3}}],["myapp",{"2":{"253":1}}],["myanmar",{"2":{"12":1}}],["my",{"0":{"203":1,"251":1},"2":{"283":1,"304":1,"454":2,"455":3,"480":1}}],["mytokenaddress",{"2":{"110":2,"112":2,"114":2}}],["mytoken",{"2":{"110":3,"112":3,"114":3}}],["md",{"2":{"48":2,"49":1}}],["much",{"2":{"84":1,"173":1,"380":1,"532":1}}],["mutable",{"2":{"75":1}}],["mumbai",{"2":{"65":1,"407":1}}],["must",{"2":{"39":1,"93":1,"98":1,"107":1,"175":2,"229":1,"235":1,"251":1,"252":1,"253":1,"265":1,"349":1,"371":1,"387":1,"388":2,"389":1,"392":1,"449":1,"450":1,"497":1,"516":1,"525":1,"539":1,"541":2,"552":1,"565":1,"602":1,"603":1}}],["multisig",{"2":{"559":2,"560":1}}],["multisignature",{"2":{"467":1}}],["multi",{"2":{"25":1,"113":1,"472":1,"531":1}}],["multiple",{"0":{"631":1},"2":{"0":1,"5":1,"57":1,"86":1,"93":1,"105":1,"113":2,"116":1,"181":1,"280":1,"303":1,"306":1,"307":2,"308":2,"309":2,"415":1,"425":1,"467":2,"472":1,"534":1,"561":1,"601":1,"628":1,"629":2,"630":2,"633":2,"634":2}}],["mitigates",{"2":{"602":1}}],["mitigate",{"2":{"601":1,"602":1}}],["mitm",{"2":{"565":1}}],["mimics",{"2":{"501":1}}],["middle",{"2":{"444":2}}],["migrates",{"2":{"430":1}}],["migrate",{"2":{"430":1}}],["migrating",{"2":{"429":1,"602":1}}],["migration",{"0":{"428":1,"430":1,"491":1},"1":{"429":1,"430":1},"2":{"429":2,"430":6,"431":1}}],["might",{"2":{"182":1,"407":1,"553":1,"554":1,"595":1,"612":1}}],["mistakes",{"2":{"407":1}}],["misuse",{"2":{"383":1}}],["missed",{"2":{"19":1}}],["microsoft",{"2":{"382":1}}],["mix",{"2":{"306":1,"628":1}}],["mixed",{"2":{"48":1}}],["millions",{"2":{"210":1}}],["minimal",{"2":{"430":1}}],["minimum",{"2":{"396":1}}],["min",{"2":{"305":2,"481":2}}],["minted",{"2":{"406":2}}],["minting",{"0":{"405":1},"2":{"407":1,"439":1}}],["mints",{"2":{"403":1}}],["mint",{"2":{"109":1,"110":2,"111":1,"113":1,"114":2,"115":3,"351":1,"403":1,"404":1,"405":3,"407":1}}],["minor",{"2":{"80":2,"153":2}}],["mined",{"2":{"24":1,"56":1}}],["minutes",{"2":{"8":1,"211":1,"614":1}}],["mind",{"2":{"2":1,"16":1}}],["mail",{"2":{"515":1}}],["mainmoduleinterface",{"2":{"504":2,"510":2}}],["mainmoduleupgradable",{"2":{"501":1,"504":3,"509":1,"510":1,"511":1,"512":1,"526":1,"537":1}}],["mainmoduleupgradeable",{"0":{"501":1},"1":{"502":1,"503":1},"2":{"491":1,"536":1}}],["mainmodule",{"2":{"491":2,"492":1,"497":2,"501":1,"504":3,"524":1,"525":2,"526":1,"536":4,"537":1}}],["main",{"0":{"491":1},"2":{"210":1,"346":1,"372":4,"378":3,"451":3,"491":2,"598":4}}],["maintaining",{"2":{"280":1,"312":1}}],["maintain",{"2":{"102":1}}],["mainnet",{"2":{"20":2,"21":1,"30":1,"43":1,"44":1,"52":2,"58":1,"161":1,"247":1,"274":1,"281":1,"622":1}}],["marked",{"2":{"509":1}}],["market",{"2":{"411":1,"559":1}}],["marketstats",{"2":{"219":2}}],["marketwalletsdaily",{"2":{"218":2}}],["marketwalletstotal",{"2":{"217":2}}],["markettxneventdaily",{"2":{"215":2}}],["markettxneventtotal",{"2":{"214":2}}],["marketplaces",{"0":{"8":1},"1":{"9":1},"2":{"50":1}}],["marketplace",{"0":{"28":1,"137":1,"192":1,"212":1,"213":1,"216":1},"1":{"213":1,"214":2,"215":2,"216":1,"217":2,"218":2,"219":1},"2":{"7":1,"8":10,"9":3,"10":1,"18":1,"28":5,"137":1,"192":2,"212":1,"213":1,"216":1,"245":4,"246":1,"409":1,"410":1,"411":2,"412":3,"439":1}}],["march",{"2":{"418":1}}],["maxcost",{"2":{"548":1}}],["max",{"2":{"335":1}}],["magicvalue",{"2":{"516":1}}],["magic",{"2":{"116":1,"516":3}}],["matches",{"2":{"541":1,"563":1}}],["match",{"2":{"306":1,"628":1}}],["matching",{"2":{"227":1}}],["material",{"2":{"116":1,"562":1}}],["matter",{"2":{"88":1}}],["matic",{"0":{"231":1,"232":1},"1":{"232":1},"2":{"58":3,"108":3,"232":2,"281":1}}],["major",{"2":{"80":2,"153":2}}],["majority",{"2":{"68":1}}],["macbook",{"2":{"595":1,"598":1,"605":2,"606":1}}],["macos",{"0":{"90":1,"376":1},"2":{"81":1,"90":2,"155":1,"159":1,"552":1,"602":1}}],["mac",{"2":{"81":1,"154":1,"155":1,"159":1,"376":3}}],["machine",{"2":{"73":1,"372":1,"424":1}}],["macao",{"2":{"12":1}}],["made",{"2":{"69":1,"127":1,"129":3,"189":1,"345":1}}],["mapped",{"2":{"341":1}}],["mappings",{"0":{"341":1}}],["mapping",{"2":{"84":1}}],["maps",{"2":{"127":1}}],["map",{"0":{"86":1},"2":{"50":2,"86":1}}],["master",{"2":{"48":2,"49":1,"58":1,"253":1}}],["making",{"2":{"25":1,"98":1,"116":1,"127":1,"129":1,"203":1,"345":1,"347":2,"471":1}}],["makes",{"2":{"25":2,"548":1}}],["make",{"2":{"17":1,"20":1,"21":1,"22":1,"25":1,"27":1,"38":1,"52":1,"75":1,"76":1,"84":2,"93":1,"104":1,"107":1,"109":1,"127":1,"132":1,"159":1,"173":1,"174":1,"182":2,"241":1,"243":1,"303":1,"321":1,"339":1,"366":1,"369":1,"378":1,"385":1,"386":1,"390":2,"407":1,"454":1,"552":1,"554":1,"557":1,"598":1}}],["malicious",{"2":{"467":1,"470":1,"471":1}}],["mali",{"2":{"12":1}}],["may",{"2":{"11":1,"20":1,"25":1,"56":1,"68":1,"93":1,"103":1,"105":2,"115":1,"117":2,"120":1,"178":1,"223":1,"224":1,"241":1,"243":1,"251":1,"253":1,"254":2,"263":1,"281":1,"304":1,"345":1,"351":2,"356":1,"361":1,"362":1,"366":1,"367":1,"382":1,"417":1,"420":1,"480":1,"494":1,"503":1,"519":1,"531":1,"549":1,"553":1,"555":1,"563":1,"586":1,"602":3,"617":1}}],["mandatory",{"2":{"602":1}}],["mandated",{"2":{"11":1}}],["manifest",{"2":{"378":5}}],["manually",{"0":{"177":1,"367":1},"1":{"178":1},"2":{"93":1,"382":1,"539":1,"614":1}}],["manual",{"0":{"76":1},"2":{"378":1}}],["mana",{"2":{"49":1}}],["managing",{"0":{"3":1,"140":1,"604":1},"1":{"141":1,"142":1,"143":1,"144":1,"145":1,"146":1,"147":1,"148":1,"605":1,"606":1},"2":{"100":1,"102":1,"122":1}}],["management",{"0":{"174":1,"467":1,"593":1,"594":1},"1":{"468":1,"469":1,"470":1,"471":1,"594":1,"595":2,"596":1,"597":1,"598":1,"599":1,"600":1,"601":1,"602":1,"603":1,"604":1,"605":1,"606":1},"2":{"136":1,"560":1,"593":2}}],["manages",{"2":{"129":1}}],["manager",{"0":{"71":1,"73":1,"105":1},"1":{"72":1,"73":1,"74":1,"75":1},"2":{"73":3,"74":3,"75":1,"76":5,"96":1,"97":1,"103":2,"105":1,"117":1,"374":1}}],["managed",{"2":{"1":1,"3":1,"19":1,"566":1}}],["manage",{"0":{"394":1,"618":1},"1":{"395":1,"396":1,"397":1,"398":1,"399":1,"400":1,"401":1,"402":1,"403":1,"404":1,"405":1,"406":1,"407":1},"2":{"1":1,"56":1,"194":2,"256":1,"260":1,"364":1,"395":1,"463":1,"483":1,"487":1,"593":2,"598":1,"618":1}}],["many",{"2":{"12":1,"50":1,"84":2,"109":1,"254":1,"273":1,"279":1,"457":1,"527":1,"621":1,"627":1}}],["moving",{"0":{"428":1},"1":{"429":1,"430":1}}],["move",{"0":{"402":1},"2":{"127":1,"322":1,"431":1}}],["moonpay",{"2":{"281":2,"297":1,"413":1,"465":1}}],["mounted",{"2":{"252":2}}],["mouth",{"2":{"48":1}}],["mobile",{"0":{"132":1,"475":1},"1":{"133":1,"134":1},"2":{"129":2,"132":2,"210":1,"254":1,"280":2,"281":1,"431":1,"475":2}}],["moments",{"2":{"159":1}}],["moment",{"2":{"117":1}}],["mocks",{"2":{"98":1}}],["most",{"2":{"25":1,"38":1,"76":1,"84":1,"93":1,"108":2,"118":1,"229":1,"321":1,"325":1,"357":1,"421":1,"472":1}}],["monitoring",{"0":{"591":1},"2":{"591":1}}],["monitors",{"2":{"25":1,"591":1}}],["month",{"2":{"219":1,"221":1,"227":1}}],["months",{"2":{"216":1}}],["monobehaviour",{"2":{"101":1,"105":1,"369":1}}],["mono",{"2":{"81":3}}],["monetize",{"2":{"7":1}}],["monetization",{"0":{"7":1},"1":{"8":1,"9":1,"10":1}}],["money",{"2":{"5":1,"11":1}}],["morocco",{"2":{"12":1}}],["more",{"0":{"18":1,"106":1},"2":{"7":1,"9":1,"12":1,"37":2,"48":1,"51":1,"63":1,"74":1,"76":1,"77":1,"84":2,"87":1,"93":1,"103":1,"106":1,"108":1,"117":3,"120":1,"129":1,"149":1,"170":1,"171":1,"175":1,"178":1,"198":1,"203":1,"212":1,"220":1,"229":1,"246":2,"253":1,"256":1,"260":1,"273":1,"281":1,"303":1,"369":1,"378":2,"386":1,"411":1,"413":1,"414":1,"419":1,"425":1,"427":1,"430":1,"454":1,"463":1,"465":1,"466":1,"467":2,"472":1,"483":1,"487":1,"559":1,"563":1,"569":1,"598":1,"621":1}}],["moldova",{"2":{"12":1}}],["mod",{"2":{"372":1}}],["moduleauth",{"2":{"497":1}}],["modules",{"0":{"492":1},"1":{"493":1,"494":1,"495":1,"496":1,"497":1,"498":1,"499":1,"500":1,"501":1,"502":1,"503":1,"504":1,"505":1,"506":1,"507":1,"508":1,"509":1,"510":1,"511":1,"512":1},"2":{"419":1,"492":3,"493":1,"497":1,"505":1}}],["module",{"0":{"435":1,"459":1,"489":1,"491":1},"1":{"490":1},"2":{"139":1,"372":1,"489":1,"490":1,"491":2,"492":1,"493":1,"497":2,"501":1,"505":1,"562":1}}],["modular",{"2":{"25":2,"304":1}}],["modifier",{"2":{"495":1,"503":1}}],["modified",{"2":{"388":1}}],["modification",{"2":{"310":1,"635":1}}],["modifications",{"2":{"127":1,"389":1,"390":1}}],["modify",{"2":{"45":1,"76":1,"351":1,"403":1,"404":1}}],["modern",{"2":{"280":1,"474":1}}],["moderately",{"2":{"467":1}}],["moderate",{"2":{"4":1,"392":1}}],["modes",{"2":{"127":1}}],["mode",{"2":{"76":1,"105":1,"128":1,"174":1,"369":1}}],["model",{"0":{"565":1},"1":{"567":1,"568":1,"569":1,"570":1,"571":1},"2":{"56":1,"565":1}}],["modals",{"2":{"210":1,"444":1,"463":1}}],["modal",{"0":{"437":1,"438":1,"445":1},"1":{"439":1,"440":1,"446":1,"447":1,"448":1,"449":1,"450":1},"2":{"2":1,"16":1,"201":1,"433":1,"437":1,"438":1,"443":1,"445":1,"446":1,"447":1,"448":1,"449":1,"450":1,"451":1,"457":1,"461":1}}],["mere",{"2":{"555":1}}],["merkle",{"2":{"531":1,"535":1}}],["merges",{"2":{"210":1}}],["mechanism",{"2":{"528":1,"616":1}}],["menu",{"2":{"303":1,"376":1}}],["mentioned",{"2":{"39":1,"97":1}}],["media",{"2":{"194":2}}],["messed",{"2":{"93":1}}],["messagenosignaturestringthe",{"2":{"580":1}}],["messages",{"0":{"94":1},"2":{"274":1,"311":1,"312":1,"350":2,"513":1,"514":1,"616":1,"622":1}}],["message",{"0":{"271":1,"316":1,"318":1,"542":1,"580":1,"619":1},"1":{"272":1,"273":1,"274":1,"581":1,"582":1,"620":1,"621":1,"622":1},"2":{"79":1,"94":2,"141":2,"142":2,"143":2,"180":6,"181":2,"273":4,"312":1,"316":1,"318":3,"319":1,"363":4,"365":2,"392":1,"498":1,"514":5,"515":1,"540":1,"542":1,"556":1,"557":2,"578":3,"580":1,"581":1,"582":1,"588":1,"609":2,"621":4}}],["memory",{"2":{"93":1}}],["mempool",{"2":{"56":1}}],["members",{"2":{"0":1}}],["me",{"2":{"49":1}}],["measure",{"2":{"387":1}}],["measures",{"2":{"280":1}}],["measuring",{"2":{"13":1}}],["meaning",{"2":{"491":1,"527":1}}],["meant",{"2":{"105":1,"472":1,"564":1}}],["means",{"2":{"24":1,"25":2,"124":1,"280":1,"468":1,"475":1,"495":1,"503":1,"504":1,"557":1,"561":1,"562":1,"563":1,"564":1,"565":1,"593":1,"601":1}}],["metric",{"2":{"190":3}}],["metrics",{"2":{"188":1,"189":1,"190":1}}],["metatxnreceiptlog",{"2":{"575":1}}],["metatxnreceipt",{"2":{"575":1}}],["metatxnid",{"2":{"249":2}}],["metatxid",{"2":{"248":2}}],["metatxhash",{"2":{"186":2,"576":1,"608":1}}],["metatransactionids",{"2":{"239":1}}],["metamask",{"2":{"210":2,"254":1,"256":1,"260":1,"280":2,"301":1,"423":1,"431":1,"450":1,"454":1,"455":1,"463":1,"483":1,"487":1}}],["meta",{"2":{"55":3,"239":1,"249":1,"279":1,"304":1,"378":2,"425":1,"480":1,"564":1,"575":4,"627":1}}],["metal",{"2":{"49":1}}],["metadataclient",{"2":{"30":2,"43":2,"44":4}}],["metadatawhen",{"2":{"29":1,"42":1}}],["metadataoptions",{"2":{"22":3,"24":3,"229":1,"230":3,"239":3,"241":2,"243":3}}],["metadatafield",{"2":{"3":1}}],["metadata",{"0":{"1":1,"3":1,"24":1,"29":1,"30":1,"31":1,"32":1,"36":1,"41":1,"42":1,"43":1,"44":1,"46":1,"47":1,"198":1,"201":1,"229":1,"230":1,"394":1,"396":1,"398":1,"404":1,"407":1},"1":{"2":1,"3":1,"4":1,"30":1,"31":1,"33":1,"34":1,"35":1,"37":1,"38":1,"39":1,"40":1,"41":1,"43":1,"44":1,"45":2,"46":1,"47":1,"48":2,"49":2,"50":2,"51":2,"395":1,"396":1,"397":1,"398":1,"399":1,"400":1,"401":1,"402":1,"403":1,"404":1,"405":1,"406":1,"407":1},"2":{"1":4,"2":1,"3":18,"4":1,"24":3,"25":4,"27":1,"29":4,"30":8,"31":1,"32":5,"33":5,"34":2,"35":1,"36":9,"37":8,"38":1,"39":5,"40":4,"41":7,"42":6,"43":10,"44":21,"45":6,"46":3,"48":4,"49":3,"50":2,"51":1,"194":5,"196":1,"198":1,"201":5,"229":2,"230":2,"239":2,"243":3,"395":1,"396":1,"397":1,"398":1,"403":1,"404":1,"407":4}}],["methods",{"0":{"41":1,"321":1,"357":1},"1":{"322":1,"323":1,"324":1,"325":1,"326":1,"327":1,"328":1,"329":1,"330":1,"331":1,"332":1,"333":1,"334":1,"335":1,"336":1,"337":1,"338":1,"358":1,"359":1,"360":1,"361":1,"362":1,"363":1},"2":{"24":1,"41":1,"51":1,"93":2,"110":1,"112":1,"114":1,"321":2,"345":1,"352":2,"357":1,"366":1,"369":1,"370":1,"403":1,"505":1,"507":1}}],["method",{"0":{"551":1,"555":1},"1":{"552":1,"553":1,"554":1},"2":{"3":1,"30":1,"43":1,"44":2,"48":2,"49":2,"68":1,"69":1,"87":1,"93":1,"94":1,"97":1,"98":1,"107":1,"109":1,"110":1,"112":1,"114":1,"115":4,"151":1,"187":2,"214":1,"215":1,"217":1,"218":1,"221":1,"222":1,"223":1,"225":1,"226":1,"229":2,"230":1,"232":1,"235":1,"236":1,"237":1,"239":1,"241":1,"243":1,"245":1,"251":1,"252":1,"253":1,"274":1,"281":1,"339":1,"340":2,"342":1,"347":1,"350":1,"363":1,"366":4,"367":3,"369":1,"495":2,"503":2,"504":1,"510":1,"511":2,"512":1,"516":1,"555":1,"567":1,"590":1,"592":1,"610":1,"611":1,"613":1,"614":4,"622":1}}],["oauth",{"2":{"377":1,"383":1,"385":1,"564":1,"567":1,"598":5,"601":1}}],["oidc",{"0":{"371":1},"1":{"372":1,"373":1,"374":1,"375":1,"376":1,"377":1,"378":1,"379":1,"380":1,"381":1},"2":{"367":1,"369":2,"371":3,"379":2,"559":1}}],["omit",{"2":{"363":1}}],["omitted",{"2":{"24":2,"285":1}}],["os",{"2":{"303":2}}],["old",{"2":{"430":1,"557":1}}],["older",{"2":{"177":1}}],["oldsilver",{"2":{"37":1}}],["occurred",{"2":{"430":1}}],["occure",{"2":{"192":1}}],["occurs",{"2":{"159":1,"429":1,"430":1,"583":1,"618":1}}],["occur",{"2":{"151":1,"152":1}}],["otp",{"0":{"364":1},"1":{"365":1},"2":{"93":1,"364":2,"365":4,"366":2,"367":1,"369":1,"564":1,"597":4}}],["othermethods",{"2":{"548":1}}],["others",{"2":{"456":1}}],["otherwise",{"2":{"322":1,"365":1,"514":1,"515":1,"516":1,"602":1,"614":2}}],["other",{"0":{"279":1,"375":1,"627":1},"2":{"11":1,"18":1,"25":2,"56":1,"101":1,"120":1,"129":1,"210":1,"254":1,"265":1,"266":1,"274":1,"279":1,"300":1,"369":1,"375":1,"376":1,"379":1,"405":1,"429":1,"430":1,"454":1,"455":1,"492":1,"495":1,"503":1,"534":1,"549":1,"559":2,"564":2,"590":3,"591":1,"592":1,"603":1,"622":1,"627":2}}],["obvious",{"2":{"115":1}}],["objectdark",{"2":{"443":1}}],["objects",{"2":{"50":1,"113":1,"538":1,"543":1,"547":1}}],["object",{"2":{"49":2,"50":1,"69":1,"74":2,"76":1,"86":2,"87":1,"94":1,"102":1,"105":3,"107":1,"110":1,"112":1,"114":1,"115":1,"123":1,"131":1,"181":2,"182":1,"183":1,"184":1,"185":1,"229":1,"230":1,"235":1,"239":2,"241":1,"243":1,"273":2,"282":1,"320":1,"339":2,"340":3,"349":1,"363":1,"371":1,"382":2,"437":1,"438":1,"443":2,"445":1,"548":1,"556":1,"557":1,"603":1,"608":1,"609":1,"621":2}}],["obtained",{"2":{"370":1,"452":1,"598":1}}],["obtain",{"2":{"2":1,"16":1,"69":1,"94":1,"107":1,"369":1,"383":1,"597":2,"598":1}}],["obtaining",{"0":{"2":1,"16":1},"2":{"203":1}}],["okay",{"2":{"48":1}}],["ogimage",{"2":{"37":1}}],["opcode",{"2":{"525":1}}],["opted",{"2":{"382":1}}],["opt",{"2":{"117":1}}],["opting",{"2":{"173":1}}],["optimal",{"2":{"56":1}}],["optimize",{"2":{"13":1}}],["optional",{"0":{"269":1},"2":{"109":1,"129":3,"194":1,"210":1,"219":1,"229":5,"230":4,"235":1,"239":4,"243":4,"288":1,"363":1,"463":1,"539":1,"541":1,"602":1}}],["optionally",{"2":{"108":1,"110":1,"112":1,"114":1,"239":5,"281":1,"305":1,"481":1}}],["option",{"2":{"24":1,"36":1,"93":2,"187":4,"190":1,"247":3,"249":4,"253":1,"280":2,"282":1,"295":1,"300":1,"303":1,"351":1,"366":1,"600":1}}],["options",{"0":{"187":1,"247":1,"267":1,"282":1,"441":1,"442":1},"1":{"268":1,"269":1,"283":1,"284":1,"285":1,"286":1,"287":1,"288":1,"289":1,"290":1,"291":1,"292":1,"293":1,"294":1,"295":1,"296":1,"297":1,"298":1,"299":1,"300":1,"443":1,"444":1,"445":1,"446":1,"447":1,"448":1,"449":1,"450":1,"451":1},"2":{"6":1,"7":2,"8":1,"24":1,"117":2,"178":1,"187":7,"210":2,"219":1,"221":1,"227":1,"229":1,"230":1,"237":2,"239":1,"243":1,"247":6,"249":1,"261":1,"265":2,"281":2,"296":1,"413":2,"441":2,"449":2,"450":2,"454":2,"464":1,"465":2,"467":1,"488":1,"550":1}}],["operated",{"2":{"563":1}}],["operates",{"2":{"562":1,"591":1}}],["operations",{"2":{"563":1,"616":1}}],["operationwhen",{"2":{"509":1}}],["operationcalling",{"2":{"494":1}}],["operation",{"2":{"84":1,"85":1,"506":1,"530":1,"538":1,"595":1}}],["operational",{"2":{"65":1}}],["opensession",{"2":{"541":2}}],["opensea",{"2":{"24":1,"31":2,"48":3,"51":1}}],["openning",{"2":{"539":1}}],["openwithoptions",{"2":{"281":2}}],["openwalletintent",{"2":{"281":1}}],["openwallet",{"2":{"281":3}}],["opened",{"0":{"583":1},"1":{"584":1,"585":1},"2":{"98":1,"541":1,"585":1,"595":1}}],["openeoawalletlink",{"2":{"68":1}}],["openid",{"2":{"559":2}}],["openidauthenticator",{"2":{"372":2}}],["openidauthentication",{"2":{"81":2}}],["opening",{"0":{"437":1},"2":{"75":1,"100":1,"103":1,"116":1,"285":1,"541":1}}],["opentransaklink",{"2":{"78":1,"150":1,"152":1}}],["openupm",{"0":{"72":1},"2":{"72":2}}],["openurl",{"2":{"68":1,"78":2}}],["open",{"0":{"541":1},"2":{"67":1,"68":1,"72":1,"73":1,"74":1,"78":1,"98":1,"102":1,"127":1,"137":2,"150":2,"152":1,"159":2,"178":1,"246":1,"254":1,"278":1,"281":2,"290":1,"298":1,"366":1,"369":2,"372":1,"376":1,"381":2,"399":1,"437":1,"563":1,"583":1,"597":1,"598":2,"626":1}}],["opportunities",{"2":{"12":1}}],["output",{"2":{"553":2,"554":2}}],["outputs",{"2":{"548":2}}],["outputstring",{"2":{"187":3}}],["outside",{"2":{"110":1,"112":1,"114":1,"127":2,"281":1,"387":1}}],["out",{"0":{"258":1,"485":1},"2":{"9":1,"18":1,"28":1,"60":1,"69":1,"94":1,"101":1,"105":1,"106":1,"107":1,"120":1,"127":1,"148":1,"196":1,"210":2,"254":1,"256":1,"260":1,"261":1,"274":1,"281":1,"370":1,"409":1,"411":1,"432":1,"439":1,"463":1,"464":1,"472":1,"478":1,"483":1,"487":1,"488":1,"514":1,"515":1,"554":1,"622":1,"627":1}}],["ours",{"2":{"123":1}}],["our",{"0":{"258":1,"485":1},"2":{"1":1,"2":2,"3":1,"5":1,"6":1,"7":1,"8":4,"9":2,"12":1,"16":2,"18":1,"19":1,"24":1,"25":1,"28":2,"30":1,"37":1,"43":1,"44":2,"51":1,"60":2,"61":1,"67":1,"75":3,"76":1,"77":1,"80":1,"81":1,"82":3,"93":1,"105":2,"106":1,"109":2,"110":1,"111":2,"112":1,"113":2,"114":1,"116":1,"117":1,"120":1,"149":1,"188":2,"189":1,"210":1,"211":1,"229":1,"253":1,"254":3,"255":1,"256":1,"259":1,"260":1,"261":1,"278":1,"320":1,"321":1,"339":1,"340":2,"342":2,"345":1,"351":1,"366":1,"368":1,"369":2,"371":2,"379":2,"382":3,"385":1,"393":1,"409":1,"410":1,"412":2,"432":1,"452":1,"462":1,"463":2,"464":1,"472":4,"478":1,"482":1,"483":1,"486":1,"487":1,"488":1,"626":1}}],["ownable",{"0":{"352":1},"2":{"352":4}}],["owner",{"2":{"472":1,"591":1}}],["ownership",{"2":{"383":2}}],["owners",{"2":{"204":1}}],["owned",{"0":{"421":1},"1":{"422":1,"423":1},"2":{"229":1,"420":1,"421":1,"451":1,"470":1,"472":1}}],["owns",{"2":{"84":2,"562":1}}],["own",{"2":{"5":1,"8":1,"11":1,"13":1,"37":1,"80":1,"98":1,"101":2,"103":1,"104":1,"106":1,"117":1,"127":1,"129":1,"141":1,"142":1,"143":1,"144":1,"145":1,"146":1,"147":1,"148":1,"152":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"171":1,"180":1,"186":1,"196":1,"210":1,"256":1,"260":1,"320":1,"345":1,"348":1,"351":1,"383":1,"407":1,"410":1,"412":1,"432":1,"454":1,"463":2,"467":1,"483":1,"487":1,"534":2,"559":1}}],["override",{"2":{"443":1,"494":1,"498":1,"502":1,"516":1}}],["overwritten",{"2":{"76":1,"443":1}}],["overview",{"0":{"7":1,"190":1,"429":1,"431":1,"433":1,"457":1,"558":1},"1":{"8":1,"9":1,"10":1,"191":1,"192":1,"193":1,"432":1,"458":1,"459":1,"460":1,"461":1,"559":1,"560":1,"561":1,"562":1,"563":1,"564":1,"565":1,"566":1,"567":1,"568":1,"569":1,"570":1,"571":1},"2":{"19":1,"190":1,"258":1,"485":1}}],["over",{"2":{"5":1,"194":1,"204":1,"397":1,"406":1,"470":1,"471":1,"472":1,"590":1}}],["orange",{"2":{"566":1}}],["org",{"2":{"540":1}}],["organized",{"2":{"539":1}}],["organize",{"2":{"84":1}}],["organizations",{"2":{"25":1}}],["original",{"2":{"568":1,"575":1}}],["originaddress",{"2":{"37":1}}],["origins",{"0":{"387":1},"2":{"381":1,"383":2,"385":1,"387":2}}],["origin",{"0":{"285":1},"2":{"285":1}}],["orchestration",{"2":{"8":1}}],["or",{"0":{"23":1,"30":1,"35":1,"43":1,"73":1,"206":1,"301":1},"2":{"3":4,"6":1,"7":1,"8":2,"10":2,"13":3,"20":2,"21":3,"24":1,"25":3,"27":1,"28":1,"29":1,"30":4,"33":2,"36":1,"37":2,"38":1,"39":1,"40":1,"41":4,"42":2,"43":4,"44":7,"45":1,"48":1,"50":2,"52":1,"53":2,"55":1,"56":3,"58":1,"68":1,"69":3,"73":2,"74":1,"76":1,"78":2,"81":1,"83":1,"84":2,"88":1,"93":1,"94":1,"97":1,"101":1,"103":1,"106":1,"107":1,"108":2,"115":3,"116":1,"120":2,"123":3,"129":1,"132":1,"136":1,"154":1,"177":3,"178":1,"187":1,"188":2,"195":1,"196":2,"198":1,"201":1,"204":1,"210":3,"213":1,"214":1,"215":1,"216":2,"217":1,"218":1,"219":1,"221":2,"222":1,"223":1,"224":1,"225":1,"226":1,"227":1,"229":1,"230":1,"232":1,"234":1,"237":1,"239":1,"241":1,"243":2,"244":1,"245":1,"246":1,"254":3,"261":1,"274":2,"276":1,"279":2,"280":1,"281":1,"293":1,"300":1,"304":2,"306":1,"311":1,"312":1,"317":1,"319":1,"323":1,"326":1,"328":1,"330":1,"332":1,"339":1,"340":2,"341":1,"342":1,"347":1,"351":1,"353":1,"361":2,"362":2,"366":3,"369":1,"372":1,"374":1,"378":2,"380":1,"382":1,"391":1,"392":1,"405":1,"412":1,"414":1,"420":1,"430":2,"431":4,"432":1,"435":2,"439":1,"443":1,"454":1,"455":1,"459":2,"463":1,"464":1,"466":1,"467":1,"468":3,"471":3,"472":2,"474":1,"475":1,"480":2,"488":1,"489":1,"493":1,"497":1,"512":1,"519":1,"529":2,"531":1,"532":1,"534":2,"538":1,"541":2,"548":1,"549":1,"552":1,"553":1,"559":1,"561":2,"564":1,"565":2,"567":1,"572":1,"588":1,"593":1,"601":1,"602":14,"607":1,"608":2,"609":1,"612":1,"616":1,"618":2,"622":2,"624":1,"627":4,"628":1}}],["ordered",{"2":{"557":1}}],["orderid",{"2":{"246":1,"548":1}}],["ordering",{"2":{"57":1,"528":1}}],["orderbook",{"2":{"246":1}}],["orderbookorder",{"2":{"246":1}}],["orderbookcontractaddress",{"2":{"245":2,"246":2,"411":1}}],["ordersummaryitems",{"0":{"440":1},"2":{"438":1,"440":2}}],["orderstatus",{"2":{"246":2}}],["orders",{"2":{"244":1,"246":3,"411":1}}],["order",{"0":{"440":1},"2":{"0":1,"1":1,"2":1,"3":1,"11":1,"25":1,"115":2,"123":1,"131":1,"133":1,"175":1,"185":1,"197":1,"201":1,"221":1,"229":1,"246":8,"338":1,"340":1,"353":1,"371":1,"374":1,"427":1,"440":1,"449":1,"450":1,"525":1,"530":1,"559":1,"595":1}}],["onvalidationrequired",{"0":{"615":1},"2":{"616":2,"617":2,"618":3}}],["onplayfabloginsuccess",{"2":{"382":1}}],["onmfaemailfailedtosend",{"2":{"365":1}}],["onmfaemailsent",{"2":{"365":1}}],["onmessage",{"2":{"237":1}}],["ontransactionfailure",{"2":{"187":2}}],["onfeefailure",{"2":{"187":2}}],["onfeeresponse",{"2":{"187":2}}],["onfailure",{"2":{"141":2,"142":2,"143":2,"180":2,"181":1,"186":1,"187":6}}],["onresponse",{"2":{"180":2}}],["onramplink",{"2":{"78":2,"150":2}}],["onramp",{"0":{"149":1},"1":{"150":1,"151":1,"152":1},"2":{"78":4}}],["onloginfailed",{"2":{"365":1}}],["onlinesubsystemsteam",{"2":{"139":1}}],["onlinesubsystem",{"2":{"139":1}}],["online",{"2":{"139":1}}],["onlyself",{"2":{"494":1,"495":1,"502":1,"503":1}}],["only",{"0":{"253":1},"2":{"58":1,"64":1,"76":2,"81":3,"84":1,"93":1,"116":1,"117":1,"124":1,"128":1,"129":1,"175":1,"229":1,"230":2,"239":2,"241":1,"243":2,"247":1,"251":1,"252":1,"294":1,"300":1,"304":1,"307":1,"309":1,"310":2,"319":1,"339":1,"351":1,"361":1,"362":1,"366":1,"370":1,"379":1,"382":1,"413":1,"451":1,"465":1,"467":2,"471":1,"480":1,"493":1,"495":1,"497":1,"503":1,"529":1,"534":1,"541":1,"546":1,"552":1,"554":1,"562":1,"563":2,"564":3,"567":1,"602":3,"605":1,"609":1,"616":1,"629":1,"634":1,"635":2}}],["onward",{"2":{"178":1}}],["onwalletcreatedhandler",{"2":{"370":3}}],["onwalletcreatedhander",{"2":{"69":1,"94":1,"107":1}}],["onwalletcreated",{"2":{"97":1,"364":1,"368":1,"370":2,"381":1,"382":1}}],["onwaaswalletcreated",{"2":{"97":1}}],["onsessionstatechanged",{"2":{"598":2}}],["onsendtransactionfailedhandler",{"2":{"107":2}}],["onsendtransactionfailed",{"2":{"69":1,"107":2}}],["onsendtransactioncompletehandler",{"2":{"107":2}}],["onsendtransactioncomplete",{"2":{"69":1,"107":2}}],["onsuccess=",{"2":{"598":1}}],["onsuccess",{"2":{"141":2,"142":2,"143":2,"187":2}}],["onsignmessagecompletehandler",{"2":{"94":2}}],["onsignmessagecomplete",{"2":{"94":2}}],["ondeploycontractfailedhandler",{"2":{"69":2}}],["ondeploycontractfailed",{"2":{"69":2}}],["ondeploycontractcompletehandler",{"2":{"69":2}}],["ondeploycontractcomplete",{"2":{"69":2}}],["onclick=",{"2":{"437":1,"461":1}}],["onclick",{"2":{"281":1,"437":2,"461":2}}],["onchainreader",{"2":{"274":1,"622":1}}],["onchain",{"2":{"45":1}}],["once",{"2":{"2":1,"16":1,"56":1,"64":1,"68":1,"117":1,"120":1,"123":1,"129":1,"159":1,"177":1,"187":1,"199":1,"249":1,"252":1,"281":1,"303":1,"356":1,"361":1,"362":1,"365":1,"366":1,"367":1,"370":1,"371":1,"380":1,"382":1,"386":1,"388":2,"389":1,"402":1,"430":1,"468":1,"510":1,"614":1}}],["onboard",{"0":{"77":1,"210":1},"1":{"78":1,"79":1,"211":1},"2":{"10":1,"210":1,"254":1,"280":1}}],["onboarding",{"2":{"7":1,"203":1,"255":1,"256":1,"259":1,"260":1,"280":1,"383":1,"386":1,"462":1,"463":1,"482":1,"483":1,"486":1,"487":1}}],["on",{"0":{"24":1,"78":1,"131":1,"132":1,"150":1,"213":1,"216":1,"232":4,"397":1,"400":1,"413":1,"414":1,"457":1,"465":1,"466":1,"490":1,"607":1},"1":{"133":1,"134":1,"214":1,"215":1,"217":1,"218":1,"414":1,"458":1,"459":1,"460":1,"461":1,"466":1},"2":{"2":2,"8":2,"10":1,"11":1,"16":1,"17":1,"18":1,"19":1,"20":2,"24":2,"25":3,"30":1,"36":1,"37":2,"42":1,"48":3,"49":2,"51":1,"52":1,"55":1,"58":1,"63":1,"68":3,"73":2,"74":2,"75":1,"76":1,"77":1,"78":3,"81":1,"82":1,"88":2,"89":1,"90":1,"91":1,"92":1,"93":4,"98":1,"104":1,"105":1,"108":1,"109":1,"115":5,"117":2,"120":1,"123":1,"129":2,"149":1,"150":2,"153":1,"155":1,"159":7,"178":2,"190":1,"196":1,"199":1,"203":1,"204":2,"210":2,"213":1,"229":2,"230":2,"232":2,"239":2,"241":4,"243":3,"246":1,"249":1,"251":4,"252":2,"253":1,"254":1,"255":1,"259":1,"274":4,"276":1,"279":1,"280":5,"281":3,"283":1,"300":1,"301":1,"304":2,"307":1,"308":1,"309":1,"312":1,"317":1,"319":1,"322":3,"345":2,"351":1,"352":1,"364":2,"365":2,"368":1,"369":1,"372":2,"379":3,"381":2,"382":1,"385":1,"386":1,"392":1,"393":1,"396":1,"398":1,"399":2,"400":2,"401":1,"402":1,"403":2,"404":1,"411":1,"413":5,"414":2,"419":1,"421":1,"427":1,"444":1,"454":2,"455":1,"457":2,"458":1,"462":1,"463":1,"465":5,"466":2,"467":2,"472":2,"474":1,"475":2,"480":2,"482":1,"486":1,"490":1,"492":1,"496":1,"497":1,"505":1,"507":1,"509":1,"516":1,"522":1,"534":1,"541":3,"542":2,"543":2,"548":2,"550":2,"552":1,"557":2,"559":2,"560":1,"563":1,"565":1,"566":1,"567":2,"568":2,"590":1,"591":3,"592":1,"600":1,"602":2,"607":1,"609":2,"610":1,"622":4,"624":1,"627":1,"629":1,"630":1,"633":1,"634":1}}],["onerror",{"2":{"237":1}}],["ones",{"2":{"148":1}}],["one",{"0":{"380":1,"611":1},"2":{"0":1,"3":1,"24":1,"25":2,"37":1,"39":1,"69":1,"84":1,"93":1,"108":1,"116":1,"136":1,"159":1,"161":2,"187":1,"190":1,"199":1,"229":1,"235":1,"252":1,"253":1,"254":1,"292":1,"303":1,"307":1,"308":1,"309":1,"361":1,"362":1,"364":1,"366":1,"370":1,"378":1,"380":1,"381":1,"403":1,"430":1,"457":1,"467":1,"468":1,"472":1,"493":1,"498":1,"511":1,"569":1,"590":1,"591":1,"597":1,"611":1,"612":1,"629":1,"630":1,"633":1,"634":1}}],["official",{"2":{"252":1,"449":1,"450":1,"453":1,"454":1}}],["off",{"2":{"49":1,"204":1,"412":1}}],["offering",{"2":{"88":1}}],["offered",{"2":{"82":1}}],["offer",{"2":{"8":1,"38":1,"246":1,"254":1,"280":1,"386":1}}],["offers",{"2":{"1":1,"20":1,"28":1,"32":1,"36":1,"40":1,"52":1,"55":1,"194":1,"414":1,"466":1,"559":1}}],["often",{"2":{"46":1,"84":1,"113":1}}],["of",{"0":{"11":1,"30":1,"57":1,"229":1,"230":1,"252":1,"306":1,"521":1,"567":1,"574":1,"628":1},"1":{"12":1,"575":1,"576":1,"577":1,"578":1,"579":1,"580":1,"581":1,"582":1,"583":1,"584":1,"585":1,"586":1,"587":1,"588":1},"2":{"0":3,"3":3,"5":1,"7":1,"8":1,"9":2,"10":1,"12":2,"13":1,"14":1,"17":1,"18":1,"20":3,"21":2,"22":2,"23":1,"24":3,"25":6,"26":1,"27":2,"30":3,"35":1,"36":2,"37":4,"39":3,"40":2,"41":6,"43":3,"44":2,"48":4,"49":1,"50":3,"51":1,"52":3,"55":3,"56":4,"57":3,"58":1,"60":1,"65":1,"66":2,"67":2,"68":2,"69":1,"72":1,"75":2,"76":1,"77":2,"78":2,"82":3,"83":1,"84":1,"86":1,"88":3,"93":1,"97":1,"98":2,"99":1,"100":1,"101":1,"102":2,"103":3,"105":1,"106":1,"107":2,"108":4,"110":3,"111":1,"112":3,"113":1,"114":3,"115":4,"116":4,"117":3,"118":1,"119":4,"120":2,"123":1,"124":2,"127":4,"128":1,"129":5,"132":2,"136":1,"142":1,"147":1,"149":2,"161":2,"177":1,"178":1,"182":2,"187":1,"188":1,"190":1,"191":1,"192":1,"193":1,"194":2,"195":1,"196":1,"197":1,"198":1,"199":2,"200":1,"210":4,"213":1,"219":6,"220":2,"223":1,"224":1,"227":5,"229":4,"230":6,"232":1,"235":5,"239":8,"241":6,"243":6,"244":1,"246":12,"247":2,"248":1,"251":1,"252":3,"253":5,"254":3,"255":2,"256":2,"259":2,"260":2,"262":1,"269":1,"273":1,"277":2,"278":2,"280":7,"281":1,"283":1,"285":1,"292":2,"293":1,"297":1,"298":1,"301":1,"303":1,"304":2,"307":1,"308":1,"309":1,"312":1,"320":1,"321":3,"322":2,"329":1,"337":1,"339":1,"340":2,"342":1,"346":1,"347":1,"348":1,"351":5,"354":2,"356":1,"357":2,"361":2,"362":2,"363":1,"367":1,"370":1,"381":2,"383":3,"386":1,"387":2,"391":3,"397":1,"399":2,"400":1,"403":3,"405":1,"412":1,"415":1,"419":3,"421":2,"424":2,"427":2,"430":1,"431":3,"440":1,"444":1,"446":1,"447":1,"449":1,"450":1,"451":1,"454":2,"455":2,"456":1,"462":2,"463":2,"467":3,"468":2,"469":1,"470":1,"471":2,"472":1,"480":1,"482":2,"483":2,"486":2,"487":2,"489":1,"490":1,"491":3,"492":3,"494":3,"495":2,"496":1,"497":5,"498":1,"499":1,"501":1,"503":5,"504":2,"508":1,"509":3,"511":1,"512":1,"513":1,"514":1,"515":1,"517":1,"518":2,"519":3,"520":1,"521":4,"522":2,"523":1,"524":2,"525":2,"527":4,"529":2,"531":1,"533":2,"534":4,"535":1,"536":8,"538":1,"539":4,"540":2,"541":1,"542":2,"543":3,"545":1,"547":3,"548":1,"549":2,"552":1,"553":1,"554":3,"555":2,"556":2,"557":6,"559":3,"562":1,"563":3,"564":4,"565":3,"566":2,"567":2,"573":2,"575":19,"578":3,"591":1,"593":3,"595":1,"600":2,"601":6,"602":5,"603":1,"605":1,"606":1,"607":1,"608":1,"612":1,"613":1,"621":1,"625":2,"626":2,"629":1,"630":1,"633":1,"634":1}}],["iat",{"2":{"601":1,"602":1}}],["illustrate",{"2":{"566":1}}],["illusion",{"2":{"555":1}}],["il2cpp",{"2":{"81":1}}],["ignored",{"2":{"281":1,"294":1,"295":1,"296":1,"521":1}}],["i32",{"2":{"246":2}}],["i++",{"2":{"117":1}}],["iwallet",{"0":{"348":1},"2":{"98":1,"354":2,"355":2,"356":2,"357":1}}],["iindexer",{"2":{"82":3,"83":1,"84":4,"85":1,"86":1,"87":1}}],["icon",{"2":{"73":1,"76":1,"159":1}}],["icons",{"2":{"37":1,"58":1}}],["ipfs",{"2":{"48":2,"395":1,"396":1,"397":3,"404":1}}],["ios",{"0":{"89":1,"134":1,"156":1,"373":1},"1":{"374":1,"375":1},"2":{"81":1,"89":2,"154":1,"155":1,"156":1,"159":1,"602":1}}],["io",{"2":{"31":1,"48":1,"274":1,"305":1,"481":1,"622":1}}],["id1",{"2":{"548":1}}],["idtokens",{"2":{"598":1}}],["idtokenstringoauth2",{"2":{"541":1}}],["idtoken",{"0":{"600":1,"601":1,"602":1},"1":{"601":1,"602":1,"603":1},"2":{"367":1,"369":1,"371":1,"541":3,"595":2,"597":5,"598":1,"605":1,"606":1,"608":1,"609":1}}],["idtokenin",{"2":{"129":1,"131":1}}],["identity",{"2":{"273":1,"274":1,"559":1,"564":1,"565":1,"602":7,"611":1,"612":1,"621":1,"622":1}}],["identifies",{"2":{"557":1,"602":4}}],["identifiers",{"2":{"559":1}}],["identifier",{"2":{"134":1,"386":1,"397":1,"430":2,"541":1,"543":1,"548":1,"575":1,"576":1,"578":1,"601":1,"602":2,"609":1}}],["identify",{"2":{"220":1,"601":2}}],["identifyingcode",{"2":{"186":2}}],["ideas",{"2":{"106":2}}],["idea",{"2":{"55":1}}],["ideally",{"2":{"388":1,"557":1}}],["ideal",{"2":{"13":1,"76":1}}],["idstringthe",{"2":{"547":1}}],["idsyou",{"2":{"229":1}}],["ids",{"0":{"230":1},"2":{"37":2,"43":1,"44":1,"86":2,"113":1,"161":1,"234":1,"235":1,"239":1,"245":1,"246":1,"375":1}}],["id",{"0":{"221":1},"2":{"17":2,"30":1,"37":3,"39":3,"43":1,"44":3,"45":1,"48":1,"49":2,"51":1,"84":1,"129":1,"131":2,"133":6,"145":1,"146":1,"183":1,"184":1,"185":2,"196":1,"201":1,"212":2,"214":1,"215":1,"217":1,"218":1,"220":2,"221":1,"222":1,"223":1,"225":1,"226":1,"246":1,"247":1,"248":1,"249":1,"268":1,"306":1,"307":2,"327":1,"331":1,"349":1,"363":3,"371":1,"385":3,"386":1,"396":1,"403":1,"404":2,"405":1,"407":1,"449":1,"450":1,"452":3,"454":2,"455":1,"541":1,"546":1,"547":3,"548":3,"561":2,"564":1,"576":2,"583":1,"586":1,"598":1,"601":3,"602":1,"605":2,"606":2,"608":1,"628":1,"629":2}}],["iraq",{"2":{"12":1}}],["iran",{"2":{"12":1}}],["iethclient",{"2":{"320":2,"321":1}}],["ierc20",{"2":{"249":1}}],["ie",{"0":{"231":1},"1":{"232":1},"2":{"3":1,"30":1,"43":1,"44":1,"56":1,"132":1,"289":1}}],["i",{"0":{"203":1,"252":1,"253":1},"2":{"3":1,"49":2,"117":4,"182":1,"196":1,"378":1,"387":1,"472":1,"560":1,"567":1}}],["immediately",{"2":{"249":1}}],["imperative",{"2":{"509":1}}],["improved",{"2":{"467":1}}],["improperly",{"2":{"345":1}}],["implicit",{"2":{"371":1}}],["implications",{"2":{"88":1}}],["implemented",{"2":{"110":1,"112":1,"114":1,"129":1,"321":1,"349":1,"420":1,"424":1,"430":1,"497":1,"536":1}}],["implementing",{"2":{"101":1,"352":1}}],["implementationaddressaddress",{"2":{"495":1}}],["implementations",{"2":{"354":1}}],["implementation",{"0":{"493":1,"496":1},"1":{"494":1,"495":1,"496":1},"2":{"20":1,"40":1,"52":1,"82":1,"100":1,"102":1,"120":1,"129":1,"131":1,"372":1,"432":1,"489":1,"491":2,"492":1,"494":4,"495":1,"496":4,"504":1,"536":3}}],["implement",{"2":{"20":1,"40":1,"52":1,"369":1,"383":1,"422":1,"424":2,"497":1,"593":1,"598":2}}],["importing",{"2":{"214":1,"215":1,"217":1,"218":1,"221":1,"222":1,"223":1,"225":1,"226":1}}],["imported",{"2":{"93":2,"105":1,"117":1,"253":1,"374":1,"382":1}}],["important",{"0":{"346":1},"1":{"347":1,"348":1,"349":1,"350":1},"2":{"88":1,"93":1,"99":1,"119":1,"121":1,"341":1,"357":1,"369":1,"380":1,"593":1}}],["importantly",{"2":{"2":1,"16":1}}],["import",{"2":{"6":2,"21":1,"22":1,"30":2,"33":1,"34":1,"43":2,"44":4,"54":1,"65":1,"74":3,"75":2,"76":3,"214":1,"215":1,"217":1,"218":1,"221":1,"222":1,"223":1,"225":1,"226":1,"229":2,"230":2,"232":2,"237":2,"239":2,"241":2,"243":2,"245":1,"247":2,"252":2,"253":2,"265":1,"266":2,"273":1,"274":5,"281":2,"314":2,"436":1,"437":1,"452":2,"455":1,"460":1,"461":1,"496":1,"514":1,"515":2,"577":1,"579":1,"582":1,"585":1,"587":1,"588":1,"595":1,"597":1,"598":8,"605":1,"606":1,"608":1,"609":1,"621":1,"622":5}}],["imagehashbytes32hash",{"2":{"499":1,"503":1}}],["imagehash",{"0":{"522":1,"535":1},"1":{"523":1,"525":1},"2":{"491":1,"498":3,"500":1,"502":2,"503":3,"509":3,"512":4,"522":2,"523":1,"524":1,"525":1,"534":1,"535":3,"536":4}}],["images",{"0":{"396":1},"2":{"37":1,"128":1,"194":1,"396":1,"397":1,"406":1}}],["image",{"0":{"523":1},"2":{"3":7,"37":1,"48":1,"49":1,"194":1,"281":2,"293":3,"396":1,"397":1}}],["iterate",{"2":{"514":2,"515":2,"516":1}}],["items",{"2":{"219":2,"230":1,"395":1}}],["item",{"0":{"394":1},"1":{"395":1,"396":1,"397":1,"398":1,"399":1,"400":1,"401":1,"402":1,"403":1,"404":1,"405":1,"406":1,"407":1},"2":{"159":2,"169":2,"229":1,"396":1,"401":1}}],["itween",{"0":{"101":1},"2":{"100":1,"101":2}}],["itself",{"2":{"173":1,"307":1,"309":1,"471":1,"495":1,"496":1,"503":1,"507":2,"562":1,"629":1,"634":1}}],["its",{"2":{"97":1,"113":1,"120":1,"127":2,"253":1,"273":1,"281":1,"348":2,"349":1,"455":1,"534":2,"539":1,"563":1,"568":1,"603":1,"621":1}}],["it",{"0":{"6":1,"99":1,"189":1},"1":{"100":1,"101":1,"102":1,"103":1},"2":{"2":3,"16":3,"19":1,"24":2,"25":10,"36":1,"37":1,"48":2,"49":1,"58":1,"65":1,"67":1,"68":3,"75":2,"76":3,"84":2,"85":2,"88":1,"93":1,"97":1,"98":1,"100":1,"101":1,"103":2,"104":2,"105":2,"109":1,"115":5,"116":1,"117":1,"124":3,"127":3,"129":2,"130":2,"136":1,"137":1,"139":2,"159":1,"177":1,"181":1,"189":1,"196":1,"204":1,"246":2,"253":1,"254":1,"273":1,"278":1,"280":1,"281":1,"304":1,"311":1,"315":1,"322":1,"339":3,"340":1,"341":1,"342":2,"346":1,"350":1,"351":1,"353":1,"356":1,"359":1,"360":1,"369":3,"370":1,"378":3,"379":1,"380":1,"381":2,"382":1,"385":2,"388":2,"389":1,"397":2,"402":1,"403":1,"404":3,"405":3,"407":1,"424":1,"455":1,"463":1,"474":1,"475":1,"491":1,"492":3,"493":1,"495":1,"503":2,"506":1,"509":3,"510":1,"511":1,"519":1,"529":1,"534":3,"536":1,"538":3,"541":5,"548":3,"553":1,"554":1,"555":3,"556":1,"557":3,"559":2,"563":3,"564":5,"565":3,"569":2,"570":2,"577":1,"579":1,"582":1,"585":1,"588":1,"592":1,"595":1,"601":2,"602":1,"603":1,"609":1,"614":2,"616":2,"621":1,"626":1}}],["isthis",{"2":{"605":2}}],["isopensessionresponse",{"2":{"585":1}}],["isfailedtransactionresponse",{"2":{"579":1}}],["isfeerequired",{"2":{"58":1}}],["isvalidationrequiredresponse",{"2":{"587":1,"588":1}}],["isvalidsignature",{"2":{"516":3}}],["isvalidbooltrue",{"2":{"500":1}}],["isvalidimage",{"0":{"498":1},"1":{"499":1,"500":1},"2":{"498":1}}],["isvalidmessagesignature",{"2":{"317":1}}],["isvalid",{"2":{"317":2,"498":1,"516":2,"613":2}}],["ismounted",{"2":{"252":2}}],["islisting",{"2":{"246":1,"411":1}}],["isbound",{"2":{"129":1}}],["iss",{"2":{"601":1,"602":1}}],["issignedin",{"2":{"598":1,"599":1}}],["issignedmessageresponse",{"2":{"582":1}}],["issignerleaf",{"2":{"535":1}}],["issessionvalid",{"2":{"613":2}}],["issendtransactionresponse",{"2":{"588":1}}],["issenttransactionresponse",{"2":{"577":1,"608":3,"609":2}}],["isset",{"2":{"123":3,"141":1,"142":1,"143":1,"144":1,"145":1,"146":1,"147":1,"148":1,"152":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"171":1,"180":1,"186":1,"187":2}}],["issubdigestleaf",{"2":{"535":1}}],["issuer",{"2":{"601":2,"602":1,"605":2}}],["issuedat",{"2":{"557":1}}],["issued",{"2":{"539":1,"540":1,"541":1,"542":1,"548":1,"549":1,"576":1,"578":1,"601":2,"602":1,"609":1}}],["issuednumbertimestamp",{"2":{"539":1}}],["issues",{"2":{"392":1,"431":1,"602":2}}],["issue",{"2":{"93":1,"251":1}}],["isnestedleaf",{"2":{"535":1}}],["isn",{"2":{"76":1,"97":1,"105":1,"602":1}}],["is",{"0":{"599":1,"631":1},"2":{"1":1,"2":3,"3":4,"4":1,"8":2,"12":1,"13":1,"16":3,"19":2,"20":3,"23":1,"24":3,"25":7,"27":2,"28":1,"35":1,"36":2,"37":2,"38":1,"39":1,"48":5,"49":2,"50":5,"52":2,"56":1,"57":1,"64":2,"65":1,"66":4,"67":1,"68":1,"69":4,"75":1,"76":2,"82":3,"83":1,"84":1,"85":1,"88":4,"93":5,"94":2,"97":1,"98":3,"99":1,"100":2,"101":1,"102":1,"103":1,"104":1,"105":1,"107":3,"108":4,"109":3,"111":1,"113":1,"115":2,"116":2,"117":2,"119":3,"123":1,"124":5,"129":14,"130":1,"131":1,"132":2,"139":1,"142":1,"143":1,"159":1,"161":4,"162":1,"164":1,"168":1,"169":1,"171":1,"178":1,"180":1,"182":1,"194":1,"204":1,"210":4,"212":1,"220":1,"229":1,"230":1,"239":1,"241":1,"243":2,"246":4,"247":2,"248":1,"251":4,"252":5,"253":5,"254":1,"255":1,"259":1,"262":1,"270":1,"273":3,"274":3,"276":1,"277":4,"278":1,"279":2,"280":6,"281":2,"286":2,"288":1,"290":1,"294":1,"295":1,"296":1,"299":1,"303":6,"304":2,"306":1,"307":3,"308":1,"309":3,"311":2,"320":1,"322":4,"327":1,"331":1,"339":3,"341":1,"345":2,"348":1,"349":1,"350":1,"351":2,"353":1,"354":1,"355":2,"356":2,"361":5,"362":5,"363":1,"366":1,"367":1,"369":3,"370":1,"371":1,"374":1,"378":1,"379":1,"380":2,"382":2,"383":1,"385":1,"386":1,"388":3,"391":3,"402":1,"403":1,"405":2,"407":1,"419":2,"420":1,"427":2,"429":1,"430":10,"431":2,"445":1,"454":1,"462":1,"467":2,"468":3,"470":1,"471":3,"472":2,"480":1,"482":1,"486":1,"489":3,"490":1,"491":5,"492":1,"496":1,"497":2,"498":2,"501":1,"502":1,"503":4,"504":4,"505":2,"506":1,"507":1,"508":2,"509":4,"510":1,"511":1,"512":3,"514":2,"515":2,"516":5,"521":1,"522":4,"527":1,"529":2,"530":2,"531":1,"532":2,"533":4,"534":7,"535":6,"536":1,"538":1,"539":2,"541":3,"542":2,"543":2,"548":2,"549":1,"555":1,"556":1,"557":4,"559":2,"560":1,"561":2,"562":1,"563":5,"564":3,"565":4,"567":6,"570":1,"571":1,"575":1,"578":3,"580":1,"583":1,"586":1,"587":1,"590":1,"591":1,"592":1,"595":1,"597":1,"600":1,"601":5,"602":13,"603":1,"609":4,"611":1,"613":1,"614":1,"616":2,"621":3,"622":3,"624":1,"625":4,"626":1,"627":2,"628":1,"629":3,"630":1,"633":1,"634":3}}],["if",{"0":{"599":1},"2":{"0":1,"3":1,"4":1,"8":1,"20":1,"21":1,"24":1,"33":1,"37":1,"40":1,"49":1,"50":1,"52":1,"56":1,"69":2,"74":2,"76":4,"77":1,"82":2,"84":3,"85":1,"88":2,"93":4,"94":2,"96":1,"97":2,"101":1,"103":1,"107":2,"109":2,"110":1,"112":1,"114":1,"115":3,"117":1,"123":4,"124":1,"127":2,"129":2,"136":1,"139":2,"141":1,"142":1,"143":1,"144":1,"145":1,"146":1,"147":1,"148":1,"149":1,"152":1,"159":1,"162":1,"163":1,"164":1,"165":1,"166":1,"169":1,"170":1,"171":1,"177":1,"178":1,"180":1,"185":1,"186":1,"187":3,"196":2,"229":1,"230":3,"237":2,"239":3,"241":2,"243":3,"246":3,"247":1,"249":3,"252":1,"254":2,"261":1,"274":3,"279":3,"280":3,"281":4,"294":1,"295":1,"296":1,"299":1,"300":1,"303":2,"304":1,"310":1,"312":1,"317":1,"319":2,"320":1,"322":1,"339":1,"340":2,"341":2,"342":2,"343":1,"347":1,"361":4,"362":4,"363":2,"364":1,"366":4,"367":1,"370":1,"372":1,"378":2,"380":1,"381":1,"382":1,"385":1,"386":1,"404":1,"407":1,"424":1,"430":7,"451":1,"454":2,"464":1,"467":1,"468":2,"470":2,"471":2,"480":1,"488":1,"495":1,"498":1,"500":1,"503":1,"506":1,"509":1,"511":1,"512":1,"514":1,"515":1,"516":3,"529":1,"533":1,"534":1,"535":3,"536":1,"539":1,"541":3,"546":1,"556":1,"561":1,"563":1,"565":1,"570":1,"575":2,"577":1,"578":1,"579":1,"582":1,"585":1,"587":1,"588":2,"592":1,"595":1,"598":1,"599":2,"602":3,"603":2,"608":3,"609":2,"612":1,"614":2,"616":2,"622":3,"627":4,"635":1}}],["inactive",{"2":{"565":1}}],["inaccessible",{"2":{"534":1}}],["inner",{"2":{"534":1}}],["inline",{"2":{"448":1}}],["injectredirecturl",{"2":{"372":1}}],["inherently",{"2":{"391":1}}],["inherits",{"2":{"391":1}}],["inherit",{"2":{"252":1,"352":1}}],["inherriting",{"2":{"102":1}}],["initwallet",{"2":{"281":2}}],["init",{"2":{"150":2,"372":1}}],["initiating",{"2":{"269":1,"349":1,"372":1}}],["initiateauth",{"2":{"597":1}}],["initiated",{"2":{"303":1}}],["initiatemobilesso",{"2":{"129":1,"132":1}}],["initiate",{"2":{"129":1,"365":1,"597":1}}],["initialization",{"0":{"265":1},"2":{"491":1,"536":2}}],["initializes",{"2":{"253":1}}],["initialized",{"2":{"253":1,"265":1,"266":1,"454":1}}],["initialize",{"0":{"314":1},"2":{"123":1,"372":1,"504":1}}],["initially",{"2":{"93":1}}],["initial",{"0":{"389":1,"524":1,"536":1},"1":{"525":1},"2":{"8":1,"123":1,"383":1,"389":1,"491":1,"492":1,"493":1,"524":1,"530":1,"536":5}}],["ini",{"0":{"173":1},"2":{"133":2,"134":3,"173":3,"174":2,"175":2}}],["inwallet",{"2":{"117":1}}],["inputs",{"2":{"548":2}}],["inputthe",{"2":{"503":1}}],["inputcore",{"2":{"139":1}}],["input",{"2":{"108":1,"119":1,"182":3,"195":1,"365":1,"448":1}}],["indicates",{"2":{"602":5,"608":1}}],["indicating",{"2":{"253":1,"608":1}}],["individually",{"2":{"181":1,"561":1}}],["individual",{"2":{"84":1,"467":1}}],["indeed",{"2":{"555":1}}],["independently",{"2":{"559":1,"563":1,"564":1,"565":1}}],["independent",{"2":{"56":1,"57":2,"415":1,"467":2,"530":1}}],["indexing",{"2":{"25":1}}],["index",{"2":{"25":1,"248":1,"576":2,"608":1}}],["indexeddb",{"2":{"92":1,"469":2}}],["indexeable",{"2":{"44":1}}],["indexes",{"2":{"25":1}}],["indexerisworking",{"2":{"82":1}}],["indexers",{"2":{"82":1}}],["indexer",{"0":{"19":1,"25":1,"161":1},"1":{"20":1,"21":1,"22":1,"23":1,"26":1,"27":1},"2":{"19":4,"20":9,"21":6,"22":5,"23":1,"24":3,"25":9,"29":2,"36":1,"42":2,"44":1,"80":1,"82":2,"86":2,"117":1,"153":1,"161":2,"196":1,"229":12,"230":13,"232":12,"235":2,"236":1,"237":11,"239":14,"241":16,"243":14,"412":1,"430":1}}],["inclusion",{"2":{"600":1}}],["including",{"0":{"243":1},"2":{"27":2,"84":1,"93":1,"102":1,"103":1,"113":1,"117":1,"122":1,"194":1,"244":1,"353":1,"455":1}}],["includecollectiontokens",{"2":{"229":1}}],["includecontracts",{"2":{"24":1,"229":1,"230":1,"239":1,"243":1}}],["includes",{"2":{"139":1,"239":1,"280":1,"365":3,"538":1,"563":1,"603":1,"605":1}}],["includedpaymentproviders",{"0":{"297":1},"2":{"281":2,"297":1}}],["included",{"2":{"25":1,"56":1,"97":1,"229":2,"230":2,"239":2,"243":2,"321":1,"349":1,"555":1,"600":1}}],["includemetadata",{"2":{"22":2,"29":1,"42":1,"167":1,"168":1,"169":1,"171":1,"229":3,"230":2,"239":2,"241":1,"243":2}}],["include",{"2":{"3":1,"24":1,"37":1,"46":1,"58":1,"108":1,"109":1,"116":1,"123":1,"139":1,"185":2,"195":1,"230":1,"239":1,"241":1,"243":1,"340":1,"365":1,"371":1,"382":1,"443":1,"444":1,"452":1,"490":1,"503":1,"555":1}}],["incorrect",{"2":{"503":1}}],["increased",{"2":{"392":1}}],["increase",{"2":{"280":1}}],["increment",{"2":{"80":3,"153":3}}],["inventory",{"2":{"463":2}}],["investigate",{"2":{"0":1}}],["involved",{"2":{"427":1}}],["involves",{"2":{"69":1}}],["invalidating",{"2":{"563":1}}],["invalid",{"2":{"93":1,"319":1,"392":1,"494":1,"521":1,"529":1}}],["insert",{"2":{"430":1}}],["inserted",{"2":{"430":1}}],["inscribing",{"2":{"198":1}}],["inspector",{"2":{"102":1,"105":2}}],["insightful",{"2":{"189":1}}],["insights",{"2":{"13":1,"188":1,"212":1}}],["inside",{"2":{"23":1,"35":1,"55":1}}],["instantiated",{"2":{"431":1}}],["instantiating",{"2":{"281":1}}],["instances",{"2":{"97":1,"561":1,"590":2,"591":2,"617":1}}],["instance",{"2":{"65":1,"82":1,"84":1,"229":1,"281":2,"368":1,"383":3,"556":1,"561":1,"590":4,"591":1,"592":1,"597":2}}],["installing",{"2":{"76":1,"178":1}}],["installed",{"2":{"73":1,"96":1,"263":1,"280":1,"305":1,"481":1,"552":1}}],["installation",{"0":{"19":1,"20":1,"21":1,"22":1,"23":1,"33":1,"34":1,"35":1,"52":1,"53":1,"54":1,"63":1,"70":1,"96":1,"135":1,"263":1},"1":{"20":1,"21":2,"22":2,"23":2,"53":1,"54":1,"71":1,"72":1,"73":1,"74":1,"75":1,"76":1,"136":1,"137":1,"138":1,"139":1},"2":{"33":1,"372":1,"382":1}}],["install",{"0":{"304":1,"435":1,"459":1,"480":1},"1":{"305":1,"481":1},"2":{"6":2,"21":2,"33":2,"53":2,"56":1,"63":2,"72":1,"75":1,"96":1,"137":2,"263":1,"280":1,"281":2,"302":1,"304":2,"372":1,"381":3,"435":2,"459":2,"476":1,"480":2}}],["instead",{"2":{"48":1,"117":1,"127":1,"273":1,"320":1,"340":1,"378":1,"455":1,"467":1,"504":1,"522":2,"535":1,"548":1,"593":1,"621":1}}],["instructions",{"0":{"45":1},"2":{"19":1,"129":1,"133":1,"371":1,"382":1}}],["ingesting",{"2":{"13":1}}],["infinity",{"2":{"533":2}}],["infura",{"2":{"274":2,"622":2}}],["infer",{"2":{"51":1}}],["informed",{"2":{"471":1}}],["informs",{"2":{"253":1}}],["information",{"2":{"9":1,"12":1,"20":1,"25":2,"37":1,"48":1,"51":1,"63":1,"88":2,"117":2,"175":1,"194":1,"198":1,"199":1,"229":1,"253":1,"386":1,"389":1,"419":1,"430":1,"470":1}}],["info",{"0":{"199":1},"1":{"200":1},"2":{"30":1,"48":1,"87":1,"93":1,"195":1,"378":2}}],["infrastructure",{"2":{"5":2,"25":1,"66":1,"277":1,"412":1,"563":1,"625":1}}],["int256",{"2":{"341":1}}],["int64",{"2":{"165":3}}],["int32",{"2":{"120":1}}],["int",{"2":{"109":1,"117":2,"235":1,"330":1,"341":1}}],["introduction",{"0":{"80":1,"153":1,"345":1,"369":1,"395":1},"1":{"81":1,"154":1,"346":1,"347":1,"348":1,"349":1,"350":1,"370":1}}],["introduced",{"2":{"24":1}}],["introducing",{"2":{"19":1}}],["intended",{"2":{"601":2}}],["intend",{"2":{"471":1}}],["intents",{"0":{"556":1},"1":{"557":1},"2":{"556":1,"557":2,"561":1,"588":1}}],["intent",{"0":{"567":1,"568":1},"2":{"281":3,"378":19,"538":1,"556":2,"557":7,"559":1,"564":1,"567":3,"568":4,"569":1,"570":1,"572":1,"575":1,"578":1,"580":1,"583":1}}],["intellisense",{"2":{"78":2}}],["intelligently",{"2":{"25":1}}],["interchangeably",{"2":{"356":1}}],["intercepted",{"2":{"123":1}}],["interpret",{"2":{"312":1}}],["interoperability",{"2":{"280":1}}],["internaltype",{"2":{"548":4}}],["internally",{"2":{"498":1,"535":1,"556":1}}],["internal",{"2":{"189":1,"498":1,"534":3}}],["intermediate",{"2":{"159":1}}],["interested",{"2":{"58":1}}],["interfaces",{"2":{"244":1}}],["interface",{"2":{"38":2,"40":1,"55":1,"68":1,"77":1,"82":1,"101":2,"122":1,"149":1,"303":1,"306":3,"307":2,"308":2,"309":2,"320":1,"321":1,"352":1,"354":2,"356":1,"357":1,"497":3,"548":1,"628":3,"629":2,"630":2,"633":2,"634":2}}],["interacts",{"2":{"490":1,"567":1}}],["interacted",{"2":{"216":1}}],["interaction",{"2":{"318":1}}],["interactions",{"0":{"110":1,"112":1,"114":1,"118":1,"344":1},"1":{"119":1,"120":1,"121":1,"122":1,"345":1,"346":1,"347":1,"348":1,"349":1,"350":1},"2":{"68":1,"110":1,"112":1,"114":1,"312":1}}],["interacting",{"2":{"108":1,"115":1,"121":1,"341":1,"351":1,"439":1,"534":1,"572":1}}],["interact",{"2":{"28":1,"58":1,"65":1,"118":1,"352":1,"419":3,"556":1,"560":1,"593":1}}],["interval",{"0":{"215":1,"218":1,"221":1,"226":1},"2":{"18":1,"213":1,"219":1,"221":1,"224":1,"227":1}}],["integer",{"2":{"299":1,"331":1,"341":2,"602":1}}],["integers",{"2":{"17":1,"341":1}}],["integrity",{"2":{"273":1,"285":1,"550":1,"553":1,"554":1,"621":1}}],["integrators",{"2":{"93":1}}],["integrating",{"2":{"56":1,"68":1,"75":1,"93":1,"103":1,"173":1,"255":1,"259":1,"281":1,"413":1,"462":1,"465":1,"482":1,"486":1}}],["integrations",{"0":{"365":1,"392":1,"393":1,"414":1,"466":1},"2":{"30":1,"38":1,"43":1,"44":2,"229":1,"383":1}}],["integration",{"0":{"251":1,"434":1,"458":1},"1":{"435":1,"436":1,"437":1,"438":1,"439":1,"440":1,"459":1,"460":1,"461":1},"2":{"9":1,"77":1,"80":1,"117":1,"149":1,"153":1,"211":1,"256":1,"260":1,"282":1,"382":2,"432":1,"452":1,"456":1,"457":1,"463":1,"472":1,"483":1,"487":1,"607":1}}],["integrated",{"2":{"23":1,"35":1,"36":1,"80":1,"88":1,"93":1,"220":1,"297":1,"298":1,"382":1,"600":1,"607":1}}],["integrate",{"0":{"255":1,"258":1,"259":1,"482":1,"485":1,"486":1},"1":{"256":1,"260":1,"483":1,"487":1},"2":{"0":1,"8":1,"19":1,"20":1,"40":1,"52":1,"256":1,"260":1,"261":1,"279":1,"383":1,"393":1,"434":1,"453":1,"458":1,"463":1,"464":1,"472":2,"475":1,"483":1,"487":1,"488":1,"539":1,"548":1,"598":2,"627":2}}],["into",{"0":{"255":1,"258":1,"259":1,"482":1,"485":1,"486":1,"631":1},"1":{"256":1,"260":1,"483":1,"487":1},"2":{"5":1,"8":1,"13":2,"19":1,"58":1,"68":1,"69":1,"76":1,"84":1,"103":1,"115":1,"116":1,"119":1,"120":1,"129":1,"136":1,"187":1,"210":1,"212":1,"253":1,"255":1,"259":1,"261":2,"293":1,"304":1,"322":1,"341":1,"361":1,"362":1,"366":2,"368":1,"372":1,"378":1,"380":1,"382":1,"385":1,"398":1,"432":1,"457":1,"462":1,"464":2,"480":1,"482":1,"486":1,"488":2,"535":2,"554":1,"559":1,"590":1,"597":1,"598":1,"603":1}}],["in",{"0":{"126":1,"128":1,"199":1,"229":1,"242":1,"243":1,"371":1,"374":1,"394":1,"430":1,"436":1,"445":1,"453":1,"460":1,"595":1,"597":1,"599":1},"1":{"127":1,"128":1,"200":1,"243":1,"372":1,"373":1,"374":1,"375":1,"376":1,"377":1,"378":1,"379":1,"380":1,"381":1,"395":1,"396":1,"397":1,"398":1,"399":1,"400":1,"401":1,"402":1,"403":1,"404":1,"405":1,"406":1,"407":1,"446":1,"447":1,"448":1,"449":1,"450":1,"454":1},"2":{"0":3,"1":1,"2":5,"3":6,"8":5,"11":2,"12":1,"13":1,"16":4,"17":2,"19":1,"20":1,"22":1,"24":2,"25":8,"27":3,"30":2,"33":1,"34":1,"36":1,"37":3,"39":1,"43":2,"44":6,"46":3,"48":3,"50":5,"51":2,"54":1,"56":3,"57":1,"58":3,"66":3,"69":4,"73":1,"74":2,"75":1,"76":6,"77":1,"81":3,"84":5,"85":1,"86":1,"88":4,"93":12,"94":1,"97":3,"98":3,"100":1,"101":1,"102":2,"105":7,"107":1,"108":2,"109":1,"111":1,"113":4,"115":8,"116":2,"117":11,"120":2,"123":1,"124":2,"127":4,"128":2,"129":9,"130":1,"131":1,"133":2,"134":3,"136":2,"137":3,"139":2,"149":1,"150":1,"152":1,"157":2,"159":5,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":2,"169":1,"170":1,"171":1,"173":1,"174":1,"175":2,"177":1,"178":1,"181":1,"185":1,"187":1,"188":1,"189":4,"190":2,"194":1,"196":1,"197":1,"198":1,"199":2,"201":2,"202":1,"203":3,"206":1,"210":1,"211":1,"214":1,"215":1,"217":1,"218":1,"219":5,"221":2,"222":2,"223":1,"225":1,"226":1,"227":5,"229":6,"230":3,"232":3,"234":1,"235":2,"237":1,"239":4,"241":3,"243":5,"244":1,"245":1,"246":4,"247":1,"251":2,"252":4,"253":7,"254":1,"255":1,"256":1,"259":1,"260":1,"273":3,"274":3,"276":1,"277":3,"279":2,"281":2,"286":2,"291":2,"294":2,"295":2,"296":2,"297":1,"298":1,"303":1,"306":1,"307":2,"308":1,"309":2,"311":1,"312":2,"315":1,"319":1,"320":2,"321":2,"322":2,"323":1,"325":1,"326":2,"327":1,"328":2,"330":1,"331":1,"332":1,"337":1,"338":1,"339":1,"340":3,"341":1,"345":7,"349":1,"353":1,"354":2,"361":1,"362":1,"363":1,"364":5,"366":8,"369":5,"370":1,"371":5,"372":6,"374":4,"375":1,"376":2,"377":1,"378":7,"379":2,"380":1,"381":2,"382":3,"383":5,"386":1,"388":1,"392":1,"395":1,"396":1,"397":1,"400":1,"405":1,"407":1,"409":1,"411":1,"412":1,"413":1,"415":1,"422":1,"427":2,"429":2,"430":7,"440":1,"443":1,"445":1,"446":2,"447":2,"448":2,"449":4,"450":3,"451":5,"454":1,"455":1,"462":1,"463":1,"465":1,"468":1,"469":2,"470":1,"471":1,"482":1,"483":1,"486":1,"487":1,"494":1,"497":1,"498":1,"503":1,"505":1,"506":1,"512":2,"515":1,"525":1,"527":1,"530":1,"534":1,"538":2,"539":3,"548":4,"553":2,"554":1,"555":3,"557":2,"559":2,"562":1,"563":1,"564":1,"565":4,"566":1,"575":3,"578":1,"586":1,"590":1,"592":2,"593":1,"595":3,"597":2,"599":3,"600":3,"601":4,"602":10,"608":1,"609":1,"611":1,"612":2,"621":3,"622":3,"624":1,"625":3,"627":2,"628":1,"629":2,"630":1,"633":1,"634":2}}],["fmt",{"2":{"229":1,"230":1,"232":1,"239":1,"241":1,"243":1,"247":1,"249":2}}],["ffeeoption",{"2":{"187":3}}],["ffailurecallback",{"2":{"141":1,"142":1,"143":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"171":1,"180":1,"181":1,"187":2}}],["fjsonserializer",{"2":{"187":1}}],["fjsonvalue",{"2":{"186":1}}],["fjsonobject",{"2":{"186":4}}],["ftransactionresponse",{"2":{"186":1,"187":1}}],["ftokenlist",{"2":{"169":2}}],["fgettransactionhistoryreturn",{"2":{"171":3}}],["fgettokensuppliesmapreturn",{"2":{"169":3}}],["fgettokensuppliesreturn",{"2":{"168":3}}],["fgettokenbalancesreturn",{"2":{"167":3}}],["fgetbalanceupdatesreturn",{"2":{"170":3}}],["fversion",{"2":{"163":3}}],["fsignedmessage",{"2":{"180":2}}],["fsupportedcountry",{"2":{"151":2,"152":2}}],["fsession",{"2":{"142":2}}],["fsequenceerror",{"2":{"141":1,"142":1,"143":1,"151":1,"152":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"171":1,"180":1,"181":1,"187":3}}],["fscriptdelegate",{"2":{"129":1}}],["fstoredcredentials",{"2":{"129":1}}],["fstring",{"2":{"119":1,"120":1,"123":1,"129":4,"130":1,"131":2,"143":2,"150":1,"169":2,"180":1,"185":1,"187":1}}],["f",{"0":{"631":1},"2":{"128":1}}],["fcredentials",{"2":{"123":2,"129":2,"141":3,"142":1,"143":1,"144":1,"145":1,"146":1,"147":1,"148":1,"152":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"171":1,"180":1,"186":1}}],["fblocknonce",{"2":{"121":1}}],["fbinarydata",{"2":{"119":1,"121":1}}],["fhash256",{"2":{"121":1}}],["fplatformprocess",{"2":{"150":1}}],["fpublickey",{"2":{"121":2}}],["fprivatekey",{"2":{"119":2,"121":1}}],["fly",{"2":{"396":1}}],["flexible",{"2":{"280":1,"425":1}}],["flexibility",{"2":{"76":1}}],["floating",{"2":{"108":1}}],["flows",{"2":{"194":1,"610":1}}],["flow",{"0":{"566":1,"589":1,"592":1},"1":{"567":1,"568":1,"569":1,"570":1,"571":1,"590":1,"591":1,"592":1},"2":{"88":1,"210":1,"303":1,"371":1,"431":1,"566":1,"589":1,"592":1}}],["flagged",{"2":{"506":1}}],["flag",{"2":{"88":1,"289":1}}],["february",{"2":{"416":1,"417":1}}],["ferc1155txnvalue",{"2":{"184":1}}],["ferc1155transaction",{"2":{"181":2,"182":1,"183":1,"184":2,"185":1}}],["ferc721transaction",{"2":{"181":2,"182":1,"183":2,"184":1,"185":1}}],["ferc20transaction",{"2":{"181":2,"182":2,"183":1,"184":1,"185":1}}],["fetherbalance",{"2":{"166":3}}],["fetches",{"0":{"229":1},"2":{"239":1,"243":1}}],["fetched",{"2":{"84":1}}],["fetching",{"0":{"247":1,"248":1},"2":{"42":1,"79":1,"84":1,"98":1,"151":1,"152":1,"213":1,"229":1}}],["fetch",{"0":{"30":1,"43":1,"213":1,"216":1,"221":1,"222":1,"223":1,"224":1,"230":1,"232":1,"239":1,"241":1,"243":1},"1":{"214":1,"215":1,"217":1,"218":1,"225":1,"226":1},"2":{"6":2,"18":4,"25":1,"27":4,"29":1,"39":2,"41":4,"42":1,"43":1,"44":1,"45":2,"84":3,"85":1,"86":1,"87":1,"214":4,"215":4,"216":1,"217":4,"218":4,"221":4,"222":5,"223":4,"224":1,"225":4,"226":4,"229":1,"230":1,"239":1,"241":1,"243":1,"245":3,"248":1}}],["fed",{"2":{"129":1}}],["federating",{"0":{"367":1}}],["federation",{"2":{"12":1}}],["federateaccountemail",{"2":{"367":1}}],["federateaccountguest",{"2":{"367":1}}],["federateaccountsocial",{"2":{"367":1}}],["federateaccountplayfab",{"2":{"367":1}}],["federateaccount",{"2":{"366":1,"367":1}}],["federated",{"0":{"366":1},"1":{"367":1}}],["federatedauthpopuppanel",{"2":{"97":1,"366":3}}],["feehistoryresult",{"2":{"330":2}}],["feehistory",{"0":{"330":1},"2":{"330":2}}],["feeoption",{"2":{"117":4,"187":1}}],["feeoptionreturn",{"2":{"117":1}}],["feeoptionsresponse",{"2":{"117":3}}],["feeoptions",{"0":{"117":1},"2":{"117":9,"247":1}}],["feequote",{"2":{"117":4}}],["feetokens",{"2":{"58":2}}],["fee",{"0":{"187":1,"247":1},"2":{"58":3,"117":2,"187":12,"247":4,"249":1,"335":1,"427":7}}],["fees",{"0":{"58":1,"427":1},"2":{"58":1,"117":2,"202":1,"203":2,"330":1,"425":1,"427":1,"548":1}}],["feel",{"2":{"37":1,"76":1,"93":1,"98":1,"123":1,"254":1,"369":1,"456":1}}],["few",{"2":{"18":1,"27":1,"68":1,"75":1,"97":1,"99":1,"105":1,"159":1,"211":1,"256":1,"260":1,"463":1,"483":1,"487":1}}],["features",{"0":{"256":1,"260":1,"463":1,"483":1,"487":1},"2":{"25":1,"28":1,"56":1,"75":1,"80":1,"139":1,"153":1,"279":2,"627":2}}],["feature",{"2":{"5":1,"251":1,"253":2,"398":1,"434":1,"458":1}}],["future",{"0":{"392":1},"2":{"178":1,"366":1,"557":1}}],["fur",{"2":{"48":1}}],["further",{"2":{"0":1,"13":1,"119":1,"281":1}}],["funcstringthe",{"2":{"548":1}}],["func",{"2":{"229":1,"230":1,"232":1,"237":1,"239":1,"241":1,"243":1,"548":2}}],["functionyesdatastringadditional",{"2":{"546":1}}],["functionnameasstring",{"2":{"115":2,"116":1}}],["functionsignature",{"2":{"185":2}}],["functions",{"0":{"121":1,"340":1},"2":{"69":1,"107":1,"110":1,"112":1,"114":1,"118":1,"120":1,"121":1,"122":1,"123":1,"194":1,"304":1,"317":1}}],["functionalities",{"2":{"152":1}}],["functionality",{"2":{"82":1,"93":1,"194":1,"254":1,"303":1,"307":1,"308":1,"309":1,"420":1,"424":1,"505":1,"629":1,"630":1,"633":1,"634":1}}],["functional",{"2":{"28":1,"598":1}}],["function",{"2":{"6":3,"94":1,"108":1,"115":6,"127":1,"132":1,"201":1,"253":1,"273":1,"279":1,"306":3,"307":2,"308":2,"309":2,"339":3,"340":1,"370":1,"374":1,"452":1,"454":1,"455":1,"461":1,"494":1,"498":2,"502":1,"504":1,"516":1,"535":4,"536":1,"548":5,"589":1,"598":3,"599":1,"603":1,"605":1,"621":1,"627":1,"628":3,"629":2,"630":2,"633":2,"634":2}}],["funsizeddata",{"2":{"119":1,"185":1}}],["fungible",{"2":{"109":1,"111":1,"113":1}}],["funds",{"0":{"77":1,"78":1,"150":1,"461":1},"1":{"78":1,"79":1},"2":{"115":1,"281":1,"431":1,"461":1,"494":1,"508":1}}],["funding",{"2":{"11":1,"299":1,"300":1}}],["fully",{"2":{"28":1,"210":1,"339":1,"391":1,"534":1}}],["full",{"2":{"8":1,"14":1,"20":1,"26":1,"37":1,"40":1,"49":1,"52":1,"80":1,"153":1,"252":1,"253":1,"289":1,"301":1,"449":1,"450":1,"472":1,"601":1,"608":1,"609":1}}],["family",{"2":{"601":1}}],["familiar",{"2":{"115":1,"261":1,"280":1,"464":1,"488":1}}],["fashion",{"2":{"515":1}}],["fast",{"2":{"1":1,"25":3,"28":1,"32":1,"36":1,"56":1}}],["fatalf",{"2":{"237":2}}],["fatal",{"2":{"229":1,"230":1,"232":1,"239":1,"241":1,"243":1}}],["fate",{"2":{"49":1}}],["false",{"0":{"505":1},"2":{"150":2,"152":1,"229":1,"230":2,"239":2,"241":1,"243":2,"246":1,"281":2,"300":1,"504":2,"510":1,"576":3,"578":1,"598":1,"602":6,"605":1,"609":1,"613":1,"614":2,"616":1,"618":1}}],["fallbackencryptionkey",{"2":{"173":1,"175":1}}],["fall",{"2":{"49":1}}],["far",{"2":{"127":1}}],["faddress",{"2":{"120":1,"121":3,"185":1}}],["facebookclientid",{"2":{"173":1}}],["facebook",{"2":{"132":1,"256":1,"260":1,"294":1,"449":1,"455":1,"463":1,"483":1,"487":1,"595":1,"612":1}}],["facilitate",{"2":{"68":1,"433":1,"457":1}}],["factual",{"2":{"497":1,"512":1,"525":1}}],["factory",{"2":{"492":1,"493":1,"497":1,"504":2,"524":1,"525":2,"526":1,"536":1,"537":1}}],["fact",{"2":{"25":1,"48":1,"66":1,"277":1,"467":1,"625":1}}],["fails",{"2":{"159":1,"361":1,"362":1,"506":1,"609":2}}],["failedtransactionresponse",{"2":{"609":1}}],["failedtransactionreturn",{"2":{"107":1}}],["failedyesgasusednumberamount",{"2":{"575":1,"578":1}}],["failed",{"0":{"578":1,"609":1},"1":{"579":1},"2":{"187":1,"366":1,"578":2,"579":1,"603":1,"608":2}}],["failedcontractdeploymentreturn",{"2":{"69":1}}],["failure",{"2":{"93":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"171":1,"187":3,"339":1,"575":1,"578":1,"608":1}}],["failures",{"2":{"25":1}}],["failing",{"2":{"82":1,"609":1}}],["fail",{"2":{"5":1,"116":1,"187":1,"345":1,"361":1,"362":1,"602":1}}],["freshly",{"2":{"403":1}}],["frequent",{"2":{"312":1}}],["free",{"2":{"4":1,"19":1,"37":2,"56":1,"58":3,"98":1,"123":1,"137":1,"254":1,"369":1,"456":1}}],["fraud",{"2":{"602":1}}],["frawtransaction",{"2":{"181":2,"182":1,"183":1,"184":1,"185":2}}],["framework",{"2":{"153":1}}],["fruntimestatus",{"2":{"164":3}}],["friendlyname",{"2":{"605":2}}],["friendly",{"2":{"77":1,"149":1,"472":1}}],["frommnemonic",{"2":{"247":1}}],["from",{"0":{"12":1,"82":1,"95":1,"152":1,"160":1,"177":1,"569":1},"1":{"83":1,"84":1,"85":1,"86":1,"87":1,"96":1,"97":1,"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"171":1,"178":1},"2":{"0":1,"2":1,"3":1,"5":1,"6":2,"7":1,"10":1,"16":1,"20":1,"21":3,"24":2,"25":5,"27":1,"30":2,"33":3,"41":2,"43":2,"44":4,"46":1,"48":1,"56":1,"65":1,"69":3,"73":1,"74":2,"78":1,"79":1,"82":1,"84":2,"93":1,"94":2,"97":1,"102":1,"107":1,"109":1,"113":1,"115":2,"117":1,"119":3,"121":3,"124":1,"128":1,"129":2,"130":3,"150":1,"151":1,"152":2,"159":1,"174":2,"185":1,"189":1,"194":1,"195":2,"196":3,"201":2,"202":1,"206":1,"208":1,"209":2,"210":1,"212":1,"214":1,"215":1,"217":1,"218":1,"220":1,"221":1,"222":2,"223":2,"225":1,"226":1,"229":4,"230":1,"232":1,"237":1,"239":1,"241":1,"243":1,"245":1,"247":2,"248":1,"252":2,"253":1,"265":1,"266":3,"273":3,"274":5,"279":2,"280":1,"281":2,"300":1,"303":4,"306":2,"307":2,"309":2,"310":1,"312":2,"314":2,"320":1,"326":1,"340":1,"342":1,"352":1,"363":1,"367":1,"370":1,"378":1,"380":1,"382":2,"383":1,"391":1,"392":4,"395":1,"396":1,"397":1,"404":1,"427":1,"429":1,"430":2,"431":3,"436":1,"437":1,"451":1,"452":4,"455":1,"456":1,"460":1,"461":1,"467":1,"469":1,"470":1,"474":1,"475":1,"492":1,"495":1,"496":1,"503":1,"514":1,"515":2,"554":1,"557":1,"559":1,"564":2,"565":1,"568":1,"577":2,"578":1,"579":2,"582":2,"585":2,"587":2,"588":2,"591":1,"595":1,"597":2,"598":10,"600":1,"601":2,"602":1,"603":1,"605":1,"606":2,"608":1,"609":1,"618":1,"621":3,"622":5,"627":2,"628":2,"629":2,"634":2,"635":1}}],["frontend",{"2":{"56":1,"565":2}}],["front",{"2":{"0":1}}],["fixing",{"2":{"251":1}}],["fixedbyte",{"2":{"341":1}}],["fixed",{"2":{"120":2,"213":1,"224":1,"341":1,"497":1}}],["firm",{"2":{"113":1}}],["fired",{"2":{"129":1,"189":1}}],["fire",{"2":{"56":1,"129":1,"130":2,"131":1}}],["first",{"0":{"504":1},"1":{"505":1,"506":1,"507":1,"508":1,"509":1,"510":1,"511":1,"512":1},"2":{"2":1,"16":1,"37":1,"68":2,"69":1,"81":1,"110":1,"112":1,"114":1,"117":2,"159":1,"181":1,"187":1,"195":1,"196":1,"281":1,"364":1,"378":1,"392":2,"396":2,"429":1,"430":1,"455":1,"468":1,"490":1,"504":1,"509":2,"541":2,"559":2,"567":1,"601":1}}],["fieldtypedescriptionerrorstringthe",{"2":{"578":1}}],["fields",{"2":{"50":2,"199":1,"454":1,"539":1,"573":1,"603":1,"608":1}}],["field",{"2":{"48":1,"50":2,"133":1,"197":1,"376":1,"385":1,"439":1,"440":1,"455":1,"557":1,"575":1,"578":1,"580":1,"583":1,"586":1}}],["fillorkillorder",{"2":{"548":2}}],["fill",{"2":{"93":1,"405":1}}],["filters",{"2":{"234":1,"235":2}}],["filter",{"2":{"17":1,"87":1,"171":1,"190":1,"214":2,"215":2,"217":2,"218":2,"221":2,"222":2,"223":2,"225":2,"226":2,"235":1,"237":1,"239":6,"241":6,"246":1,"378":9}}],["files",{"0":{"398":1},"2":{"173":1,"396":1,"397":3,"398":1,"399":1,"403":1}}],["file",{"0":{"554":1},"2":{"3":1,"76":1,"133":1,"136":1,"139":2,"159":2,"173":1,"174":1,"175":1,"178":1,"372":1,"378":2,"382":1,"396":1,"397":1,"405":1,"553":1,"554":1,"555":1,"598":2}}],["fit",{"2":{"8":1,"76":2,"346":1}}],["fiat",{"0":{"413":1,"465":1},"1":{"414":1,"466":1},"2":{"7":1,"10":2,"414":1,"457":1,"466":1,"607":1}}],["finishvalidatesession",{"2":{"614":2}}],["finishes",{"2":{"509":2}}],["finished",{"2":{"159":1,"303":1}}],["finish",{"2":{"365":1}}],["fingerprints",{"2":{"133":1}}],["finalizeauth",{"2":{"597":2}}],["finalize",{"0":{"406":1}}],["final",{"2":{"198":1}}],["finalresult",{"2":{"84":3}}],["finally",{"2":{"3":1,"50":1,"51":1,"130":1,"196":1,"405":1}}],["fine",{"2":{"50":1,"220":1}}],["findobjectoftype",{"2":{"369":1}}],["finds",{"2":{"121":1}}],["finding",{"2":{"75":1}}],["find",{"2":{"3":1,"20":1,"77":1,"103":1,"117":1,"128":1,"136":1,"137":1,"149":1,"247":1,"273":1,"511":1,"512":1,"621":1}}],["foolproof",{"2":{"555":1}}],["fom",{"2":{"246":1}}],["fostering",{"2":{"203":1}}],["folder",{"0":{"399":1},"2":{"74":1,"75":2,"93":4,"127":4,"128":1,"136":4,"137":1,"159":2,"251":3,"253":2,"371":1,"380":3,"398":4,"399":2,"404":1,"405":1}}],["follows",{"2":{"80":1,"153":1,"182":1,"303":1,"514":1,"532":1,"533":1,"534":1,"535":2,"539":1,"559":1}}],["followed",{"2":{"57":1}}],["following",{"0":{"12":1},"2":{"3":1,"6":1,"11":1,"96":1,"105":1,"120":1,"133":1,"155":1,"156":1,"157":1,"159":2,"173":1,"174":1,"194":1,"274":1,"370":1,"372":1,"378":1,"383":1,"384":1,"395":1,"427":1,"430":1,"432":1,"509":1,"528":1,"534":1,"536":1,"554":1,"557":1,"565":1,"573":1,"593":1,"599":1,"600":1,"622":1}}],["follow",{"2":{"1":1,"20":1,"40":1,"52":1,"137":1,"206":1,"207":1,"219":1,"227":1,"244":1,"293":1,"385":1,"393":1,"434":1,"458":1}}],["found",{"2":{"17":1,"75":1,"93":1,"98":2,"123":1,"153":1,"219":1,"227":1,"252":1,"253":2,"319":1,"321":1,"379":1,"386":1,"414":1,"427":1,"430":1,"466":1,"607":1}}],["focus",{"2":{"8":1,"403":1,"463":1,"472":1}}],["fonts",{"2":{"8":1}}],["forbidden",{"2":{"544":1}}],["forum",{"2":{"378":1,"379":1}}],["force",{"2":{"289":1,"598":1}}],["forwards",{"0":{"568":1},"2":{"568":1}}],["forward",{"2":{"131":1}}],["forms",{"2":{"420":1}}],["formerly",{"2":{"415":1}}],["formula",{"2":{"182":1}}],["form",{"2":{"88":1,"98":1,"108":1,"421":1}}],["formats",{"2":{"42":1,"46":1}}],["format",{"2":{"39":1,"46":1,"48":1,"50":2,"108":1,"109":2,"115":4,"219":2,"227":2,"322":2,"323":1,"325":1,"326":1,"327":1,"328":2,"330":1,"331":1,"332":1,"363":2,"407":1,"555":1}}],["forget",{"2":{"56":1,"105":1,"364":1,"368":1,"381":1,"382":1}}],["for",{"0":{"43":1,"203":1,"221":2,"239":1,"241":1,"272":1,"279":1,"603":1,"617":1,"620":1,"627":1},"2":{"0":1,"1":1,"2":1,"3":4,"4":1,"5":2,"7":1,"8":1,"9":3,"12":2,"13":3,"16":1,"20":3,"21":3,"22":3,"24":1,"25":5,"27":3,"28":1,"29":3,"30":2,"32":1,"36":4,"37":3,"38":3,"40":1,"42":5,"43":1,"44":3,"46":1,"48":5,"49":2,"50":1,"52":3,"55":1,"56":4,"57":1,"58":5,"63":2,"66":1,"67":2,"68":1,"69":2,"76":1,"77":2,"78":1,"80":2,"82":1,"84":6,"85":2,"86":2,"87":1,"88":4,"93":3,"94":2,"97":2,"98":2,"100":1,"101":3,"102":1,"103":1,"107":3,"108":2,"110":3,"112":3,"113":1,"114":3,"115":1,"116":2,"117":10,"119":1,"120":3,"121":2,"122":1,"123":1,"124":1,"127":1,"129":5,"132":2,"133":2,"134":3,"137":2,"141":1,"149":2,"150":2,"151":1,"152":1,"153":1,"155":2,"156":1,"157":1,"158":1,"161":1,"173":1,"175":1,"177":1,"178":2,"182":2,"185":1,"187":2,"189":2,"190":3,"191":1,"194":2,"195":3,"196":1,"198":1,"199":1,"200":1,"202":2,"203":2,"204":1,"210":7,"211":1,"219":1,"220":1,"227":1,"229":4,"230":2,"232":1,"234":1,"237":1,"239":4,"241":2,"243":3,"244":1,"245":1,"246":2,"247":1,"248":1,"249":2,"251":4,"253":1,"254":4,"255":1,"259":1,"262":1,"270":1,"273":1,"274":3,"276":1,"277":1,"278":2,"279":2,"280":4,"284":1,"285":1,"286":1,"288":1,"299":1,"301":1,"303":2,"304":2,"312":3,"320":1,"321":1,"322":1,"327":1,"328":1,"329":1,"330":1,"331":1,"332":1,"335":1,"338":1,"339":2,"340":1,"341":2,"345":2,"348":1,"349":2,"350":3,"351":2,"352":3,"353":2,"355":1,"357":1,"358":1,"360":1,"362":1,"364":3,"366":1,"367":1,"368":1,"369":2,"371":1,"372":4,"377":2,"378":2,"379":1,"381":1,"382":2,"383":1,"385":1,"386":1,"388":5,"389":1,"392":1,"395":2,"396":1,"397":2,"398":1,"403":2,"404":2,"405":1,"407":1,"410":1,"411":2,"412":1,"414":1,"419":2,"424":1,"427":1,"429":2,"430":3,"431":7,"432":1,"439":1,"443":2,"449":1,"450":1,"454":3,"462":1,"466":1,"467":1,"468":3,"471":2,"472":3,"482":1,"486":1,"490":1,"491":1,"497":1,"503":3,"509":2,"511":1,"512":1,"514":1,"515":1,"516":1,"518":1,"523":1,"525":1,"528":3,"533":2,"535":1,"540":1,"541":2,"543":1,"544":1,"546":1,"547":1,"548":2,"549":1,"550":1,"553":2,"554":2,"555":3,"556":1,"557":1,"561":2,"564":1,"567":1,"568":1,"570":1,"571":1,"572":1,"575":6,"578":3,"588":1,"590":1,"592":1,"595":1,"597":1,"598":3,"600":1,"601":2,"602":10,"605":1,"611":1,"613":2,"616":1,"617":2,"618":1,"621":1,"622":3,"624":1,"625":1,"626":2,"627":4}}],["w3c",{"2":{"280":1}}],["wmaticaddress",{"2":{"86":2}}],["wooden",{"2":{"404":1}}],["worry",{"2":{"556":1}}],["world",{"2":{"255":1,"259":1,"462":1,"482":1,"486":1,"514":1,"581":1}}],["workflow",{"2":{"273":1,"621":1}}],["working",{"2":{"69":1,"94":1,"107":1,"252":1,"345":1,"346":1,"363":1,"370":1}}],["works",{"0":{"99":1,"189":1},"1":{"100":1,"101":1,"102":1,"103":1},"2":{"30":1,"43":1,"44":2,"115":1,"214":1,"215":1,"217":1,"218":1,"221":1,"222":1,"223":1,"225":1,"226":1,"229":1,"230":1,"232":1,"237":1,"239":1,"241":1,"243":1,"245":1,"276":1,"280":1,"281":3,"293":1,"369":2,"432":1,"474":1,"475":1,"534":1,"552":1,"624":1}}],["work",{"2":{"3":1,"24":1,"37":1,"76":1,"81":1,"88":1,"93":1,"98":1,"134":1,"188":1,"254":2,"280":4,"322":1,"347":1,"372":1,"405":1,"456":1,"556":1,"602":2}}],["won",{"2":{"93":1}}],["wouldn",{"2":{"565":1}}],["would",{"0":{"203":1},"2":{"69":1,"115":1,"117":2,"281":1,"340":1,"342":1,"366":1,"385":1,"386":1,"470":1,"471":1,"472":1,"556":1,"557":1}}],["wrong",{"2":{"300":2}}],["wrapping",{"2":{"345":2}}],["wrappers",{"2":{"76":1,"351":3,"454":1}}],["wrapper",{"2":{"69":1,"84":1,"110":1,"112":1,"114":1,"119":1,"253":6,"351":1,"352":1,"441":1}}],["wrapped",{"2":{"58":1}}],["wrap",{"2":{"253":2}}],["written",{"2":{"66":1,"210":1,"274":1,"276":1,"277":1,"279":1,"554":1,"622":1,"624":1,"625":1,"627":1}}],["writer",{"2":{"187":2}}],["write",{"0":{"107":1,"179":1},"1":{"108":1,"109":1,"110":1,"111":1,"112":1,"113":1,"114":1,"115":1,"116":1,"117":1,"180":1,"181":1,"182":1,"183":1,"184":1,"185":1,"186":1,"187":1},"2":{"2":2,"16":1,"76":1,"88":1,"107":1,"201":1,"403":1,"404":1,"406":1,"538":1}}],["wuelppex0pttvjabl8biuxpaaaaaaaaaa",{"2":{"44":2}}],["www",{"2":{"37":1,"49":1,"137":1}}],["watchos",{"2":{"602":1}}],["wagmiprovider",{"2":{"253":1}}],["wagmiconfig",{"2":{"253":2,"436":2,"455":3,"460":2}}],["wagmiclient",{"2":{"253":2}}],["wagmiwrapper",{"2":{"253":6}}],["wagmi",{"2":{"251":2,"252":5,"253":4,"254":1,"255":1,"259":1,"449":1,"450":1,"452":1,"454":3,"455":1,"462":1,"482":1,"486":1}}],["waitfortransactionreceipt",{"0":{"338":1},"2":{"338":1}}],["waitforfeeoptionsandsubmitfirstavailable",{"2":{"117":1}}],["waits",{"2":{"249":1,"360":1,"362":1,"571":1}}],["wait",{"2":{"159":1,"248":2,"249":3,"252":2,"338":1,"340":1}}],["was",{"2":{"124":1,"246":2,"248":1,"365":3,"415":1,"471":1,"516":1,"539":1,"575":3,"578":1,"601":1,"608":1}}],["waassessionmanager",{"2":{"97":2}}],["waassession",{"2":{"97":1}}],["waastransactionqueuer",{"2":{"97":1}}],["waaswallet",{"2":{"94":3,"97":1}}],["waasconfigkey",{"2":{"65":1,"173":1,"174":1,"595":1,"597":1,"598":1,"605":1,"606":1,"608":1,"609":1}}],["waas",{"0":{"561":1,"563":1,"569":1},"2":{"63":1,"65":4,"72":1,"75":1,"93":1,"97":7,"122":1,"174":1,"366":1,"369":1,"387":1,"388":1,"550":1,"553":1,"554":4,"555":2,"556":1,"557":2,"559":4,"561":2,"563":1,"566":1,"567":2,"568":2,"569":1,"571":1,"577":1,"579":1,"582":1,"585":1,"587":1,"588":1,"589":1,"590":3,"591":1,"592":1,"593":2,"595":3,"597":3,"598":5,"605":2,"606":2,"608":5,"609":5,"613":1,"614":2,"616":1,"617":2,"618":1}}],["wants",{"2":{"470":1}}],["want",{"0":{"203":1},"2":{"58":1,"68":1,"76":1,"84":4,"87":2,"110":1,"112":1,"114":1,"115":3,"129":1,"132":1,"139":1,"159":1,"178":1,"185":2,"210":1,"223":1,"224":1,"230":1,"239":1,"241":1,"243":1,"254":1,"273":1,"280":1,"291":1,"310":1,"322":2,"340":3,"343":1,"364":1,"365":2,"367":2,"368":1,"370":1,"372":2,"377":1,"380":1,"381":1,"403":1,"407":1,"431":1,"463":1,"556":2,"621":1,"635":1}}],["ways",{"2":{"280":1,"383":1,"564":1}}],["way",{"2":{"28":1,"84":1,"105":2,"178":1,"210":1,"312":1,"456":1,"497":1,"504":1,"534":2,"560":1,"562":1,"600":3}}],["walletcontext",{"2":{"526":1,"537":1}}],["walletcontractbytecode",{"2":{"525":1}}],["walletconnectprojectid",{"2":{"452":1}}],["walletconnect",{"0":{"303":1},"2":{"256":1,"260":1,"280":1,"301":1,"303":4,"463":1,"483":1,"487":1}}],["walletproxybytecode",{"2":{"525":1}}],["walletpanel",{"2":{"98":1,"102":1}}],["walletinterface",{"2":{"504":2}}],["walletauthoptions",{"0":{"450":1},"2":{"455":2}}],["walletaddress",{"2":{"367":5,"461":1,"598":2}}],["wallet56",{"2":{"427":1}}],["walletoptional",{"2":{"123":12,"141":4,"142":4,"143":4,"144":4,"145":4,"146":4,"147":4,"148":4,"152":4,"162":4,"163":4,"164":4,"165":4,"166":4,"167":4,"168":4,"169":4,"170":4,"171":4,"180":4,"186":4,"187":8}}],["wallet",{"0":{"98":1,"123":1,"161":1,"220":1,"229":1,"238":1,"239":1,"251":1,"252":1,"253":1,"254":1,"272":1,"273":1,"274":1,"280":1,"282":1,"302":1,"311":1,"314":1,"348":1,"383":1,"388":1,"391":1,"392":1,"419":1,"431":1,"472":1,"474":1,"475":1,"476":1,"492":1,"493":1,"497":1,"507":1,"512":1,"517":1,"524":1,"525":1,"526":1,"527":1,"537":1,"559":1,"562":1,"620":1,"621":1,"622":1,"631":1,"632":1},"1":{"99":1,"100":1,"101":1,"102":1,"103":1,"104":1,"105":1,"106":1,"124":1,"221":1,"222":1,"223":1,"224":1,"225":1,"226":1,"227":1,"239":1,"281":1,"282":1,"283":2,"284":2,"285":2,"286":2,"287":2,"288":2,"289":2,"290":2,"291":2,"292":2,"293":2,"294":2,"295":2,"296":2,"297":2,"298":2,"299":2,"300":2,"301":1,"302":1,"303":1,"384":1,"385":1,"386":1,"387":1,"388":1,"389":1,"390":1,"391":1,"392":2,"393":1,"432":1,"493":1,"494":2,"495":2,"496":2,"497":1,"498":2,"499":2,"500":2,"501":1,"502":1,"503":1,"504":1,"505":1,"506":1,"507":1,"508":1,"509":1,"510":1,"511":1,"512":1,"518":1,"519":1,"520":1,"521":1,"522":1,"523":1,"524":1,"525":2,"528":1,"529":1,"530":1,"531":1,"532":1,"533":1,"534":1,"535":1,"536":1},"2":{"25":2,"27":3,"60":1,"61":1,"63":2,"64":3,"65":2,"68":7,"69":4,"80":2,"84":1,"88":2,"93":4,"94":3,"98":2,"107":4,"108":2,"109":1,"110":1,"111":1,"112":1,"113":1,"114":1,"115":3,"116":3,"117":9,"122":1,"123":3,"144":1,"147":1,"152":3,"153":2,"161":2,"191":1,"210":8,"219":1,"227":1,"229":2,"230":1,"232":2,"235":1,"239":4,"247":5,"249":2,"251":3,"253":2,"254":2,"256":3,"260":3,"268":1,"269":1,"272":3,"273":6,"274":1,"279":1,"280":12,"281":19,"282":2,"283":1,"285":1,"286":1,"287":1,"288":1,"289":1,"290":3,"291":2,"292":2,"293":1,"294":1,"295":1,"296":1,"297":1,"298":1,"299":1,"300":1,"303":2,"304":1,"306":2,"307":3,"308":3,"309":3,"310":2,"311":1,"312":5,"314":6,"315":1,"316":1,"317":3,"318":1,"322":3,"332":2,"340":6,"343":1,"348":1,"350":1,"351":3,"353":2,"354":1,"355":2,"358":2,"359":1,"360":1,"361":5,"362":5,"363":3,"364":1,"368":1,"369":3,"370":1,"371":1,"381":1,"382":1,"383":11,"384":1,"388":7,"389":3,"390":3,"391":7,"392":4,"393":1,"405":1,"413":2,"415":3,"419":10,"420":1,"421":1,"430":7,"431":6,"432":2,"450":3,"451":1,"452":3,"463":2,"465":2,"467":8,"468":3,"471":1,"472":8,"475":2,"478":1,"483":3,"487":3,"489":2,"490":3,"491":7,"492":1,"493":1,"494":3,"495":3,"496":5,"497":3,"498":3,"499":1,"500":1,"501":1,"502":2,"503":6,"504":6,"505":1,"506":2,"507":2,"509":3,"510":2,"511":3,"512":5,"514":6,"515":7,"516":2,"517":1,"519":1,"522":2,"524":4,"525":5,"527":3,"528":2,"530":2,"532":1,"534":2,"536":5,"538":6,"539":2,"540":1,"541":5,"542":2,"543":1,"544":1,"548":2,"549":2,"556":1,"557":2,"560":2,"561":1,"562":2,"563":1,"564":1,"567":1,"570":1,"572":1,"576":1,"577":1,"578":1,"579":1,"582":1,"583":1,"584":1,"585":1,"587":1,"588":1,"590":2,"593":1,"595":1,"597":1,"607":1,"609":3,"610":1,"620":3,"621":6,"622":1,"627":1,"628":2,"629":3,"630":3,"633":3,"634":3,"635":2}}],["walletsignmessage",{"2":{"392":2}}],["walletstats",{"2":{"227":2}}],["walletstxnsentdaily",{"2":{"226":2}}],["walletstxnsenttotal",{"2":{"225":2}}],["walletstotal",{"2":{"17":1}}],["walletsbydevice",{"2":{"223":2}}],["walletsbycountry",{"2":{"222":2}}],["walletsdaily",{"2":{"221":2}}],["wallets",{"0":{"68":1,"191":1,"216":1,"221":1,"222":1,"223":1,"224":1,"255":1,"259":1,"354":1,"420":1,"424":1,"428":1,"468":1,"482":1,"486":1},"1":{"217":1,"218":1,"225":1,"226":1,"256":1,"260":1,"355":1,"356":1,"357":1,"358":1,"359":1,"360":1,"361":1,"362":1,"363":1,"421":1,"422":1,"423":1,"424":1,"425":2,"426":1,"427":1,"429":1,"430":1,"469":1,"470":1,"471":1,"483":1,"487":1},"2":{"18":3,"25":2,"57":2,"58":1,"67":1,"68":1,"93":1,"110":2,"112":2,"114":2,"137":1,"188":1,"191":1,"193":1,"202":1,"210":3,"211":1,"216":1,"220":1,"221":1,"222":1,"224":1,"227":1,"254":1,"255":1,"256":1,"259":1,"260":1,"278":1,"280":1,"356":1,"388":1,"392":1,"420":2,"424":3,"427":1,"429":1,"430":2,"431":2,"449":1,"450":1,"452":1,"453":1,"462":1,"463":3,"471":1,"472":1,"482":1,"483":1,"486":1,"487":1,"489":1,"492":2,"493":1,"494":1,"497":1,"503":1,"504":1,"512":1,"513":1,"522":1,"527":1,"530":1,"531":1,"534":2,"536":2,"559":2,"560":1,"564":1,"565":5,"566":1,"626":1}}],["walkthrough",{"0":{"412":1},"2":{"28":1}}],["walk",{"2":{"3":1,"9":1,"206":1,"207":1,"453":1}}],["whose",{"2":{"246":1}}],["who",{"2":{"210":1,"280":1,"527":1,"565":1,"601":1,"612":1}}],["whole",{"2":{"108":1,"116":1,"361":1,"362":1,"506":1,"534":1,"535":1}}],["why",{"0":{"203":1,"251":1,"392":1,"420":1},"1":{"421":1,"422":1,"423":1,"424":1,"425":1,"426":1,"427":1},"2":{"578":1,"608":1}}],["whatever",{"2":{"83":1,"131":1}}],["what",{"0":{"557":1},"2":{"27":2,"124":1,"139":1,"253":1,"403":1,"424":1,"505":1,"555":1,"564":1}}],["whereby",{"2":{"56":1}}],["where",{"2":{"39":1,"48":1,"69":1,"108":1,"115":1,"129":1,"131":1,"132":1,"194":1,"195":1,"196":1,"222":1,"223":1,"279":1,"293":1,"311":1,"341":1,"345":1,"365":2,"367":1,"370":1,"382":1,"388":1,"391":2,"403":1,"430":1,"531":1,"559":2,"575":1,"627":1}}],["whenever",{"2":{"352":1,"593":1,"598":2}}],["when",{"0":{"251":1},"2":{"24":1,"44":1,"48":1,"49":1,"69":1,"76":1,"81":3,"84":1,"93":2,"94":1,"107":1,"108":1,"110":1,"112":1,"114":1,"115":2,"116":1,"117":1,"124":1,"129":2,"130":1,"157":1,"159":1,"188":1,"189":1,"196":1,"198":1,"210":1,"246":1,"252":1,"253":2,"269":1,"273":1,"281":2,"282":1,"293":1,"298":1,"322":1,"339":2,"340":1,"341":1,"345":4,"346":1,"348":1,"349":1,"351":1,"368":1,"369":1,"377":1,"381":2,"392":1,"429":1,"430":2,"431":1,"452":1,"455":1,"468":1,"490":1,"491":2,"504":1,"509":1,"516":1,"539":3,"542":1,"543":1,"549":1,"564":1,"572":1,"591":1,"597":1,"598":1,"601":1,"602":1,"612":1,"621":1}}],["whether",{"2":{"13":1,"291":1,"300":1,"448":1,"516":1,"601":1,"602":4,"612":1}}],["whistles",{"2":{"345":1}}],["while",{"2":{"8":2,"17":1,"68":1,"69":1,"84":1,"93":1,"106":1,"251":1,"273":1,"280":1,"291":1,"303":1,"312":1,"339":1,"345":1,"361":1,"362":1,"452":1,"475":1,"491":1,"504":1,"536":1,"560":1,"567":1,"621":1}}],["whitelist",{"2":{"377":1,"381":1}}],["whitelisted",{"2":{"372":1,"387":1}}],["whitespace",{"2":{"115":1,"557":1}}],["white",{"2":{"8":3,"9":1}}],["which",{"2":{"3":1,"17":1,"24":3,"25":1,"48":2,"49":2,"56":2,"67":1,"69":2,"84":2,"94":1,"105":2,"107":1,"117":1,"119":3,"120":1,"122":1,"131":1,"198":1,"200":1,"210":1,"229":1,"230":1,"239":1,"243":1,"252":1,"253":4,"273":2,"276":1,"278":1,"280":1,"283":1,"301":1,"303":1,"304":1,"307":1,"308":1,"309":1,"340":1,"352":1,"353":1,"357":1,"361":1,"362":1,"413":2,"420":1,"427":1,"429":1,"449":1,"450":1,"451":1,"465":2,"472":1,"475":1,"495":1,"498":1,"503":1,"511":1,"533":1,"536":1,"542":1,"543":1,"548":1,"557":1,"560":1,"561":1,"564":1,"601":1,"603":1,"621":2,"624":1,"626":1,"629":1,"630":1,"633":1,"634":1}}],["width=",{"2":{"598":1}}],["windowread",{"2":{"281":1}}],["windows",{"0":{"91":1},"2":{"91":1,"155":2,"376":2}}],["window",{"2":{"73":2,"74":1,"76":2,"290":1,"376":1,"378":1}}],["wish",{"2":{"68":1,"69":1,"75":1,"77":1,"94":1,"107":1,"115":1,"117":1,"120":1,"131":1,"149":1,"342":1,"347":1,"352":1,"612":1}}],["will",{"0":{"392":1},"2":{"2":3,"3":4,"11":1,"12":1,"16":3,"24":4,"25":1,"37":1,"48":1,"49":2,"50":1,"56":4,"64":1,"68":1,"74":1,"75":2,"76":5,"78":1,"80":3,"82":1,"84":3,"88":4,"93":7,"98":2,"108":1,"115":2,"116":1,"117":2,"118":1,"120":1,"127":1,"129":1,"130":2,"131":2,"132":1,"133":1,"150":1,"153":3,"161":1,"173":1,"177":1,"178":1,"182":1,"187":2,"190":3,"196":3,"200":1,"229":2,"251":1,"252":1,"253":2,"254":1,"256":1,"260":1,"268":1,"269":1,"273":3,"280":3,"281":2,"283":1,"285":1,"287":1,"289":1,"290":1,"291":2,"292":1,"293":1,"294":1,"295":1,"296":1,"297":1,"300":1,"303":1,"310":1,"320":1,"321":1,"322":2,"339":3,"340":1,"341":1,"347":3,"353":2,"355":1,"361":4,"362":4,"364":1,"365":1,"366":7,"369":2,"372":1,"374":1,"380":1,"381":1,"383":1,"387":2,"388":1,"389":2,"399":1,"401":1,"404":4,"405":2,"413":2,"448":1,"449":2,"450":2,"451":2,"453":1,"463":1,"465":2,"471":2,"475":1,"483":1,"487":1,"490":1,"491":1,"494":1,"495":1,"503":2,"506":1,"509":1,"514":2,"515":2,"516":1,"533":1,"534":1,"536":1,"539":1,"541":2,"544":1,"554":1,"555":1,"557":1,"561":1,"563":1,"564":3,"572":1,"609":1,"614":1,"621":3,"635":1}}],["without",{"2":{"25":2,"58":1,"68":1,"69":1,"84":1,"94":1,"107":1,"116":1,"123":1,"280":1,"281":2,"311":1,"312":1,"318":2,"345":1,"391":1,"489":1,"491":1,"503":1,"510":1,"559":1,"591":1,"608":1}}],["within",{"2":{"3":1,"8":1,"18":1,"56":1,"69":1,"75":1,"94":1,"127":3,"159":1,"173":1,"194":1,"221":1,"256":1,"260":1,"280":1,"382":1,"424":1,"463":3,"483":1,"487":1,"533":1,"534":1,"548":1,"561":1,"564":1,"600":1,"614":1}}],["with",{"0":{"130":1,"131":1,"132":1,"187":1,"204":1,"210":1,"251":1,"252":1,"253":1,"271":1,"275":1,"281":1,"301":1,"302":1,"313":1,"318":1,"374":1,"414":1,"461":1,"466":1,"619":1,"623":1,"631":1},"1":{"133":1,"134":1,"211":1,"272":1,"273":1,"274":1,"276":1,"277":1,"278":1,"279":1,"314":1,"315":1,"316":1,"317":1,"318":1,"319":1,"620":1,"621":1,"622":1,"624":1,"625":1,"626":1,"627":1},"2":{"0":2,"3":2,"4":1,"5":1,"6":2,"8":3,"9":1,"11":2,"17":1,"19":1,"20":4,"24":4,"25":4,"28":1,"30":1,"36":1,"38":1,"40":1,"43":1,"44":3,"46":1,"52":1,"56":2,"58":1,"61":1,"63":1,"64":1,"65":1,"66":1,"68":4,"69":3,"74":2,"75":2,"76":2,"80":1,"84":1,"86":2,"88":1,"93":8,"94":2,"97":3,"103":1,"105":2,"106":1,"107":3,"108":2,"110":5,"112":5,"114":5,"115":4,"118":1,"121":1,"123":3,"127":1,"129":4,"130":2,"131":3,"137":1,"139":1,"141":1,"142":1,"143":1,"144":1,"145":1,"146":1,"147":1,"148":2,"152":1,"158":1,"161":3,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":2,"169":1,"170":1,"171":1,"175":1,"177":1,"178":1,"180":1,"185":1,"186":1,"187":3,"189":1,"193":1,"201":1,"202":1,"210":4,"211":1,"212":1,"216":1,"219":1,"220":2,"221":1,"227":1,"229":1,"244":1,"245":1,"247":1,"251":2,"252":2,"253":6,"254":4,"255":2,"256":3,"259":2,"260":3,"261":1,"262":1,"273":2,"274":2,"277":1,"279":2,"280":4,"281":1,"282":1,"292":1,"294":2,"295":2,"304":1,"307":1,"308":1,"309":1,"312":1,"316":1,"321":1,"322":1,"323":1,"340":1,"341":1,"345":2,"346":1,"347":1,"349":1,"350":1,"351":2,"352":2,"356":2,"363":1,"364":1,"365":2,"366":5,"367":1,"369":4,"370":3,"371":1,"372":1,"374":2,"377":1,"378":4,"381":1,"383":1,"385":1,"386":1,"387":1,"392":1,"393":1,"395":1,"397":1,"404":1,"406":1,"407":1,"410":1,"412":1,"413":1,"414":1,"415":1,"419":3,"430":7,"432":1,"439":2,"443":1,"452":2,"453":1,"454":1,"456":1,"457":1,"462":2,"463":5,"464":1,"465":1,"466":1,"467":1,"468":3,"469":1,"472":4,"474":1,"475":1,"479":1,"480":1,"482":2,"483":3,"486":2,"487":3,"488":1,"489":1,"490":2,"491":1,"494":1,"514":1,"516":2,"517":1,"518":1,"519":1,"521":1,"530":1,"534":1,"536":1,"541":2,"544":1,"547":2,"548":1,"554":2,"555":2,"556":2,"557":4,"559":1,"560":1,"561":1,"562":1,"563":1,"564":3,"565":2,"567":2,"572":1,"573":1,"575":2,"590":4,"593":1,"595":2,"597":2,"598":3,"599":1,"600":1,"601":1,"602":3,"606":1,"607":2,"608":1,"610":1,"611":1,"614":2,"616":1,"621":2,"622":2,"625":1,"627":3,"629":1,"630":1,"633":1,"634":1}}],["weight",{"2":{"503":1,"518":2,"519":2,"520":4,"521":4,"523":4,"528":1,"532":3,"533":3,"534":10,"535":2}}],["weights",{"2":{"498":1,"502":1,"517":1,"528":1,"529":1,"531":1}}],["weighted",{"2":{"49":1}}],["welcome",{"2":{"379":1}}],["well",{"2":{"0":1,"10":1,"17":1,"20":1,"36":1,"37":1,"40":1,"46":1,"52":1,"84":1,"88":1,"115":1,"210":1,"279":1,"310":1,"340":2,"342":2,"352":1,"366":1,"471":1,"514":1,"515":1,"627":1,"635":1}}],["weeds",{"2":{"322":1}}],["week",{"2":{"219":1,"221":1,"227":1,"286":1}}],["weeks",{"2":{"216":1}}],["were",{"2":{"312":1,"341":1,"565":1,"578":1}}],["weth",{"2":{"58":1}}],["webgpu",{"2":{"379":2}}],["webgltemplates",{"2":{"379":1,"380":5}}],["webgltemplate",{"2":{"379":2}}],["webgl",{"2":{"81":1,"379":1}}],["web2",{"2":{"280":1,"383":1,"472":1}}],["websocketprovider",{"2":{"253":1}}],["website",{"2":{"195":1,"199":1}}],["webrpcerror",{"2":{"237":2}}],["webbrowser",{"2":{"129":1}}],["webhooks",{"2":{"27":1}}],["webapp",{"2":{"20":1,"30":1,"37":2,"43":1,"44":2,"49":1,"214":1,"215":1,"217":1,"218":1,"221":1,"222":1,"223":1,"225":1,"226":1,"229":1,"230":1,"232":1,"237":1,"239":1,"241":1,"243":1,"245":1}}],["webapps",{"2":{"19":1}}],["web",{"0":{"21":1,"33":1,"53":1,"92":1,"379":1,"474":1},"1":{"380":1,"381":1},"2":{"8":1,"20":1,"38":1,"40":1,"52":1,"68":2,"77":1,"92":1,"127":1,"133":3,"149":1,"150":1,"199":1,"210":2,"280":3,"347":1,"372":1,"377":1,"379":2,"381":1,"431":1,"474":1,"475":1,"560":1,"602":1}}],["web3modal",{"2":{"254":1,"281":1,"301":1}}],["web3",{"0":{"255":1,"259":1,"262":1,"301":1,"482":1,"486":1,"631":1,"632":1},"1":{"256":1,"260":1,"263":1,"264":1,"265":1,"266":1,"267":1,"268":1,"269":1,"270":1,"483":1,"487":1},"2":{"0":1,"25":1,"117":1,"202":1,"203":1,"210":1,"254":3,"255":2,"256":2,"259":2,"260":2,"262":3,"263":1,"265":2,"266":1,"270":1,"280":6,"304":1,"401":1,"450":1,"462":2,"463":4,"472":1,"475":1,"482":2,"483":2,"486":2,"487":2,"627":1}}],["we",{"2":{"0":1,"8":1,"9":1,"12":1,"20":1,"21":1,"24":2,"25":1,"33":1,"36":2,"38":2,"40":1,"46":2,"48":1,"50":2,"51":1,"52":1,"63":1,"69":2,"75":1,"76":3,"82":1,"84":1,"85":1,"86":1,"88":3,"89":1,"90":1,"91":1,"92":1,"93":5,"98":2,"104":1,"105":2,"106":2,"110":1,"112":1,"113":1,"114":1,"115":2,"117":2,"119":2,"127":1,"128":1,"129":1,"157":1,"161":1,"173":1,"178":1,"210":2,"220":1,"221":1,"241":2,"243":2,"252":2,"253":3,"273":1,"280":1,"321":1,"340":2,"342":2,"345":1,"351":1,"352":2,"369":2,"371":1,"372":1,"382":2,"388":1,"430":2,"452":1,"471":1,"555":2,"566":1,"603":1,"612":3,"621":1}}],["tvos",{"2":{"602":1}}],["turns",{"2":{"590":1}}],["turnover",{"2":{"383":1}}],["turn",{"2":{"253":1}}],["turned",{"2":{"251":1}}],["tunion",{"2":{"181":2,"182":1,"183":1,"184":1,"185":1}}],["tunisia",{"2":{"12":1}}],["tjsonwriterfactory",{"2":{"187":1}}],["tjsonwriter",{"2":{"187":1}}],["t1155",{"2":{"184":5}}],["t721",{"2":{"183":6}}],["t20",{"2":{"182":5}}],["tx",{"2":{"548":1,"608":3,"609":4,"616":1,"618":1}}],["txhash",{"2":{"186":2,"249":1,"571":1,"576":1,"608":2}}],["txnreceipt",{"2":{"576":1}}],["txnresponse",{"2":{"307":4,"308":4,"309":4,"310":2,"629":4,"630":4,"633":4,"634":4,"635":2}}],["txnhash",{"2":{"248":1}}],["txn",{"2":{"181":1,"182":2,"183":2,"184":2,"185":2,"186":1}}],["tx5drvi",{"2":{"37":1}}],["tpair",{"2":{"169":1}}],["tfunction",{"2":{"141":1,"143":1,"187":1}}],["tfixedabidata",{"2":{"120":1,"185":2}}],["tfixedabiarray",{"2":{"120":1}}],["tdynamicabidata",{"2":{"120":1}}],["tdynamicabiarray",{"2":{"120":1}}],["ts",{"2":{"576":1,"578":1,"598":1,"609":1}}],["tsx",{"2":{"253":1,"598":2}}],["tsharedref",{"2":{"187":1}}],["tsharedptr",{"2":{"119":1,"186":1}}],["tsuccesscallback",{"2":{"142":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"171":1,"180":1}}],["tsize",{"2":{"119":2}}],["tsizeddata",{"2":{"119":3}}],["typing",{"2":{"372":1}}],["typically",{"2":{"107":1,"273":1,"312":1,"601":1,"621":1}}],["typical",{"2":{"107":1}}],["typefielddata",{"2":{"548":1}}],["typeno",{"2":{"573":1}}],["typenopacket",{"2":{"539":1}}],["typenosignaturessignature",{"2":{"539":1}}],["typedescriptiondelayedencodedataabistringthe",{"2":{"548":1}}],["typedefault",{"2":{"451":1}}],["typedefaultbooleantrue",{"2":{"448":1}}],["typedefaultstringundefined",{"2":{"446":1,"447":1}}],["typedefaultstringcenter",{"2":{"444":1}}],["typedefaultstring",{"2":{"443":1,"449":1,"450":1}}],["typeddata",{"2":{"515":2}}],["typed",{"2":{"515":1}}],["typescript",{"2":{"20":2,"40":1,"52":1,"56":1,"63":2,"210":1,"274":1,"276":1,"393":1,"622":1,"624":1}}],["types",{"0":{"574":1},"1":{"575":1,"576":1,"577":1,"578":1,"579":1,"580":1,"581":1,"582":1,"583":1,"584":1,"585":1,"586":1,"587":1,"588":1},"2":{"3":1,"107":1,"119":1,"120":2,"339":1,"531":1}}],["type",{"0":{"341":1,"540":1},"2":{"3":1,"17":1,"30":2,"37":2,"43":2,"44":4,"48":8,"49":2,"50":2,"58":4,"116":2,"120":1,"129":2,"131":3,"132":3,"185":1,"196":1,"214":2,"215":2,"217":2,"218":2,"219":1,"221":2,"222":2,"223":2,"225":2,"226":2,"227":1,"229":2,"230":2,"232":2,"235":1,"237":1,"239":2,"241":2,"243":2,"245":2,"246":1,"248":1,"281":1,"342":1,"411":1,"515":3,"544":1,"545":1,"546":1,"547":1,"548":12,"557":1,"573":2,"576":1,"578":1,"608":1,"609":1}}],["tmp",{"2":{"74":1,"76":1,"523":4}}],["twitter",{"2":{"595":1}}],["twitch",{"2":{"294":1,"449":1}}],["two",{"2":{"64":1,"210":2,"307":1,"308":1,"309":1,"322":1,"365":1,"369":1,"391":1,"403":1,"420":1,"431":1,"468":2,"550":1,"555":1,"564":1,"590":1,"610":1,"629":1,"630":1,"633":1,"634":1}}],["tweaking",{"2":{"37":1}}],["t",{"2":{"56":1,"65":1,"74":1,"76":2,"81":1,"85":1,"93":1,"97":1,"101":1,"105":2,"106":1,"115":1,"132":1,"136":1,"185":5,"188":1,"201":1,"247":1,"303":1,"306":1,"340":1,"342":3,"364":1,"368":1,"378":2,"380":1,"381":2,"382":2,"430":1,"431":1,"455":1,"492":1,"497":1,"503":1,"504":1,"508":1,"509":1,"512":1,"522":1,"524":1,"539":1,"556":1,"559":1,"565":1,"593":1,"595":1,"602":2,"612":1,"628":1}}],["tnqwlujz",{"2":{"37":1}}],["titleid",{"2":{"367":1,"382":1}}],["title",{"0":{"632":1},"2":{"258":1,"485":1}}],["tied",{"2":{"161":1}}],["tier",{"2":{"117":2}}],["tip",{"2":{"29":1,"36":1,"42":1,"101":1,"229":1}}],["tips",{"0":{"24":1},"2":{"471":1}}],["timestamps",{"2":{"557":2}}],["timestamp",{"2":{"219":2,"227":2,"601":2}}],["times",{"2":{"49":1,"105":1,"388":1}}],["time",{"0":{"215":1,"218":1,"221":1,"226":1,"380":1,"405":1,"430":1,"611":1},"2":{"8":1,"18":1,"24":2,"25":2,"37":1,"101":1,"105":1,"117":1,"132":1,"189":2,"190":1,"191":1,"213":1,"216":1,"221":1,"224":1,"234":1,"246":1,"273":1,"311":1,"312":1,"340":1,"342":1,"347":1,"364":1,"381":1,"405":1,"412":1,"429":2,"430":2,"468":1,"490":1,"493":1,"509":1,"522":1,"565":1,"590":1,"597":1,"601":2,"602":4,"611":1,"612":1,"621":1}}],["timezones",{"2":{"0":1}}],["temporarily",{"2":{"204":1}}],["template",{"0":{"61":1,"410":1,"479":1},"2":{"61":1,"380":4,"410":1,"479":1}}],["templates",{"2":{"9":1}}],["text",{"2":{"129":1,"141":1,"142":1,"143":1,"151":2,"152":2,"180":1,"181":1,"187":1,"273":1,"621":1}}],["textmeshpro",{"2":{"74":1,"76":1}}],["tenant",{"2":{"93":1,"590":3}}],["tested",{"2":{"345":1}}],["test",{"2":{"65":1,"187":1}}],["testing",{"0":{"45":1},"2":{"14":1,"25":1,"28":1,"81":1,"168":1}}],["terminal",{"2":{"372":2}}],["term",{"2":{"55":1}}],["terms",{"2":{"12":1,"50":1,"471":1}}],["technically",{"2":{"48":1}}],["technical",{"2":{"21":1,"22":1,"50":1,"55":1,"550":1}}],["teams",{"2":{"374":1}}],["team",{"2":{"0":3,"4":1,"30":1,"43":1,"44":2,"64":1,"67":1,"229":1,"254":1,"278":1,"591":1,"602":1,"626":1}}],["treating",{"2":{"602":1}}],["treat",{"2":{"602":1}}],["trees",{"2":{"533":1}}],["tree",{"0":{"531":1},"1":{"532":1,"533":1,"534":1},"2":{"25":1,"528":1,"531":3,"533":1,"534":3,"535":4}}],["triggers",{"2":{"592":1,"616":1}}],["trigger",{"0":{"614":1},"1":{"615":1},"2":{"572":1,"598":1,"614":1}}],["triggeraddfunds",{"2":{"461":2}}],["triggertransaction",{"2":{"439":1}}],["triggercheckout",{"2":{"437":2}}],["triggered",{"2":{"281":1,"439":1,"575":1,"578":1,"580":1,"617":2,"618":1}}],["tries",{"2":{"123":1}}],["trusted",{"2":{"563":1,"611":1,"612":1,"613":1}}],["trust",{"0":{"589":1,"590":1},"1":{"590":1,"591":1,"592":1},"2":{"274":1,"383":1,"423":1,"589":2,"590":6,"591":2,"592":2,"622":1}}],["true",{"0":{"506":1},"2":{"22":2,"24":2,"29":1,"42":1,"58":1,"139":1,"167":1,"168":1,"169":1,"170":1,"171":2,"183":1,"229":4,"230":5,"239":4,"241":3,"243":4,"246":1,"249":1,"251":1,"253":1,"273":2,"281":1,"287":1,"289":1,"290":1,"291":1,"300":1,"378":3,"411":1,"504":2,"509":1,"510":1,"546":1,"548":1,"553":1,"576":2,"578":1,"602":5,"605":1,"609":1,"613":2,"614":4,"616":2,"618":2,"621":2}}],["tranfereth",{"2":{"353":1}}],["transports",{"2":{"452":1,"455":1}}],["transition",{"2":{"430":1}}],["transitions",{"2":{"102":1}}],["transformed",{"2":{"120":1}}],["transferredyesdatastringadditional",{"2":{"544":1}}],["transferring",{"2":{"508":1}}],["transfereth",{"2":{"353":1}}],["transfertransaction",{"2":{"353":2}}],["transfers",{"0":{"353":1,"631":1},"2":{"110":1,"112":1,"114":1,"307":2,"308":2,"309":2,"629":2,"630":2,"633":2,"634":2}}],["transfer",{"0":{"631":1},"2":{"58":1,"68":1,"182":3,"249":1,"306":2,"307":1,"308":7,"309":1,"339":2,"340":4,"351":1,"353":1,"602":4,"628":2,"629":1,"630":7,"633":7,"634":1}}],["transakonramp",{"2":{"78":2,"79":1}}],["transak",{"0":{"152":1},"2":{"77":3,"78":4,"79":2,"149":3,"150":6,"151":3,"152":3,"413":1,"414":1,"465":1,"466":1}}],["transact",{"2":{"58":1}}],["transactionfailed",{"2":{"578":2,"609":1}}],["transactionindex",{"2":{"576":4}}],["transactionno",{"2":{"575":1}}],["transactionnonativereceiptanynative",{"2":{"575":1}}],["transactionnoreceiptsmetatxnreceipt",{"2":{"575":1}}],["transactionnoreceiptmetatxnreceiptreceipt",{"2":{"575":1}}],["transactionnorevertreasonstring",{"2":{"575":1}}],["transactionnorequestsendtransactionpayloadthe",{"2":{"575":1}}],["transactionnometatxhashstringhash",{"2":{"575":1}}],["transactionnowalletstringaddress",{"2":{"543":1}}],["transactionyessimulationssimulateresult",{"2":{"575":1}}],["transactionyes",{"2":{"544":1,"546":1,"547":1}}],["transactionreceipt",{"2":{"338":2,"340":4,"351":2,"353":1,"360":2,"362":4,"575":1,"576":1,"608":1}}],["transactionreturn",{"2":{"107":1}}],["transactioncreator",{"2":{"340":4,"351":2}}],["transactioncount",{"0":{"337":1},"2":{"337":2}}],["transactioncall",{"2":{"329":2}}],["transactionbyhash",{"0":{"336":1},"2":{"336":1}}],["transaction2",{"2":{"306":2,"307":2,"308":2,"309":2,"628":2,"629":2,"630":2,"633":2,"634":2}}],["transaction1",{"2":{"306":2,"307":2,"308":2,"309":2,"628":2,"629":2,"630":2,"633":2,"634":2}}],["transactionhash",{"2":{"333":1,"336":1,"338":1,"359":1,"576":4}}],["transactionhashes",{"2":{"239":1,"361":1}}],["transactionhistory",{"2":{"171":1,"239":2,"241":2}}],["transactionhistoryfilter",{"2":{"87":2,"239":1,"241":1}}],["transaction",{"0":{"57":1,"87":1,"182":1,"183":1,"184":1,"185":1,"186":1,"187":1,"193":1,"238":1,"239":1,"241":1,"248":1,"349":1,"543":1,"544":1,"571":1,"575":1,"578":1,"608":1,"609":1,"631":1},"1":{"239":1,"544":1,"545":1,"546":1,"547":1,"548":1,"576":1,"577":1,"579":1,"609":1},"2":{"27":2,"55":2,"56":2,"57":2,"58":2,"69":1,"87":2,"98":1,"107":3,"108":4,"109":2,"110":1,"111":2,"112":1,"113":4,"114":1,"115":4,"116":6,"117":6,"181":3,"182":3,"183":2,"184":2,"185":2,"186":10,"187":6,"188":1,"193":1,"196":1,"202":1,"210":1,"213":1,"239":7,"241":4,"247":1,"248":2,"249":7,"279":1,"306":1,"307":4,"308":4,"309":4,"310":4,"329":1,"333":3,"336":4,"338":1,"340":4,"347":1,"349":2,"351":3,"353":1,"359":1,"360":1,"361":3,"362":2,"388":1,"392":2,"402":1,"406":1,"439":1,"490":3,"495":1,"498":1,"503":1,"506":2,"508":3,"509":4,"510":1,"529":1,"541":2,"543":2,"544":1,"548":3,"559":1,"566":2,"568":4,"569":2,"570":2,"571":1,"575":5,"576":1,"577":1,"578":4,"579":1,"588":2,"602":2,"608":11,"609":2,"617":1,"627":1,"628":1,"629":4,"630":4,"633":4,"634":4,"635":4}}],["transactions",{"0":{"55":1,"116":1,"122":1,"192":1,"213":1,"224":1,"249":1,"306":1,"310":1,"628":1,"635":1},"1":{"56":1,"57":1,"58":1,"214":1,"215":1,"225":1,"226":1},"2":{"18":2,"25":2,"27":1,"52":1,"55":5,"56":10,"57":2,"58":7,"107":1,"116":5,"117":12,"122":3,"181":2,"187":5,"192":1,"193":1,"203":1,"224":1,"247":4,"248":1,"249":8,"306":4,"307":1,"308":1,"309":1,"337":1,"348":1,"349":2,"350":2,"361":3,"362":3,"391":1,"392":1,"425":1,"489":2,"490":1,"504":1,"509":2,"510":1,"513":1,"527":1,"542":1,"543":1,"544":1,"548":2,"559":1,"564":2,"576":1,"578":2,"595":1,"608":2,"609":3,"616":1,"628":4,"629":1,"630":1,"633":1,"634":1}}],["tradeoff",{"2":{"471":1}}],["trades",{"2":{"244":1}}],["traditional",{"2":{"203":1,"210":1,"467":1,"559":1,"560":1}}],["trading",{"2":{"37":1,"203":1,"246":1}}],["trait",{"2":{"48":8}}],["trackers",{"2":{"274":2,"622":2}}],["track",{"2":{"24":1,"212":1,"241":1,"348":1,"598":1}}],["tracking",{"2":{"13":1,"220":1,"244":1}}],["trying",{"2":{"256":1,"260":1,"463":1,"483":1,"487":1}}],["try",{"0":{"6":1,"60":1,"409":1,"432":1,"478":1},"2":{"18":1,"37":1,"60":1,"79":1,"127":1,"159":1,"229":1,"230":1,"232":1,"239":1,"241":1,"274":1,"345":2,"432":1,"474":1,"475":1,"478":1,"598":1,"603":1,"609":1,"622":1}}],["troubles",{"2":{"0":1}}],["tampered",{"2":{"555":1,"563":1}}],["tampering",{"2":{"175":1}}],["taking",{"2":{"303":1}}],["taken",{"2":{"430":1,"509":1}}],["takes",{"2":{"281":1,"536":1,"614":1}}],["take",{"2":{"8":1,"51":1,"69":1,"94":1,"105":1,"107":1,"137":1,"159":2,"261":1,"339":1,"412":1,"420":1,"464":1,"467":1,"488":1,"553":1,"556":2,"564":1}}],["tag",{"2":{"298":1}}],["tank",{"0":{"204":1},"2":{"202":1}}],["tablet",{"2":{"474":1,"475":1}}],["tab",{"2":{"159":3,"190":1,"196":1,"399":1}}],["tarray",{"2":{"119":1,"120":1,"142":2,"151":1,"152":1,"181":2,"185":1,"187":2}}],["targets",{"2":{"369":1}}],["target",{"2":{"20":1,"30":1,"37":1,"40":1,"43":1,"44":2,"52":1,"139":2,"229":1}}],["tailored",{"2":{"210":1,"304":1}}],["tailor",{"2":{"78":2,"150":1}}],["tasks",{"2":{"345":1,"347":1}}],["task",{"2":{"44":1,"69":2,"79":1,"82":1,"83":1,"84":1,"85":1,"86":1,"94":2,"107":1,"117":1,"340":1,"365":2}}],["taskid",{"2":{"44":3}}],["talking",{"2":{"0":1}}],["tackle",{"2":{"0":1}}],["thumb",{"2":{"347":1}}],["thus",{"2":{"56":1}}],["than",{"2":{"106":1,"173":1,"274":1,"279":1,"472":1,"602":1,"622":1,"627":1}}],["that",{"0":{"631":1},"2":{"0":1,"2":1,"3":3,"5":1,"11":2,"12":1,"16":1,"18":1,"20":1,"24":1,"25":7,"46":1,"48":2,"49":2,"50":2,"55":1,"57":1,"58":5,"65":1,"68":1,"69":1,"75":2,"76":3,"78":2,"80":1,"86":3,"88":1,"93":2,"97":2,"98":1,"101":1,"105":1,"107":1,"108":1,"109":1,"110":2,"112":2,"114":2,"115":3,"116":1,"117":6,"119":1,"122":1,"124":1,"127":1,"132":1,"139":1,"151":1,"152":1,"159":2,"161":1,"190":2,"192":1,"200":1,"204":1,"216":1,"220":2,"229":1,"248":1,"253":3,"262":1,"268":1,"280":2,"281":1,"286":1,"294":1,"303":2,"304":1,"310":1,"312":2,"321":1,"339":1,"340":1,"341":1,"345":3,"347":2,"349":1,"356":2,"361":1,"362":1,"365":1,"366":3,"369":1,"374":1,"379":1,"380":3,"383":1,"385":1,"386":1,"388":2,"392":2,"393":1,"405":1,"407":1,"412":1,"413":1,"419":1,"424":2,"451":1,"465":1,"467":3,"468":1,"470":1,"471":2,"472":2,"480":1,"489":1,"491":2,"494":1,"495":1,"496":1,"501":1,"502":1,"503":2,"504":1,"506":1,"509":1,"516":2,"518":1,"522":1,"527":1,"529":1,"530":1,"533":1,"534":1,"535":1,"539":2,"541":3,"544":1,"546":1,"549":1,"553":1,"554":1,"555":1,"556":2,"559":1,"560":1,"563":3,"564":3,"565":1,"567":4,"568":1,"569":1,"570":1,"575":2,"578":1,"590":2,"598":1,"600":2,"601":1,"602":11,"605":1,"611":1,"614":1,"616":1,"618":1,"635":1}}],["thought",{"2":{"103":1,"107":1}}],["those",{"2":{"8":1,"58":1,"304":1,"480":1,"602":1}}],["threat",{"0":{"565":1},"1":{"567":1,"568":1,"569":1,"570":1,"571":1}}],["threads",{"2":{"378":1}}],["threshold",{"0":{"529":1},"2":{"471":1,"497":1,"498":1,"502":1,"503":1,"514":1,"515":1,"516":1,"517":1,"520":2,"521":2,"523":2,"528":1,"529":2,"532":1,"534":5,"535":2}}],["three",{"2":{"57":1,"468":3,"603":2}}],["thrown",{"2":{"347":1}}],["throwing",{"2":{"345":1}}],["throw",{"2":{"81":1,"345":2,"603":1}}],["throughif",{"2":{"206":1}}],["throughout",{"2":{"128":1,"356":1}}],["through",{"2":{"1":1,"3":1,"9":1,"10":1,"19":1,"115":1,"123":1,"129":2,"207":1,"251":1,"253":1,"280":1,"312":1,"369":1,"453":1,"514":2,"515":2,"516":1,"553":1,"561":1,"610":1}}],["thing",{"2":{"161":1}}],["things",{"2":{"24":1,"57":1,"77":1,"127":1,"149":1,"322":1,"396":1,"534":2}}],["think",{"2":{"67":1,"88":1,"278":1,"280":1,"304":1,"556":1,"626":1}}],["thirdweb",{"2":{"429":1}}],["third",{"2":{"11":1,"75":1,"563":1}}],["this",{"2":{"2":5,"3":2,"12":1,"13":1,"16":5,"21":1,"24":3,"25":2,"30":1,"33":1,"43":1,"48":2,"50":1,"64":1,"68":5,"69":2,"73":1,"74":3,"75":2,"76":3,"78":1,"80":1,"82":2,"84":6,"85":1,"88":3,"93":12,"94":1,"97":2,"98":2,"105":2,"107":1,"108":3,"109":2,"110":1,"111":1,"112":1,"113":1,"114":1,"115":7,"117":5,"124":1,"127":2,"128":1,"129":16,"130":2,"132":1,"133":1,"141":1,"142":1,"143":1,"144":1,"145":1,"146":1,"147":1,"148":1,"150":1,"152":1,"153":1,"159":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"171":1,"173":2,"174":2,"178":1,"180":3,"181":2,"186":2,"203":2,"206":1,"207":1,"210":2,"229":2,"241":2,"243":2,"247":1,"249":2,"251":2,"252":3,"253":5,"254":1,"273":7,"280":5,"281":1,"285":1,"304":1,"311":1,"316":2,"320":2,"322":1,"339":1,"352":1,"353":1,"354":1,"355":1,"365":4,"366":4,"369":5,"370":2,"371":1,"372":1,"374":4,"378":3,"379":2,"380":2,"387":1,"388":1,"389":1,"395":1,"396":2,"397":2,"398":1,"399":2,"403":3,"404":3,"405":3,"407":1,"412":1,"414":1,"419":1,"424":1,"429":1,"430":2,"431":2,"451":1,"453":1,"456":1,"457":1,"466":1,"468":1,"470":3,"471":1,"475":1,"480":1,"489":2,"490":1,"491":1,"494":1,"495":2,"497":2,"498":1,"502":1,"503":3,"504":2,"505":1,"506":1,"509":1,"511":1,"512":2,"514":1,"515":1,"516":1,"520":1,"522":1,"525":1,"533":2,"534":3,"535":1,"538":1,"541":4,"542":1,"543":1,"547":1,"548":3,"549":1,"553":1,"555":2,"556":1,"557":1,"559":1,"561":2,"563":1,"564":3,"565":4,"567":3,"572":1,"575":2,"578":3,"589":1,"590":1,"591":2,"592":2,"593":1,"597":1,"598":1,"601":3,"602":9,"605":1,"607":1,"608":1,"609":4,"611":1,"612":1,"613":1,"614":1,"616":1,"618":1,"621":7}}],["they",{"0":{"557":1},"2":{"24":1,"48":1,"50":1,"51":1,"55":1,"58":1,"68":1,"76":1,"79":1,"84":1,"93":2,"115":1,"117":2,"151":1,"204":1,"273":1,"281":1,"291":2,"303":1,"312":3,"340":1,"345":1,"346":1,"366":2,"380":1,"424":1,"449":1,"450":1,"468":1,"525":1,"534":2,"538":1,"539":1,"556":1,"562":1,"590":1,"599":1,"621":1}}],["their",{"2":{"11":1,"48":1,"51":1,"56":1,"68":1,"77":1,"84":1,"93":1,"102":1,"115":2,"117":4,"149":1,"151":1,"152":1,"203":1,"252":1,"253":1,"256":1,"260":1,"273":3,"280":3,"281":1,"303":2,"311":1,"312":3,"351":1,"365":1,"366":5,"367":1,"370":1,"382":1,"392":1,"406":1,"413":1,"430":6,"431":2,"463":1,"465":1,"467":3,"468":5,"469":3,"470":1,"471":4,"483":1,"487":1,"490":1,"517":1,"518":1,"528":1,"533":1,"541":1,"548":1,"557":1,"559":1,"564":1,"591":1,"602":1,"607":1,"611":1,"612":1,"621":3}}],["then",{"2":{"8":1,"22":1,"24":1,"33":1,"34":1,"54":1,"84":1,"117":1,"127":2,"136":1,"137":1,"159":1,"174":1,"178":1,"195":2,"196":3,"197":2,"201":1,"209":1,"253":2,"273":3,"274":1,"279":1,"280":1,"289":1,"312":1,"360":1,"362":1,"366":1,"367":1,"376":2,"390":1,"398":1,"407":1,"452":1,"504":1,"530":1,"559":1,"568":1,"595":1,"621":3,"622":1,"627":1}}],["theses",{"2":{"387":1}}],["these",{"2":{"8":2,"75":1,"76":1,"81":1,"88":1,"93":1,"98":1,"105":1,"116":1,"119":1,"127":1,"129":3,"133":2,"156":1,"158":1,"174":1,"175":1,"178":1,"213":1,"224":1,"321":2,"350":1,"351":2,"392":1,"396":2,"415":1,"424":1,"430":1,"434":1,"441":1,"458":1,"471":1,"472":2,"495":1,"503":1,"525":1,"552":1,"559":1,"564":1,"565":1}}],["theme=",{"2":{"378":2}}],["theme",{"0":{"292":1},"2":{"281":2,"292":2,"443":1}}],["themselves",{"2":{"51":1,"471":1,"505":1}}],["them",{"2":{"8":1,"49":1,"56":1,"58":1,"68":1,"84":1,"98":1,"103":1,"111":1,"117":1,"122":1,"123":1,"141":1,"142":1,"143":1,"144":1,"145":1,"146":1,"147":1,"148":1,"152":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"171":1,"173":1,"180":1,"186":1,"204":1,"256":1,"260":1,"312":1,"321":1,"345":1,"361":1,"362":1,"366":1,"380":1,"431":1,"463":1,"471":1,"483":1,"487":1,"538":1,"539":1,"541":2,"609":1}}],["therefore",{"2":{"69":1,"251":1,"522":1}}],["there",{"2":{"3":1,"48":1,"69":1,"75":1,"76":1,"78":2,"97":1,"105":1,"246":1,"253":1,"321":1,"322":1,"354":1,"371":1,"504":1,"505":1,"567":1}}],["the",{"0":{"12":1,"120":1,"128":1,"161":1,"186":1,"204":1,"239":1,"241":1,"252":1,"253":1,"272":1,"302":1,"370":1,"399":1,"404":1,"435":1,"436":2,"437":1,"438":1,"459":1,"460":2,"511":1,"512":1,"521":1,"553":1,"554":1,"567":1,"570":1,"620":1},"1":{"439":1,"440":1,"512":1},"2":{"0":6,"1":4,"2":7,"3":13,"4":2,"5":1,"6":8,"7":1,"8":4,"9":4,"11":1,"12":2,"13":3,"14":1,"16":6,"17":4,"19":4,"20":12,"21":2,"22":2,"23":2,"24":11,"25":21,"26":1,"27":5,"28":3,"29":1,"30":1,"32":2,"35":2,"36":8,"37":14,"38":4,"39":5,"40":8,"42":1,"43":2,"44":6,"46":5,"48":7,"49":6,"50":8,"51":3,"52":10,"55":4,"56":9,"57":1,"58":9,"60":1,"63":4,"64":2,"65":2,"66":1,"67":1,"68":8,"69":7,"72":1,"73":2,"74":1,"75":7,"76":11,"78":2,"79":2,"80":1,"81":1,"82":7,"83":2,"84":9,"85":2,"86":6,"87":3,"88":14,"89":1,"90":1,"91":1,"93":34,"94":4,"96":3,"97":6,"98":5,"99":1,"100":4,"101":3,"102":3,"103":4,"104":1,"105":16,"106":1,"107":5,"108":6,"109":5,"110":4,"111":1,"112":4,"113":4,"114":4,"115":27,"116":5,"117":24,"118":1,"119":3,"120":10,"121":2,"122":3,"123":8,"124":1,"127":15,"128":4,"129":20,"130":4,"131":6,"132":3,"133":4,"134":1,"136":6,"137":8,"139":4,"142":1,"143":1,"144":1,"145":1,"146":1,"147":2,"148":1,"150":5,"151":3,"152":4,"153":2,"155":1,"157":2,"159":29,"161":7,"173":4,"174":5,"175":2,"177":3,"178":1,"180":1,"181":1,"182":10,"183":3,"184":3,"185":7,"186":1,"187":12,"188":1,"189":3,"190":8,"191":2,"192":2,"193":2,"194":5,"195":7,"196":15,"197":5,"198":4,"199":4,"200":2,"201":9,"203":1,"204":2,"206":1,"208":3,"210":11,"212":1,"213":2,"219":6,"220":2,"221":2,"224":1,"227":7,"229":8,"230":5,"232":2,"235":1,"239":4,"241":6,"243":8,"244":2,"246":29,"247":2,"248":6,"249":8,"251":7,"252":13,"253":24,"254":5,"255":3,"256":2,"259":3,"260":2,"261":2,"262":2,"263":2,"265":1,"266":2,"268":2,"269":2,"272":1,"273":12,"274":8,"276":1,"277":1,"278":1,"279":5,"280":7,"281":11,"282":1,"283":1,"285":2,"287":2,"290":3,"291":1,"292":2,"293":1,"294":1,"295":1,"296":1,"298":5,"299":2,"300":6,"301":1,"303":25,"304":3,"306":2,"307":4,"308":2,"309":4,"310":6,"312":4,"315":1,"316":2,"317":2,"318":1,"319":4,"320":4,"321":2,"322":13,"323":1,"324":1,"325":1,"326":1,"327":3,"328":1,"329":2,"331":3,"332":1,"333":2,"335":1,"337":1,"338":1,"339":4,"340":12,"341":2,"342":6,"343":1,"345":4,"346":2,"347":2,"348":1,"349":2,"350":1,"351":5,"352":2,"353":4,"354":3,"356":3,"357":2,"358":2,"359":2,"360":3,"361":8,"362":9,"363":8,"364":8,"365":16,"366":19,"367":8,"368":1,"369":8,"370":3,"371":6,"372":10,"374":3,"376":5,"378":10,"379":3,"380":5,"381":4,"382":6,"383":3,"384":1,"385":4,"386":2,"388":4,"389":1,"390":3,"391":9,"392":1,"393":1,"396":1,"397":3,"398":2,"399":2,"400":2,"402":2,"403":4,"404":5,"405":5,"406":2,"407":4,"411":2,"412":4,"413":5,"414":2,"419":9,"420":2,"421":1,"424":3,"427":4,"429":3,"430":27,"431":4,"432":1,"433":1,"434":1,"437":2,"438":2,"439":1,"440":3,"441":3,"443":5,"444":4,"445":2,"446":2,"447":2,"448":2,"449":7,"450":7,"451":5,"452":5,"453":1,"454":3,"455":4,"456":2,"457":1,"458":1,"461":1,"462":3,"463":4,"464":2,"465":5,"466":2,"467":7,"468":9,"469":1,"470":3,"471":9,"472":3,"475":1,"478":1,"480":2,"482":3,"483":2,"486":3,"487":2,"488":2,"489":3,"490":8,"491":18,"492":8,"493":2,"494":8,"495":4,"496":5,"497":11,"498":6,"500":2,"501":3,"502":3,"503":16,"504":16,"505":4,"506":3,"507":4,"508":3,"509":14,"510":3,"511":6,"512":8,"514":7,"515":8,"516":13,"519":2,"521":2,"522":11,"524":8,"525":11,"527":6,"528":4,"529":6,"530":4,"531":3,"532":5,"533":5,"534":14,"535":8,"536":23,"538":10,"539":8,"540":3,"541":14,"542":4,"543":5,"544":1,"546":2,"547":2,"548":13,"549":6,"550":1,"552":1,"553":5,"554":15,"555":11,"556":3,"557":23,"559":11,"560":2,"561":6,"562":6,"563":22,"564":11,"565":11,"566":5,"567":9,"568":8,"569":2,"570":3,"571":4,"572":1,"573":3,"575":29,"577":1,"578":9,"579":1,"580":2,"582":1,"583":2,"585":1,"586":2,"587":1,"588":1,"589":2,"590":11,"591":6,"592":10,"593":5,"595":4,"597":10,"598":16,"599":1,"600":6,"601":26,"602":57,"603":6,"605":1,"606":2,"607":2,"608":9,"609":5,"610":1,"612":1,"613":3,"614":9,"616":4,"617":1,"618":3,"620":1,"621":12,"622":8,"624":1,"625":1,"626":1,"627":6,"628":2,"629":4,"630":2,"633":2,"634":4,"635":6}}],["tolerance",{"2":{"550":1}}],["tolower",{"2":{"86":3}}],["tostringthe",{"2":{"548":1}}],["tosharedref",{"2":{"187":1}}],["torus",{"0":{"471":1},"2":{"468":3,"471":7}}],["toying",{"2":{"443":1}}],["touch",{"2":{"372":1,"430":1}}],["toggleaddfunds",{"2":{"461":2}}],["toggle",{"2":{"229":2,"230":1,"239":1,"243":1}}],["toggling",{"2":{"190":1,"204":1}}],["together",{"2":{"115":1,"116":2,"187":1,"346":1,"361":1,"362":1,"534":2,"559":1}}],["tohex",{"2":{"185":1}}],["toaddress",{"2":{"109":1,"110":1,"111":1,"112":1,"113":1,"114":1,"115":1,"116":4,"117":2,"340":4,"351":2}}],["took",{"2":{"470":1}}],["too",{"2":{"36":1,"254":1,"280":2,"281":1}}],["tools=",{"2":{"378":2}}],["toolset",{"2":{"101":1}}],["tools",{"0":{"106":1},"2":{"67":1,"106":1,"254":1,"255":1,"259":1,"278":1,"378":2,"462":1,"482":1,"486":1,"489":1,"552":1,"555":1,"626":1}}],["tool",{"2":{"25":1}}],["toolkit",{"2":{"7":1,"67":1,"255":1,"259":1,"278":1,"462":1,"482":1,"486":1,"626":1,"627":1}}],["total",{"0":{"214":1,"217":1,"225":1,"243":1},"2":{"27":3,"85":1,"190":1,"192":1,"193":1,"213":1,"216":1,"224":1,"243":1,"427":3,"518":1,"533":1,"534":2}}],["topics",{"2":{"575":1,"576":5,"608":2}}],["topic",{"2":{"235":1}}],["topichashes",{"2":{"235":1}}],["toptional",{"2":{"123":6,"141":1,"142":1,"143":1,"144":1,"145":1,"146":1,"147":1,"148":1,"152":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"171":1,"180":1,"186":1,"187":2}}],["top",{"0":{"528":1},"1":{"529":1,"530":1,"531":1,"532":1,"533":1,"534":1},"2":{"25":1,"93":1,"105":1,"159":1,"190":1,"195":1,"411":1,"441":1,"444":3,"559":1}}],["tokenresponse",{"2":{"598":2}}],["tokennovals",{"2":{"547":1}}],["tokenyesproof",{"2":{"541":1}}],["tokenbaseuri",{"2":{"404":2}}],["tokenbalance",{"2":{"84":7}}],["tokenbalancesdictionary",{"2":{"84":1}}],["tokenbalances",{"2":{"21":1,"22":1,"84":9,"167":1,"229":4,"232":1}}],["token2id",{"2":{"307":1,"629":1}}],["token1id",{"2":{"307":1,"629":1}}],["token4id",{"2":{"306":1,"628":1}}],["tokencontract",{"2":{"246":1}}],["tokendetails",{"2":{"243":4}}],["tokenaddress",{"2":{"182":1,"183":1,"184":1}}],["tokenmap",{"2":{"169":3}}],["tokenmetadata",{"2":{"43":2,"44":1}}],["tokeninfopage",{"2":{"100":1}}],["tokenidasstring",{"2":{"111":1,"113":1,"116":2}}],["tokenids",{"2":{"43":3,"44":3,"84":1,"235":1,"245":2,"246":1,"411":1}}],["tokenid",{"2":{"3":4,"37":1,"39":3,"48":1,"49":1,"58":3,"84":1,"114":1,"246":2,"306":1,"307":1,"309":4,"405":2,"440":1,"628":1,"629":1,"634":4}}],["tokenuri",{"2":{"48":2}}],["tokensupply",{"2":{"86":3}}],["tokensuppliesmap",{"2":{"169":1}}],["tokensupplies",{"2":{"85":1,"168":1}}],["tokens",{"0":{"3":1,"228":1,"229":1,"242":1,"243":1,"307":1,"308":1,"309":1,"351":1,"629":1,"630":1,"631":1,"633":1,"634":1},"1":{"229":1,"230":1,"243":1,"631":1,"632":1},"2":{"3":8,"24":1,"25":4,"27":4,"29":1,"37":2,"39":3,"41":1,"42":1,"43":1,"51":3,"56":1,"58":6,"84":3,"109":1,"110":1,"111":1,"112":1,"113":2,"114":1,"117":2,"229":3,"232":1,"243":1,"246":2,"300":1,"351":1,"352":1,"403":1,"405":1,"406":2,"407":4,"425":1,"431":1,"457":1,"545":1,"547":1,"592":1,"601":1}}],["token",{"0":{"2":1,"16":1,"42":1,"43":1,"44":1,"46":1,"84":1,"85":1,"86":1,"201":1,"230":1,"240":1,"396":1,"631":2},"1":{"43":1,"44":1,"45":2,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"86":1,"241":1},"2":{"1":2,"2":4,"3":6,"16":4,"19":1,"24":2,"25":7,"27":4,"29":2,"32":2,"36":4,"37":7,"39":3,"41":3,"42":6,"43":2,"44":2,"45":7,"46":2,"48":3,"49":3,"50":1,"51":3,"58":4,"68":1,"84":3,"85":1,"86":4,"108":1,"109":4,"111":2,"113":4,"129":1,"131":2,"194":2,"196":1,"201":3,"212":1,"220":1,"229":5,"230":1,"234":1,"235":1,"239":4,"241":4,"243":8,"245":1,"246":3,"247":1,"249":2,"306":2,"307":3,"308":4,"309":3,"395":1,"396":5,"397":4,"404":2,"405":2,"406":1,"407":2,"413":1,"431":1,"465":1,"545":1,"546":1,"547":1,"548":3,"564":1,"601":7,"602":11,"603":7,"616":1,"628":2,"629":3,"630":4,"633":4,"634":3}}],["today",{"2":{"0":1,"19":1,"247":1}}],["to",{"0":{"95":1,"107":1,"178":1,"179":1,"203":1,"205":1,"234":1,"235":1,"236":1,"237":1,"241":1,"258":1,"302":1,"394":1,"402":1,"428":1,"485":1,"507":1,"568":1,"577":1,"579":1,"582":1,"585":1,"587":1,"631":2},"1":{"96":1,"97":1,"108":1,"109":1,"110":1,"111":1,"112":1,"113":1,"114":1,"115":1,"116":1,"117":1,"180":1,"181":1,"182":1,"183":1,"184":1,"185":1,"186":1,"187":1,"235":1,"236":1,"237":1,"395":1,"396":1,"397":1,"398":1,"399":1,"400":1,"401":1,"402":1,"403":1,"404":1,"405":1,"406":1,"407":1,"429":1,"430":1},"2":{"0":5,"1":3,"2":8,"3":10,"5":2,"6":5,"7":2,"8":4,"9":3,"10":2,"11":2,"12":5,"13":2,"16":7,"17":2,"19":3,"20":3,"21":1,"22":1,"24":11,"25":16,"27":2,"28":6,"29":4,"30":1,"32":3,"36":4,"37":13,"40":2,"42":4,"43":3,"44":4,"46":4,"48":1,"49":2,"50":5,"52":3,"56":5,"57":2,"58":7,"63":1,"64":2,"65":3,"68":6,"69":6,"74":2,"75":5,"76":8,"77":4,"78":3,"79":1,"82":1,"83":1,"84":11,"85":2,"86":3,"87":4,"88":6,"93":12,"94":3,"98":7,"101":2,"102":2,"103":2,"104":2,"105":10,"106":4,"107":5,"108":5,"109":5,"110":4,"111":1,"112":4,"113":2,"114":4,"115":19,"116":3,"117":13,"118":1,"119":1,"120":8,"122":1,"123":7,"127":6,"128":1,"129":18,"130":3,"131":9,"132":3,"133":6,"134":2,"136":3,"137":6,"139":3,"141":2,"142":1,"143":1,"144":1,"145":1,"146":2,"147":2,"148":1,"149":4,"150":1,"151":1,"152":1,"155":2,"156":1,"157":4,"158":1,"159":8,"161":2,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"171":1,"173":5,"174":2,"175":2,"177":2,"178":3,"180":2,"181":4,"182":8,"183":2,"184":2,"185":4,"186":1,"187":2,"188":4,"189":1,"190":2,"194":5,"195":3,"196":3,"197":2,"198":3,"199":1,"201":7,"202":1,"203":1,"204":1,"206":1,"207":1,"208":1,"209":1,"210":6,"212":1,"220":1,"221":1,"222":1,"223":2,"224":1,"229":7,"230":6,"234":2,"239":7,"241":5,"243":9,"244":2,"246":1,"247":1,"248":1,"249":6,"251":1,"252":3,"253":2,"254":6,"256":1,"260":1,"261":1,"262":1,"265":1,"266":1,"268":2,"272":1,"273":11,"274":4,"279":2,"280":9,"281":10,"283":1,"287":1,"288":1,"290":1,"291":3,"294":1,"295":1,"296":1,"297":1,"298":2,"299":1,"300":5,"303":7,"304":5,"306":11,"307":7,"308":7,"309":7,"310":5,"311":1,"312":3,"316":2,"318":1,"320":1,"321":2,"322":5,"323":1,"324":1,"325":1,"326":1,"327":2,"328":1,"331":2,"332":2,"333":1,"334":1,"335":1,"336":1,"337":1,"338":1,"339":5,"340":7,"341":3,"342":4,"343":1,"345":2,"346":1,"347":4,"348":1,"349":1,"351":4,"352":3,"353":2,"356":1,"361":1,"362":1,"363":2,"364":6,"365":5,"366":8,"367":4,"368":5,"369":7,"370":3,"371":4,"372":8,"374":2,"375":1,"376":2,"377":1,"378":6,"379":4,"380":1,"381":7,"382":6,"383":8,"385":3,"386":3,"389":3,"390":4,"392":4,"393":1,"397":2,"398":1,"400":1,"402":1,"403":5,"404":4,"405":6,"406":2,"407":3,"409":1,"410":1,"412":2,"413":5,"414":1,"419":3,"420":1,"422":3,"424":2,"427":4,"429":1,"430":15,"431":7,"433":1,"434":1,"437":1,"441":1,"445":1,"446":1,"447":1,"449":2,"450":2,"451":1,"453":1,"454":6,"455":3,"456":1,"457":2,"458":1,"461":2,"463":4,"464":1,"465":5,"466":1,"467":4,"468":2,"469":1,"470":1,"471":7,"472":5,"474":1,"475":2,"480":3,"483":1,"487":1,"488":1,"489":1,"491":1,"492":1,"493":2,"494":2,"495":1,"496":1,"497":3,"498":2,"499":1,"500":1,"501":1,"503":4,"504":8,"505":2,"506":1,"507":2,"509":2,"510":2,"511":3,"512":3,"513":1,"514":1,"516":2,"518":1,"522":1,"525":2,"527":1,"528":1,"529":1,"530":2,"531":1,"532":2,"533":2,"534":4,"538":4,"539":3,"541":4,"542":2,"543":1,"544":2,"545":1,"546":2,"547":1,"548":12,"549":1,"554":1,"555":2,"556":4,"557":8,"559":7,"560":6,"561":3,"562":4,"563":3,"564":2,"565":5,"567":4,"568":3,"569":2,"570":1,"571":1,"575":1,"576":1,"578":2,"590":1,"592":2,"593":6,"595":2,"597":5,"598":8,"599":1,"600":3,"601":5,"602":5,"603":1,"607":1,"608":3,"609":3,"611":1,"612":4,"613":1,"614":1,"616":2,"617":2,"618":1,"620":1,"621":11,"622":4,"627":3,"628":11,"629":7,"630":7,"633":7,"634":7,"635":5}}],["azp",{"2":{"601":1}}],["azure",{"2":{"382":1,"404":1}}],["aa",{"0":{"427":1},"2":{"427":1}}],["ahead",{"2":{"389":1,"393":1}}],["avoid",{"2":{"281":1,"454":1,"598":1}}],["avalanche",{"0":{"232":1}}],["avax",{"0":{"232":1}}],["availability",{"2":{"25":1}}],["available",{"0":{"442":1},"1":{"443":1,"444":1,"445":1,"446":1,"447":1,"448":1,"449":1,"450":1,"451":1},"2":{"4":1,"25":2,"36":2,"38":1,"64":1,"66":1,"93":1,"117":2,"187":1,"194":1,"251":2,"261":1,"262":1,"270":1,"276":1,"277":1,"280":1,"281":1,"292":1,"296":1,"320":1,"364":1,"383":1,"413":1,"424":1,"454":1,"464":1,"465":1,"488":1,"555":1,"563":1,"624":1,"625":1}}],["aws",{"2":{"555":2,"559":1,"560":1,"562":1,"563":1,"566":1,"568":1,"591":1}}],["awesome",{"2":{"280":1}}],["away",{"2":{"115":1,"202":1}}],["aware",{"2":{"11":1,"274":1,"374":1,"622":1}}],["awaitable",{"2":{"68":1}}],["await",{"2":{"6":1,"21":1,"30":1,"43":1,"44":2,"68":1,"69":2,"79":1,"82":1,"83":1,"84":5,"85":1,"86":1,"87":1,"94":2,"107":2,"117":3,"214":2,"215":2,"217":2,"218":2,"221":2,"222":2,"223":2,"225":2,"226":2,"229":1,"230":1,"232":1,"237":1,"239":1,"241":1,"243":1,"245":2,"247":1,"248":1,"249":2,"273":1,"274":2,"281":2,"282":1,"283":1,"286":1,"287":1,"288":1,"289":1,"290":1,"291":1,"292":1,"293":1,"294":1,"295":1,"296":1,"297":1,"298":1,"299":1,"300":1,"306":2,"307":3,"308":2,"309":3,"310":1,"314":1,"315":1,"316":1,"317":2,"318":1,"322":2,"323":1,"324":1,"325":1,"326":1,"327":1,"328":1,"329":1,"330":1,"331":1,"332":2,"333":1,"334":1,"335":1,"336":1,"337":1,"338":1,"340":6,"342":3,"343":1,"351":5,"353":2,"359":1,"360":1,"361":1,"362":1,"363":2,"496":1,"514":1,"515":1,"595":2,"597":4,"598":3,"599":1,"605":2,"606":3,"608":2,"609":2,"613":1,"614":2,"616":1,"617":1,"618":1,"621":1,"622":2,"628":2,"629":3,"630":2,"633":2,"634":3,"635":1}}],["ayourclass",{"2":{"129":2}}],["amazon",{"2":{"555":1,"563":1,"611":1}}],["among",{"2":{"534":1}}],["amountnovals",{"2":{"547":1}}],["amountrequiredraw",{"2":{"439":1}}],["amountstringamount",{"2":{"547":1}}],["amounts",{"2":{"430":1}}],["amountasbiginteger",{"2":{"340":4}}],["amountasstring",{"2":{"109":1,"113":1,"116":2}}],["amount1",{"2":{"307":1,"308":1,"309":1,"629":1,"630":1,"633":1,"634":1}}],["amount4",{"2":{"306":1,"628":1}}],["amount3",{"2":{"306":1,"628":1}}],["amount2",{"2":{"306":1,"307":1,"308":1,"309":1,"628":1,"629":1,"630":1,"633":1,"634":1}}],["amount",{"2":{"109":1,"110":1,"114":1,"115":1,"116":1,"117":2,"184":1,"299":2,"307":1,"308":2,"329":1,"405":1,"509":1,"548":2,"629":1,"630":2,"633":2}}],["amp",{"0":{"2":1,"4":1,"14":1,"16":1,"24":1,"26":1,"36":1,"124":1,"161":1,"491":1,"492":1},"1":{"37":1,"38":1,"39":1,"40":1,"41":1,"493":1,"494":1,"495":1,"496":1,"497":1,"498":1,"499":1,"500":1,"501":1,"502":1,"503":1,"504":1,"505":1,"506":1,"507":1,"508":1,"509":1,"510":1,"511":1,"512":1},"2":{"1":2,"2":1,"12":1,"16":1,"22":3,"27":1,"32":3,"36":1,"39":1,"121":1,"123":10,"127":1,"129":9,"130":1,"131":2,"132":2,"136":1,"141":3,"142":3,"143":4,"144":2,"145":2,"146":2,"147":2,"148":3,"151":1,"152":3,"162":3,"163":4,"164":4,"165":3,"166":4,"167":4,"168":4,"169":4,"170":4,"171":4,"180":4,"181":1,"185":2,"186":3,"187":9,"229":2,"230":2,"232":1,"237":1,"239":3,"241":3,"243":1,"247":1,"249":1,"412":2,"521":3,"598":2,"600":1,"602":2}}],["absolute",{"2":{"273":1,"621":1}}],["abstracted",{"2":{"115":1,"202":1}}],["abstraction",{"0":{"427":1},"2":{"56":1}}],["abiencodeable",{"2":{"120":2,"185":1}}],["abis",{"2":{"115":1,"351":1}}],["abi",{"0":{"120":1},"2":{"110":1,"112":1,"114":1,"115":5,"120":8,"185":6,"339":3,"340":1,"341":1,"351":1,"352":1,"516":1,"523":4,"533":1,"534":1,"535":2,"548":4}}],["ability",{"2":{"88":1,"194":1,"210":1,"431":1,"471":1,"559":1}}],["about",{"2":{"29":1,"37":1,"42":1,"51":1,"77":1,"79":1,"88":2,"120":1,"149":1,"151":1,"174":2,"188":1,"253":1,"281":1,"407":1,"412":1,"538":1,"556":1,"563":1}}],["above",{"0":{"253":1},"2":{"3":2,"24":1,"30":1,"37":3,"39":1,"73":1,"108":2,"109":1,"115":1,"117":1,"251":1,"252":1,"253":2,"273":1,"274":1,"281":1,"323":1,"326":1,"328":1,"330":1,"332":1,"366":1,"371":1,"514":1,"515":1,"521":1,"553":1,"554":1,"563":1,"621":1,"622":1}}],["able",{"2":{"24":1,"36":1,"76":1,"77":1,"127":1,"128":1,"133":1,"149":1,"280":3,"297":1,"300":1,"303":1,"366":1,"471":1,"514":1,"562":1,"563":1,"565":2,"569":1}}],["admire",{"0":{"406":1}}],["adapter",{"2":{"356":1}}],["advanced",{"0":{"118":1,"344":1},"1":{"119":1,"120":1,"121":1,"122":1,"345":1,"346":1,"347":1,"348":1,"349":1,"350":1},"2":{"76":1,"108":1,"345":1}}],["advantages",{"2":{"210":1}}],["advantage",{"2":{"51":1,"339":1}}],["adhere",{"2":{"24":1}}],["adds",{"2":{"467":1}}],["addr",{"2":{"532":1}}],["addrange",{"2":{"139":3}}],["addressno",{"2":{"583":1}}],["addressnovalsobject",{"2":{"547":1}}],["addressnovaluestringamount",{"2":{"545":1}}],["addressnovaluestringthe",{"2":{"544":1}}],["addressnoidstringtoken",{"2":{"546":1}}],["addressnotostringthe",{"2":{"545":1,"546":1,"547":1}}],["addressyes",{"2":{"541":1}}],["addresses",{"2":{"27":1,"30":2,"41":1,"58":2,"191":1,"229":1,"230":1,"234":2,"235":1,"239":2,"243":1,"246":1,"419":1,"495":2,"503":3,"561":1,"602":1}}],["address",{"0":{"30":1,"209":1,"239":1,"272":1,"525":1,"620":1},"2":{"22":1,"24":1,"27":2,"37":4,"41":1,"43":1,"44":1,"51":1,"69":1,"83":1,"84":2,"87":2,"93":1,"108":1,"110":1,"112":1,"114":1,"115":1,"117":1,"121":3,"129":1,"144":1,"168":1,"185":2,"209":1,"229":3,"230":4,"232":3,"235":1,"239":6,"241":5,"243":4,"246":5,"272":3,"273":3,"274":3,"279":1,"281":1,"295":1,"306":7,"307":8,"308":2,"309":8,"315":1,"328":1,"332":1,"339":1,"341":2,"342":2,"348":1,"351":2,"358":3,"364":1,"367":1,"388":2,"397":1,"403":1,"405":4,"407":1,"430":3,"489":1,"491":2,"494":1,"496":10,"504":1,"507":1,"512":2,"515":1,"519":3,"520":4,"522":1,"523":5,"524":3,"525":4,"532":2,"535":2,"536":2,"548":3,"561":1,"575":1,"576":5,"583":1,"586":1,"598":1,"601":2,"602":6,"605":2,"608":2,"609":1,"612":1,"620":3,"621":3,"622":3,"627":1,"628":7,"629":8,"630":2,"633":2,"634":8}}],["adddynamic",{"2":{"129":2}}],["additemsfromarraytolist",{"2":{"84":2}}],["additional",{"2":{"48":1,"49":1,"58":1,"93":1,"127":1,"188":1,"229":1,"230":1,"239":1,"243":1,"254":1,"280":1,"367":1,"377":1,"387":1,"420":1,"453":1,"470":2,"510":1,"521":1,"559":1,"586":1,"611":1,"612":2}}],["additionally",{"0":{"631":1},"2":{"9":1,"20":1,"31":1,"40":1,"48":1,"51":1,"52":1,"108":1,"212":1,"223":1,"254":1}}],["addition",{"2":{"37":1,"46":1,"69":1,"75":1,"102":1,"117":1,"253":1,"254":1}}],["adding",{"0":{"138":1,"461":1},"1":{"139":1},"2":{"58":1,"204":1,"385":1,"386":1}}],["added",{"2":{"31":1,"105":1,"198":1,"371":1,"374":1,"380":2,"471":1,"472":1,"534":1}}],["add",{"0":{"198":1},"2":{"2":2,"6":1,"16":2,"21":1,"53":1,"69":1,"72":1,"73":2,"76":3,"98":2,"129":1,"137":1,"139":2,"159":1,"169":1,"173":1,"174":1,"184":1,"185":2,"197":1,"198":2,"209":2,"281":1,"304":4,"367":1,"375":1,"376":1,"378":2,"379":1,"387":1,"435":1,"459":1,"461":1,"471":2,"480":4,"560":1}}],["aqaaaaaaaf",{"2":{"21":1,"22":1,"30":4,"33":1,"34":1,"43":4,"44":4,"229":3,"230":3,"232":3,"239":3,"241":3,"243":4}}],["aiming",{"2":{"13":1}}],["afford",{"2":{"117":1}}],["affected",{"2":{"12":1}}],["african",{"2":{"12":1}}],["afghanistan",{"2":{"12":1}}],["after",{"2":{"2":1,"16":1,"93":1,"105":1,"123":1,"129":2,"131":1,"159":1,"177":1,"196":1,"208":1,"246":1,"281":1,"290":2,"367":1,"378":1,"381":1,"385":2,"386":1,"397":1,"429":1,"430":2,"493":1,"580":1,"583":1,"590":1,"592":1,"602":1}}],["aud",{"2":{"601":1,"602":1}}],["audience",{"2":{"601":2,"602":1}}],["audit",{"2":{"563":1}}],["audited",{"2":{"559":1,"563":2}}],["audits",{"0":{"415":1},"1":{"416":1,"417":1,"418":1},"2":{"415":1}}],["audio",{"2":{"3":2}}],["automatic",{"0":{"618":1},"2":{"618":1}}],["automatically",{"2":{"25":3,"36":1,"56":1,"74":1,"76":1,"78":1,"81":1,"88":2,"93":2,"117":2,"123":2,"141":1,"150":1,"187":1,"254":1,"273":3,"285":1,"290":1,"294":1,"295":1,"364":1,"366":2,"369":1,"374":1,"401":1,"430":1,"475":1,"491":1,"533":1,"536":1,"595":1,"621":3}}],["auto",{"2":{"468":1}}],["autoconnect",{"2":{"253":2}}],["authorized",{"2":{"317":2,"377":1,"381":1,"601":2}}],["authorizenonce",{"0":{"288":1},"2":{"288":2}}],["authorize",{"0":{"287":1},"2":{"273":2,"281":1,"287":2,"312":2,"316":1,"621":2}}],["authorizationmessage",{"2":{"316":2,"317":1}}],["authorization",{"0":{"316":1,"317":1},"2":{"17":1,"214":1,"215":1,"217":1,"218":1,"221":1,"222":1,"223":1,"225":1,"226":1,"274":1,"602":2,"622":1}}],["authfailure",{"2":{"129":2}}],["authsuccess",{"2":{"129":3,"130":1,"131":1}}],["authrequirescode",{"2":{"129":4,"130":1}}],["auth",{"0":{"385":1,"386":1,"560":1,"568":1,"598":1},"1":{"561":1,"562":1,"563":1},"2":{"68":1,"129":1,"130":1,"133":1,"187":4,"247":1,"274":1,"284":1,"294":1,"385":1,"386":1,"554":2,"559":3,"560":2,"561":1,"563":1,"564":1,"565":2,"568":3,"593":2,"595":1,"598":2,"610":1,"612":1,"622":1}}],["authenticating",{"0":{"596":1},"1":{"597":1,"598":1,"599":1,"600":1,"601":1,"602":1,"603":1},"2":{"223":1,"365":1,"367":1,"432":1,"564":1,"593":1}}],["authentication",{"0":{"125":1,"130":1,"131":1,"132":1,"369":1},"1":{"126":1,"127":1,"128":1,"129":1,"130":1,"131":1,"132":1,"133":2,"134":2,"370":1},"2":{"63":1,"88":1,"93":1,"97":1,"123":1,"129":2,"130":1,"131":1,"312":1,"365":1,"369":4,"370":1,"383":1,"430":1,"449":1,"450":1,"468":1,"541":1,"560":1,"561":1,"593":1,"597":1,"598":4,"600":1,"601":2,"612":1}}],["authenticator",{"2":{"129":3,"130":1,"391":1,"554":2,"555":1}}],["authenticates",{"0":{"570":1},"2":{"430":1,"538":1,"541":1,"565":1}}],["authenticated",{"2":{"65":1,"382":1,"430":2,"489":1,"567":1,"601":1}}],["authenticate",{"0":{"271":1,"273":1,"274":1,"619":1,"621":1,"622":1},"1":{"272":1,"273":1,"274":1,"620":1,"621":1,"622":1},"2":{"6":1,"210":1,"273":2,"274":1,"561":1,"564":1,"593":1,"621":2,"622":1}}],["achieves",{"2":{"564":1}}],["acts",{"2":{"559":1}}],["actor",{"2":{"467":1,"470":1,"471":1}}],["actoin",{"2":{"430":1}}],["act",{"2":{"312":1}}],["acting",{"2":{"467":1}}],["activate",{"2":{"266":2}}],["activated",{"2":{"266":1}}],["activation",{"0":{"266":1}}],["activity",{"2":{"244":1,"303":1,"378":4,"470":1}}],["activities",{"2":{"203":1,"246":2}}],["active",{"2":{"142":1,"567":1,"606":1}}],["actions",{"2":{"312":1,"556":1,"564":1,"586":1,"616":1,"618":1}}],["action",{"0":{"538":1},"1":{"539":1,"540":1,"541":1,"542":1,"543":1,"544":1,"545":1,"546":1,"547":1,"548":1,"549":1},"2":{"200":1,"281":1,"312":1,"318":1,"378":8,"409":1,"538":2,"556":1,"557":1,"564":1,"567":2,"572":1,"590":1,"616":1,"618":1}}],["actually",{"2":{"310":1,"563":1,"635":1}}],["actual",{"2":{"6":1,"273":1,"281":1,"304":1,"480":1,"609":1,"621":1}}],["across",{"2":{"12":1,"20":1,"25":1,"46":1,"52":1,"210":1,"216":1,"383":1,"427":2,"457":1,"561":1,"601":1}}],["acquire",{"2":{"6":1,"64":1,"174":1,"598":1}}],["acc36ed4ef40db74137266e48d863083a5c7e85e2735d69adafcb5b362b6cfc0",{"2":{"576":3,"608":2}}],["accordance",{"2":{"178":1}}],["according",{"2":{"102":1}}],["account88",{"2":{"427":1}}],["account55",{"2":{"427":1}}],["account52",{"2":{"427":1}}],["accounts",{"0":{"366":1,"367":1,"421":1,"596":1},"1":{"367":1,"422":1,"423":1,"597":1,"598":1,"599":1,"600":1,"601":1,"602":1,"603":1},"2":{"57":2,"93":1,"235":2,"383":1,"420":1,"421":2,"589":1,"590":2,"592":4,"593":2,"601":1,"605":4}}],["accountaddresses",{"2":{"239":1}}],["accountaddress",{"2":{"22":2,"84":2,"87":1,"167":1,"171":1,"229":7,"230":6,"232":6,"239":4,"241":1}}],["account",{"0":{"2":1,"16":1,"427":2,"594":1},"1":{"595":1},"2":{"1":1,"2":2,"16":2,"22":1,"87":2,"93":3,"185":2,"229":5,"230":4,"232":4,"234":1,"239":5,"247":2,"248":1,"249":1,"273":1,"279":1,"281":1,"366":5,"386":1,"397":1,"400":1,"427":4,"468":3,"471":1,"472":1,"556":1,"560":1,"593":2,"595":1,"602":1,"621":1,"627":1}}],["accurately",{"2":{"25":1}}],["accelerating",{"2":{"412":1}}],["accepting",{"2":{"370":1}}],["accepts",{"2":{"108":1,"340":1}}],["accepted",{"2":{"58":1,"175":1,"281":1}}],["accept",{"2":{"17":1,"214":1,"215":1,"217":1,"218":1,"221":1,"222":1,"223":1,"225":1,"226":1}}],["accessing",{"2":{"201":1,"392":1,"608":1}}],["accessible",{"2":{"3":2,"11":1,"38":1,"468":1}}],["accessed",{"0":{"12":1},"2":{"320":1}}],["access",{"0":{"124":1},"2":{"2":3,"6":2,"16":2,"17":3,"19":1,"21":1,"24":1,"30":2,"33":2,"43":2,"44":3,"64":1,"65":1,"93":1,"110":1,"112":1,"114":1,"123":1,"124":1,"152":1,"201":1,"212":1,"214":1,"215":1,"217":1,"218":1,"220":1,"221":1,"222":1,"223":1,"225":1,"226":1,"229":3,"230":2,"232":2,"237":1,"239":2,"241":2,"243":1,"247":2,"280":3,"281":2,"297":2,"369":1,"452":1,"455":1,"469":2,"471":1,"527":1,"557":1,"559":1,"560":1,"561":1,"562":2,"563":1,"565":3,"590":2,"592":1,"595":1,"597":1,"598":1,"603":1,"605":1,"606":1,"608":1,"609":1}}],["agaisnt",{"2":{"350":1}}],["against",{"2":{"49":1,"57":1,"349":1,"471":1,"504":1,"512":1,"522":2,"565":2}}],["again",{"2":{"2":1,"16":1,"93":2,"159":2,"289":1,"390":1,"404":1,"468":1,"554":1}}],["aggregrated",{"2":{"223":1}}],["aggregating",{"2":{"5":1}}],["aka",{"0":{"232":1},"2":{"3":1,"601":7}}],["atob",{"2":{"603":1}}],["atomic",{"2":{"506":1}}],["attestation",{"2":{"555":8,"563":3}}],["attempts",{"2":{"251":1,"366":2,"430":1,"578":1}}],["attempt",{"2":{"74":1,"76":1,"88":1,"93":1,"268":1,"365":1}}],["attempted",{"2":{"56":1,"578":1}}],["attribute",{"2":{"139":1,"598":1}}],["attributes",{"0":{"50":1,"403":1},"2":{"37":1,"48":6,"49":1,"50":6,"396":1,"403":1}}],["attacker",{"2":{"469":1,"565":2}}],["attacks",{"2":{"57":1,"349":1,"598":1,"601":1,"602":1}}],["attached",{"2":{"105":1,"369":1}}],["attach",{"2":{"37":1,"97":2}}],["at",{"2":{"3":1,"11":1,"25":1,"37":2,"60":1,"72":1,"93":2,"103":1,"128":1,"159":2,"190":1,"199":1,"211":1,"229":1,"261":1,"273":1,"322":4,"328":2,"332":2,"340":1,"342":1,"361":1,"362":1,"366":1,"380":1,"381":1,"383":1,"385":1,"386":1,"388":2,"396":1,"412":1,"464":1,"468":1,"474":1,"475":1,"478":1,"488":1,"492":1,"493":1,"557":1,"565":1,"601":1,"602":3,"621":1}}],["alerts",{"2":{"591":1}}],["altogether",{"2":{"366":1}}],["alternative",{"2":{"32":1,"452":1}}],["alternatively",{"2":{"8":1,"150":1,"303":2,"340":1,"342":1}}],["alphabetically",{"2":{"539":1,"557":1}}],["alphanumeric",{"2":{"175":1}}],["alpha",{"2":{"105":1}}],["already",{"2":{"68":1,"74":1,"76":2,"97":1,"136":1,"204":1,"206":1,"209":2,"247":1,"261":1,"281":1,"294":1,"295":1,"296":1,"303":2,"339":1,"378":2,"380":1,"381":1,"405":1,"430":2,"464":1,"488":1,"595":1,"600":1}}],["always",{"2":{"25":1,"80":1,"153":1,"229":1,"230":1,"239":1,"243":1,"274":1,"303":1,"407":1,"508":1,"509":1,"536":1,"554":1,"559":1,"564":1,"588":1,"608":1,"609":1,"622":1}}],["alongside",{"2":{"569":1}}],["along",{"2":{"20":1,"221":1,"350":1,"385":1,"404":1,"430":2}}],["algeria",{"2":{"12":1}}],["also",{"2":{"3":1,"9":1,"19":1,"24":2,"29":1,"36":1,"37":1,"42":1,"58":1,"66":1,"67":1,"75":1,"78":1,"82":1,"86":1,"98":1,"117":1,"119":1,"124":1,"127":1,"129":1,"133":1,"152":1,"156":1,"188":1,"190":1,"194":1,"198":1,"204":1,"222":1,"254":3,"276":1,"277":1,"278":1,"281":2,"300":1,"303":1,"304":1,"351":2,"352":1,"369":1,"413":1,"424":1,"452":1,"453":1,"454":1,"465":1,"480":1,"504":1,"512":1,"515":1,"555":1,"559":1,"564":1,"565":1,"624":1,"625":1,"626":1}}],["allowlists",{"2":{"564":1}}],["allowed",{"0":{"387":1},"2":{"366":1,"383":2,"387":3,"505":1,"564":1}}],["allowing",{"2":{"57":1,"115":1,"204":1,"280":1,"367":1}}],["allow",{"2":{"55":1,"56":2,"93":1,"110":1,"112":1,"114":1,"117":1,"136":1,"161":1,"280":1,"295":1,"300":1,"383":1,"513":1,"607":1}}],["allows",{"0":{"631":1},"2":{"25":1,"36":1,"68":1,"77":1,"86":1,"87":1,"115":1,"116":2,"149":1,"181":1,"194":1,"253":2,"273":3,"280":1,"356":1,"366":1,"403":1,"413":1,"420":1,"424":1,"465":1,"470":1,"494":1,"497":1,"501":1,"522":1,"555":1,"559":1,"563":1,"621":3}}],["ally",{"2":{"49":1}}],["all",{"0":{"243":1,"252":1},"2":{"2":1,"16":1,"24":2,"25":7,"27":4,"28":1,"66":1,"82":1,"84":1,"97":1,"103":2,"110":1,"112":1,"114":1,"115":1,"116":3,"117":1,"127":1,"132":1,"187":2,"200":2,"210":1,"216":1,"219":1,"227":1,"229":2,"230":1,"239":1,"241":2,"243":2,"251":1,"252":1,"253":2,"254":2,"256":1,"260":1,"274":1,"277":1,"280":1,"297":1,"345":1,"349":2,"352":1,"361":1,"362":1,"364":1,"375":1,"386":1,"387":1,"388":1,"389":2,"396":1,"398":1,"399":1,"412":1,"451":1,"463":1,"468":1,"471":1,"474":1,"475":1,"483":1,"487":1,"494":1,"497":1,"504":1,"509":1,"536":1,"538":2,"556":1,"573":1,"590":1,"591":1,"603":1,"622":1,"625":1}}],["arcadeum",{"2":{"415":2}}],["architectures",{"2":{"159":1}}],["architecture",{"0":{"559":1,"590":1},"2":{"3":1,"559":2}}],["arbitrum",{"2":{"245":2,"411":1,"595":1,"597":1,"598":1,"605":1,"606":1,"608":1,"609":1}}],["arbitrary",{"2":{"49":1,"50":1,"58":1,"115":1,"248":1,"340":1,"352":1,"424":1}}],["arr",{"2":{"185":4}}],["arrays",{"2":{"120":1}}],["array",{"2":{"30":1,"43":2,"44":2,"48":1,"50":1,"116":1,"117":1,"119":1,"120":1,"187":1,"235":4,"239":4,"246":2,"449":1,"450":1,"516":1,"543":1,"547":1,"548":1,"575":3}}],["argent",{"2":{"426":1}}],["args",{"2":{"167":2,"168":2,"169":2,"170":2,"171":2,"548":3}}],["argument",{"2":{"98":1,"614":1}}],["arguments",{"2":{"24":1,"102":1,"120":2,"340":2,"369":1,"548":2}}],["around",{"2":{"119":1,"120":1,"431":1}}],["artwork",{"2":{"194":1,"197":1}}],["artstation",{"2":{"49":1}}],["artist",{"2":{"49":1}}],["artists",{"2":{"49":1}}],["armor",{"2":{"49":1}}],["aren",{"2":{"132":1,"247":1,"380":1}}],["areas",{"2":{"50":1}}],["are",{"0":{"521":1,"557":1},"2":{"2":1,"16":1,"17":1,"19":1,"24":5,"25":1,"27":1,"36":1,"46":1,"50":1,"51":2,"55":2,"56":1,"58":2,"69":1,"78":2,"79":1,"93":1,"98":1,"102":1,"103":1,"108":2,"110":1,"112":1,"113":1,"114":1,"115":3,"116":1,"117":1,"119":1,"123":1,"127":1,"129":2,"130":1,"139":2,"151":1,"173":1,"175":1,"177":1,"187":1,"189":3,"194":2,"202":1,"210":2,"219":1,"220":1,"222":1,"223":1,"227":1,"229":1,"230":1,"239":1,"243":1,"246":2,"253":1,"254":1,"279":2,"280":2,"281":1,"282":1,"312":2,"321":2,"322":1,"340":1,"341":1,"347":1,"349":1,"350":1,"354":1,"357":1,"363":1,"366":1,"367":1,"369":1,"371":1,"375":1,"379":1,"380":1,"391":1,"403":1,"407":1,"413":1,"415":1,"419":2,"421":2,"424":3,"430":1,"449":1,"450":1,"451":2,"454":1,"465":1,"468":3,"469":1,"471":1,"472":1,"490":1,"492":1,"495":1,"503":3,"504":1,"505":1,"507":1,"514":2,"515":1,"521":1,"522":1,"525":1,"527":1,"529":1,"530":1,"531":1,"532":1,"534":1,"536":1,"538":1,"544":1,"555":1,"556":1,"559":4,"562":1,"564":1,"565":3,"568":1,"595":1,"599":1,"600":1,"602":1,"605":1,"608":1,"627":2}}],["arise",{"2":{"0":1}}],["apk",{"2":{"378":2}}],["ape",{"2":{"48":2}}],["appprotocol",{"0":{"284":1}}],["appprops",{"2":{"253":1}}],["appname",{"0":{"269":1},"2":{"265":3,"269":1,"452":1,"455":1}}],["appleid",{"2":{"471":1,"602":1}}],["applevision",{"2":{"159":1}}],["appleclientid",{"2":{"133":1,"134":1,"173":1}}],["apple",{"0":{"374":1,"386":1,"598":1,"602":1},"2":{"132":1,"133":1,"134":3,"294":1,"296":1,"371":2,"374":3,"386":4,"449":1,"559":1,"561":1,"598":2,"600":1,"602":5}}],["apply",{"2":{"105":3,"598":1}}],["applicable",{"2":{"608":1}}],["application",{"0":{"258":1,"485":1},"2":{"5":1,"13":1,"17":1,"30":2,"36":1,"43":2,"44":4,"58":1,"68":1,"69":1,"78":2,"93":2,"133":4,"188":1,"201":1,"210":1,"214":2,"215":2,"217":2,"218":2,"219":1,"221":2,"222":2,"223":2,"225":2,"226":2,"227":1,"229":2,"230":2,"232":2,"235":1,"237":1,"239":2,"241":2,"243":2,"245":2,"246":1,"248":1,"252":4,"253":1,"256":1,"260":1,"261":1,"311":1,"312":1,"319":1,"371":2,"378":4,"386":1,"411":1,"431":1,"432":1,"463":1,"464":1,"483":1,"487":1,"488":1,"538":1,"548":1,"593":2,"600":1,"601":1}}],["applications",{"0":{"255":1,"259":1,"482":1,"486":1},"1":{"256":1,"260":1,"483":1,"487":1},"2":{"0":1,"24":1,"189":1,"255":1,"259":1,"273":1,"274":1,"312":2,"345":1,"462":1,"482":1,"486":1,"560":1,"593":1,"600":1,"621":1,"622":1}}],["applied",{"2":{"101":1,"530":1}}],["approval",{"2":{"559":1}}],["appropriately",{"2":{"134":1}}],["appropriate",{"2":{"93":2,"105":1,"115":1,"340":1,"353":1,"367":1}}],["approach",{"2":{"69":1,"94":1,"107":1,"117":1,"429":1}}],["appear",{"2":{"115":1,"461":1,"539":1,"553":1}}],["appears",{"2":{"48":1,"115":1,"454":1,"602":1}}],["appending",{"2":{"201":1}}],["appended",{"2":{"196":1,"404":1}}],["append",{"2":{"6":1,"181":1,"182":1,"183":1,"184":1,"185":1,"249":1,"525":1}}],["apps",{"2":{"25":2,"98":1,"156":1,"602":1}}],["app",{"0":{"253":1,"283":1,"436":1,"460":1},"2":{"3":8,"6":1,"20":2,"21":1,"22":2,"30":2,"33":2,"34":1,"37":2,"39":3,"41":1,"43":2,"44":4,"52":2,"54":1,"58":1,"68":1,"88":1,"93":2,"104":1,"134":2,"159":2,"173":1,"229":3,"230":3,"232":3,"237":3,"239":3,"241":3,"243":3,"245":2,"247":2,"248":1,"251":2,"252":1,"253":3,"254":1,"265":1,"270":1,"273":1,"274":1,"280":1,"281":2,"283":3,"345":1,"367":1,"377":1,"378":1,"407":2,"411":1,"436":1,"441":1,"452":2,"455":4,"460":1,"474":1,"475":1,"553":1,"555":1,"560":1,"561":1,"565":1,"598":1,"602":3,"621":1,"622":1}}],["apis",{"2":{"8":4,"9":2,"188":1,"189":1,"194":1,"412":1}}],["api",{"0":{"1":1,"28":1,"36":1,"55":1,"228":1,"411":1,"569":1},"1":{"2":1,"3":1,"4":1,"37":1,"38":1,"39":1,"40":1,"41":1,"56":1,"57":1,"58":1,"229":1,"230":1},"2":{"1":3,"2":6,"3":1,"13":3,"14":1,"16":5,"17":3,"19":3,"20":4,"21":1,"25":6,"28":3,"30":1,"32":5,"33":2,"36":3,"38":1,"40":1,"41":1,"43":1,"52":3,"55":2,"56":3,"58":3,"64":1,"82":1,"91":1,"93":2,"117":1,"123":1,"141":2,"142":2,"143":2,"144":2,"145":2,"146":2,"147":2,"148":2,"157":2,"162":1,"163":1,"164":1,"165":1,"166":2,"167":2,"168":1,"169":1,"170":1,"171":2,"173":1,"180":2,"186":1,"187":5,"192":1,"212":1,"214":3,"215":3,"217":3,"218":3,"220":1,"221":3,"222":3,"223":3,"225":3,"226":3,"229":2,"232":1,"239":1,"241":1,"244":1,"245":2,"246":1,"248":1,"249":4,"320":1,"365":1,"366":1,"377":1,"379":1,"382":1,"410":1,"411":1,"538":4,"548":1,"556":1,"557":3,"560":1,"568":2,"569":1,"571":1,"572":1,"577":1,"579":1,"582":1,"585":1,"587":1,"588":1,"597":1}}],["announced",{"2":{"283":1}}],["anonymizes",{"2":{"189":1}}],["another",{"2":{"20":1,"30":1,"37":1,"40":1,"43":1,"44":2,"48":1,"52":1,"84":1,"229":1,"366":1,"468":1,"519":1,"564":1}}],["anatomy",{"0":{"57":1}}],["analytic",{"2":{"219":1,"227":1}}],["analytics",{"0":{"13":1,"188":1,"212":1,"220":1},"1":{"14":1,"15":1,"16":1,"17":1,"18":1,"189":1,"190":1,"191":1,"192":1,"193":1,"213":1,"214":1,"215":1,"216":1,"217":1,"218":1,"219":1,"221":1,"222":1,"223":1,"224":1,"225":1,"226":1,"227":1},"2":{"13":3,"14":1,"188":1,"189":2}}],["analysis",{"2":{"13":1}}],["animations",{"2":{"101":2}}],["animation",{"2":{"3":2,"101":1}}],["an",{"0":{"251":1},"2":{"3":5,"8":1,"21":1,"24":1,"27":1,"28":1,"30":2,"33":1,"36":1,"41":1,"43":2,"44":1,"48":2,"49":3,"50":2,"58":1,"67":1,"68":4,"69":2,"82":1,"93":2,"94":2,"98":2,"101":3,"105":1,"107":1,"108":1,"109":3,"110":2,"111":3,"112":2,"113":3,"114":2,"115":4,"120":2,"121":1,"127":1,"129":2,"130":1,"133":1,"194":1,"199":1,"200":1,"201":1,"209":1,"210":3,"223":1,"229":2,"230":1,"232":1,"235":4,"239":1,"241":1,"243":1,"246":4,"248":1,"251":1,"253":3,"254":1,"273":2,"274":1,"278":1,"280":2,"287":1,"288":1,"295":1,"299":1,"303":1,"307":2,"308":1,"309":2,"311":1,"339":1,"340":2,"341":3,"342":1,"349":1,"351":2,"352":1,"355":1,"356":2,"361":2,"362":2,"363":1,"366":1,"367":1,"369":1,"371":1,"374":1,"383":2,"386":2,"392":3,"397":1,"403":1,"427":1,"431":4,"432":1,"452":1,"454":4,"468":1,"469":1,"472":1,"489":2,"494":1,"503":1,"504":1,"509":1,"519":1,"531":1,"532":2,"536":1,"540":1,"541":1,"548":2,"555":1,"556":2,"557":3,"559":1,"560":2,"561":1,"564":1,"565":2,"567":4,"568":1,"569":1,"578":2,"583":2,"586":1,"591":1,"593":1,"595":1,"597":2,"601":1,"602":3,"606":1,"609":3,"611":1,"614":1,"621":2,"622":1,"626":1,"627":1,"629":2,"630":1,"633":1,"634":2}}],["android=",{"2":{"378":2}}],["androidmanifest",{"2":{"378":1}}],["android",{"0":{"133":1,"157":1,"378":1},"2":{"81":1,"133":3,"154":1,"155":1,"157":4,"377":1,"378":41}}],["and",{"0":{"3":1,"58":1,"159":1,"229":2,"230":2,"252":1,"253":2,"282":1,"314":1,"396":1,"406":1,"571":1},"1":{"283":1,"284":1,"285":1,"286":1,"287":1,"288":1,"289":1,"290":1,"291":1,"292":1,"293":1,"294":1,"295":1,"296":1,"297":1,"298":1,"299":1,"300":1},"2":{"0":1,"1":4,"2":5,"3":6,"5":1,"6":3,"7":1,"8":5,"9":2,"11":2,"14":1,"16":5,"19":2,"20":5,"23":1,"24":5,"25":14,"28":3,"29":1,"32":1,"35":1,"36":3,"37":6,"38":1,"40":1,"42":2,"46":3,"48":1,"49":1,"50":8,"51":2,"52":4,"55":1,"56":4,"57":1,"58":1,"63":1,"64":1,"66":1,"67":1,"68":3,"69":4,"73":1,"75":2,"76":4,"79":1,"80":2,"82":1,"84":4,"86":1,"88":3,"93":7,"94":1,"97":1,"98":3,"100":1,"102":3,"103":1,"104":1,"105":3,"106":1,"107":4,"108":4,"109":1,"110":2,"111":1,"112":2,"113":1,"114":2,"115":4,"116":1,"117":5,"119":1,"120":5,"121":1,"122":1,"123":2,"127":3,"128":1,"129":1,"130":1,"131":1,"133":4,"134":1,"136":1,"137":1,"151":1,"153":2,"155":1,"159":4,"173":1,"178":4,"181":1,"187":3,"189":3,"190":1,"192":1,"194":6,"195":2,"196":4,"197":2,"198":1,"199":1,"201":1,"203":2,"204":3,"206":1,"208":1,"210":5,"212":3,"220":4,"230":1,"234":1,"239":1,"243":1,"244":2,"249":1,"251":4,"252":2,"253":7,"254":2,"255":1,"256":3,"259":1,"260":3,"266":1,"273":3,"274":1,"277":1,"278":1,"280":6,"281":5,"285":2,"287":1,"291":1,"301":1,"303":2,"304":1,"306":1,"312":3,"315":1,"319":1,"320":1,"321":1,"322":1,"323":1,"326":1,"328":1,"330":1,"332":1,"333":1,"338":1,"339":2,"340":3,"342":2,"345":1,"346":1,"347":2,"348":2,"349":2,"350":2,"351":2,"352":2,"353":1,"359":1,"360":1,"361":2,"362":2,"363":1,"365":2,"366":3,"367":1,"369":3,"372":3,"374":1,"376":1,"377":1,"378":4,"379":1,"380":1,"381":1,"382":1,"383":1,"385":2,"387":1,"388":2,"389":1,"390":2,"391":2,"392":3,"393":1,"396":1,"397":2,"400":1,"401":1,"403":1,"404":2,"405":1,"406":2,"407":1,"412":1,"413":1,"415":1,"419":1,"420":1,"424":1,"430":3,"431":1,"437":1,"449":1,"450":1,"452":2,"453":1,"454":1,"455":1,"456":1,"462":1,"463":5,"465":1,"468":3,"470":1,"471":5,"472":3,"482":1,"483":3,"486":1,"487":3,"489":2,"498":2,"504":1,"508":1,"509":1,"512":1,"513":1,"514":2,"515":1,"516":2,"517":1,"520":1,"522":3,"524":1,"527":1,"528":2,"529":1,"531":2,"532":1,"534":5,"538":2,"541":2,"544":1,"547":1,"548":2,"550":1,"552":1,"553":1,"555":2,"556":2,"557":6,"559":5,"560":2,"562":3,"563":7,"564":5,"566":3,"568":4,"570":1,"571":1,"588":1,"589":1,"591":2,"592":2,"593":2,"595":1,"597":2,"598":5,"601":1,"602":8,"605":1,"609":1,"613":2,"621":3,"622":1,"625":1,"626":1,"627":1,"628":1}}],["anyyesindexnumberindex",{"2":{"575":1}}],["anyone",{"2":{"563":1}}],["anypoint",{"2":{"383":1}}],["anytime",{"2":{"93":1}}],["anything",{"2":{"24":1,"157":1,"281":1}}],["anywhere",{"2":{"69":1,"94":1,"107":1,"124":1}}],["any",{"0":{"30":1,"43":1,"229":1,"239":1,"241":1,"302":1},"2":{"0":1,"19":1,"24":1,"25":1,"27":3,"29":2,"36":1,"37":2,"42":4,"50":2,"56":2,"58":3,"65":1,"75":1,"76":1,"88":2,"97":2,"101":1,"102":1,"106":1,"110":1,"112":1,"114":1,"115":1,"116":1,"119":1,"120":2,"123":2,"127":1,"129":1,"151":1,"152":1,"177":1,"188":1,"194":1,"198":1,"199":2,"229":1,"230":2,"232":1,"237":1,"239":4,"241":5,"243":5,"274":1,"280":3,"281":1,"303":1,"341":1,"347":2,"351":1,"352":1,"369":1,"382":1,"387":1,"392":1,"404":1,"405":1,"415":1,"430":1,"431":1,"474":1,"475":1,"489":1,"503":2,"510":1,"521":2,"529":1,"531":1,"533":1,"534":1,"536":1,"559":2,"563":2,"565":1,"598":1,"606":2,"622":1}}],["answer",{"2":{"0":2,"597":1}}],["aspects",{"2":{"593":1}}],["aspect",{"2":{"281":2,"293":1}}],["asks",{"2":{"541":1,"567":1,"568":1}}],["askforemail",{"0":{"291":1},"2":{"291":2}}],["asking",{"2":{"273":1,"541":1,"612":1,"621":1}}],["ask",{"0":{"272":1,"620":1},"2":{"291":1,"308":1,"630":1,"633":1}}],["asequencebackendmanager",{"2":{"129":1}}],["assuming",{"2":{"588":1}}],["assumes",{"2":{"281":1}}],["asstring",{"2":{"363":2}}],["associating",{"2":{"602":1}}],["association",{"2":{"210":1,"369":1,"431":1}}],["associate",{"2":{"93":1,"366":1,"367":1,"601":1}}],["associated",{"2":{"93":2,"193":1,"210":1,"219":1,"227":1,"315":1,"365":1,"366":2,"516":1,"557":1,"575":1}}],["assigned",{"2":{"493":2}}],["assign",{"2":{"389":1}}],["assigning",{"2":{"198":1}}],["assistance",{"2":{"30":1,"43":1,"44":2,"229":1}}],["assembled",{"2":{"340":1}}],["assemble",{"2":{"117":1}}],["assets",{"2":{"3":1,"8":3,"37":3,"49":1,"75":2,"93":2,"105":1,"137":1,"203":1,"378":1,"380":3,"430":3,"451":5}}],["assetid",{"2":{"3":2}}],["assetidorassettype",{"2":{"3":1}}],["assettype",{"2":{"3":3}}],["asset",{"2":{"3":6,"48":1,"49":1,"430":2,"431":1}}],["asynchronous",{"2":{"69":1,"94":1,"107":1,"345":1}}],["async",{"2":{"6":1,"68":1,"69":1,"82":1,"83":1,"84":1,"85":1,"86":1,"94":1,"117":1,"214":1,"215":1,"217":1,"218":1,"221":1,"222":1,"223":1,"225":1,"226":1,"245":1,"247":1,"266":2,"340":1,"345":1,"347":1,"365":2,"439":1,"598":3}}],["as",{"0":{"305":1,"481":1},"2":{"0":2,"2":3,"3":2,"8":1,"10":2,"12":3,"16":3,"17":3,"20":3,"24":2,"25":1,"30":1,"36":2,"37":2,"39":1,"40":2,"43":1,"44":1,"48":1,"49":1,"50":4,"51":1,"52":2,"56":2,"57":1,"64":1,"65":1,"67":1,"69":1,"75":2,"76":2,"84":1,"88":1,"96":1,"97":1,"98":4,"103":3,"105":1,"107":1,"108":5,"109":1,"111":1,"113":2,"115":4,"116":1,"117":1,"119":3,"120":1,"123":1,"124":1,"127":2,"129":2,"130":1,"178":2,"182":1,"188":1,"194":1,"197":1,"202":1,"210":3,"220":1,"221":1,"229":1,"246":1,"251":1,"256":1,"260":1,"266":1,"268":1,"273":1,"274":2,"278":1,"279":1,"288":1,"299":1,"303":2,"305":1,"306":1,"307":2,"308":2,"309":2,"310":1,"312":2,"320":1,"321":1,"322":1,"323":1,"326":1,"328":1,"330":1,"331":1,"332":1,"339":2,"340":2,"342":3,"347":1,"349":1,"351":1,"352":1,"356":1,"361":1,"362":1,"366":2,"369":1,"370":1,"372":1,"377":1,"381":2,"382":1,"386":1,"391":1,"396":1,"397":1,"405":2,"410":1,"412":1,"413":1,"415":1,"420":1,"424":1,"427":2,"429":1,"430":3,"431":3,"449":1,"450":1,"452":1,"454":2,"463":2,"465":1,"471":1,"481":1,"483":1,"487":1,"491":1,"496":1,"497":1,"514":4,"515":3,"516":1,"522":1,"525":1,"528":1,"532":1,"533":1,"534":1,"535":3,"536":2,"539":1,"553":2,"554":3,"556":1,"559":2,"566":1,"595":1,"597":2,"600":1,"601":3,"602":2,"603":1,"614":1,"621":1,"622":2,"626":1,"627":1,"628":1,"629":2,"630":2,"633":2,"634":2,"635":1}}],["a",{"0":{"2":1,"6":1,"16":1,"17":1,"57":1,"60":1,"195":1,"196":1,"197":1,"198":1,"205":1,"221":2,"242":1,"243":1,"252":1,"253":1,"306":1,"315":1,"392":1,"409":1,"432":1,"454":1,"461":1,"478":1,"599":1,"628":1,"631":6},"1":{"198":1,"243":1},"2":{"0":1,"1":2,"2":4,"5":1,"6":4,"7":1,"8":4,"9":4,"16":4,"17":2,"18":2,"19":1,"20":2,"24":1,"25":10,"27":4,"28":2,"30":2,"32":1,"36":2,"37":6,"38":2,"41":3,"42":1,"43":2,"44":5,"48":2,"49":3,"51":3,"52":1,"55":3,"56":3,"57":7,"58":3,"61":1,"64":1,"65":2,"66":1,"68":5,"69":8,"72":1,"74":3,"75":3,"76":3,"77":3,"78":3,"80":3,"82":1,"83":1,"84":5,"85":2,"86":2,"87":1,"93":5,"94":2,"97":2,"98":6,"99":1,"100":2,"101":4,"102":3,"103":2,"105":3,"106":1,"107":6,"108":11,"109":1,"110":4,"112":4,"113":1,"114":4,"115":9,"116":5,"117":9,"119":4,"121":4,"122":1,"123":4,"124":3,"127":2,"128":1,"129":10,"130":2,"131":1,"133":2,"134":2,"136":2,"141":1,"142":1,"143":1,"149":3,"150":1,"153":3,"159":4,"173":1,"175":1,"178":1,"180":1,"181":3,"182":2,"185":1,"187":1,"189":1,"194":3,"195":2,"196":3,"197":2,"198":3,"199":1,"201":2,"202":2,"203":3,"204":5,"206":2,"208":1,"209":1,"210":10,"211":1,"213":1,"214":1,"215":1,"217":1,"218":1,"219":1,"220":2,"221":3,"222":1,"223":1,"224":1,"225":1,"226":1,"227":1,"229":3,"230":3,"232":2,"235":1,"237":1,"239":8,"241":4,"243":4,"244":1,"245":2,"246":1,"248":1,"252":3,"253":10,"254":2,"255":2,"256":3,"259":2,"260":3,"261":1,"269":1,"270":1,"273":6,"274":2,"277":1,"279":4,"280":6,"281":4,"282":1,"289":1,"293":2,"294":1,"299":1,"301":2,"303":1,"304":3,"305":1,"306":1,"307":3,"308":4,"309":3,"310":2,"311":1,"312":7,"315":1,"316":1,"318":1,"319":1,"320":7,"321":2,"322":3,"323":1,"324":1,"326":2,"328":3,"329":1,"330":1,"332":2,"333":2,"334":1,"336":1,"337":1,"338":1,"339":6,"340":7,"341":1,"342":4,"343":1,"345":1,"347":6,"348":1,"349":2,"350":2,"351":3,"352":1,"353":1,"354":1,"355":4,"356":3,"357":1,"361":5,"362":5,"363":2,"364":2,"365":1,"366":4,"367":2,"368":1,"369":4,"370":3,"371":1,"372":10,"378":3,"381":2,"382":3,"383":6,"385":2,"387":1,"388":4,"389":1,"391":2,"392":2,"395":1,"396":2,"398":1,"399":1,"405":1,"406":1,"409":1,"410":2,"411":1,"412":2,"413":1,"414":2,"419":2,"420":1,"421":1,"427":4,"429":1,"430":9,"431":13,"437":1,"439":1,"443":2,"449":2,"450":2,"451":1,"452":3,"454":5,"455":1,"456":1,"457":2,"461":1,"462":2,"463":4,"464":1,"465":1,"466":2,"467":7,"468":5,"470":3,"471":6,"472":6,"479":1,"480":2,"481":1,"482":2,"483":3,"486":2,"487":3,"488":1,"490":1,"493":2,"495":1,"496":1,"497":1,"498":1,"501":1,"503":2,"504":1,"506":2,"508":1,"509":1,"511":1,"512":3,"514":1,"515":2,"517":3,"518":1,"520":1,"521":1,"522":1,"527":1,"528":2,"529":1,"530":2,"531":3,"532":2,"533":2,"534":4,"535":4,"538":3,"539":1,"541":3,"549":1,"550":1,"555":5,"556":2,"557":8,"559":1,"560":1,"561":4,"562":1,"563":5,"564":2,"565":1,"566":4,"567":2,"568":1,"569":1,"570":3,"572":4,"573":1,"575":2,"577":1,"578":1,"579":1,"580":1,"582":1,"585":1,"588":4,"589":2,"590":6,"591":1,"592":1,"593":1,"595":3,"597":1,"598":4,"599":1,"600":1,"601":4,"602":14,"605":1,"606":1,"607":4,"608":3,"609":2,"611":2,"612":2,"614":2,"621":6,"622":2,"625":1,"627":4,"628":1,"629":3,"630":4,"633":4,"634":3,"635":2}}],["src=",{"2":{"305":2,"481":2}}],["sri",{"2":{"12":1}}],["smoothly",{"2":{"430":1}}],["smooth",{"2":{"255":1,"256":1,"259":1,"260":1,"462":1,"463":1,"482":1,"483":1,"486":1,"487":1}}],["smart",{"0":{"340":1,"420":1,"424":1,"427":1},"1":{"421":1,"422":1,"423":1,"424":1,"425":2,"426":1,"427":1},"2":{"69":4,"84":1,"85":1,"110":1,"112":1,"114":1,"115":3,"116":3,"202":1,"210":1,"274":1,"304":1,"328":1,"340":2,"341":1,"342":2,"420":2,"424":2,"427":4,"472":1,"503":1,"519":1,"548":1,"559":1,"560":1,"622":1}}],["smallest",{"2":{"563":1}}],["small",{"2":{"48":1,"310":1,"635":1}}],["snapshot",{"2":{"223":1}}],["snippet",{"0":{"631":1},"2":{"69":1,"108":1,"109":1,"111":1,"113":1,"115":1,"274":1,"320":1,"370":1,"622":1}}],["switching",{"2":{"369":1}}],["switch",{"2":{"178":1}}],["swap",{"2":{"101":1}}],["sso",{"0":{"133":1,"134":1},"2":{"129":1,"131":2,"132":3,"134":2}}],["ssssssssssssssssssssssssssssssssssssssssnnnnnnnnnnnnnnnnnnnnnnnn",{"2":{"57":1}}],["shape=",{"2":{"598":1}}],["sha256",{"2":{"554":1}}],["sha384",{"2":{"554":2}}],["shares",{"2":{"602":1}}],["share",{"0":{"456":1},"2":{"291":1,"386":1,"456":1,"538":1}}],["shared",{"2":{"119":1,"561":1,"600":1}}],["sha",{"2":{"133":1}}],["showemailinput",{"0":{"448":1}}],["shown",{"2":{"440":1,"446":1,"447":1,"448":1,"449":1,"450":1}}],["shows",{"2":{"192":1}}],["show",{"2":{"136":2,"137":2,"178":1,"190":2,"196":1,"298":1}}],["showauthsuccessdelegate",{"2":{"129":3}}],["showing",{"2":{"127":1,"399":1}}],["showcases",{"2":{"75":1}}],["showcase",{"2":{"8":1}}],["should",{"2":{"2":2,"16":2,"44":1,"50":1,"74":1,"76":1,"122":1,"127":2,"293":1,"304":1,"319":1,"323":1,"326":1,"328":1,"330":1,"332":1,"345":2,"347":1,"351":1,"372":1,"382":1,"396":1,"397":1,"403":1,"404":1,"454":1,"469":1,"480":1,"506":1,"509":4,"511":1,"536":1,"540":1,"544":1,"545":1,"546":1,"547":1,"601":1}}],["sfts",{"2":{"113":1}}],["skip",{"2":{"68":2}}],["skywvr",{"2":{"37":1}}],["skyweavertokenid3",{"2":{"86":2}}],["skyweavertokenid2",{"2":{"86":2}}],["skyweavertokenid1",{"2":{"86":2}}],["skyweaveraddress",{"2":{"86":3}}],["skyweavercover",{"2":{"37":1}}],["skyweaver",{"2":{"37":10,"49":3,"241":3,"243":3}}],["slot",{"2":{"496":5}}],["slug",{"2":{"258":1,"485":1}}],["slatecore",{"2":{"139":1}}],["slate",{"2":{"139":2}}],["sleepy",{"2":{"48":1}}],["slightly",{"2":{"46":1}}],["sdk",{"0":{"63":1,"393":1,"462":1,"568":1},"1":{"463":1,"464":1},"2":{"44":1,"56":1,"63":3,"65":1,"66":1,"75":5,"76":6,"80":2,"88":1,"93":4,"97":2,"98":2,"110":1,"112":1,"114":1,"116":1,"117":2,"118":1,"137":1,"153":3,"157":2,"174":1,"254":1,"274":1,"277":1,"304":2,"354":1,"366":2,"369":2,"371":1,"374":1,"378":5,"382":5,"383":2,"393":3,"414":1,"430":1,"466":1,"472":1,"480":2,"538":1,"539":1,"541":1,"542":1,"543":1,"561":1,"567":1,"576":1,"578":1,"593":1,"597":2,"598":3,"609":1,"622":1,"625":1,"627":1}}],["sdks",{"2":{"20":1,"23":1,"25":1,"35":1,"40":1,"52":1,"63":1,"64":1,"188":1,"189":1,"191":1,"254":1,"393":1,"431":1,"534":1,"556":1}}],["sync",{"2":{"530":1}}],["synonymous",{"2":{"415":1}}],["systems",{"2":{"88":1,"552":1,"601":1}}],["system",{"2":{"63":1,"76":1,"81":3,"93":1,"104":1,"136":1,"155":1,"189":1,"420":1,"430":2,"566":1,"591":1,"593":1,"602":1}}],["symbol",{"2":{"37":1,"58":3,"247":1,"249":1,"351":2}}],["syria",{"2":{"12":1}}],["split",{"2":{"562":1,"603":2}}],["sprintf",{"2":{"247":1}}],["spothq",{"2":{"58":1}}],["sponsoring",{"0":{"204":1},"2":{"58":1,"117":2,"202":1,"203":2,"204":1,"208":1}}],["sponsorship",{"0":{"58":1,"202":1},"1":{"203":1,"204":1,"205":1,"206":1,"207":1,"208":1,"209":1},"2":{"247":1,"249":2}}],["sponsor",{"0":{"203":1,"205":1,"209":1},"2":{"56":1,"58":1,"117":2,"204":3}}],["sponsored",{"2":{"56":1,"58":1}}],["space",{"2":{"57":3,"425":1}}],["spam",{"0":{"24":1},"2":{"24":2,"229":1,"230":1,"239":1,"243":1}}],["special",{"2":{"69":1,"281":1,"322":1,"323":1,"326":1,"328":1,"330":1,"332":1}}],["specifies",{"2":{"439":1,"440":1,"563":1}}],["specified",{"2":{"86":1,"115":1,"229":1,"299":1,"300":1,"308":1,"324":1,"326":1,"328":1,"365":1,"630":1,"633":1}}],["specifics",{"0":{"159":1}}],["specifically",{"2":{"127":1}}],["specification",{"2":{"120":1}}],["specific",{"2":{"25":1,"48":1,"49":1,"56":1,"134":1,"155":1,"204":1,"221":1,"229":1,"230":2,"239":2,"241":1,"243":2,"244":1,"245":1,"303":1,"304":1,"312":1,"323":1,"371":1,"391":1,"392":1,"407":1,"411":1,"419":1,"443":1,"480":1,"573":1}}],["specifying",{"2":{"84":1,"196":1,"365":1,"455":1,"557":1}}],["specify",{"2":{"37":1,"84":1,"87":1,"194":1,"239":5,"281":1,"282":1,"294":1,"295":1,"296":1,"299":1,"383":2,"413":1,"465":1}}],["spell",{"2":{"49":1}}],["salt",{"2":{"492":1,"504":1,"522":1,"525":1,"528":1,"536":2}}],["sale",{"2":{"246":1}}],["savings",{"2":{"116":1}}],["saved",{"2":{"194":1,"388":1}}],["saves",{"2":{"105":1}}],["save",{"2":{"5":1,"8":1,"101":1,"390":1}}],["safeguards",{"2":{"563":1,"565":1}}],["safeguarding",{"2":{"469":1}}],["safely",{"2":{"389":1}}],["safety",{"2":{"352":1}}],["safetransferfrom",{"2":{"306":4,"307":5,"309":5,"546":1,"628":4,"629":5,"634":5}}],["safe",{"2":{"183":1,"388":2,"426":1,"538":1,"546":1,"548":1,"565":1}}],["safemint",{"2":{"112":2}}],["safer",{"2":{"76":1}}],["say",{"2":{"37":1}}],["same",{"2":{"20":1,"37":1,"50":1,"52":1,"113":1,"273":1,"306":1,"356":1,"366":2,"509":1,"530":1,"553":1,"554":2,"559":1,"561":2,"595":1,"621":1,"628":1}}],["samples",{"0":{"75":1},"2":{"74":2,"75":3,"97":1,"117":1,"374":1}}],["sample",{"2":{"20":1,"75":6,"93":1,"99":1,"100":1,"102":1,"103":2,"117":1,"372":2,"553":2}}],["software",{"2":{"155":1,"566":4}}],["sold",{"2":{"219":1}}],["solves",{"2":{"203":1,"431":1}}],["soliditykeccak256",{"2":{"535":3}}],["soliditypack",{"2":{"523":1,"525":2,"535":1}}],["solidity",{"2":{"120":1}}],["solution",{"2":{"88":1,"559":1}}],["solutions",{"2":{"13":1,"21":1,"22":1,"371":1}}],["soon",{"0":{"106":1}}],["socialauthoptions",{"0":{"449":1},"2":{"455":2}}],["sociallogin",{"2":{"129":1,"131":1}}],["social",{"0":{"131":1,"132":1,"371":1,"375":1,"468":1,"612":1},"1":{"133":1,"134":1,"372":1,"373":1,"374":1,"375":1,"376":1,"377":1,"378":1,"379":1,"380":1,"381":1,"469":1,"470":1,"471":1},"2":{"81":2,"93":1,"127":1,"129":3,"131":1,"210":2,"244":1,"256":1,"260":1,"367":1,"369":1,"371":1,"372":2,"375":1,"377":1,"379":1,"381":1,"425":1,"430":1,"432":1,"449":1,"463":2,"467":1,"468":3,"471":2,"483":1,"487":1,"560":1,"595":1,"598":1,"600":1,"612":1,"613":1}}],["somewhere",{"2":{"372":1}}],["sometimes",{"2":{"50":1,"159":1}}],["something",{"2":{"31":1,"69":2,"94":1,"107":2,"304":1,"370":1,"396":1,"404":1,"480":1,"567":1,"601":1}}],["some",{"2":{"30":1,"43":1,"46":1,"50":1,"51":1,"56":1,"68":1,"69":1,"75":1,"76":1,"81":1,"98":3,"105":1,"115":1,"117":1,"121":2,"127":1,"251":1,"279":1,"281":1,"346":1,"371":1,"422":1,"549":1,"567":1,"586":1,"595":1,"600":1,"627":1}}],["somalia",{"2":{"12":1}}],["sourced",{"2":{"254":1}}],["sources",{"2":{"24":2}}],["source",{"2":{"20":1,"40":1,"52":1,"67":1,"115":2,"178":1,"278":1,"281":1,"305":1,"481":1,"563":3,"626":1}}],["south",{"2":{"12":1}}],["so",{"2":{"13":1,"24":1,"25":1,"51":1,"58":4,"93":2,"106":1,"115":2,"127":1,"129":4,"137":1,"182":1,"210":1,"212":1,"220":1,"252":1,"274":1,"339":2,"351":2,"356":1,"366":1,"369":2,"380":1,"382":1,"388":1,"389":1,"391":1,"404":1,"424":1,"430":1,"431":1,"454":1,"463":1,"505":1,"507":1,"569":1,"622":1}}],["school",{"2":{"602":2}}],["scheme=",{"2":{"378":2}}],["scheme",{"0":{"105":1},"2":{"93":1,"105":3,"371":1,"376":1,"378":3,"387":1,"463":1}}],["schemes",{"2":{"81":1,"376":1}}],["schemas",{"2":{"378":4}}],["schema",{"0":{"219":1,"227":1,"246":1},"2":{"20":1,"48":1,"49":1,"219":1,"227":1}}],["scenarios",{"2":{"422":1,"534":1,"565":1}}],["scenarioprerequisitesignmessage",{"2":{"392":1}}],["scenario",{"2":{"388":1,"565":5}}],["scene",{"2":{"74":1,"75":2,"76":1,"98":1,"102":1,"105":3,"117":1,"369":1}}],["scenes",{"2":{"25":1,"353":1}}],["scope",{"2":{"312":1,"514":1,"515":1,"597":1}}],["scalable",{"2":{"412":1}}],["scaled",{"2":{"369":1}}],["scaler",{"2":{"369":1}}],["scale",{"2":{"5":1,"369":2}}],["scan",{"2":{"303":1}}],["scanned",{"2":{"303":2}}],["scroll",{"2":{"376":1,"404":1,"405":1}}],["script",{"2":{"105":1,"159":5,"173":1,"305":5,"481":5}}],["scriptableobject",{"2":{"88":1,"93":3}}],["scriptable",{"2":{"74":1,"105":3,"320":1,"371":1}}],["scripts",{"2":{"69":1,"75":2,"374":1}}],["screen",{"2":{"2":1,"16":1,"283":1,"366":1,"369":1,"402":1,"444":1}}],["s",{"2":{"3":1,"24":1,"36":1,"37":3,"48":1,"49":1,"58":1,"66":1,"68":2,"78":1,"80":1,"83":1,"88":2,"93":3,"104":1,"115":1,"117":3,"127":2,"132":1,"136":1,"141":1,"142":1,"143":1,"150":1,"151":2,"152":2,"180":1,"181":1,"187":1,"202":1,"246":2,"247":1,"248":1,"249":2,"253":1,"272":1,"274":1,"277":1,"279":1,"281":1,"285":1,"288":1,"303":1,"312":2,"316":1,"370":1,"371":1,"381":1,"398":1,"405":1,"419":1,"424":2,"429":1,"430":2,"441":1,"449":1,"450":1,"454":2,"467":1,"469":1,"471":1,"494":1,"497":1,"498":1,"505":1,"509":1,"511":1,"516":1,"518":1,"538":1,"541":2,"548":1,"550":1,"553":1,"554":1,"557":3,"559":3,"561":1,"564":3,"565":1,"577":1,"579":1,"582":1,"585":1,"588":1,"589":1,"590":3,"591":1,"592":2,"597":1,"600":1,"601":5,"602":3,"612":1,"614":1,"620":1,"622":1,"625":1,"627":1}}],["sufficient",{"2":{"612":1}}],["suffix",{"2":{"404":1}}],["sum",{"2":{"528":1,"529":1}}],["summary",{"0":{"440":1},"2":{"229":1,"440":1}}],["suspicious",{"2":{"470":1}}],["suggest",{"2":{"430":1}}],["suggestgastipcap",{"0":{"335":1},"2":{"335":1}}],["suggestgasprice",{"0":{"334":1},"2":{"334":1}}],["suggested",{"2":{"334":1,"335":1}}],["suggesting",{"2":{"48":1}}],["surf",{"2":{"280":1}}],["sure",{"2":{"17":1,"20":1,"25":1,"52":1,"56":1,"93":1,"109":2,"123":1,"129":1,"134":2,"174":1,"241":1,"243":1,"375":1,"378":1,"385":1,"386":1,"454":1,"557":1,"598":1}}],["suit",{"2":{"50":1,"104":1}}],["suite",{"2":{"7":1}}],["submission",{"2":{"609":1}}],["submits",{"2":{"359":1,"360":1,"361":1,"362":1}}],["submitting",{"2":{"117":1}}],["submitted",{"2":{"116":1,"349":1,"350":1,"361":3,"362":3}}],["submit",{"2":{"98":1,"106":1,"117":2,"333":1,"347":1,"559":1}}],["subpacket",{"2":{"548":1}}],["subpaths",{"2":{"387":1}}],["subdigests",{"2":{"533":1}}],["subdigest",{"0":{"533":1},"2":{"533":3,"535":1}}],["subfolder",{"2":{"374":1}}],["sub",{"2":{"304":3,"480":3,"601":1,"602":2}}],["substituting",{"2":{"554":2}}],["substitute",{"2":{"378":2}}],["subsequent",{"0":{"510":1},"2":{"389":1,"524":1}}],["subscribing",{"0":{"235":1,"236":1,"237":1}}],["subscribebalanceupdates",{"2":{"236":1,"237":2}}],["subscribeevents",{"2":{"235":2,"237":5}}],["subscribe",{"0":{"234":1},"1":{"235":1,"236":1,"237":1},"2":{"234":1,"364":1,"368":1,"370":1,"381":1,"382":1}}],["subscription",{"2":{"234":1}}],["subscriptions",{"0":{"233":1},"1":{"234":1,"235":1,"236":1,"237":1}}],["subsystem",{"2":{"124":1}}],["subtree",{"0":{"534":1},"2":{"531":1,"534":1}}],["subtypes",{"2":{"119":1}}],["subtyped",{"2":{"119":1}}],["subtle",{"2":{"46":1}}],["subject",{"2":{"12":1,"601":1,"602":2,"605":2}}],["supplied",{"2":{"123":1,"131":1}}],["suppliesmap",{"2":{"86":3}}],["suppliesmapreturn",{"2":{"86":2}}],["supplies",{"0":{"85":1,"86":1,"243":1},"1":{"86":1},"2":{"27":1,"86":2,"241":1,"243":3}}],["supplement",{"2":{"75":1}}],["supplying",{"2":{"130":1}}],["supply",{"2":{"27":2,"57":1,"85":1,"86":1}}],["supports",{"2":{"42":1,"67":1,"278":1,"301":1,"303":2,"371":1,"374":1,"382":1,"384":1,"413":1,"465":1,"597":1,"598":1,"626":1}}],["supportedcountries",{"2":{"79":1,"151":2,"152":2}}],["supportedcountry",{"2":{"79":1}}],["supported",{"0":{"14":1,"26":1,"79":1,"151":1},"2":{"14":1,"20":1,"26":1,"36":1,"37":1,"39":1,"46":1,"52":1,"79":3,"88":3,"132":1,"151":4,"152":2,"159":1,"161":1,"241":1,"243":1,"294":2,"298":1,"370":1,"371":1,"374":1,"375":1,"376":1,"379":2,"424":1,"467":1,"602":3}}],["support",{"0":{"0":1,"279":1,"627":1},"2":{"0":3,"21":1,"22":1,"25":3,"30":1,"43":1,"44":2,"48":1,"108":1,"127":1,"178":1,"210":2,"229":1,"254":1,"280":1,"369":1,"379":1,"385":1,"392":2,"413":1,"414":1,"425":1,"453":1,"465":1,"466":1,"472":1,"475":1,"489":1,"503":1,"513":1,"519":1,"560":1,"597":1,"598":1,"612":1}}],["super",{"2":{"25":2}}],["succeedednoresultstring",{"2":{"575":1,"578":1}}],["succeeded",{"2":{"248":1,"303":1,"576":3,"578":1,"608":2,"609":1}}],["successfully",{"2":{"371":1,"430":1,"583":1,"598":1}}],["successful",{"2":{"141":1,"568":1,"572":1,"575":1,"580":1,"608":2}}],["successfultransactionreturn",{"2":{"107":1}}],["successfulcontractdeploymentreturn",{"2":{"69":1}}],["success",{"2":{"13":1,"608":1}}],["such",{"2":{"3":2,"37":1,"51":1,"56":1,"119":2,"139":1,"188":1,"210":1,"220":1,"251":1,"253":1,"256":1,"260":1,"273":1,"380":1,"412":1,"429":1,"430":1,"431":3,"454":1,"463":2,"471":2,"483":1,"487":1,"539":1,"559":1,"565":1,"566":1,"567":1,"586":1,"617":1,"621":1}}],["sudan",{"2":{"12":2}}],["styling",{"2":{"443":1}}],["style",{"2":{"128":2,"378":2}}],["stop",{"2":{"371":1}}],["storing",{"2":{"88":1,"173":1}}],["storage",{"2":{"88":4,"93":2,"312":1,"315":1,"319":1,"491":1,"492":1,"496":2,"522":1,"536":2}}],["stores",{"2":{"189":1}}],["storesessionprivatekeyinsecurestorage",{"2":{"88":1,"93":1}}],["storedcredentialsvalid",{"2":{"129":1}}],["stored",{"2":{"2":1,"16":1,"120":1,"123":1,"127":1,"129":1,"146":1,"177":1,"312":1,"319":1,"389":1,"467":1,"469":1,"496":1,"522":1,"535":1,"562":2}}],["store",{"2":{"2":1,"8":2,"16":1,"25":1,"50":2,"88":1,"93":1,"173":1,"315":1,"492":1,"522":1,"538":1,"557":1}}],["still",{"2":{"69":1,"76":1,"98":2,"279":1,"312":1,"392":1,"504":1,"565":1,"605":1,"627":2}}],["strategy",{"2":{"562":1}}],["straightforward",{"2":{"339":1}}],["straight",{"2":{"152":1}}],["strictmode",{"2":{"598":2}}],["strict",{"2":{"539":1}}],["strictly",{"2":{"339":1,"544":1}}],["stripe",{"2":{"280":1}}],["stringify",{"2":{"214":1,"215":1,"217":1,"218":1,"221":1,"222":1,"223":1,"225":1,"226":1,"245":1,"247":1,"249":1}}],["strings",{"2":{"30":1,"43":2,"44":2,"119":1,"198":1,"365":1}}],["string",{"2":{"30":2,"43":3,"44":3,"48":3,"49":1,"50":2,"68":1,"69":2,"78":1,"86":12,"93":1,"94":1,"108":1,"110":1,"112":1,"114":1,"115":1,"117":3,"119":1,"139":3,"143":1,"219":2,"227":2,"229":3,"230":4,"232":2,"235":4,"239":8,"241":2,"243":3,"246":15,"273":1,"320":1,"322":3,"324":1,"325":1,"327":1,"328":1,"331":2,"333":2,"339":2,"341":5,"343":1,"351":1,"359":1,"361":3,"363":2,"365":6,"382":1,"451":1,"503":1,"514":1,"515":2,"535":3,"548":4,"601":13,"602":15,"621":1}}],["streamlining",{"2":{"312":1}}],["streamlines",{"2":{"304":1}}],["streamlined",{"2":{"202":1}}],["strength",{"2":{"49":1}}],["str",{"2":{"119":1}}],["structured",{"0":{"515":1},"2":{"515":1}}],["structure",{"0":{"539":1,"573":1},"1":{"540":1,"541":1,"542":1,"543":1,"544":1,"545":1,"546":1,"547":1,"548":1,"549":1},"2":{"251":3,"253":2,"539":2,"557":1,"573":1}}],["structures",{"2":{"48":1}}],["structtostring",{"2":{"187":1}}],["struct",{"2":{"122":1,"128":2,"130":1}}],["structs",{"2":{"119":1}}],["stunt",{"2":{"48":1}}],["students",{"2":{"602":1}}],["studio",{"2":{"155":1,"178":2}}],["stud",{"2":{"48":1}}],["step",{"0":{"396":1,"397":1,"398":1,"399":1,"400":1,"401":1,"402":1,"403":1,"404":1,"405":1,"406":1,"407":1},"2":{"3":1,"9":2,"93":1,"554":1,"595":1}}],["steps",{"0":{"257":1,"261":1,"464":1,"484":1,"488":1},"1":{"258":1,"485":1},"2":{"3":2,"68":1,"159":1,"198":1,"377":1,"434":1,"458":1,"607":1}}],["standalone",{"2":{"81":2,"154":2,"372":1}}],["standard",{"2":{"46":1,"48":1,"50":1,"109":1,"110":1,"111":1,"112":1,"113":2,"114":1,"254":1,"274":1,"279":2,"306":1,"307":1,"309":1,"351":1,"355":1,"475":1,"513":1,"573":1,"622":1,"627":3,"628":1,"629":1,"634":1}}],["standards",{"0":{"31":1,"46":1,"47":1},"1":{"48":1,"49":1,"50":1,"51":1},"2":{"24":1,"32":2,"42":1,"46":4,"48":1,"280":1}}],["staticsettings",{"2":{"382":1}}],["static",{"0":{"124":1},"2":{"124":1,"531":1,"533":3,"535":1}}],["status",{"0":{"613":1},"1":{"614":1,"615":1,"616":1,"617":1},"2":{"44":1,"82":2,"93":1,"246":1,"248":2,"553":1,"576":3,"602":1,"608":2,"613":1}}],["statemutability",{"2":{"548":2}}],["statements",{"2":{"97":1}}],["statesignmessage",{"2":{"392":1}}],["states",{"2":{"392":1}}],["state",{"0":{"591":1},"2":{"2":1,"76":1,"512":1,"530":1,"590":2,"591":2,"598":2}}],["stays",{"2":{"25":1,"557":1}}],["starttime",{"2":{"553":1}}],["startingblocknumber",{"2":{"326":1}}],["starting",{"0":{"127":1},"2":{"219":1,"227":1,"410":1,"454":1,"590":1}}],["startdate",{"2":{"17":1,"214":2,"215":2,"217":2,"218":2,"219":1,"221":2,"222":2,"223":2,"225":2,"226":2,"227":1}}],["started",{"0":{"9":1,"15":1,"27":1,"62":1,"211":1},"1":{"16":1,"17":1,"18":1,"63":1,"64":1,"65":1},"2":{"9":2,"18":1,"19":1,"61":1,"137":1,"210":1,"261":1,"410":1,"474":1,"475":1,"479":1,"488":1}}],["start",{"2":{"0":1,"8":2,"58":1,"64":1,"65":1,"103":1,"129":1,"130":2,"131":1,"132":1,"211":1,"368":1,"590":1,"592":1,"597":1,"598":1}}],["stack",{"2":{"0":1,"5":1,"102":1,"304":2,"412":1,"419":1,"593":1}}],["si",{"2":{"555":1}}],["situation",{"2":{"279":1,"627":1}}],["situations",{"2":{"251":1}}],["size",{"2":{"119":3,"369":1,"376":1}}],["side",{"0":{"274":1,"622":1},"2":{"68":1,"115":1,"129":1,"159":1,"274":1,"279":1,"312":1,"317":1,"318":1,"319":1,"538":1,"541":1,"565":1,"567":1,"622":1,"627":1}}],["six",{"2":{"49":1}}],["similiar",{"2":{"601":1}}],["similarly",{"2":{"68":1,"86":1,"129":1,"265":1,"266":1,"361":1,"362":1,"382":1,"603":1}}],["similar",{"2":{"46":1,"78":1,"107":1,"219":1,"227":1,"304":1,"307":1,"309":1,"352":1,"369":1,"515":1,"629":1,"634":1}}],["simulating",{"2":{"609":1}}],["simulationno",{"2":{"575":1,"578":1}}],["simulationnogaslimitnumbergas",{"2":{"575":1,"578":1}}],["simulationyesreasonstring",{"2":{"575":1,"578":1}}],["simulation",{"2":{"575":4,"578":4,"609":1}}],["simulationssimulateresult",{"2":{"578":1}}],["simulations",{"2":{"186":2,"576":1,"578":1,"608":1,"609":1}}],["simulateresult",{"2":{"575":1,"578":1}}],["simplified",{"0":{"566":1},"1":{"567":1,"568":1,"569":1,"570":1,"571":1},"2":{"414":1,"466":1,"566":1,"607":1}}],["simplify",{"2":{"84":1}}],["simply",{"2":{"3":2,"13":1,"20":1,"36":1,"37":1,"40":1,"52":1,"116":1,"127":1,"340":1,"342":1,"368":1,"382":1,"397":1,"557":1}}],["simpler",{"2":{"173":1,"273":1,"621":1}}],["simple",{"0":{"551":1,"631":1},"1":{"552":1,"553":1,"554":1},"2":{"1":1,"19":1,"25":2,"28":1,"32":1,"36":1,"38":1,"55":1,"273":1,"280":1,"372":1,"405":1,"422":1,"555":1,"560":1,"598":1,"600":1,"621":1}}],["silently",{"2":{"345":1,"617":1}}],["silence",{"2":{"37":1}}],["silvercardid",{"2":{"37":1}}],["silver",{"2":{"37":1,"48":1,"49":3}}],["signs",{"2":{"359":1,"360":1,"361":1,"362":1,"371":1,"563":1,"568":1,"570":1}}],["sign+verify",{"2":{"273":1,"621":1}}],["signtransactions",{"2":{"249":1,"310":1,"635":1}}],["signerssigner",{"2":{"518":1}}],["signers",{"0":{"521":1},"2":{"388":1,"391":1,"492":1,"495":1,"497":1,"498":1,"502":1,"503":4,"514":1,"515":1,"517":1,"518":2,"520":2,"521":2,"523":1,"528":1,"529":1,"531":1,"532":1,"534":2}}],["signer",{"0":{"519":1,"532":1},"1":{"520":1,"521":1},"2":{"247":4,"306":4,"307":4,"308":4,"309":4,"310":2,"314":2,"316":1,"348":1,"383":1,"388":1,"391":3,"519":2,"523":6,"531":1,"532":2,"559":1,"560":1,"628":4,"629":4,"630":4,"633":4,"634":4,"635":2}}],["signedmessage",{"2":{"363":2,"580":1,"581":1}}],["signedtransactionstring",{"2":{"333":1}}],["signed",{"0":{"514":1,"580":1,"599":1},"1":{"581":1,"582":1},"2":{"180":1,"249":2,"273":3,"274":1,"281":2,"294":1,"295":1,"296":1,"310":1,"312":1,"333":1,"349":1,"350":1,"489":1,"514":3,"515":1,"516":1,"529":1,"542":1,"555":1,"556":1,"557":1,"563":1,"567":2,"569":2,"570":1,"580":1,"582":1,"588":1,"621":3,"622":1,"635":1}}],["signout",{"0":{"148":1},"2":{"148":1}}],["signinwithapplepostprocessor",{"2":{"374":1}}],["signinwithemail",{"0":{"295":1},"2":{"295":2}}],["signinwith",{"0":{"294":1},"2":{"294":2}}],["signinoptions",{"0":{"296":1},"2":{"281":2,"296":2}}],["signin",{"0":{"131":1,"132":1,"445":1,"446":1,"447":1,"448":1,"449":1,"450":1},"1":{"133":1,"134":1,"446":1,"447":1,"448":1,"449":1,"450":1},"2":{"129":3,"374":1,"445":1,"455":1,"595":1,"597":1,"598":1,"605":1,"606":1,"608":1,"609":1}}],["signingin",{"2":{"598":1}}],["signing",{"2":{"68":1,"93":1,"94":1,"159":1,"196":1,"210":1,"273":1,"287":1,"303":1,"310":1,"312":1,"348":1,"369":1,"382":1,"392":1,"513":1,"514":1,"515":1,"540":1,"559":1,"566":1,"595":2,"616":1,"621":1,"635":1}}],["signmessagereturn",{"2":{"94":1}}],["signmessage",{"0":{"180":1,"363":1},"2":{"94":3,"180":1,"316":1,"318":1,"363":2,"514":1,"515":1,"540":1,"542":3,"557":1,"588":1}}],["signatureno",{"2":{"580":1}}],["signaturevalidation",{"2":{"516":1}}],["signatureonly",{"2":{"392":1}}],["signaturestringsignature",{"2":{"540":1}}],["signatures",{"0":{"311":1,"515":1},"2":{"279":1,"391":1,"489":1,"497":1,"498":1,"504":1,"514":1,"515":1,"516":5,"522":1,"527":1,"529":1,"539":1,"540":1,"542":1,"548":1,"549":1,"557":3,"627":1}}],["signature",{"0":{"271":1,"317":1,"319":1,"513":1,"540":1,"569":1,"619":1},"1":{"272":1,"273":1,"274":1,"514":1,"515":1,"516":1,"620":1,"621":1,"622":1},"2":{"57":1,"94":1,"115":2,"273":1,"274":1,"316":1,"317":2,"319":3,"339":1,"340":1,"363":1,"392":2,"513":1,"514":2,"515":2,"516":8,"518":1,"519":1,"522":1,"528":1,"531":2,"533":3,"534":1,"536":1,"538":1,"540":3,"541":2,"542":1,"548":1,"549":1,"557":3,"568":2,"569":1,"570":1,"581":1,"621":1,"622":1}}],["sign",{"0":{"94":1,"316":1,"318":1,"371":1,"374":1,"445":1,"542":1,"595":2,"597":2},"1":{"372":1,"373":1,"374":1,"375":1,"376":1,"377":1,"378":1,"379":1,"380":1,"381":1,"446":1,"447":1,"448":1,"449":1,"450":1},"2":{"19":1,"58":1,"81":2,"88":1,"93":2,"94":1,"122":1,"180":1,"206":1,"273":2,"281":1,"291":1,"294":1,"295":1,"296":1,"311":1,"316":1,"318":1,"363":1,"364":3,"366":6,"369":4,"371":1,"372":3,"374":2,"377":1,"379":1,"381":1,"386":1,"402":1,"404":1,"406":1,"445":1,"446":1,"447":1,"448":1,"449":1,"527":1,"534":1,"556":1,"557":1,"559":2,"564":1,"580":1,"593":2,"595":1,"597":1,"602":2,"621":2}}],["singlesigner",{"2":{"247":1}}],["single",{"0":{"631":2},"2":{"5":1,"37":1,"41":1,"51":1,"56":1,"113":1,"116":1,"181":1,"187":1,"210":2,"229":1,"304":1,"306":1,"307":2,"308":3,"309":2,"361":1,"362":1,"398":1,"421":1,"431":1,"467":1,"472":1,"480":1,"535":2,"557":1,"628":1,"629":2,"630":3,"633":3,"634":2}}],["since",{"2":{"2":1,"68":1,"116":1,"127":1,"129":1,"330":1,"351":1,"382":1,"469":1,"472":1,"508":1,"509":1,"601":1,"602":2,"607":1}}],["several",{"2":{"304":1,"412":1,"480":1}}],["sepolia",{"2":{"245":2,"411":1}}],["separated",{"2":{"37":1,"559":1}}],["separate",{"2":{"25":1,"397":1,"559":1}}],["searching",{"2":{"204":1}}],["search",{"2":{"137":1}}],["seaman",{"2":{"48":1}}],["seamlessly",{"0":{"255":1,"259":1,"482":1,"486":1},"1":{"256":1,"260":1,"483":1,"487":1},"2":{"25":1,"256":1,"260":1,"463":1,"483":1,"487":1}}],["seamless",{"2":{"8":1,"60":1,"203":1,"210":1,"273":1,"431":1,"456":1,"472":1,"564":1,"621":1}}],["serialize",{"2":{"187":1}}],["series",{"2":{"129":1,"190":1}}],["serves",{"2":{"75":1,"117":1}}],["serverless",{"2":{"407":1}}],["servers",{"2":{"194":1,"470":1}}],["server",{"0":{"274":1,"622":1},"2":{"3":2,"20":1,"25":1,"68":3,"115":1,"251":2,"253":1,"274":2,"279":1,"317":1,"319":1,"372":8,"622":2,"627":1}}],["services",{"2":{"24":2,"50":1,"188":1,"279":1,"386":1,"559":1,"627":1}}],["service",{"0":{"2":1,"16":1},"2":{"1":3,"2":2,"3":1,"11":1,"12":1,"16":2,"19":1,"24":1,"25":1,"28":1,"32":2,"36":3,"38":1,"40":2,"42":1,"44":1,"46":1,"55":1,"98":1,"320":1,"382":1,"463":1,"560":1,"563":1,"564":1,"568":1,"591":1,"601":2,"602":2}}],["semi",{"2":{"113":1,"530":1}}],["semantic",{"2":{"80":1,"153":1}}],["self",{"2":{"495":1,"503":1,"508":1}}],["selector",{"2":{"516":1}}],["selects",{"2":{"303":1}}],["selectfee",{"2":{"247":1}}],["selection",{"2":{"247":1}}],["selectionindex",{"2":{"117":1}}],["selecting",{"2":{"196":1,"197":1,"198":1,"200":1,"204":1,"208":1,"253":1}}],["selectedoption",{"2":{"249":5}}],["selectedfeeoption",{"2":{"187":3}}],["selected",{"2":{"117":3,"187":2,"191":1}}],["select",{"0":{"206":1,"208":1},"2":{"88":1,"93":1,"117":2,"137":1,"159":1,"187":1,"195":3,"196":3,"197":1,"206":1,"208":1,"247":1,"249":1,"376":2,"380":1,"401":1}}],["sellitems",{"2":{"219":1}}],["selling",{"2":{"8":1}}],["sell",{"2":{"8":1,"192":1}}],["sessionhash",{"2":{"595":3,"597":2,"598":8}}],["sessionopened",{"2":{"583":1,"584":1}}],["sessionid",{"2":{"557":2,"584":1,"595":1,"606":1}}],["sessionnoproofobjectcontains",{"2":{"541":1}}],["sessionno",{"2":{"540":1}}],["sessionticket",{"2":{"367":1,"382":2}}],["sessionaddress",{"2":{"315":1,"319":1}}],["sessionwallet",{"2":{"315":2,"318":1}}],["sessionprivatekey",{"2":{"315":4}}],["sessionsyespacket",{"2":{"539":1}}],["sessionsignature",{"2":{"318":1,"319":1}}],["sessions",{"0":{"88":1,"604":1,"605":1},"1":{"89":1,"90":1,"91":1,"92":1,"605":1,"606":1},"2":{"93":1,"142":2,"274":2,"556":1,"593":2,"595":1,"598":2,"605":4,"606":2,"616":1,"622":2}}],["session",{"0":{"140":1,"312":1,"313":1,"315":1,"318":1,"319":1,"469":1,"541":1,"549":1,"583":1,"593":1,"606":1,"614":1,"616":1,"617":1,"618":1},"1":{"141":1,"142":1,"143":1,"144":1,"145":1,"146":1,"147":1,"148":1,"314":1,"315":1,"316":1,"317":1,"318":1,"319":1,"584":1,"585":1,"594":1,"595":1,"596":1,"597":1,"598":1,"599":1,"600":1,"601":1,"602":1,"603":1,"604":1,"605":1,"606":1,"615":1},"2":{"68":1,"88":3,"93":3,"97":2,"141":1,"143":1,"148":1,"247":4,"248":1,"303":1,"311":1,"312":4,"316":1,"317":2,"318":1,"319":5,"369":1,"431":2,"468":4,"469":2,"470":1,"539":1,"540":2,"541":6,"542":1,"548":1,"549":6,"556":1,"557":5,"560":1,"567":5,"570":1,"583":1,"585":1,"593":1,"597":3,"598":6,"599":1,"601":1,"602":1,"606":4,"608":1,"609":1,"613":1,"614":2,"616":2,"617":3,"618":2}}],["sensitive",{"2":{"616":1}}],["sensical",{"2":{"46":1}}],["senttransactionresponse",{"2":{"608":1}}],["sent",{"2":{"129":1,"189":1,"193":1,"306":1,"365":1,"405":1,"548":2,"561":1,"567":1,"568":1,"575":1,"608":1,"609":1,"628":1}}],["sendnodatastringadditional",{"2":{"547":1}}],["sendnosafeboolwhether",{"2":{"546":1}}],["sendno",{"2":{"545":1}}],["sendpayload",{"2":{"538":1}}],["sendquery",{"2":{"342":3}}],["sendrawtransaction",{"0":{"333":1},"2":{"333":1}}],["sendmetatxn",{"2":{"248":1}}],["sends",{"2":{"122":1,"249":1,"403":1,"597":1,"611":1,"617":1}}],["sender",{"2":{"121":1}}],["senderc1155values",{"2":{"113":3,"116":2}}],["senderc1155",{"0":{"113":1,"547":1},"1":{"114":1},"2":{"113":1,"116":1}}],["senderc721",{"0":{"111":1,"546":1},"1":{"112":1},"2":{"111":1,"116":1}}],["senderc20",{"0":{"109":1,"545":1},"1":{"110":1},"2":{"109":1,"116":1,"616":1}}],["sendtransactionandwaitforreceipt",{"0":{"360":1},"2":{"340":2,"351":1,"353":1,"360":1,"362":1}}],["sendtransactionmethod",{"2":{"340":1}}],["sendtransactionmethodandwaitforreceipt",{"2":{"340":2,"351":1}}],["sendtransactionbatchandwaitforreceipts",{"0":{"362":1}}],["sendtransactionbatch",{"0":{"361":1},"2":{"307":1,"309":1,"361":1,"629":1,"634":1}}],["sendtransactionwithfeeoption",{"2":{"187":2}}],["sendtransactionwithfeeoptions",{"2":{"117":2}}],["sendtransaction",{"0":{"181":1,"359":1},"1":{"182":1,"183":1,"184":1,"185":1,"186":1},"2":{"69":1,"107":2,"108":1,"109":1,"110":1,"111":1,"112":1,"113":1,"114":1,"115":2,"116":2,"186":1,"249":2,"306":2,"307":1,"308":2,"309":1,"310":2,"359":1,"543":2,"548":1,"576":1,"578":1,"588":1,"608":1,"609":2,"617":1,"618":1,"628":2,"629":1,"630":2,"633":2,"634":1,"635":2}}],["sending",{"0":{"186":1,"249":1,"306":1,"307":1,"308":1,"309":1,"310":1,"628":1,"629":1,"630":1,"633":1,"634":1,"635":1},"1":{"631":1,"632":1},"2":{"69":1,"107":1,"116":2,"121":1,"307":2,"309":2,"351":1,"595":1,"616":1,"629":2,"634":2}}],["send",{"0":{"17":1,"187":1,"543":1,"631":2,"632":1},"1":{"544":1,"545":1,"546":1,"547":1,"548":1},"2":{"17":1,"56":1,"58":2,"108":2,"109":1,"110":1,"111":1,"112":1,"113":2,"114":1,"115":1,"130":1,"181":3,"182":1,"186":1,"187":3,"249":1,"307":2,"308":3,"309":2,"340":1,"342":1,"351":1,"365":1,"538":1,"541":1,"542":1,"543":1,"556":1,"557":1,"567":1,"575":1,"578":1,"597":1,"602":1,"612":1,"614":1,"629":2,"630":3,"633":3,"634":2}}],["sequentially",{"2":{"361":1,"362":1}}],["sequencekit",{"2":{"452":1}}],["sequence820390",{"2":{"427":1}}],["sequencereact",{"2":{"379":2,"380":3,"381":1}}],["sequenceexamples",{"2":{"369":1}}],["sequenceethclient",{"2":{"320":2,"321":1}}],["sequenceethereum",{"2":{"80":1,"110":1,"112":1,"114":1,"320":1,"341":1,"345":3,"346":1,"354":1,"356":1}}],["sequenceadapter",{"2":{"356":1}}],["sequenceapi",{"2":{"123":2}}],["sequenceutils",{"2":{"526":1,"537":1}}],["sequenceunreal",{"2":{"159":1}}],["sequenceuistyle",{"2":{"128":1}}],["sequencetest",{"2":{"139":1}}],["sequencebackendmanager",{"2":{"129":4}}],["sequenceplugin",{"2":{"127":1,"128":1,"136":3,"137":2,"139":2,"177":1}}],["sequencecontextv2",{"2":{"537":1}}],["sequencecontextv1",{"2":{"526":1}}],["sequenceconnector",{"2":{"265":2,"266":3}}],["sequenceconfig",{"2":{"74":1,"88":1,"93":4,"133":2,"134":3,"173":2,"174":2,"175":2,"320":1,"366":1,"371":1,"372":1,"375":1,"376":1,"378":1}}],["sequencecanvas",{"2":{"105":1}}],["sequencesampleui",{"0":{"103":1},"2":{"103":3}}],["sequencesdk",{"2":{"97":2}}],["sequencefrontend",{"2":{"97":1,"98":2,"366":1}}],["sequencelogin",{"2":{"88":1,"365":2,"366":1,"367":3,"368":3,"382":3}}],["sequencewallettoeoawalletadapter",{"0":{"356":1},"2":{"356":3,"361":2,"362":2}}],["sequencewallettransactionqueuer",{"2":{"97":1}}],["sequencewallet",{"0":{"370":1},"2":{"69":9,"94":1,"97":1,"98":1,"107":5,"108":1,"356":3,"364":1,"367":1,"368":1,"370":5,"381":1,"382":1,"430":3}}],["sequencewaas",{"2":{"65":2,"595":2,"597":2,"598":2,"605":2,"606":2,"608":1,"609":1}}],["sequencemetadata",{"2":{"30":2,"33":2,"43":2,"44":4}}],["sequenceindexer",{"2":{"21":2,"229":2,"230":2,"232":2,"237":2,"239":2,"241":2,"243":2}}],["sequence",{"0":{"8":1,"10":1,"11":1,"12":1,"57":1,"123":1,"210":1,"255":1,"258":1,"259":1,"275":1,"302":1,"313":1,"314":1,"348":1,"394":1,"400":1,"414":1,"428":1,"436":1,"453":1,"460":1,"462":1,"466":1,"482":1,"485":1,"486":1,"560":1,"564":1,"568":1,"569":1,"570":1,"623":1,"631":1,"632":1},"1":{"9":1,"12":1,"124":1,"211":1,"256":1,"260":1,"276":1,"277":1,"278":1,"279":1,"314":1,"315":1,"316":1,"317":1,"318":1,"319":1,"395":1,"396":1,"397":1,"398":1,"399":1,"400":1,"401":1,"402":1,"403":1,"404":1,"405":1,"406":1,"407":1,"429":1,"430":1,"454":1,"463":1,"464":1,"483":1,"487":1,"561":1,"562":1,"563":1,"565":1,"624":1,"625":1,"626":1,"627":1},"2":{"0":2,"1":2,"3":8,"4":2,"5":1,"6":2,"7":2,"10":1,"11":1,"12":1,"13":3,"17":2,"18":1,"19":5,"20":5,"21":3,"22":4,"23":3,"24":6,"25":5,"28":2,"29":2,"30":5,"32":2,"33":2,"34":2,"35":3,"36":3,"37":2,"39":3,"41":1,"42":3,"43":5,"44":10,"46":1,"48":2,"52":4,"54":2,"55":2,"56":3,"57":7,"58":4,"64":2,"65":1,"66":5,"67":1,"73":2,"75":1,"76":1,"80":2,"82":1,"93":3,"96":3,"97":7,"98":1,"99":1,"105":1,"108":1,"109":1,"110":1,"111":1,"112":1,"113":1,"114":1,"115":2,"116":3,"118":1,"122":2,"123":2,"127":2,"128":1,"129":1,"137":2,"153":3,"159":2,"161":1,"173":2,"174":2,"188":2,"189":1,"191":1,"192":1,"194":2,"195":1,"196":2,"202":2,"210":3,"211":1,"212":2,"213":1,"214":2,"215":2,"217":2,"218":2,"220":1,"221":2,"222":2,"223":2,"225":2,"226":2,"229":7,"230":6,"232":6,"235":1,"236":1,"237":6,"239":6,"241":7,"243":6,"245":2,"247":7,"248":1,"249":5,"254":6,"255":1,"256":1,"258":1,"259":1,"260":1,"261":2,"265":1,"266":2,"268":1,"269":1,"272":2,"273":3,"274":4,"277":5,"278":1,"279":5,"280":10,"281":9,"282":1,"292":2,"297":1,"298":1,"301":1,"302":1,"303":6,"304":3,"311":1,"312":1,"316":1,"317":1,"377":1,"378":5,"383":2,"384":1,"391":2,"392":3,"395":1,"400":1,"401":1,"405":1,"407":3,"411":2,"412":2,"413":4,"414":1,"415":3,"419":1,"420":1,"426":1,"427":3,"429":1,"430":8,"431":1,"441":1,"443":2,"450":1,"453":2,"454":2,"455":2,"456":1,"462":1,"463":4,"464":2,"465":4,"466":1,"467":2,"468":3,"471":1,"472":4,"474":3,"475":4,"476":1,"478":1,"479":1,"480":1,"482":1,"483":1,"485":1,"486":1,"487":1,"488":2,"489":2,"492":2,"493":1,"497":1,"504":1,"513":1,"514":1,"515":1,"517":1,"527":1,"528":1,"533":1,"534":1,"535":2,"536":1,"538":1,"553":1,"555":1,"559":9,"560":2,"561":1,"562":2,"563":1,"564":4,"565":4,"566":3,"568":3,"569":1,"570":1,"572":1,"583":1,"589":1,"590":1,"591":3,"593":1,"595":4,"597":4,"598":9,"599":1,"605":3,"606":4,"607":1,"608":1,"609":1,"612":1,"620":2,"621":3,"622":4,"625":5,"626":1,"627":8}}],["seqmetadata",{"2":{"30":2,"34":2,"43":2,"44":4}}],["seqindexer",{"2":{"22":2,"229":1,"230":1,"232":1,"237":2,"239":1,"241":1,"243":1}}],["seterror",{"2":{"598":3}}],["setunlocksat",{"2":{"590":2,"591":1,"592":1}}],["setup",{"0":{"64":1,"65":1,"74":1,"93":1,"172":1,"380":1},"1":{"173":1,"174":1,"175":1},"2":{"69":1,"74":2,"93":1,"94":1,"97":1,"107":1,"127":1,"129":1,"156":1,"252":1,"371":2,"374":1,"381":1,"388":1,"389":1,"471":1}}],["setitem",{"2":{"315":1}}],["setrelayer",{"2":{"247":1}}],["setprovider",{"2":{"247":1}}],["setbasemetadatauri",{"2":{"201":2,"403":1,"404":1}}],["setting",{"2":{"155":1,"157":1,"251":1,"253":1,"388":1}}],["settings",{"0":{"199":1,"292":1,"293":1,"294":1,"295":1,"296":1,"297":1,"298":1,"299":1,"300":1},"1":{"200":1},"2":{"2":1,"16":1,"24":1,"93":1,"127":1,"136":2,"137":1,"157":1,"159":2,"175":1,"194":2,"199":2,"204":1,"281":8,"292":1,"293":1,"294":1,"295":1,"296":1,"297":1,"298":1,"299":1,"300":1,"376":4,"378":2,"380":2,"437":1,"439":1}}],["setcustomencryptor",{"2":{"129":1}}],["setsigningin",{"2":{"598":1}}],["setsessionhash",{"2":{"598":3}}],["sets",{"2":{"3":1,"598":1}}],["set",{"0":{"397":1,"400":1,"404":1},"2":{"2":1,"3":1,"16":1,"17":1,"24":1,"48":1,"105":3,"119":1,"123":3,"127":3,"129":1,"133":1,"134":3,"139":1,"155":1,"157":2,"161":2,"196":1,"201":1,"230":1,"239":1,"241":1,"243":1,"300":1,"371":1,"378":3,"385":1,"400":1,"403":1,"404":1,"419":1,"492":1,"497":1,"509":1,"527":1,"533":1,"552":1,"598":1}}],["seemlessly",{"2":{"116":1}}],["seen",{"2":{"46":1,"50":1,"554":1}}],["seeing",{"2":{"13":1}}],["see",{"2":{"2":1,"8":1,"14":1,"16":1,"19":1,"21":2,"22":2,"26":1,"29":1,"36":1,"37":3,"42":1,"48":3,"49":2,"50":1,"76":2,"81":2,"84":1,"88":2,"93":3,"108":1,"115":1,"117":5,"120":1,"161":1,"188":2,"189":1,"190":1,"220":1,"222":1,"229":1,"251":2,"254":3,"274":1,"279":1,"281":1,"293":1,"301":1,"349":1,"366":1,"369":1,"370":1,"372":1,"378":2,"379":1,"382":1,"406":1,"409":1,"413":1,"419":1,"449":1,"450":1,"465":1,"474":1,"475":1,"512":1,"540":1,"555":1,"595":1,"599":1,"602":1,"608":1,"609":1,"622":1,"627":1}}],["secured",{"2":{"468":1}}],["secure",{"2":{"88":2,"93":2,"189":1,"255":1,"256":1,"259":1,"260":1,"312":2,"383":1,"462":1,"463":1,"467":2,"482":1,"483":1,"486":1,"487":1,"557":1,"566":1,"591":1}}],["securely",{"2":{"2":2,"16":2,"407":1,"557":1}}],["security",{"0":{"175":1},"2":{"88":2,"280":2,"383":1,"387":1,"391":2,"420":1,"467":1,"471":2,"472":1,"489":1,"550":1,"559":1,"562":1,"563":1,"598":2}}],["secondsno",{"2":{"539":1}}],["secondsnopacket",{"2":{"539":1}}],["seconds",{"2":{"105":1,"286":2,"601":1,"602":2}}],["second",{"2":{"37":1,"75":1,"108":1,"595":1,"603":1}}],["secret",{"2":{"2":3,"3":1,"16":3,"17":2,"88":1,"212":2,"214":1,"215":1,"217":1,"218":1,"220":2,"221":1,"222":1,"223":1,"225":1,"226":1,"538":1}}],["sections",{"2":{"68":1,"383":1}}],["section",{"2":{"1":1,"3":1,"48":1,"51":1,"93":1,"108":1,"128":1,"139":1,"196":1,"229":1,"376":1,"378":1,"390":1,"400":1,"403":1,"406":1,"514":1,"515":1,"608":1,"609":1}}]],"serializationVersion":2}
